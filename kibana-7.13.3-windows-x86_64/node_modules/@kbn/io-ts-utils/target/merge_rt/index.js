"use strict";
/*
 * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one
 * or more contributor license agreements. Licensed under the Elastic License
 * 2.0 and the Server Side Public License, v 1; you may not use this file except
 * in compliance with, at your election, the Elastic License 2.0 or the Server
 * Side Public License, v 1.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.mergeRt = void 0;
const tslib_1 = require("tslib");
const t = tslib_1.__importStar(require("io-ts"));
const lodash_1 = require("lodash");
const Either_1 = require("fp-ts/lib/Either");
function mergeRt(...types) {
    const mergeType = new t.Type('merge', (u) => {
        return types.every((type) => type.is(u));
    }, (input, context) => {
        const errors = [];
        const successes = [];
        const results = types.map((type, index) => type.validate(input, context.concat({
            key: String(index),
            type,
            actual: input,
        })));
        results.forEach((result) => {
            if (Either_1.isLeft(result)) {
                errors.push(...result.left);
            }
            else {
                successes.push(result.right);
            }
        });
        const mergedValues = lodash_1.merge({}, ...successes);
        return errors.length > 0 ? t.failures(errors) : t.success(mergedValues);
    }, (a) => types.reduce((val, type) => type.encode(val), a));
    return {
        ...mergeType,
        _tag: 'MergeType',
        types,
    };
}
exports.mergeRt = mergeRt;
//# sourceMappingURL=index.js.map