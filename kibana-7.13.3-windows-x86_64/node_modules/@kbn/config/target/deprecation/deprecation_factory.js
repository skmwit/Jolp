"use strict";
/*
 * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one
 * or more contributor license agreements. Licensed under the Elastic License
 * 2.0 and the Server Side Public License, v 1; you may not use this file except
 * in compliance with, at your election, the Elastic License 2.0 or the Server
 * Side Public License, v 1.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.configDeprecationFactory = void 0;
const lodash_1 = require("lodash");
const safer_lodash_set_1 = require("@elastic/safer-lodash-set");
const std_1 = require("@kbn/std");
const _rename = (config, rootPath, addDeprecation, oldKey, newKey, details) => {
    const fullOldPath = getPath(rootPath, oldKey);
    const oldValue = lodash_1.get(config, fullOldPath);
    if (oldValue === undefined) {
        return config;
    }
    std_1.unset(config, fullOldPath);
    const fullNewPath = getPath(rootPath, newKey);
    const newValue = lodash_1.get(config, fullNewPath);
    if (newValue === undefined) {
        safer_lodash_set_1.set(config, fullNewPath, oldValue);
        addDeprecation({
            message: `"${fullOldPath}" is deprecated and has been replaced by "${fullNewPath}"`,
            correctiveActions: {
                manualSteps: [
                    `Replace "${fullOldPath}" with "${fullNewPath}" in the Kibana config file, CLI flag, or environment variable (in Docker only).`,
                ],
            },
            ...details,
        });
    }
    else {
        addDeprecation({
            message: `"${fullOldPath}" is deprecated and has been replaced by "${fullNewPath}". However both key are present, ignoring "${fullOldPath}"`,
            correctiveActions: {
                manualSteps: [
                    `Make sure "${fullNewPath}" contains the correct value in the config file, CLI flag, or environment variable (in Docker only).`,
                    `Remove "${fullOldPath}" from the config.`,
                ],
            },
            ...details,
        });
    }
    return config;
};
const _unused = (config, rootPath, addDeprecation, unusedKey, details) => {
    const fullPath = getPath(rootPath, unusedKey);
    if (lodash_1.get(config, fullPath) === undefined) {
        return config;
    }
    std_1.unset(config, fullPath);
    addDeprecation({
        message: `${fullPath} is deprecated and is no longer used`,
        correctiveActions: {
            manualSteps: [
                `Remove "${fullPath}" from the Kibana config file, CLI flag, or environment variable (in Docker only)`,
            ],
        },
        ...details,
    });
    return config;
};
const rename = (oldKey, newKey, details) => (config, rootPath, addDeprecation) => _rename(config, rootPath, addDeprecation, oldKey, newKey, details);
const renameFromRoot = (oldKey, newKey, details) => (config, rootPath, addDeprecation) => _rename(config, '', addDeprecation, oldKey, newKey, details);
const unused = (unusedKey, details) => (config, rootPath, addDeprecation) => _unused(config, rootPath, addDeprecation, unusedKey, details);
const unusedFromRoot = (unusedKey, details) => (config, rootPath, addDeprecation) => _unused(config, '', addDeprecation, unusedKey, details);
const getPath = (rootPath, subPath) => rootPath !== '' ? `${rootPath}.${subPath}` : subPath;
/**
 * The actual platform implementation of {@link ConfigDeprecationFactory}
 *
 * @internal
 */
exports.configDeprecationFactory = {
    rename,
    renameFromRoot,
    unused,
    unusedFromRoot,
};
//# sourceMappingURL=deprecation_factory.js.map