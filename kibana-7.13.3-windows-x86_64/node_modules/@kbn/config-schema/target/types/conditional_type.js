"use strict";
/*
 * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one
 * or more contributor license agreements. Licensed under the Elastic License
 * 2.0 and the Server Side Public License, v 1; you may not use this file except
 * in compliance with, at your election, the Elastic License 2.0 or the Server
 * Side Public License, v 1.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.ConditionalType = void 0;
const tslib_1 = require("tslib");
const type_detect_1 = tslib_1.__importDefault(require("type-detect"));
const internals_1 = require("../internals");
const references_1 = require("../references");
const type_1 = require("./type");
class ConditionalType extends type_1.Type {
    constructor(leftOperand, rightOperand, equalType, notEqualType, options) {
        const schema = internals_1.internals.when(leftOperand.getSchema(), {
            is: references_1.Reference.isReference(rightOperand) || rightOperand instanceof type_1.Type
                ? rightOperand.getSchema()
                : rightOperand,
            then: equalType.getSchema(),
            otherwise: notEqualType.getSchema(),
        });
        super(schema, options);
    }
    handleError(type, { value }) {
        if (type === 'any.required') {
            return `expected at least one defined value but got [${type_detect_1.default(value)}]`;
        }
    }
}
exports.ConditionalType = ConditionalType;
//# sourceMappingURL=conditional_type.js.map