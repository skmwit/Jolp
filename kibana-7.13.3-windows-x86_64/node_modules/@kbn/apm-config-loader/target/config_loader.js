"use strict";
/*
 * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one
 * or more contributor license agreements. Licensed under the Elastic License
 * 2.0 and the Server Side Public License, v 1; you may not use this file except
 * in compliance with, at your election, the Elastic License 2.0 or the Server
 * Side Public License, v 1.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.getConfiguration = exports.loadConfiguration = void 0;
const utils_1 = require("./utils");
const config_1 = require("./config");
let apmConfig;
/**
 * Load the APM configuration.
 *
 * @param argv the `process.argv` arguments
 * @param rootDir The root directory of kibana (where the sources and the `package.json` file are)
 * @param isDistributable true for production builds, false otherwise
 */
const loadConfiguration = (argv, rootDir, isDistributable) => {
    const configPaths = utils_1.getConfigurationFilePaths(argv);
    const rawConfiguration = utils_1.getConfigFromFiles(configPaths);
    utils_1.applyConfigOverrides(rawConfiguration, argv);
    apmConfig = new config_1.ApmConfiguration(rootDir, rawConfiguration, isDistributable);
    return apmConfig;
};
exports.loadConfiguration = loadConfiguration;
const getConfiguration = (serviceName) => {
    // integration test runner starts a kibana server that import the module without initializing APM.
    // so we need to check initialization of the config.
    // note that we can't just load the configuration during this module's import
    // because jest IT are ran with `--config path-to-jest-config.js` which conflicts with the CLI's `config` arg
    // causing the config loader to try to load the jest js config as yaml and throws.
    if (apmConfig) {
        return apmConfig.getConfig(serviceName);
    }
    return undefined;
};
exports.getConfiguration = getConfiguration;
//# sourceMappingURL=config_loader.js.map