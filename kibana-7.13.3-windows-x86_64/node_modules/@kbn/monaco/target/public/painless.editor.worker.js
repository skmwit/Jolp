!function(e){var t={};function n(i){if(t[i])return t[i].exports;var o=t[i]={i:i,l:!1,exports:{}};return e[i].call(o.exports,o,o.exports,n),o.l=!0,o.exports}n.m=e,n.c=t,n.d=function(e,t,i){n.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:i})},n.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},n.t=function(e,t){if(1&t&&(e=n(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var i=Object.create(null);if(n.r(i),Object.defineProperty(i,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var o in e)n.d(i,o,function(t){return e[t]}.bind(null,o));return i},n.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return n.d(t,"a",t),t},n.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},n.p="",n(n.s=184)}([function(e,t,n){"use strict";
/*!
 * Copyright 2016 The ANTLR Project. All rights reserved.
 * Licensed under the BSD-3-Clause license. See LICENSE file in the project root for license information.
 */Object.defineProperty(t,"__esModule",{value:!0}),t.NotNull=function(e,t,n){},t.Nullable=function(e,t,n){},t.Override=function(e,t,n){},t.SuppressWarnings=function(e){return(e,t,n)=>{}}},function(e,t,n){"use strict";
/*!
 * Copyright 2016 The ANTLR Project. All rights reserved.
 * Licensed under the BSD-3-Clause license. See LICENSE file in the project root for license information.
 */var i=this&&this.__decorate||function(e,t,n,i){var o,a=arguments.length,r=a<3?t:null===i?i=Object.getOwnPropertyDescriptor(t,n):i;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)r=Reflect.decorate(e,t,n,i);else for(var l=e.length-1;l>=0;l--)(o=e[l])&&(r=(a<3?o(r):a>3?o(t,n,r):o(t,n))||r);return a>3&&r&&Object.defineProperty(t,n,r),r};Object.defineProperty(t,"__esModule",{value:!0});const o=n(60),a=n(10),r=n(0),l=n(93),s=n(29);class d extends l.RuleContext{constructor(e,t){null==t?super():super(e,t)}static emptyContext(){return d.EMPTY}copyFrom(e){if(this._parent=e._parent,this.invokingState=e.invokingState,this._start=e._start,this._stop=e._stop,e.children){this.children=[];for(let t of e.children)t instanceof o.ErrorNode&&this.addChild(t)}}enterRule(e){}exitRule(e){}addAnyChild(e){return this.children?this.children.push(e):this.children=[e],e}addChild(e){return e instanceof s.TerminalNode?(e.setParent(this),void this.addAnyChild(e)):e instanceof l.RuleContext?void this.addAnyChild(e):(e=new s.TerminalNode(e),this.addAnyChild(e),e.setParent(this),e)}addErrorNode(e){if(e instanceof o.ErrorNode){const t=e;return t.setParent(this),this.addAnyChild(t)}{const t=e;let n=new o.ErrorNode(t);return this.addAnyChild(n),n.setParent(this),n}}removeLastChild(){this.children&&this.children.pop()}get parent(){let e=super.parent;if(void 0===e||e instanceof d)return e;throw new TypeError("Invalid parent type for ParserRuleContext")}getChild(e,t){if(!this.children||e<0||e>=this.children.length)throw new RangeError("index parameter must be between >= 0 and <= number of children.");if(null==t)return this.children[e];let n=this.tryGetChild(e,t);if(void 0===n)throw new Error("The specified node does not exist");return n}tryGetChild(e,t){if(!this.children||e<0||e>=this.children.length)return;let n=-1;for(let i of this.children)if(i instanceof t&&(n++,n===e))return i}getToken(e,t){let n=this.tryGetToken(e,t);if(void 0===n)throw new Error("The specified token does not exist");return n}tryGetToken(e,t){if(!this.children||t<0||t>=this.children.length)return;let n=-1;for(let i of this.children)if(i instanceof s.TerminalNode){if(i.symbol.type===e&&(n++,n===t))return i}}getTokens(e){let t=[];if(!this.children)return t;for(let n of this.children)if(n instanceof s.TerminalNode){n.symbol.type===e&&t.push(n)}return t}get ruleContext(){return this}getRuleContext(e,t){return this.getChild(e,t)}tryGetRuleContext(e,t){return this.tryGetChild(e,t)}getRuleContexts(e){let t=[];if(!this.children)return t;for(let n of this.children)n instanceof e&&t.push(n);return t}get childCount(){return this.children?this.children.length:0}get sourceInterval(){return this._start?!this._stop||this._stop.tokenIndex<this._start.tokenIndex?a.Interval.of(this._start.tokenIndex,this._start.tokenIndex-1):a.Interval.of(this._start.tokenIndex,this._stop.tokenIndex):a.Interval.INVALID}get start(){return this._start}get stop(){return this._stop}toInfoString(e){return"ParserRuleContext"+e.getRuleInvocationStack(this).reverse()+"{start="+this._start+", stop="+this._stop+"}"}}d.EMPTY=new d,i([r.Override],d.prototype,"parent",null),i([r.Override],d.prototype,"childCount",null),i([r.Override],d.prototype,"sourceInterval",null),t.ParserRuleContext=d},function(e,t,n){"use strict";
/*!
 * Copyright 2016 The ANTLR Project. All rights reserved.
 * Licensed under the BSD-3-Clause license. See LICENSE file in the project root for license information.
 */Object.defineProperty(t,"__esModule",{value:!0});class i extends Error{constructor(e,t,n,i){super(i),this._offendingState=-1,this._recognizer=e,this.input=t,this.ctx=n,e&&(this._offendingState=e.state)}get offendingState(){return this._offendingState}setOffendingState(e){this._offendingState=e}get expectedTokens(){if(this._recognizer)return this._recognizer.atn.getExpectedTokens(this._offendingState,this.ctx)}get context(){return this.ctx}get inputStream(){return this.input}getOffendingToken(e){if(!e||e===this._recognizer)return this.offendingToken}setOffendingToken(e,t){e===this._recognizer&&(this.offendingToken=t)}get recognizer(){return this._recognizer}}t.RecognitionException=i},function(e,t,n){"use strict";
/*!
 * Copyright 2016 The ANTLR Project. All rights reserved.
 * Licensed under the BSD-3-Clause license. See LICENSE file in the project root for license information.
 */Object.defineProperty(t,"__esModule",{value:!0});const i=n(19);!function(e){e.INVALID_TYPE=0,e.EPSILON=-2,e.MIN_USER_TOKEN_TYPE=1,e.EOF=i.IntStream.EOF,e.DEFAULT_CHANNEL=0,e.HIDDEN_CHANNEL=1,e.MIN_USER_CHANNEL_VALUE=2}(t.Token||(t.Token={}))},function(e,t,n){"use strict";(function(e,i){var o;n.d(t,"d",(function(){return S})),n.d(t,"b",(function(){return y})),n.d(t,"c",(function(){return C})),n.d(t,"a",(function(){return E})),n.d(t,"e",(function(){return A}));let a=!1,r=!1,l=!1,s=!1,d=!1,c=!1,u=!1,m=void 0,h="en",p=void 0,T=void 0;const b="object"==typeof self?self:"object"==typeof e?e:{};let g=void 0;void 0!==i?g=i:void 0!==b.vscode&&(g=b.vscode.process);const x="string"==typeof(null===(o=null==g?void 0:g.versions)||void 0===o?void 0:o.electron)&&"renderer"===g.type,f=x&&(null==g?void 0:g.sandboxed);(()=>{if(f)return"bypassHeatCheck";const e=null==g?void 0:g.env.ENABLE_VSCODE_BROWSER_CODE_LOADING})();if("object"!=typeof navigator||x)if("object"==typeof g){a="win32"===g.platform,r="darwin"===g.platform,l="linux"===g.platform,s=l&&!!g.env.SNAP&&!!g.env.SNAP_REVISION,m="en",h="en";const e=g.env.VSCODE_NLS_CONFIG;if(e)try{const t=JSON.parse(e),n=t.availableLanguages["*"];m=t.locale,h=n||"en",p=t._translationsConfigFile}catch(e){}d=!0}else console.error("Unable to resolve platform.");else T=navigator.userAgent,a=T.indexOf("Windows")>=0,r=T.indexOf("Macintosh")>=0,u=(T.indexOf("Macintosh")>=0||T.indexOf("iPad")>=0||T.indexOf("iPhone")>=0)&&!!navigator.maxTouchPoints&&navigator.maxTouchPoints>0,l=T.indexOf("Linux")>=0,c=!0,m=navigator.language,h=m;let k=0;r?k=1:a?k=3:l&&(k=2);const S=a,y=r,C=c,E=b,A=function(){if(E.setImmediate)return E.setImmediate.bind(E);if("function"==typeof E.postMessage&&!E.importScripts){let e=[];E.addEventListener("message",t=>{if(t.data&&t.data.vscodeSetImmediateId)for(let n=0,i=e.length;n<i;n++){const i=e[n];if(i.id===t.data.vscodeSetImmediateId)return e.splice(n,1),void i.callback()}});let t=0;return n=>{const i=++t;e.push({id:i,callback:n}),E.postMessage({vscodeSetImmediateId:i},"*")}}if(g&&"function"==typeof g.nextTick)return g.nextTick.bind(g);const e=Promise.resolve();return t=>e.then(t)}()}).call(this,n(66),n(34))},function(e,t,n){"use strict";
/*!
 * Copyright 2016 The ANTLR Project. All rights reserved.
 * Licensed under the BSD-3-Clause license. See LICENSE file in the project root for license information.
 */Object.defineProperty(t,"__esModule",{value:!0}),function(e){function t(e=0){return e}function n(e,t){null==t?t=0:"string"==typeof t?t=function(e){let t=e.length;if(0===t)return 0;let n=0;for(let i=0;i<t;i++){let t=e.charCodeAt(i);n=(n<<5>>>0)-n+t,n|=0}return n}(t):"object"==typeof t&&(t=t.hashCode());let n=t;return n=Math.imul(n,3432918353),n=n<<15|n>>>17,n=Math.imul(n,461845907),e=(e^=n)<<13|e>>>19,4294967295&(e=Math.imul(e,5)+3864292196)}function i(e,t){return e^=4*t,e^=e>>>16,e=Math.imul(e,2246822507),e^=e>>>13,e=Math.imul(e,3266489909),e^=e>>>16}e.initialize=t,e.update=n,e.finish=i,e.hashCode=function(e,o=0){let a=t(o),r=0;for(let t of e)a=n(a,t),r++;return a=i(a,r),a}}(t.MurmurHash||(t.MurmurHash={}))},function(e,t,n){"use strict";
/*!
 * Copyright 2016 The ANTLR Project. All rights reserved.
 * Licensed under the BSD-3-Clause license. See LICENSE file in the project root for license information.
 */var i=this&&this.__decorate||function(e,t,n,i){var o,a=arguments.length,r=a<3?t:null===i?i=Object.getOwnPropertyDescriptor(t,n):i;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)r=Reflect.decorate(e,t,n,i);else for(var l=e.length-1;l>=0;l--)(o=e[l])&&(r=(a<3?o(r):a>3?o(t,n,r):o(t,n))||r);return a>3&&r&&Object.defineProperty(t,n,r),r},o=this&&this.__param||function(e,t){return function(n,i){t(n,i,e)}};Object.defineProperty(t,"__esModule",{value:!0});const a=n(28),r=n(83),l=n(23),s=n(86),d=n(127),c=n(0),u=n(15),m=n(14),h=n(3),p=n(12);let T=class{constructor(e,t){this.states=[],this.decisionToState=[],this.modeNameToStartState=new Map,this.modeToStartState=[],this.contextCache=new a.Array2DHashMap(u.ObjectEqualityComparator.INSTANCE),this.decisionToDFA=[],this.modeToDFA=[],this.LL1Table=new Map,this.grammarType=e,this.maxTokenType=t}clearDFA(){this.decisionToDFA=new Array(this.decisionToState.length);for(let e=0;e<this.decisionToDFA.length;e++)this.decisionToDFA[e]=new r.DFA(this.decisionToState[e],e);this.modeToDFA=new Array(this.modeToStartState.length);for(let e=0;e<this.modeToDFA.length;e++)this.modeToDFA[e]=new r.DFA(this.modeToStartState[e]);this.contextCache.clear(),this.LL1Table.clear()}get contextCacheSize(){return this.contextCache.size}getCachedContext(e){return m.PredictionContext.getCachedContext(e,this.contextCache,new m.PredictionContext.IdentityHashMap)}getDecisionToDFA(){return p(null!=this.decisionToDFA&&this.decisionToDFA.length===this.decisionToState.length),this.decisionToDFA}nextTokens(e,t){if(t){return new d.LL1Analyzer(this).LOOK(e,t)}return e.nextTokenWithinRule||(e.nextTokenWithinRule=this.nextTokens(e,m.PredictionContext.EMPTY_LOCAL),e.nextTokenWithinRule.setReadonly(!0)),e.nextTokenWithinRule}addState(e){e.atn=this,e.stateNumber=this.states.length,this.states.push(e)}removeState(e){let t=new s.InvalidState;t.atn=this,t.stateNumber=e.stateNumber,this.states[e.stateNumber]=t}defineMode(e,t){this.modeNameToStartState.set(e,t),this.modeToStartState.push(t),this.modeToDFA.push(new r.DFA(t)),this.defineDecisionState(t)}defineDecisionState(e){return this.decisionToState.push(e),e.decision=this.decisionToState.length-1,this.decisionToDFA.push(new r.DFA(e,e.decision)),e.decision}getDecisionState(e){if(this.decisionToState.length>0)return this.decisionToState[e]}get numberOfDecisions(){return this.decisionToState.length}getExpectedTokens(e,t){if(e<0||e>=this.states.length)throw new RangeError("Invalid state number.");let n=t,i=this.states[e],o=this.nextTokens(i);if(!o.contains(h.Token.EPSILON))return o;let a=new l.IntervalSet;for(a.addAll(o),a.remove(h.Token.EPSILON);null!=n&&n.invokingState>=0&&o.contains(h.Token.EPSILON);){let e=this.states[n.invokingState].transition(0);o=this.nextTokens(e.followState),a.addAll(o),a.remove(h.Token.EPSILON),n=n._parent}return o.contains(h.Token.EPSILON)&&a.add(h.Token.EOF),a}};i([c.NotNull],T.prototype,"states",void 0),i([c.NotNull],T.prototype,"decisionToState",void 0),i([c.NotNull],T.prototype,"modeNameToStartState",void 0),i([c.NotNull],T.prototype,"modeToStartState",void 0),i([c.NotNull],T.prototype,"decisionToDFA",void 0),i([c.NotNull],T.prototype,"modeToDFA",void 0),i([c.NotNull],T.prototype,"nextTokens",null),i([o(0,c.NotNull)],T.prototype,"removeState",null),i([o(0,c.NotNull),o(1,c.NotNull)],T.prototype,"defineMode",null),i([o(0,c.NotNull)],T.prototype,"defineDecisionState",null),i([c.NotNull],T.prototype,"getExpectedTokens",null),T=i([o(0,c.NotNull)],T),t.ATN=T,function(e){e.INVALID_ALT_NUMBER=0}(T=t.ATN||(t.ATN={})),t.ATN=T},function(e,t,n){"use strict";
/*!
 * Copyright 2016 The ANTLR Project. All rights reserved.
 * Licensed under the BSD-3-Clause license. See LICENSE file in the project root for license information.
 */var i=this&&this.__decorate||function(e,t,n,i){var o,a=arguments.length,r=a<3?t:null===i?i=Object.getOwnPropertyDescriptor(t,n):i;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)r=Reflect.decorate(e,t,n,i);else for(var l=e.length-1;l>=0;l--)(o=e[l])&&(r=(a<3?o(r):a>3?o(t,n,r):o(t,n))||r);return a>3&&r&&Object.defineProperty(t,n,r),r},o=this&&this.__param||function(e,t){return function(n,i){t(n,i,e)}};Object.defineProperty(t,"__esModule",{value:!0});const a=n(2),r=n(0),l=n(80);let s=class e extends a.RecognitionException{constructor(t,n,i){super(t,t.inputStream,t.context,e.formatMessage(n,i));let o=t.interpreter.atn.states[t.state].transition(0);o instanceof l.PredicateTransition?(this._ruleIndex=o.ruleIndex,this._predicateIndex=o.predIndex):(this._ruleIndex=0,this._predicateIndex=0),this._predicate=n,super.setOffendingToken(t,t.currentToken)}get ruleIndex(){return this._ruleIndex}get predicateIndex(){return this._predicateIndex}get predicate(){return this._predicate}static formatMessage(e,t){return t||`failed predicate: {${e}}?`}};i([r.NotNull],s,"formatMessage",null),s=i([o(0,r.NotNull)],s),t.FailedPredicateException=s},function(e,t,n){"use strict";
/*!
 * Copyright 2016 The ANTLR Project. All rights reserved.
 * Licensed under the BSD-3-Clause license. See LICENSE file in the project root for license information.
 */Object.defineProperty(t,"__esModule",{value:!0}),function(e){e[e.INVALID_TYPE=0]="INVALID_TYPE",e[e.BASIC=1]="BASIC",e[e.RULE_START=2]="RULE_START",e[e.BLOCK_START=3]="BLOCK_START",e[e.PLUS_BLOCK_START=4]="PLUS_BLOCK_START",e[e.STAR_BLOCK_START=5]="STAR_BLOCK_START",e[e.TOKEN_START=6]="TOKEN_START",e[e.RULE_STOP=7]="RULE_STOP",e[e.BLOCK_END=8]="BLOCK_END",e[e.STAR_LOOP_BACK=9]="STAR_LOOP_BACK",e[e.STAR_LOOP_ENTRY=10]="STAR_LOOP_ENTRY",e[e.PLUS_LOOP_BACK=11]="PLUS_LOOP_BACK",e[e.LOOP_END=12]="LOOP_END"}(t.ATNStateType||(t.ATNStateType={}))},function(e,t,n){"use strict";
/*!
 * Copyright 2016 The ANTLR Project. All rights reserved.
 * Licensed under the BSD-3-Clause license. See LICENSE file in the project root for license information.
 */var i=this&&this.__decorate||function(e,t,n,i){var o,a=arguments.length,r=a<3?t:null===i?i=Object.getOwnPropertyDescriptor(t,n):i;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)r=Reflect.decorate(e,t,n,i);else for(var l=e.length-1;l>=0;l--)(o=e[l])&&(r=(a<3?o(r):a>3?o(t,n,r):o(t,n))||r);return a>3&&r&&Object.defineProperty(t,n,r),r};Object.defineProperty(t,"__esModule",{value:!0});const o=n(31),a=n(2),r=n(0);class l extends a.RecognitionException{constructor(e,t,n,i,a,r){e instanceof o.Parser&&(void 0===t&&(t=e.inputStream),void 0===n&&(n=e.currentToken),void 0===i&&(i=e.currentToken),void 0===r&&(r=e.context)),super(e,t,r),this._deadEndConfigs=a,this._startToken=n,this.setOffendingToken(e,i)}get startToken(){return this._startToken}get deadEndConfigs(){return this._deadEndConfigs}}i([r.NotNull],l.prototype,"_startToken",void 0),t.NoViableAltException=l},function(e,t,n){"use strict";
/*!
 * Copyright 2016 The ANTLR Project. All rights reserved.
 * Licensed under the BSD-3-Clause license. See LICENSE file in the project root for license information.
 */var i=this&&this.__decorate||function(e,t,n,i){var o,a=arguments.length,r=a<3?t:null===i?i=Object.getOwnPropertyDescriptor(t,n):i;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)r=Reflect.decorate(e,t,n,i);else for(var l=e.length-1;l>=0;l--)(o=e[l])&&(r=(a<3?o(r):a>3?o(t,n,r):o(t,n))||r);return a>3&&r&&Object.defineProperty(t,n,r),r};Object.defineProperty(t,"__esModule",{value:!0});const o=n(0);class a{constructor(e,t){this.a=e,this.b=t}static get INVALID(){return a._INVALID}static of(e,t){return e!==t||e<0||e>1e3?new a(e,t):(null==a.cache[e]&&(a.cache[e]=new a(e,e)),a.cache[e])}get length(){return this.b<this.a?0:this.b-this.a+1}equals(e){return e===this||e instanceof a&&(this.a===e.a&&this.b===e.b)}hashCode(){let e=23;return e=31*e+this.a,e=31*e+this.b,e}startsBeforeDisjoint(e){return this.a<e.a&&this.b<e.a}startsBeforeNonDisjoint(e){return this.a<=e.a&&this.b>=e.a}startsAfter(e){return this.a>e.a}startsAfterDisjoint(e){return this.a>e.b}startsAfterNonDisjoint(e){return this.a>e.a&&this.a<=e.b}disjoint(e){return this.startsBeforeDisjoint(e)||this.startsAfterDisjoint(e)}adjacent(e){return this.a===e.b+1||this.b===e.a-1}properlyContains(e){return e.a>=this.a&&e.b<=this.b}union(e){return a.of(Math.min(this.a,e.a),Math.max(this.b,e.b))}intersection(e){return a.of(Math.max(this.a,e.a),Math.min(this.b,e.b))}differenceNotProperlyContained(e){let t;return e.startsBeforeNonDisjoint(this)?t=a.of(Math.max(this.a,e.b+1),this.b):e.startsAfterNonDisjoint(this)&&(t=a.of(this.a,e.a-1)),t}toString(){return this.a+".."+this.b}}a._INVALID=new a(-1,-2),a.cache=new Array(1001),i([o.Override],a.prototype,"equals",null),i([o.Override],a.prototype,"hashCode",null),i([o.Override],a.prototype,"toString",null),t.Interval=a},function(e,t,n){"use strict";
/*!
 * Copyright 2016 The ANTLR Project. All rights reserved.
 * Licensed under the BSD-3-Clause license. See LICENSE file in the project root for license information.
 */Object.defineProperty(t,"__esModule",{value:!0}),t.escapeWhitespace=function(e,t){return t?e.replace(/ /,"·"):e.replace(/\t/,"\\t").replace(/\n/,"\\n").replace(/\r/,"\\r")},t.join=function(e,t){let n="",i=!0;for(let o of e)i?i=!1:n+=t,n+=o;return n},t.equals=function(e,t){return e===t||void 0!==e&&void 0!==t&&e.equals(t)},t.toMap=function(e){let t=new Map;for(let n=0;n<e.length;n++)t.set(e[n],n);return t},t.toCharArray=function(e){if("string"==typeof e){let t=new Uint16Array(e.length);for(let n=0;n<e.length;n++)t[n]=e.charCodeAt(n);return t}return e.toCharArray()}},function(e,t,n){"use strict";(function(t){
/*!
 * The buffer module from node.js, for the browser.
 *
 * @author   Feross Aboukhadijeh <feross@feross.org> <http://feross.org>
 * @license  MIT
 */
function i(e,t){if(e===t)return 0;for(var n=e.length,i=t.length,o=0,a=Math.min(n,i);o<a;++o)if(e[o]!==t[o]){n=e[o],i=t[o];break}return n<i?-1:i<n?1:0}function o(e){return t.Buffer&&"function"==typeof t.Buffer.isBuffer?t.Buffer.isBuffer(e):!(null==e||!e._isBuffer)}var a=n(78),r=Object.prototype.hasOwnProperty,l=Array.prototype.slice,s="foo"===function(){}.name;function d(e){return Object.prototype.toString.call(e)}function c(e){return!o(e)&&("function"==typeof t.ArrayBuffer&&("function"==typeof ArrayBuffer.isView?ArrayBuffer.isView(e):!!e&&(e instanceof DataView||!!(e.buffer&&e.buffer instanceof ArrayBuffer))))}var u=e.exports=g,m=/\s*function\s+([^\(\s]*)\s*/;function h(e){if(a.isFunction(e)){if(s)return e.name;var t=e.toString().match(m);return t&&t[1]}}function p(e,t){return"string"==typeof e?e.length<t?e:e.slice(0,t):e}function T(e){if(s||!a.isFunction(e))return a.inspect(e);var t=h(e);return"[Function"+(t?": "+t:"")+"]"}function b(e,t,n,i,o){throw new u.AssertionError({message:n,actual:e,expected:t,operator:i,stackStartFunction:o})}function g(e,t){e||b(e,!0,t,"==",u.ok)}function x(e,t,n,r){if(e===t)return!0;if(o(e)&&o(t))return 0===i(e,t);if(a.isDate(e)&&a.isDate(t))return e.getTime()===t.getTime();if(a.isRegExp(e)&&a.isRegExp(t))return e.source===t.source&&e.global===t.global&&e.multiline===t.multiline&&e.lastIndex===t.lastIndex&&e.ignoreCase===t.ignoreCase;if(null!==e&&"object"==typeof e||null!==t&&"object"==typeof t){if(c(e)&&c(t)&&d(e)===d(t)&&!(e instanceof Float32Array||e instanceof Float64Array))return 0===i(new Uint8Array(e.buffer),new Uint8Array(t.buffer));if(o(e)!==o(t))return!1;var s=(r=r||{actual:[],expected:[]}).actual.indexOf(e);return-1!==s&&s===r.expected.indexOf(t)||(r.actual.push(e),r.expected.push(t),function(e,t,n,i){if(null==e||null==t)return!1;if(a.isPrimitive(e)||a.isPrimitive(t))return e===t;if(n&&Object.getPrototypeOf(e)!==Object.getPrototypeOf(t))return!1;var o=f(e),r=f(t);if(o&&!r||!o&&r)return!1;if(o)return e=l.call(e),t=l.call(t),x(e,t,n);var s,d,c=y(e),u=y(t);if(c.length!==u.length)return!1;for(c.sort(),u.sort(),d=c.length-1;d>=0;d--)if(c[d]!==u[d])return!1;for(d=c.length-1;d>=0;d--)if(s=c[d],!x(e[s],t[s],n,i))return!1;return!0}(e,t,n,r))}return n?e===t:e==t}function f(e){return"[object Arguments]"==Object.prototype.toString.call(e)}function k(e,t){if(!e||!t)return!1;if("[object RegExp]"==Object.prototype.toString.call(t))return t.test(e);try{if(e instanceof t)return!0}catch(e){}return!Error.isPrototypeOf(t)&&!0===t.call({},e)}function S(e,t,n,i){var o;if("function"!=typeof t)throw new TypeError('"block" argument must be a function');"string"==typeof n&&(i=n,n=null),o=function(e){var t;try{e()}catch(e){t=e}return t}(t),i=(n&&n.name?" ("+n.name+").":".")+(i?" "+i:"."),e&&!o&&b(o,n,"Missing expected exception"+i);var r="string"==typeof i,l=!e&&o&&!n;if((!e&&a.isError(o)&&r&&k(o,n)||l)&&b(o,n,"Got unwanted exception"+i),e&&o&&n&&!k(o,n)||!e&&o)throw o}u.AssertionError=function(e){this.name="AssertionError",this.actual=e.actual,this.expected=e.expected,this.operator=e.operator,e.message?(this.message=e.message,this.generatedMessage=!1):(this.message=function(e){return p(T(e.actual),128)+" "+e.operator+" "+p(T(e.expected),128)}(this),this.generatedMessage=!0);var t=e.stackStartFunction||b;if(Error.captureStackTrace)Error.captureStackTrace(this,t);else{var n=new Error;if(n.stack){var i=n.stack,o=h(t),a=i.indexOf("\n"+o);if(a>=0){var r=i.indexOf("\n",a+1);i=i.substring(r+1)}this.stack=i}}},a.inherits(u.AssertionError,Error),u.fail=b,u.ok=g,u.equal=function(e,t,n){e!=t&&b(e,t,n,"==",u.equal)},u.notEqual=function(e,t,n){e==t&&b(e,t,n,"!=",u.notEqual)},u.deepEqual=function(e,t,n){x(e,t,!1)||b(e,t,n,"deepEqual",u.deepEqual)},u.deepStrictEqual=function(e,t,n){x(e,t,!0)||b(e,t,n,"deepStrictEqual",u.deepStrictEqual)},u.notDeepEqual=function(e,t,n){x(e,t,!1)&&b(e,t,n,"notDeepEqual",u.notDeepEqual)},u.notDeepStrictEqual=function e(t,n,i){x(t,n,!0)&&b(t,n,i,"notDeepStrictEqual",e)},u.strictEqual=function(e,t,n){e!==t&&b(e,t,n,"===",u.strictEqual)},u.notStrictEqual=function(e,t,n){e===t&&b(e,t,n,"!==",u.notStrictEqual)},u.throws=function(e,t,n){S(!0,e,t,n)},u.doesNotThrow=function(e,t,n){S(!1,e,t,n)},u.ifError=function(e){if(e)throw e};var y=Object.keys||function(e){var t=[];for(var n in e)r.call(e,n)&&t.push(n);return t}}).call(this,n(66))},function(e,t,n){"use strict";(function(e){n.d(t,"a",(function(){return a})),n.d(t,"b",(function(){return r})),n.d(t,"c",(function(){return l}));var i=n(4);let o;o=void 0!==e?e:void 0!==i.a.vscode?{get platform(){return i.a.vscode.process.platform},get env(){return i.a.vscode.process.env},nextTick:e=>Object(i.e)(e),cwd:()=>i.a.vscode.process.env.VSCODE_CWD||i.a.vscode.process.execPath.substr(0,i.a.vscode.process.execPath.lastIndexOf("win32"===i.a.vscode.process.platform?"\\":"/"))}:{get platform(){return i.d?"win32":i.b?"darwin":"linux"},nextTick:e=>Object(i.e)(e),get env(){return Object.create(null)},cwd:()=>"/"};const a=o.cwd,r=o.env,l=o.platform}).call(this,n(34))},function(e,t,n){"use strict";
/*!
 * Copyright 2016 The ANTLR Project. All rights reserved.
 * Licensed under the BSD-3-Clause license. See LICENSE file in the project root for license information.
 */var i=this&&this.__decorate||function(e,t,n,i){var o,a=arguments.length,r=a<3?t:null===i?i=Object.getOwnPropertyDescriptor(t,n):i;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)r=Reflect.decorate(e,t,n,i);else for(var l=e.length-1;l>=0;l--)(o=e[l])&&(r=(a<3?o(r):a>3?o(t,n,r):o(t,n))||r);return a>3&&r&&Object.defineProperty(t,n,r),r},o=this&&this.__param||function(e,t){return function(n,i){t(n,i,e)}};Object.defineProperty(t,"__esModule",{value:!0});const a=n(28),r=n(21),l=n(52),s=n(5),d=n(0),c=n(54),u=n(12);class m{constructor(e){this.cachedHashCode=e}static calculateEmptyHashCode(){let e=s.MurmurHash.initialize(1);return e=s.MurmurHash.finish(e,0),e}static calculateSingleHashCode(e,t){let n=s.MurmurHash.initialize(1);return n=s.MurmurHash.update(n,e),n=s.MurmurHash.update(n,t),n=s.MurmurHash.finish(n,2),n}static calculateHashCode(e,t){let n=s.MurmurHash.initialize(1);for(let t of e)n=s.MurmurHash.update(n,t);for(let e of t)n=s.MurmurHash.update(n,e);return n=s.MurmurHash.finish(n,2*e.length),n}static fromRuleContext(e,t,n=!0){if(t.isEmpty)return n?m.EMPTY_FULL:m.EMPTY_LOCAL;let i;i=t._parent?m.fromRuleContext(e,t._parent,n):n?m.EMPTY_FULL:m.EMPTY_LOCAL;let o=e.states[t.invokingState].transition(0);return i.getChild(o.followState.stateNumber)}static addEmptyContext(e){return e.addEmptyContext()}static removeEmptyContext(e){return e.removeEmptyContext()}static join(e,t,n=c.PredictionContextCache.UNCACHED){if(e===t)return e;if(e.isEmpty)return m.isEmptyLocal(e)?e:m.addEmptyContext(t);if(t.isEmpty)return m.isEmptyLocal(t)?t:m.addEmptyContext(e);let i=e.size,o=t.size;if(1===i&&1===o&&e.getReturnState(0)===t.getReturnState(0)){let i=n.join(e.getParent(0),t.getParent(0));return i===e.getParent(0)?e:i===t.getParent(0)?t:i.getChild(e.getReturnState(0))}let a=0,r=new Array(i+o),l=new Array(r.length),s=0,d=0,h=!0,b=!0;for(;s<i&&d<o;)e.getReturnState(s)===t.getReturnState(d)?(r[a]=n.join(e.getParent(s),t.getParent(d)),l[a]=e.getReturnState(s),h=h&&r[a]===e.getParent(s),b=b&&r[a]===t.getParent(d),s++,d++):e.getReturnState(s)<t.getReturnState(d)?(r[a]=e.getParent(s),l[a]=e.getReturnState(s),b=!1,s++):(u(t.getReturnState(d)<e.getReturnState(s)),r[a]=t.getParent(d),l[a]=t.getReturnState(d),h=!1,d++),a++;for(;s<i;)r[a]=e.getParent(s),l[a]=e.getReturnState(s),s++,b=!1,a++;for(;d<o;)r[a]=t.getParent(d),l[a]=t.getReturnState(d),d++,h=!1,a++;return h?e:b?t:(a<r.length&&(r=r.slice(0,a),l=l.slice(0,a)),0===r.length?m.EMPTY_FULL:1===r.length?new T(r[0],l[0]):new p(r,l))}static isEmptyLocal(e){return e===m.EMPTY_LOCAL}static getCachedContext(e,t,n){if(e.isEmpty)return e;let i=n.get(e);if(i)return i;if(i=t.get(e),i)return n.put(e,i),i;let o,a=!1,r=new Array(e.size);for(let i=0;i<r.length;i++){let o=m.getCachedContext(e.getParent(i),t,n);if(a||o!==e.getParent(i)){if(!a){r=new Array(e.size);for(let t=0;t<e.size;t++)r[t]=e.getParent(t);a=!0}r[i]=o}}if(!a)return i=t.putIfAbsent(e,e),n.put(e,null!=i?i:e),e;if(1===r.length)o=new T(r[0],e.getReturnState(0));else{let t=new Array(e.size);for(let n=0;n<e.size;n++)t[n]=e.getReturnState(n);o=new p(r,t,e.hashCode())}return i=t.putIfAbsent(o,o),n.put(o,i||o),n.put(e,i||o),o}appendSingleContext(e,t){return this.appendContext(m.EMPTY_FULL.getChild(e),t)}getChild(e){return new T(this,e)}hashCode(){return this.cachedHashCode}toStrings(e,t,n=m.EMPTY_FULL){let i=[];e:for(let o=0;;o++){let a=0,r=!0,l=this,s=t,d="";for(d+="[";!l.isEmpty&&l!==n;){let t=0;if(l.size>0){let e=1;for(;1<<e>>>0<l.size;)e++;if(t=o>>a&(1<<e>>>0)-1,r=r&&t>=l.size-1,t>=l.size)continue e;a+=e}if(e){d.length>1&&(d+=" ");let t=e.atn.states[s];d+=e.ruleNames[t.ruleIndex]}else l.getReturnState(t)!==m.EMPTY_FULL_STATE_KEY&&(l.isEmpty||(d.length>1&&(d+=" "),d+=l.getReturnState(t)));s=l.getReturnState(t),l=l.getParent(t)}if(d+="]",i.push(d),r)break}return i}}i([d.Override],m.prototype,"hashCode",null),i([o(0,d.NotNull),o(1,d.NotNull),o(2,d.NotNull)],m,"join",null),i([o(0,d.NotNull),o(1,d.NotNull),o(2,d.NotNull)],m,"getCachedContext",null),t.PredictionContext=m;class h extends m{constructor(e){super(m.calculateEmptyHashCode()),this.fullContext=e}get isFullContext(){return this.fullContext}addEmptyContext(){return this}removeEmptyContext(){throw new Error("Cannot remove the empty context from itself.")}getParent(e){throw new Error("index out of bounds")}getReturnState(e){throw new Error("index out of bounds")}findReturnState(e){return-1}get size(){return 0}appendSingleContext(e,t){return t.getChild(this,e)}appendContext(e,t){return e}get isEmpty(){return!0}get hasEmpty(){return!0}equals(e){return this===e}toStrings(e,t,n){return["[]"]}}i([d.Override],h.prototype,"addEmptyContext",null),i([d.Override],h.prototype,"removeEmptyContext",null),i([d.Override],h.prototype,"getParent",null),i([d.Override],h.prototype,"getReturnState",null),i([d.Override],h.prototype,"findReturnState",null),i([d.Override],h.prototype,"size",null),i([d.Override],h.prototype,"appendSingleContext",null),i([d.Override],h.prototype,"appendContext",null),i([d.Override],h.prototype,"isEmpty",null),i([d.Override],h.prototype,"hasEmpty",null),i([d.Override],h.prototype,"equals",null),i([d.Override],h.prototype,"toStrings",null);let p=class e extends m{constructor(e,t,n){super(n||m.calculateHashCode(e,t)),u(e.length===t.length),u(t.length>1||t[0]!==m.EMPTY_FULL_STATE_KEY,"Should be using PredictionContext.EMPTY instead."),this.parents=e,this.returnStates=t}getParent(e){return this.parents[e]}getReturnState(e){return this.returnStates[e]}findReturnState(e){return l.Arrays.binarySearch(this.returnStates,e)}get size(){return this.returnStates.length}get isEmpty(){return!1}get hasEmpty(){return this.returnStates[this.returnStates.length-1]===m.EMPTY_FULL_STATE_KEY}addEmptyContext(){if(this.hasEmpty)return this;let t=this.parents.slice(0),n=this.returnStates.slice(0);return t.push(m.EMPTY_FULL),n.push(m.EMPTY_FULL_STATE_KEY),new e(t,n)}removeEmptyContext(){if(!this.hasEmpty)return this;if(2===this.returnStates.length)return new T(this.parents[0],this.returnStates[0]);{let t=this.parents.slice(0,this.parents.length-1),n=this.returnStates.slice(0,this.returnStates.length-1);return new e(t,n)}}appendContext(t,n){return e.appendContextImpl(this,t,new m.IdentityHashMap)}static appendContextImpl(t,n,i){if(n.isEmpty){if(m.isEmptyLocal(n)){if(t.hasEmpty)return m.EMPTY_LOCAL;throw new Error("what to do here?")}return t}if(1!==n.size)throw new Error("Appending a tree suffix is not yet supported.");let o=i.get(t);if(!o){if(t.isEmpty)o=n;else{let a=t.size;t.hasEmpty&&a--;let r=new Array(a),l=new Array(a);for(let e=0;e<a;e++)l[e]=t.getReturnState(e);for(let o=0;o<a;o++)r[o]=e.appendContextImpl(t.getParent(o),n,i);1===r.length?o=new T(r[0],l[0]):(u(r.length>1),o=new e(r,l)),t.hasEmpty&&(o=m.join(o,n))}i.put(t,o)}return o}equals(t){if(this===t)return!0;if(!(t instanceof e))return!1;if(this.hashCode()!==t.hashCode())return!1;let n=t;return this.equalsImpl(n,new r.Array2DHashSet)}equalsImpl(e,t){let n=[],i=[];for(n.push(this),i.push(e);;){let e=n.pop(),o=i.pop();if(!e||!o)break;let a=new c.PredictionContextCache.IdentityCommutativePredictionContextOperands(e,o);if(!t.add(a))continue;let r=a.x.size;if(0!==r){if(r!==a.y.size)return!1;for(let e=0;e<r;e++){if(a.x.getReturnState(e)!==a.y.getReturnState(e))return!1;let t=a.x.getParent(e),o=a.y.getParent(e);if(t.hashCode()!==o.hashCode())return!1;t!==o&&(n.push(t),i.push(o))}}else if(!a.x.equals(a.y))return!1}return!0}};i([d.NotNull],p.prototype,"parents",void 0),i([d.NotNull],p.prototype,"returnStates",void 0),i([d.Override],p.prototype,"getParent",null),i([d.Override],p.prototype,"getReturnState",null),i([d.Override],p.prototype,"findReturnState",null),i([d.Override],p.prototype,"size",null),i([d.Override],p.prototype,"isEmpty",null),i([d.Override],p.prototype,"hasEmpty",null),i([d.Override],p.prototype,"addEmptyContext",null),i([d.Override],p.prototype,"removeEmptyContext",null),i([d.Override],p.prototype,"appendContext",null),i([d.Override],p.prototype,"equals",null),p=i([o(0,d.NotNull)],p);let T=class e extends m{constructor(e,t){super(m.calculateSingleHashCode(e,t)),this.parent=e,this.returnState=t}getParent(e){return this.parent}getReturnState(e){return this.returnState}findReturnState(e){return this.returnState===e?0:-1}get size(){return 1}get isEmpty(){return!1}get hasEmpty(){return!1}appendContext(e,t){return t.getChild(this.parent.appendContext(e,t),this.returnState)}addEmptyContext(){let e=[this.parent,m.EMPTY_FULL],t=[this.returnState,m.EMPTY_FULL_STATE_KEY];return new p(e,t)}removeEmptyContext(){return this}equals(t){if(t===this)return!0;if(!(t instanceof e))return!1;let n=t;return this.hashCode()===n.hashCode()&&(this.returnState===n.returnState&&this.parent.equals(n.parent))}};i([d.NotNull],T.prototype,"parent",void 0),i([d.Override],T.prototype,"getParent",null),i([d.Override],T.prototype,"getReturnState",null),i([d.Override],T.prototype,"findReturnState",null),i([d.Override],T.prototype,"size",null),i([d.Override],T.prototype,"isEmpty",null),i([d.Override],T.prototype,"hasEmpty",null),i([d.Override],T.prototype,"appendContext",null),i([d.Override],T.prototype,"addEmptyContext",null),i([d.Override],T.prototype,"removeEmptyContext",null),i([d.Override],T.prototype,"equals",null),T=i([o(0,d.NotNull)],T),t.SingletonPredictionContext=T,function(e){e.EMPTY_LOCAL=new h(!1),e.EMPTY_FULL=new h(!0),e.EMPTY_LOCAL_STATE_KEY=-2147483648,e.EMPTY_FULL_STATE_KEY=2147483647;class t extends a.Array2DHashMap{constructor(){super(n.INSTANCE)}}e.IdentityHashMap=t;class n{IdentityEqualityComparator(){}hashCode(e){return e.hashCode()}equals(e,t){return e===t}}n.INSTANCE=new n,i([d.Override],n.prototype,"hashCode",null),i([d.Override],n.prototype,"equals",null),e.IdentityEqualityComparator=n}(m=t.PredictionContext||(t.PredictionContext={}))},function(e,t,n){"use strict";
/*!
 * Copyright 2016 The ANTLR Project. All rights reserved.
 * Licensed under the BSD-3-Clause license. See LICENSE file in the project root for license information.
 */var i=this&&this.__decorate||function(e,t,n,i){var o,a=arguments.length,r=a<3?t:null===i?i=Object.getOwnPropertyDescriptor(t,n):i;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)r=Reflect.decorate(e,t,n,i);else for(var l=e.length-1;l>=0;l--)(o=e[l])&&(r=(a<3?o(r):a>3?o(t,n,r):o(t,n))||r);return a>3&&r&&Object.defineProperty(t,n,r),r};Object.defineProperty(t,"__esModule",{value:!0});const o=n(0);class a{hashCode(e){return null==e?0:e.hashCode()}equals(e,t){return null==e?null==t:e.equals(t)}}a.INSTANCE=new a,i([o.Override],a.prototype,"hashCode",null),i([o.Override],a.prototype,"equals",null),t.ObjectEqualityComparator=a},function(e,t,n){"use strict";
/*!
 * Copyright 2016 The ANTLR Project. All rights reserved.
 * Licensed under the BSD-3-Clause license. See LICENSE file in the project root for license information.
 */var i=this&&this.__decorate||function(e,t,n,i){var o,a=arguments.length,r=a<3?t:null===i?i=Object.getOwnPropertyDescriptor(t,n):i;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)r=Reflect.decorate(e,t,n,i);else for(var l=e.length-1;l>=0;l--)(o=e[l])&&(r=(a<3?o(r):a>3?o(t,n,r):o(t,n))||r);return a>3&&r&&Object.defineProperty(t,n,r),r};Object.defineProperty(t,"__esModule",{value:!0});const o=n(0),a=n(3);class r{constructor(e,t,n){this.literalNames=e,this.symbolicNames=t,this.displayNames=n,this._maxTokenType=Math.max(this.displayNames.length,Math.max(this.literalNames.length,this.symbolicNames.length))-1}get maxTokenType(){return this._maxTokenType}getLiteralName(e){if(e>=0&&e<this.literalNames.length)return this.literalNames[e]}getSymbolicName(e){return e>=0&&e<this.symbolicNames.length?this.symbolicNames[e]:e===a.Token.EOF?"EOF":void 0}getDisplayName(e){if(e>=0&&e<this.displayNames.length){let t=this.displayNames[e];if(t)return t}let t=this.getLiteralName(e);if(t)return t;let n=this.getSymbolicName(e);return n||String(e)}}r.EMPTY_VOCABULARY=new r([],[],[]),i([o.NotNull],r.prototype,"literalNames",void 0),i([o.NotNull],r.prototype,"symbolicNames",void 0),i([o.NotNull],r.prototype,"displayNames",void 0),i([o.Override],r.prototype,"maxTokenType",null),i([o.Override],r.prototype,"getLiteralName",null),i([o.Override],r.prototype,"getSymbolicName",null),i([o.Override,o.NotNull],r.prototype,"getDisplayName",null),i([o.NotNull],r,"EMPTY_VOCABULARY",void 0),t.VocabularyImpl=r},function(e,t,n){"use strict";
/*!
 * Copyright 2016 The ANTLR Project. All rights reserved.
 * Licensed under the BSD-3-Clause license. See LICENSE file in the project root for license information.
 */var i=this&&this.__decorate||function(e,t,n,i){var o,a=arguments.length,r=a<3?t:null===i?i=Object.getOwnPropertyDescriptor(t,n):i;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)r=Reflect.decorate(e,t,n,i);else for(var l=e.length-1;l>=0;l--)(o=e[l])&&(r=(a<3?o(r):a>3?o(t,n,r):o(t,n))||r);return a>3&&r&&Object.defineProperty(t,n,r),r};Object.defineProperty(t,"__esModule",{value:!0});const o=n(0);class a{constructor(){this.stateNumber=a.INVALID_STATE_NUMBER,this.ruleIndex=0,this.epsilonOnlyTransitions=!1,this.transitions=[],this.optimizedTransitions=this.transitions}getStateNumber(){return this.stateNumber}get nonStopStateNumber(){return this.getStateNumber()}hashCode(){return this.stateNumber}equals(e){return e instanceof a&&this.stateNumber===e.stateNumber}get isNonGreedyExitState(){return!1}toString(){return String(this.stateNumber)}getTransitions(){return this.transitions.slice(0)}get numberOfTransitions(){return this.transitions.length}addTransition(e,t){if(0===this.transitions.length)this.epsilonOnlyTransitions=e.isEpsilon;else if(this.epsilonOnlyTransitions!==e.isEpsilon)throw this.epsilonOnlyTransitions=!1,new Error("ATN state "+this.stateNumber+" has both epsilon and non-epsilon transitions.");this.transitions.splice(void 0!==t?t:this.transitions.length,0,e)}transition(e){return this.transitions[e]}setTransition(e,t){this.transitions[e]=t}removeTransition(e){return this.transitions.splice(e,1)[0]}get onlyHasEpsilonTransitions(){return this.epsilonOnlyTransitions}setRuleIndex(e){this.ruleIndex=e}get isOptimized(){return this.optimizedTransitions!==this.transitions}get numberOfOptimizedTransitions(){return this.optimizedTransitions.length}getOptimizedTransition(e){return this.optimizedTransitions[e]}addOptimizedTransition(e){this.isOptimized||(this.optimizedTransitions=new Array),this.optimizedTransitions.push(e)}setOptimizedTransition(e,t){if(!this.isOptimized)throw new Error("This ATNState is not optimized.");this.optimizedTransitions[e]=t}removeOptimizedTransition(e){if(!this.isOptimized)throw new Error("This ATNState is not optimized.");this.optimizedTransitions.splice(e,1)}}i([o.Override],a.prototype,"hashCode",null),i([o.Override],a.prototype,"equals",null),i([o.Override],a.prototype,"toString",null),t.ATNState=a,function(e){e.INVALID_STATE_NUMBER=-1}(a=t.ATNState||(t.ATNState={}))},function(e,t,n){"use strict";
/*!
 * Copyright 2016 The ANTLR Project. All rights reserved.
 * Licensed under the BSD-3-Clause license. See LICENSE file in the project root for license information.
 */var i=this&&this.__decorate||function(e,t,n,i){var o,a=arguments.length,r=a<3?t:null===i?i=Object.getOwnPropertyDescriptor(t,n):i;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)r=Reflect.decorate(e,t,n,i);else for(var l=e.length-1;l>=0;l--)(o=e[l])&&(r=(a<3?o(r):a>3?o(t,n,r):o(t,n))||r);return a>3&&r&&Object.defineProperty(t,n,r),r};Object.defineProperty(t,"__esModule",{value:!0});const o=n(53),a=n(81),r=n(10),l=n(19),s=n(40),d=n(47),c=n(0),u=n(37),m=n(3);class h extends u.Recognizer{constructor(e){super(),this._factory=o.CommonTokenFactory.DEFAULT,this._tokenStartCharIndex=-1,this._tokenStartLine=0,this._tokenStartCharPositionInLine=0,this._hitEOF=!1,this._channel=0,this._type=0,this._modeStack=new a.IntegerStack,this._mode=h.DEFAULT_MODE,this._input=e,this._tokenFactorySourcePair={source:this,stream:e}}static get DEFAULT_TOKEN_CHANNEL(){return m.Token.DEFAULT_CHANNEL}static get HIDDEN(){return m.Token.HIDDEN_CHANNEL}reset(e){(void 0===e||e)&&this._input.seek(0),this._token=void 0,this._type=m.Token.INVALID_TYPE,this._channel=m.Token.DEFAULT_CHANNEL,this._tokenStartCharIndex=-1,this._tokenStartCharPositionInLine=-1,this._tokenStartLine=-1,this._text=void 0,this._hitEOF=!1,this._mode=h.DEFAULT_MODE,this._modeStack.clear(),this.interpreter.reset()}nextToken(){if(null==this._input)throw new Error("nextToken requires a non-null input stream.");let e=this._input.mark();try{e:for(;;){if(this._hitEOF)return this.emitEOF();this._token=void 0,this._channel=m.Token.DEFAULT_CHANNEL,this._tokenStartCharIndex=this._input.index,this._tokenStartCharPositionInLine=this.interpreter.charPositionInLine,this._tokenStartLine=this.interpreter.line,this._text=void 0;do{let e;this._type=m.Token.INVALID_TYPE;try{e=this.interpreter.match(this._input,this._mode)}catch(t){if(!(t instanceof d.LexerNoViableAltException))throw t;this.notifyListeners(t),this.recover(t),e=h.SKIP}if(this._input.LA(1)===l.IntStream.EOF&&(this._hitEOF=!0),this._type===m.Token.INVALID_TYPE&&(this._type=e),this._type===h.SKIP)continue e}while(this._type===h.MORE);return null==this._token?this.emit():this._token}}finally{this._input.release(e)}}skip(){this._type=h.SKIP}more(){this._type=h.MORE}mode(e){this._mode=e}pushMode(e){s.LexerATNSimulator.debug&&console.log("pushMode "+e),this._modeStack.push(this._mode),this.mode(e)}popMode(){if(this._modeStack.isEmpty)throw new Error("EmptyStackException");return s.LexerATNSimulator.debug&&console.log("popMode back to "+this._modeStack.peek()),this.mode(this._modeStack.pop()),this._mode}get tokenFactory(){return this._factory}set tokenFactory(e){this._factory=e}get inputStream(){return this._input}set inputStream(e){this.reset(!1),this._input=e,this._tokenFactorySourcePair={source:this,stream:this._input}}get sourceName(){return this._input.sourceName}emit(e){return e||(e=this._factory.create(this._tokenFactorySourcePair,this._type,this._text,this._channel,this._tokenStartCharIndex,this.charIndex-1,this._tokenStartLine,this._tokenStartCharPositionInLine)),this._token=e,e}emitEOF(){let e=this.charPositionInLine,t=this.line,n=this._factory.create(this._tokenFactorySourcePair,m.Token.EOF,void 0,m.Token.DEFAULT_CHANNEL,this._input.index,this._input.index-1,t,e);return this.emit(n),n}get line(){return this.interpreter.line}set line(e){this.interpreter.line=e}get charPositionInLine(){return this.interpreter.charPositionInLine}set charPositionInLine(e){this.interpreter.charPositionInLine=e}get charIndex(){return this._input.index}get text(){return null!=this._text?this._text:this.interpreter.getText(this._input)}set text(e){this._text=e}get token(){return this._token}set token(e){this._token=e}set type(e){this._type=e}get type(){return this._type}set channel(e){this._channel=e}get channel(){return this._channel}getAllTokens(){let e=[],t=this.nextToken();for(;t.type!==m.Token.EOF;)e.push(t),t=this.nextToken();return e}notifyListeners(e){let t=this._input.getText(r.Interval.of(this._tokenStartCharIndex,this._input.index)),n="token recognition error at: '"+this.getErrorDisplay(t)+"'",i=this.getErrorListenerDispatch();i.syntaxError&&i.syntaxError(this,void 0,this._tokenStartLine,this._tokenStartCharPositionInLine,n,e)}getErrorDisplay(e){if("number"==typeof e){switch(e){case m.Token.EOF:return"<EOF>";case 10:return"\\n";case 9:return"\\t";case 13:return"\\r"}return String.fromCharCode(e)}return e.replace(/\n/g,"\\n").replace(/\t/g,"\\t").replace(/\r/g,"\\r")}getCharErrorDisplay(e){return"'"+this.getErrorDisplay(e)+"'"}recover(e){e instanceof d.LexerNoViableAltException?this._input.LA(1)!==l.IntStream.EOF&&this.interpreter.consume(this._input):this._input.consume()}}h.DEFAULT_MODE=0,h.MORE=-2,h.SKIP=-3,h.MIN_CHAR_VALUE=0,h.MAX_CHAR_VALUE=1114111,i([c.Override],h.prototype,"nextToken",null),i([c.Override],h.prototype,"tokenFactory",null),i([c.Override],h.prototype,"inputStream",null),i([c.Override],h.prototype,"sourceName",null),i([c.Override],h.prototype,"line",null),i([c.Override],h.prototype,"charPositionInLine",null),t.Lexer=h},function(e,t,n){"use strict";
/*!
 * Copyright 2016 The ANTLR Project. All rights reserved.
 * Licensed under the BSD-3-Clause license. See LICENSE file in the project root for license information.
 */Object.defineProperty(t,"__esModule",{value:!0}),function(e){e.EOF=-1,e.UNKNOWN_SOURCE_NAME="<unknown>"}(t.IntStream||(t.IntStream={}))},function(e,t,n){"use strict";
/*!
 * Copyright 2016 The ANTLR Project. All rights reserved.
 * Licensed under the BSD-3-Clause license. See LICENSE file in the project root for license information.
 */var i=this&&this.__decorate||function(e,t,n,i){var o,a=arguments.length,r=a<3?t:null===i?i=Object.getOwnPropertyDescriptor(t,n):i;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)r=Reflect.decorate(e,t,n,i);else for(var l=e.length-1;l>=0;l--)(o=e[l])&&(r=(a<3?o(r):a>3?o(t,n,r):o(t,n))||r);return a>3&&r&&Object.defineProperty(t,n,r),r},o=this&&this.__param||function(e,t){return function(n,i){t(n,i,e)}};Object.defineProperty(t,"__esModule",{value:!0});const a=n(0);let r=class{constructor(e){if(null==e)throw new Error("target cannot be null.");this.target=e}get isEpsilon(){return!1}get label(){}};r.serializationNames=["INVALID","EPSILON","RANGE","RULE","PREDICATE","ATOM","ACTION","SET","NOT_SET","WILDCARD","PRECEDENCE"],i([a.NotNull],r.prototype,"target",void 0),r=i([o(0,a.NotNull)],r),t.Transition=r},function(e,t,n){"use strict";
/*!
 * Copyright 2016 The ANTLR Project. All rights reserved.
 * Licensed under the BSD-3-Clause license. See LICENSE file in the project root for license information.
 */var i=this&&this.__decorate||function(e,t,n,i){var o,a=arguments.length,r=a<3?t:null===i?i=Object.getOwnPropertyDescriptor(t,n):i;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)r=Reflect.decorate(e,t,n,i);else for(var l=e.length-1;l>=0;l--)(o=e[l])&&(r=(a<3?o(r):a>3?o(t,n,r):o(t,n))||r);return a>3&&r&&Object.defineProperty(t,n,r),r},o=this&&this.__param||function(e,t){return function(n,i){t(n,i,e)}};Object.defineProperty(t,"__esModule",{value:!0});const a=n(12),r=n(125),l=n(0),s=n(5);class d{constructor(e,t=16){if(this.n=0,this.threshold=Math.floor(12),e instanceof d){this.comparator=e.comparator,this.buckets=e.buckets.slice(0);for(let e=0;e<this.buckets.length;e++){let t=this.buckets[e];t&&(this.buckets[e]=t.slice(0))}this.n=e.n,this.threshold=e.threshold}else this.comparator=e||r.DefaultEqualityComparator.INSTANCE,this.buckets=this.createBuckets(t)}getOrAdd(e){return this.n>this.threshold&&this.expand(),this.getOrAddImpl(e)}getOrAddImpl(e){let t=this.getBucket(e),n=this.buckets[t];if(!n)return n=[e],this.buckets[t]=n,this.n++,e;for(let t of n)if(this.comparator.equals(t,e))return t;return n.push(e),this.n++,e}get(e){if(null==e)return e;let t=this.getBucket(e),n=this.buckets[t];if(n)for(let t of n)if(this.comparator.equals(t,e))return t}getBucket(e){return this.comparator.hashCode(e)&this.buckets.length-1}hashCode(){let e=s.MurmurHash.initialize();for(let t of this.buckets)if(null!=t)for(let n of t){if(null==n)break;e=s.MurmurHash.update(e,this.comparator.hashCode(n))}return e=s.MurmurHash.finish(e,this.size),e}equals(e){if(e===this)return!0;if(!(e instanceof d))return!1;if(e.size!==this.size)return!1;return this.containsAll(e)}expand(){let e=this.buckets,t=2*this.buckets.length,n=this.createBuckets(t);this.buckets=n,this.threshold=Math.floor(.75*t);let i=this.size;for(let t of e)if(t)for(let e of t){let t=this.getBucket(e),n=this.buckets[t];n||(n=[],this.buckets[t]=n),n.push(e)}a(this.n===i)}add(e){return this.getOrAdd(e)===e}get size(){return this.n}get isEmpty(){return 0===this.n}contains(e){return this.containsFast(this.asElementType(e))}containsFast(e){return null!=e&&null!=this.get(e)}*[Symbol.iterator](){yield*this.toArray()}toArray(){const e=new Array(this.size);let t=0;for(let n of this.buckets)if(null!=n)for(let i of n){if(null==i)break;e[t++]=i}return e}containsAll(e){if(e instanceof d){let t=e;for(let e of t.buckets)if(null!=e)for(let t of e){if(null==t)break;if(!this.containsFast(this.asElementType(t)))return!1}}else for(let t of e)if(!this.containsFast(this.asElementType(t)))return!1;return!0}addAll(e){let t=!1;for(let n of e){this.getOrAdd(n)!==n&&(t=!0)}return t}clear(){this.buckets=this.createBuckets(16),this.n=0,this.threshold=Math.floor(12)}toString(){if(0===this.size)return"{}";let e="{",t=!0;for(let n of this.buckets)if(null!=n)for(let i of n){if(null==i)break;t?t=!1:e+=", ",e+=i.toString()}return e+="}",e}toTableString(){let e="";for(let t of this.buckets){if(null==t){e+="null\n";continue}e+="[";let n=!0;for(let i of t)n?n=!1:e+=" ",e+=null==i?"_":i.toString();e+="]\n"}return e}asElementType(e){return e}createBuckets(e){return new Array(e)}}i([l.NotNull],d.prototype,"comparator",void 0),i([l.Override],d.prototype,"hashCode",null),i([l.Override],d.prototype,"equals",null),i([l.Override],d.prototype,"add",null),i([l.Override],d.prototype,"size",null),i([l.Override],d.prototype,"isEmpty",null),i([l.Override],d.prototype,"contains",null),i([o(0,l.Nullable)],d.prototype,"containsFast",null),i([l.Override],d.prototype,Symbol.iterator,null),i([l.Override],d.prototype,"toArray",null),i([l.Override],d.prototype,"containsAll",null),i([l.Override],d.prototype,"addAll",null),i([l.Override],d.prototype,"clear",null),i([l.Override],d.prototype,"toString",null),i([l.SuppressWarnings("unchecked")],d.prototype,"asElementType",null),i([l.SuppressWarnings("unchecked")],d.prototype,"createBuckets",null),t.Array2DHashSet=d},function(e,t,n){"use strict";
/*!
 * Copyright 2016 The ANTLR Project. All rights reserved.
 * Licensed under the BSD-3-Clause license. See LICENSE file in the project root for license information.
 */Object.defineProperty(t,"__esModule",{value:!0});const i=n(78),o=n(5),a=new Uint16Array(0);function r(e){return e>>>4}function l(e){return 16*e}function s(e){let t=1;for(let n=0;n<16;n++){if(0!=(e&t))return n;t=t<<1>>>0}throw new RangeError("No specified bit found")}function d(e){let t=32768;for(let n=15;n>=0;n--){if(0!=(e&t))return n;t>>>=1}throw new RangeError("No specified bit found")}function c(e,t){return(e&=15)===(t&=15)?1<<e>>>0:65535>>>15-t^65535>>>16-e}const u=new Uint8Array(65536);for(let e=0;e<16;e++){const t=1<<e>>>0;let n=0;for(;n<u.length;){n+=t;for(let e=0;e<t;e++)u[n]++,n++}}class m{constructor(e){if(e)if("number"==typeof e){if(e<0)throw new RangeError("nbits cannot be negative");this.data=new Uint16Array(r(e-1)+1)}else if(e instanceof m)this.data=e.data.slice(0);else{let t=-1;for(let n of e)t<n&&(t=n);this.data=new Uint16Array(r(t-1)+1);for(let t of e)this.set(t)}else this.data=a}and(e){const t=this.data,n=e.data,i=Math.min(t.length,n.length);let o=-1;for(let e=0;e<i;e++){0!==(t[e]&=n[e])&&(o=e)}-1===o&&(this.data=a),o<t.length-1&&(this.data=t.slice(0,o+1))}andNot(e){const t=this.data,n=e.data,i=Math.min(t.length,n.length);let o=-1;for(let e=0;e<i;e++){0!==(t[e]&=65535^n[e])&&(o=e)}-1===o&&(this.data=a),o<t.length-1&&(this.data=t.slice(0,o+1))}cardinality(){if(this.isEmpty)return 0;const e=this.data,t=e.length;let n=0;for(let i=0;i<t;i++)n+=u[e[i]];return n}clear(e,t){null==e?this.data.fill(0):null==t?this.set(e,!1):this.set(e,t,!1)}flip(e,t){if(null==t&&(t=e),e<0||t<e)throw new RangeError;let n=r(e);const i=r(t);if(n===i)this.data[n]^=c(e,t);else{for(this.data[n++]^=c(e,15);n<i;)this.data[n++]^=65535;this.data[n++]^=c(0,t)}}get(e,t){if(void 0===t)return!!(this.data[r(e)]&c(e,e));{let n=new m(t+1);for(let i=e;i<=t;i++)n.set(i,this.get(i));return n}}intersects(e){let t=Math.min(this.length(),e.length());if(0===t)return!1;let n=r(t-1);for(let t=0;t<=n;t++)if(0!=(this.data[t]&e.data[t]))return!0;return!1}get isEmpty(){return 0===this.length()}length(){return this.data.length?this.previousSetBit(l(this.data.length)-1)+1:0}nextClearBit(e){if(e<0)throw new RangeError("fromIndex cannot be negative");const t=this.data,n=t.length;let i=r(e);if(i>n)return-1;let o=65535^c(e,15);if(65535==(t[i]|o)){for(i++,o=0;i<n&&65535===t[i];i++);if(i===n)return-1}return l(i)+s(65535^(t[i]|o))}nextSetBit(e){if(e<0)throw new RangeError("fromIndex cannot be negative");const t=this.data,n=t.length;let i=r(e);if(i>n)return-1;let o=c(e,15);if(0==(t[i]&o)){for(i++,o=65535;i<n&&0===t[i];i++);if(i>=n)return-1}return l(i)+s(t[i]&o)}or(e){const t=this.data,n=e.data,i=Math.min(t.length,n.length),o=Math.max(t.length,n.length),r=t.length===o?t:new Uint16Array(o);let l=-1;for(let e=0;e<i;e++){0!==(r[e]=t[e]|n[e])&&(l=e)}const s=t.length>n.length?t:n;for(let e=i;e<o;e++){0!==(r[e]=s[e])&&(l=e)}-1===l?this.data=a:r.length===l+1?this.data=r:this.data=r.slice(0,l)}previousClearBit(e){if(e<0)throw new RangeError("fromIndex cannot be negative");const t=this.data,n=t.length;let i=r(e);i>=n&&(i=n-1);let o=65535^c(0,e);if(65535==(t[i]|o)){for(o=0,i--;i>=0&&65535===t[i];i--);if(i<0)return-1}return l(i)+d(65535^(t[i]|o))}previousSetBit(e){if(e<0)throw new RangeError("fromIndex cannot be negative");const t=this.data,n=t.length;let i=r(e);i>=n&&(i=n-1);let o=c(0,e);if(0==(t[i]&o)){for(i--,o=65535;i>=0&&0===t[i];i--);if(i<0)return-1}return l(i)+d(t[i]&o)}set(e,t,n){if(void 0===t?(t=e,n=!0):"boolean"==typeof t&&(n=t,t=e),void 0===n&&(n=!0),e<0||e>t)throw new RangeError;let i=r(e),o=r(t);if(n&&o>=this.data.length){let e=new Uint16Array(o+1);this.data.forEach((t,n)=>e[n]=t),this.data=e}else if(!n){if(i>=this.data.length)return;o>=this.data.length&&(o=this.data.length-1,t=16*this.data.length-1)}if(i===o)this._setBits(i,n,c(e,t));else{for(this._setBits(i++,n,c(e,15));i<o;)this.data[i++]=n?65535:0;this._setBits(i,n,c(0,t))}}_setBits(e,t,n){t?this.data[e]|=n:this.data[e]&=65535^n}get size(){return 8*this.data.byteLength}hashCode(){return o.MurmurHash.hashCode(this.data,22)}equals(e){if(e===this)return!0;if(!(e instanceof m))return!1;const t=this.length();if(t!==e.length())return!1;if(0===t)return!0;let n=r(t-1);for(let t=0;t<=n;t++)if(this.data[t]!==e.data[t])return!1;return!0}toString(){let e="{",t=!0;for(let n=this.nextSetBit(0);n>=0;n=this.nextSetBit(n+1))t?t=!1:e+=", ",e+=n;return e+="}",e}xor(e){const t=this.data,n=e.data,i=Math.min(t.length,n.length),o=Math.max(t.length,n.length),r=t.length===o?t:new Uint16Array(o);let l=-1;for(let e=0;e<i;e++){0!==(r[e]=t[e]^n[e])&&(l=e)}const s=t.length>n.length?t:n;for(let e=i;e<o;e++){0!==(r[e]=s[e])&&(l=e)}-1===l?this.data=a:r.length===l+1?this.data=r:this.data=r.slice(0,l+1)}clone(){return new m(this)}[Symbol.iterator](){return new h(this.data)}[i.inspect.custom](){return"BitSet "+this.toString()}}t.BitSet=m;class h{constructor(e){this.data=e,this.index=0,this.mask=65535}next(){for(;this.index<this.data.length;){const e=this.data[this.index]&this.mask;if(0!==e){const t=l(this.index)+s(e);return this.mask=c(t+1,15),{done:!1,value:t}}this.index++,this.mask=65535}return{done:!0,value:-1}}[Symbol.iterator](){return this}}},function(e,t,n){"use strict";
/*!
 * Copyright 2016 The ANTLR Project. All rights reserved.
 * Licensed under the BSD-3-Clause license. See LICENSE file in the project root for license information.
 */var i=this&&this.__decorate||function(e,t,n,i){var o,a=arguments.length,r=a<3?t:null===i?i=Object.getOwnPropertyDescriptor(t,n):i;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)r=Reflect.decorate(e,t,n,i);else for(var l=e.length-1;l>=0;l--)(o=e[l])&&(r=(a<3?o(r):a>3?o(t,n,r):o(t,n))||r);return a>3&&r&&Object.defineProperty(t,n,r),r},o=this&&this.__param||function(e,t){return function(n,i){t(n,i,e)}};Object.defineProperty(t,"__esModule",{value:!0});const a=n(42),r=n(51),l=n(10),s=n(18),d=n(5),c=n(0),u=n(3);class m{constructor(e){this.readonly=!1,this._intervals=null!=e?e.slice(0):[]}static get COMPLETE_CHAR_SET(){return void 0===m._COMPLETE_CHAR_SET&&(m._COMPLETE_CHAR_SET=m.of(s.Lexer.MIN_CHAR_VALUE,s.Lexer.MAX_CHAR_VALUE),m._COMPLETE_CHAR_SET.setReadonly(!0)),m._COMPLETE_CHAR_SET}static get EMPTY_SET(){return null==m._EMPTY_SET&&(m._EMPTY_SET=new m,m._EMPTY_SET.setReadonly(!0)),m._EMPTY_SET}static of(e,t=e){let n=new m;return n.add(e,t),n}clear(){if(this.readonly)throw new Error("can't alter readonly IntervalSet");this._intervals.length=0}add(e,t=e){this.addRange(l.Interval.of(e,t))}addRange(e){if(this.readonly)throw new Error("can't alter readonly IntervalSet");if(!(e.b<e.a)){for(let t=0;t<this._intervals.length;t++){let n=this._intervals[t];if(e.equals(n))return;if(e.adjacent(n)||!e.disjoint(n)){let i=e.union(n);for(this._intervals[t]=i;t<this._intervals.length-1;){t++;let e=this._intervals[t];if(!i.adjacent(e)&&i.disjoint(e))break;this._intervals.splice(t,1),t--,this._intervals[t]=i.union(e)}return}if(e.startsBeforeDisjoint(n))return void this._intervals.splice(t,0,e)}this._intervals.push(e)}}static or(e){let t=new m;for(let n of e)t.addAll(n);return t}addAll(e){if(null==e)return this;if(e instanceof m){let t=e,n=t._intervals.length;for(let e=0;e<n;e++){let n=t._intervals[e];this.add(n.a,n.b)}}else for(let t of e.toArray())this.add(t);return this}complementRange(e,t){return this.complement(m.of(e,t))}complement(e){if(e.isNil)return m.EMPTY_SET;let t;return e instanceof m?t=e:(t=new m,t.addAll(e)),t.subtract(this)}subtract(e){if(null==e||e.isNil)return new m(this._intervals);if(e instanceof m)return m.subtract(this,e);let t=new m;return t.addAll(e),m.subtract(this,t)}static subtract(e,t){if(e.isNil)return new m;let n=new m(e._intervals);if(t.isNil)return n;let i=0,o=0;for(;i<n._intervals.length&&o<t._intervals.length;){let e,a,r=n._intervals[i],s=t._intervals[o];if(s.b<r.a)o++;else if(s.a>r.b)i++;else if(s.a>r.a&&(e=new l.Interval(r.a,s.a-1)),s.b<r.b&&(a=new l.Interval(s.b+1,r.b)),e){if(a){n._intervals[i]=e,n._intervals.splice(i+1,0,a),i++,o++;continue}n._intervals[i]=e,i++}else a?(n._intervals[i]=a,o++):n._intervals.splice(i,1)}return n}or(e){let t=new m;return t.addAll(this),t.addAll(e),t}and(e){if(e.isNil)return new m;let t,n=this._intervals,i=e._intervals,o=n.length,a=i.length,r=0,l=0;for(;r<o&&l<a;){let e=n[r],o=i[l];e.startsBeforeDisjoint(o)?r++:o.startsBeforeDisjoint(e)?l++:e.properlyContains(o)?(t||(t=new m),t.addRange(e.intersection(o)),l++):o.properlyContains(e)?(t||(t=new m),t.addRange(e.intersection(o)),r++):e.disjoint(o)||(t||(t=new m),t.addRange(e.intersection(o)),e.startsAfterNonDisjoint(o)?l++:o.startsAfterNonDisjoint(e)&&r++)}return t||new m}contains(e){let t=0,n=this._intervals.length-1;for(;t<=n;){let i=t+n>>1,o=this._intervals[i],a=o.a;if(o.b<e)t=i+1;else{if(!(a>e))return!0;n=i-1}}return!1}get isNil(){return null==this._intervals||0===this._intervals.length}get maxElement(){if(this.isNil)throw new RangeError("set is empty");return this._intervals[this._intervals.length-1].b}get minElement(){if(this.isNil)throw new RangeError("set is empty");return this._intervals[0].a}get intervals(){return this._intervals}hashCode(){let e=d.MurmurHash.initialize();for(let t of this._intervals)e=d.MurmurHash.update(e,t.a),e=d.MurmurHash.update(e,t.b);return e=d.MurmurHash.finish(e,2*this._intervals.length),e}equals(e){return null!=e&&e instanceof m&&a.ArrayEqualityComparator.INSTANCE.equals(this._intervals,e._intervals)}toString(e=!1){let t="";if(null==this._intervals||0===this._intervals.length)return"{}";this.size>1&&(t+="{");let n=!0;for(let i of this._intervals){n?n=!1:t+=", ";let o=i.a,a=i.b;o===a?o===u.Token.EOF?t+="<EOF>":t+=e?"'"+String.fromCodePoint(o)+"'":o:t+=e?"'"+String.fromCodePoint(o)+"'..'"+String.fromCodePoint(a)+"'":o+".."+a}return this.size>1&&(t+="}"),t}toStringVocabulary(e){if(null==this._intervals||0===this._intervals.length)return"{}";let t="";this.size>1&&(t+="{");let n=!0;for(let i of this._intervals){n?n=!1:t+=", ";let o=i.a,a=i.b;if(o===a)t+=this.elementName(e,o);else for(let n=o;n<=a;n++)n>o&&(t+=", "),t+=this.elementName(e,n)}return this.size>1&&(t+="}"),t}elementName(e,t){return t===u.Token.EOF?"<EOF>":t===u.Token.EPSILON?"<EPSILON>":e.getDisplayName(t)}get size(){let e=0,t=this._intervals.length;if(1===t){let e=this._intervals[0];return e.b-e.a+1}for(let n=0;n<t;n++){let t=this._intervals[n];e+=t.b-t.a+1}return e}toIntegerList(){let e=new r.IntegerList(this.size),t=this._intervals.length;for(let n=0;n<t;n++){let t=this._intervals[n],i=t.a,o=t.b;for(let t=i;t<=o;t++)e.add(t)}return e}toSet(){let e=new Set;for(let t of this._intervals){let n=t.a,i=t.b;for(let t=n;t<=i;t++)e.add(t)}return e}toArray(){let e=new Array,t=this._intervals.length;for(let n=0;n<t;n++){let t=this._intervals[n],i=t.a,o=t.b;for(let t=i;t<=o;t++)e.push(t)}return e}remove(e){if(this.readonly)throw new Error("can't alter readonly IntervalSet");let t=this._intervals.length;for(let n=0;n<t;n++){let t=this._intervals[n],i=t.a,o=t.b;if(e<i)break;if(e===i&&e===o){this._intervals.splice(n,1);break}if(e===i){this._intervals[n]=l.Interval.of(t.a+1,t.b);break}if(e===o){this._intervals[n]=l.Interval.of(t.a,t.b-1);break}if(e>i&&e<o){let i=t.b;this._intervals[n]=l.Interval.of(t.a,e-1),this.add(e+1,i)}}}get isReadonly(){return this.readonly}setReadonly(e){if(this.readonly&&!e)throw new Error("can't alter readonly IntervalSet");this.readonly=e}}i([c.Override],m.prototype,"addAll",null),i([c.Override],m.prototype,"complement",null),i([c.Override],m.prototype,"subtract",null),i([c.Override],m.prototype,"or",null),i([c.Override],m.prototype,"and",null),i([c.Override],m.prototype,"contains",null),i([c.Override],m.prototype,"isNil",null),i([c.Override],m.prototype,"hashCode",null),i([c.Override],m.prototype,"equals",null),i([o(0,c.NotNull)],m.prototype,"toStringVocabulary",null),i([c.NotNull,o(0,c.NotNull)],m.prototype,"elementName",null),i([c.Override],m.prototype,"size",null),i([c.Override],m.prototype,"remove",null),i([c.NotNull],m,"of",null),i([c.NotNull],m,"subtract",null),t.IntervalSet=m},function(e,t,n){"use strict";
/*!
 * Copyright 2016 The ANTLR Project. All rights reserved.
 * Licensed under the BSD-3-Clause license. See LICENSE file in the project root for license information.
 */Object.defineProperty(t,"__esModule",{value:!0});const i=n(17);class o extends i.ATNState{constructor(){super(...arguments),this.decision=-1,this.nonGreedy=!1,this.sll=!1}}t.DecisionState=o},function(e,t,n){"use strict";
/*!
 * Copyright 2016 The ANTLR Project. All rights reserved.
 * Licensed under the BSD-3-Clause license. See LICENSE file in the project root for license information.
 */var i=this&&this.__decorate||function(e,t,n,i){var o,a=arguments.length,r=a<3?t:null===i?i=Object.getOwnPropertyDescriptor(t,n):i;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)r=Reflect.decorate(e,t,n,i);else for(var l=e.length-1;l>=0;l--)(o=e[l])&&(r=(a<3?o(r):a>3?o(t,n,r):o(t,n))||r);return a>3&&r&&Object.defineProperty(t,n,r),r},o=this&&this.__param||function(e,t){return function(n,i){t(n,i,e)}};Object.defineProperty(t,"__esModule",{value:!0});const a=n(6),r=n(35),l=n(60),s=n(0),d=n(31),c=n(1),u=n(61),m=n(29),h=n(3),p=n(11);class T{static toStringTree(e,t){let n;n=t instanceof d.Parser?t.ruleNames:t;let i=p.escapeWhitespace(this.getNodeText(e,n),!1);if(0===e.childCount)return i;let o="";o+="(",i=p.escapeWhitespace(this.getNodeText(e,n),!1),o+=i,o+=" ";for(let t=0;t<e.childCount;t++)t>0&&(o+=" "),o+=this.toStringTree(e.getChild(t),n);return o+=")",o}static getNodeText(e,t){let n;if(t instanceof d.Parser)n=t.ruleNames;else{if(!t){let t=e.payload;return"string"==typeof t.text?t.text:e.payload.toString()}n=t}if(e instanceof u.RuleNode){let t=e.ruleContext,i=n[t.ruleIndex],o=t.altNumber;return o!==a.ATN.INVALID_ALT_NUMBER?i+":"+o:i}if(e instanceof l.ErrorNode)return e.toString();if(e instanceof m.TerminalNode){return e.symbol.text||""}throw new TypeError("Unexpected node type")}static getChildren(e){let t=[];for(let n=0;n<e.childCount;n++)t.push(e.getChild(n));return t}static getAncestors(e){let t=[],n=e.parent;for(;n;)t.unshift(n),n=n.parent;return t}static isAncestorOf(e,t){if(!e||!t||!e.parent)return!1;let n=t.parent;for(;n;){if(e===n)return!0;n=n.parent}return!1}static findAllTokenNodes(e,t){return T.findAllNodes(e,t,!0)}static findAllRuleNodes(e,t){return T.findAllNodes(e,t,!1)}static findAllNodes(e,t,n){let i=[];return T._findAllNodes(e,t,n,i),i}static _findAllNodes(e,t,n,i){n&&e instanceof m.TerminalNode?e.symbol.type===t&&i.push(e):!n&&e instanceof c.ParserRuleContext&&e.ruleIndex===t&&i.push(e);for(let o=0;o<e.childCount;o++)T._findAllNodes(e.getChild(o),t,n,i)}static getDescendants(e){let t=[];return function e(n){t.push(n);const i=n.childCount;for(let t=0;t<i;t++)e(n.getChild(t))}(e),t}static getRootOfSubtreeEnclosingRegion(e,t,n){let i=e.childCount;for(let o=0;o<i;o++){let i=e.getChild(o),a=T.getRootOfSubtreeEnclosingRegion(i,t,n);if(a)return a}if(e instanceof c.ParserRuleContext){let i=e.stop;if(t>=e.start.tokenIndex&&(null==i||n<=i.tokenIndex))return e}}static stripChildrenOutOfRange(e,t,n,i){if(!e)return;let o=e.childCount;for(let a=0;a<o;a++){let o=e.getChild(a),l=o.sourceInterval;if(o instanceof c.ParserRuleContext&&(l.b<n||l.a>i)&&T.isAncestorOf(o,t)){let t=new r.CommonToken(h.Token.INVALID_TYPE,"...");e.children[a]=new m.TerminalNode(t)}}}static findNodeSuchThat(e,t){if(t(e))return e;let n=e.childCount;for(let i=0;i<n;i++){let n=T.findNodeSuchThat(e.getChild(i),t);if(void 0!==n)return n}}}i([o(0,s.NotNull)],T,"toStringTree",null),i([s.NotNull,o(0,s.NotNull)],T,"getAncestors",null),i([o(0,s.NotNull)],T,"getRootOfSubtreeEnclosingRegion",null),t.Trees=T},function(e,t,n){"use strict";var i=n(108).default;n(115),(t=e.exports=i).default=t},function(e,t,n){"use strict";
/*!
 * Copyright 2016 The ANTLR Project. All rights reserved.
 * Licensed under the BSD-3-Clause license. See LICENSE file in the project root for license information.
 */var i=this&&this.__decorate||function(e,t,n,i){var o,a=arguments.length,r=a<3?t:null===i?i=Object.getOwnPropertyDescriptor(t,n):i;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)r=Reflect.decorate(e,t,n,i);else for(var l=e.length-1;l>=0;l--)(o=e[l])&&(r=(a<3?o(r):a>3?o(t,n,r):o(t,n))||r);return a>3&&r&&Object.defineProperty(t,n,r),r},o=this&&this.__param||function(e,t){return function(n,i){t(n,i,e)}};Object.defineProperty(t,"__esModule",{value:!0});const a=n(21),r=n(42),l=n(5),s=n(0),d=n(15),c=n(11);class u{static get NONE(){return void 0===u._NONE&&(u._NONE=new u.Predicate),u._NONE}evalPrecedence(e,t){return this}static and(e,t){if(!e||e===u.NONE)return t;if(t===u.NONE)return e;let n=new u.AND(e,t);return 1===n.opnds.length?n.opnds[0]:n}static or(e,t){if(!e)return t;if(e===u.NONE||t===u.NONE)return u.NONE;let n=new u.OR(e,t);return 1===n.opnds.length?n.opnds[0]:n}}t.SemanticContext=u,function(e){function t(t){let n=[];for(let i=0;i<t.length;i++){let o=t[i];o instanceof e.PrecedencePredicate&&(n.push(o),t.splice(i,1),i--)}return n}class n extends e{constructor(e=-1,t=-1,n=!1){super(),this.ruleIndex=e,this.predIndex=t,this.isCtxDependent=n}eval(e,t){let n=this.isCtxDependent?t:void 0;return e.sempred(n,this.ruleIndex,this.predIndex)}hashCode(){let e=l.MurmurHash.initialize();return e=l.MurmurHash.update(e,this.ruleIndex),e=l.MurmurHash.update(e,this.predIndex),e=l.MurmurHash.update(e,this.isCtxDependent?1:0),e=l.MurmurHash.finish(e,3),e}equals(e){return e instanceof n&&(this===e||this.ruleIndex===e.ruleIndex&&this.predIndex===e.predIndex&&this.isCtxDependent===e.isCtxDependent)}toString(){return"{"+this.ruleIndex+":"+this.predIndex+"}?"}}i([s.Override],n.prototype,"eval",null),i([s.Override],n.prototype,"hashCode",null),i([s.Override],n.prototype,"equals",null),i([s.Override],n.prototype,"toString",null),e.Predicate=n;class u extends e{constructor(e){super(),this.precedence=e}eval(e,t){return e.precpred(t,this.precedence)}evalPrecedence(t,n){return t.precpred(n,this.precedence)?e.NONE:void 0}compareTo(e){return this.precedence-e.precedence}hashCode(){let e=1;return e=31*e+this.precedence,e}equals(e){return e instanceof u&&(this===e||this.precedence===e.precedence)}toString(){return"{"+this.precedence+">=prec}?"}}i([s.Override],u.prototype,"eval",null),i([s.Override],u.prototype,"evalPrecedence",null),i([s.Override],u.prototype,"compareTo",null),i([s.Override],u.prototype,"hashCode",null),i([s.Override],u.prototype,"equals",null),i([s.Override],u.prototype,"toString",null),e.PrecedencePredicate=u;class m extends e{}e.Operator=m;let h=class n extends m{constructor(e,i){super();let o=new a.Array2DHashSet(d.ObjectEqualityComparator.INSTANCE);e instanceof n?o.addAll(e.opnds):o.add(e),i instanceof n?o.addAll(i.opnds):o.add(i),this.opnds=o.toArray();let r=function(e){let t;for(let n of e){if(void 0===t){t=n;continue}t.compareTo(n)>0&&(t=n)}return t}(t(this.opnds));r&&this.opnds.push(r)}get operands(){return this.opnds}equals(e){return this===e||e instanceof n&&r.ArrayEqualityComparator.INSTANCE.equals(this.opnds,e.opnds)}hashCode(){return l.MurmurHash.hashCode(this.opnds,40363613)}eval(e,t){for(let n of this.opnds)if(!n.eval(e,t))return!1;return!0}evalPrecedence(t,n){let i=!1,o=[];for(let a of this.opnds){let r=a.evalPrecedence(t,n);if(i=i||r!==a,null==r)return;r!==e.NONE&&o.push(r)}if(!i)return this;if(0===o.length)return e.NONE;let a=o[0];for(let t=1;t<o.length;t++)a=e.and(a,o[t]);return a}toString(){return c.join(this.opnds,"&&")}};i([s.Override],h.prototype,"operands",null),i([s.Override],h.prototype,"equals",null),i([s.Override],h.prototype,"hashCode",null),i([s.Override],h.prototype,"eval",null),i([s.Override],h.prototype,"evalPrecedence",null),i([s.Override],h.prototype,"toString",null),h=i([o(0,s.NotNull),o(1,s.NotNull)],h),e.AND=h;let p=class n extends m{constructor(e,i){super();let o=new a.Array2DHashSet(d.ObjectEqualityComparator.INSTANCE);e instanceof n?o.addAll(e.opnds):o.add(e),i instanceof n?o.addAll(i.opnds):o.add(i),this.opnds=o.toArray();let r=function(e){let t;for(let n of e){if(void 0===t){t=n;continue}t.compareTo(n)<0&&(t=n)}return t}(t(this.opnds));r&&this.opnds.push(r)}get operands(){return this.opnds}equals(e){return this===e||e instanceof n&&r.ArrayEqualityComparator.INSTANCE.equals(this.opnds,e.opnds)}hashCode(){return l.MurmurHash.hashCode(this.opnds,486279973)}eval(e,t){for(let n of this.opnds)if(n.eval(e,t))return!0;return!1}evalPrecedence(t,n){let i=!1,o=[];for(let a of this.opnds){let r=a.evalPrecedence(t,n);if(i=i||r!==a,r===e.NONE)return e.NONE;r&&o.push(r)}if(!i)return this;if(0===o.length)return;let a=o[0];for(let t=1;t<o.length;t++)a=e.or(a,o[t]);return a}toString(){return c.join(this.opnds,"||")}};i([s.Override],p.prototype,"operands",null),i([s.Override],p.prototype,"equals",null),i([s.Override],p.prototype,"hashCode",null),i([s.Override],p.prototype,"eval",null),i([s.Override],p.prototype,"evalPrecedence",null),i([s.Override],p.prototype,"toString",null),p=i([o(0,s.NotNull),o(1,s.NotNull)],p),e.OR=p}(u=t.SemanticContext||(t.SemanticContext={}))},function(e,t,n){"use strict";
/*!
 * Copyright 2016 The ANTLR Project. All rights reserved.
 * Licensed under the BSD-3-Clause license. See LICENSE file in the project root for license information.
 */Object.defineProperty(t,"__esModule",{value:!0});const i=n(21);class o{constructor(e){this.keyComparator=e}hashCode(e){return this.keyComparator.hashCode(e.key)}equals(e,t){return this.keyComparator.equals(e.key,t.key)}}class a{constructor(e){this.backingStore=e instanceof a?new i.Array2DHashSet(e.backingStore):new i.Array2DHashSet(new o(e))}clear(){this.backingStore.clear()}containsKey(e){return this.backingStore.contains({key:e})}get(e){let t=this.backingStore.get({key:e});if(t)return t.value}get isEmpty(){return this.backingStore.isEmpty}put(e,t){let n,i=this.backingStore.get({key:e,value:t});return i?(n=i.value,i.value=t):this.backingStore.add({key:e,value:t}),n}putIfAbsent(e,t){let n,i=this.backingStore.get({key:e,value:t});return i?n=i.value:this.backingStore.add({key:e,value:t}),n}get size(){return this.backingStore.size}hashCode(){return this.backingStore.hashCode()}equals(e){return e instanceof a&&this.backingStore.equals(e.backingStore)}}t.Array2DHashMap=a},function(e,t,n){"use strict";
/*!
 * Copyright 2016 The ANTLR Project. All rights reserved.
 * Licensed under the BSD-3-Clause license. See LICENSE file in the project root for license information.
 */var i=this&&this.__decorate||function(e,t,n,i){var o,a=arguments.length,r=a<3?t:null===i?i=Object.getOwnPropertyDescriptor(t,n):i;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)r=Reflect.decorate(e,t,n,i);else for(var l=e.length-1;l>=0;l--)(o=e[l])&&(r=(a<3?o(r):a>3?o(t,n,r):o(t,n))||r);return a>3&&r&&Object.defineProperty(t,n,r),r};Object.defineProperty(t,"__esModule",{value:!0});const o=n(10),a=n(0),r=n(3);class l{constructor(e){this._symbol=e}getChild(e){throw new RangeError("Terminal Node has no children.")}get symbol(){return this._symbol}get parent(){return this._parent}setParent(e){this._parent=e}get payload(){return this._symbol}get sourceInterval(){let e=this._symbol.tokenIndex;return new o.Interval(e,e)}get childCount(){return 0}accept(e){return e.visitTerminal(this)}get text(){return this._symbol.text||""}toStringTree(e){return this.toString()}toString(){return this._symbol.type===r.Token.EOF?"<EOF>":this._symbol.text||""}}i([a.Override],l.prototype,"getChild",null),i([a.Override],l.prototype,"parent",null),i([a.Override],l.prototype,"setParent",null),i([a.Override],l.prototype,"payload",null),i([a.Override],l.prototype,"sourceInterval",null),i([a.Override],l.prototype,"childCount",null),i([a.Override],l.prototype,"accept",null),i([a.Override],l.prototype,"text",null),i([a.Override],l.prototype,"toStringTree",null),i([a.Override],l.prototype,"toString",null),t.TerminalNode=l},function(e,t,n){"use strict";
/*!
 * Copyright 2016 The ANTLR Project. All rights reserved.
 * Licensed under the BSD-3-Clause license. See LICENSE file in the project root for license information.
 */var i=this&&this.__decorate||function(e,t,n,i){var o,a=arguments.length,r=a<3?t:null===i?i=Object.getOwnPropertyDescriptor(t,n):i;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)r=Reflect.decorate(e,t,n,i);else for(var l=e.length-1;l>=0;l--)(o=e[l])&&(r=(a<3?o(r):a>3?o(t,n,r):o(t,n))||r);return a>3&&r&&Object.defineProperty(t,n,r),r};Object.defineProperty(t,"__esModule",{value:!0});const o=n(0);class a{constructor(e){this.nodeName=e,this.invert=!1}toString(){let e=this.invert?"!":"";return Object.constructor.name+"["+e+this.nodeName+"]"}}i([o.Override],a.prototype,"toString",null),t.XPathElement=a},function(e,t,n){"use strict";(function(e){
/*!
 * Copyright 2016 The ANTLR Project. All rights reserved.
 * Licensed under the BSD-3-Clause license. See LICENSE file in the project root for license information.
 */
var i=this&&this.__decorate||function(e,t,n,i){var o,a=arguments.length,r=a<3?t:null===i?i=Object.getOwnPropertyDescriptor(t,n):i;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)r=Reflect.decorate(e,t,n,i);else for(var l=e.length-1;l>=0;l--)(o=e[l])&&(r=(a<3?o(r):a>3?o(t,n,r):o(t,n))||r);return a>3&&r&&Object.defineProperty(t,n,r),r},o=this&&this.__param||function(e,t){return function(n,i){t(n,i,e)}},a=this&&this.__awaiter||function(e,t,n,i){return new(n||(n=Promise))((function(o,a){function r(e){try{s(i.next(e))}catch(e){a(e)}}function l(e){try{s(i.throw(e))}catch(e){a(e)}}function s(e){e.done?o(e.value):new n((function(t){t(e.value)})).then(r,l)}s((i=i.apply(e,t||[])).next())}))};Object.defineProperty(t,"__esModule",{value:!0});const r=n(11),l=n(89),s=n(33),d=n(49),c=n(60),u=n(81),m=n(18),h=n(0),p=n(153),T=n(32),b=n(95),g=n(37),x=n(29),f=n(3);class k{constructor(e,t){this.ruleNames=e,this.tokenStream=t}enterEveryRule(e){console.log("enter   "+this.ruleNames[e.ruleIndex]+", LT(1)="+this.tokenStream.LT(1).text)}exitEveryRule(e){console.log("exit    "+this.ruleNames[e.ruleIndex]+", LT(1)="+this.tokenStream.LT(1).text)}visitErrorNode(e){}visitTerminal(e){let t=e.parent.ruleContext,n=e.symbol;console.log("consume "+n+" rule "+this.ruleNames[t.ruleIndex])}}i([h.Override],k.prototype,"enterEveryRule",null),i([h.Override],k.prototype,"exitEveryRule",null),i([h.Override],k.prototype,"visitErrorNode",null),i([h.Override],k.prototype,"visitTerminal",null);class S extends g.Recognizer{constructor(e){super(),this._errHandler=new d.DefaultErrorStrategy,this._precedenceStack=new u.IntegerStack,this._buildParseTrees=!0,this._parseListeners=[],this._syntaxErrors=0,this.matchedEOF=!1,this._precedenceStack.push(0),this.inputStream=e}reset(e){(void 0===e||e)&&this.inputStream.seek(0),this._errHandler.reset(this),this._ctx=void 0,this._syntaxErrors=0,this.matchedEOF=!1,this.isTrace=!1,this._precedenceStack.clear(),this._precedenceStack.push(0);let t=this.interpreter;null!=t&&t.reset()}match(e){let t=this.currentToken;return t.type===e?(e===f.Token.EOF&&(this.matchedEOF=!0),this._errHandler.reportMatch(this),this.consume()):(t=this._errHandler.recoverInline(this),this._buildParseTrees&&-1===t.tokenIndex&&this._ctx.addErrorNode(this.createErrorNode(this._ctx,t))),t}matchWildcard(){let e=this.currentToken;return e.type>0?(this._errHandler.reportMatch(this),this.consume()):(e=this._errHandler.recoverInline(this),this._buildParseTrees&&-1===e.tokenIndex&&this._ctx.addErrorNode(this.createErrorNode(this._ctx,e))),e}set buildParseTree(e){this._buildParseTrees=e}get buildParseTree(){return this._buildParseTrees}getParseListeners(){return this._parseListeners}addParseListener(e){if(null==e)throw new TypeError("listener cannot be null");this._parseListeners.push(e)}removeParseListener(e){let t=this._parseListeners.findIndex(t=>t===e);-1!==t&&this._parseListeners.splice(t,1)}removeParseListeners(){this._parseListeners.length=0}triggerEnterRuleEvent(){for(let e of this._parseListeners)e.enterEveryRule&&e.enterEveryRule(this._ctx),this._ctx.enterRule(e)}triggerExitRuleEvent(){for(let e=this._parseListeners.length-1;e>=0;e--){let t=this._parseListeners[e];this._ctx.exitRule(t),t.exitEveryRule&&t.exitEveryRule(this._ctx)}}get numberOfSyntaxErrors(){return this._syntaxErrors}get tokenFactory(){return this._input.tokenSource.tokenFactory}getATNWithBypassAlts(){let e=this.serializedATN;if(null==e)throw new Error("The current parser does not support an ATN with bypass alternatives.");let t=S.bypassAltsAtnCache.get(e);if(null==t){let n=new l.ATNDeserializationOptions;n.isGenerateRuleBypassTransitions=!0,t=new s.ATNDeserializer(n).deserialize(r.toCharArray(e)),S.bypassAltsAtnCache.set(e,t)}return t}compileParseTreePattern(e,t,i){return a(this,void 0,void 0,(function*(){if(!i){if(this.inputStream){let e=this.inputStream.tokenSource;e instanceof m.Lexer&&(i=e)}if(!i)throw new Error("Parser can't discover a lexer to use")}let o=i;return new((yield Promise.resolve().then(()=>n(154))).ParseTreePatternMatcher)(o,this).compile(e,t)}))}get errorHandler(){return this._errHandler}set errorHandler(e){this._errHandler=e}get inputStream(){return this._input}set inputStream(e){this.reset(!1),this._input=e}get currentToken(){return this._input.LT(1)}notifyErrorListeners(e,t,n){void 0===t?t=this.currentToken:null===t&&(t=void 0),this._syntaxErrors++;let i=-1,o=-1;null!=t&&(i=t.line,o=t.charPositionInLine);let a=this.getErrorListenerDispatch();a.syntaxError&&a.syntaxError(this,t,i,o,e,n)}consume(){let e=this.currentToken;e.type!==S.EOF&&this.inputStream.consume();let t=0!==this._parseListeners.length;if(this._buildParseTrees||t)if(this._errHandler.inErrorRecoveryMode(this)){let n=this._ctx.addErrorNode(this.createErrorNode(this._ctx,e));if(t)for(let e of this._parseListeners)e.visitErrorNode&&e.visitErrorNode(n)}else{let n=this.createTerminalNode(this._ctx,e);if(this._ctx.addChild(n),t)for(let e of this._parseListeners)e.visitTerminal&&e.visitTerminal(n)}return e}createTerminalNode(e,t){return new x.TerminalNode(t)}createErrorNode(e,t){return new c.ErrorNode(t)}addContextToParseTree(){let e=this._ctx._parent;null!=e&&e.addChild(this._ctx)}enterRule(e,t,n){this.state=t,this._ctx=e,this._ctx._start=this._input.LT(1),this._buildParseTrees&&this.addContextToParseTree(),this.triggerEnterRuleEvent()}enterLeftFactoredRule(e,t,n){if(this.state=t,this._buildParseTrees){let t=this._ctx.getChild(this._ctx.childCount-1);this._ctx.removeLastChild(),t._parent=e,e.addChild(t)}this._ctx=e,this._ctx._start=this._input.LT(1),this._buildParseTrees&&this.addContextToParseTree(),this.triggerEnterRuleEvent()}exitRule(){this.matchedEOF?this._ctx._stop=this._input.LT(1):this._ctx._stop=this._input.tryLT(-1),this.triggerExitRuleEvent(),this.state=this._ctx.invokingState,this._ctx=this._ctx._parent}enterOuterAlt(e,t){if(e.altNumber=t,this._buildParseTrees&&this._ctx!==e){let t=this._ctx._parent;null!=t&&(t.removeLastChild(),t.addChild(e))}this._ctx=e}get precedence(){return this._precedenceStack.isEmpty?-1:this._precedenceStack.peek()}enterRecursionRule(e,t,n,i){this.state=t,this._precedenceStack.push(i),this._ctx=e,this._ctx._start=this._input.LT(1),this.triggerEnterRuleEvent()}pushNewRecursionContext(e,t,n){let i=this._ctx;i._parent=e,i.invokingState=t,i._stop=this._input.tryLT(-1),this._ctx=e,this._ctx._start=i._start,this._buildParseTrees&&this._ctx.addChild(i),this.triggerEnterRuleEvent()}unrollRecursionContexts(e){this._precedenceStack.pop(),this._ctx._stop=this._input.tryLT(-1);let t=this._ctx;if(this._parseListeners.length>0)for(;this._ctx!==e;)this.triggerExitRuleEvent(),this._ctx=this._ctx._parent;else this._ctx=e;t._parent=e,this._buildParseTrees&&null!=e&&e.addChild(t)}getInvokingContext(e){let t=this._ctx;for(;t&&t.ruleIndex!==e;)t=t._parent;return t}get context(){return this._ctx}set context(e){this._ctx=e}precpred(e,t){return t>=this._precedenceStack.peek()}getErrorListenerDispatch(){return new b.ProxyParserErrorListener(this.getErrorListeners())}inContext(e){return!1}isExpectedToken(e){let t=this.interpreter.atn,n=this._ctx,i=t.states[this.state],o=t.nextTokens(i);if(o.contains(e))return!0;if(!o.contains(f.Token.EPSILON))return!1;for(;null!=n&&n.invokingState>=0&&o.contains(f.Token.EPSILON);){let i=t.states[n.invokingState].transition(0);if(o=t.nextTokens(i.followState),o.contains(e))return!0;n=n._parent}return!(!o.contains(f.Token.EPSILON)||e!==f.Token.EOF)}get isMatchedEOF(){return this.matchedEOF}getExpectedTokens(){return this.atn.getExpectedTokens(this.state,this.context)}getExpectedTokensWithinCurrentRule(){let e=this.interpreter.atn,t=e.states[this.state];return e.nextTokens(t)}getRuleIndex(e){let t=this.getRuleIndexMap().get(e);return null!=t?t:-1}get ruleContext(){return this._ctx}getRuleInvocationStack(e=this._ctx){let t=e,n=this.ruleNames,i=[];for(;null!=t;){let e=t.ruleIndex;e<0?i.push("n/a"):i.push(n[e]),t=t._parent}return i}getDFAStrings(){let e=[];for(let t of this._interp.atn.decisionToDFA)e.push(t.toString(this.vocabulary,this.ruleNames));return e}dumpDFA(){let t=!1;for(let n of this._interp.atn.decisionToDFA)n.isEmpty||(t&&console.log(),console.log("Decision "+n.decision+":"),e.stdout.write(n.toString(this.vocabulary,this.ruleNames)),t=!0)}get sourceName(){return this._input.sourceName}get parseInfo(){return Promise.resolve().then(()=>n(104)).then(e=>{let t=this.interpreter;if(t instanceof e.ProfilingATNSimulator)return new p.ParseInfo(t)})}setProfile(e){return a(this,void 0,void 0,(function*(){let t=yield Promise.resolve().then(()=>n(104)),i=this.interpreter;e?i instanceof t.ProfilingATNSimulator||(this.interpreter=new t.ProfilingATNSimulator(this)):i instanceof t.ProfilingATNSimulator&&(this.interpreter=new T.ParserATNSimulator(this.atn,this)),this.interpreter.setPredictionMode(i.getPredictionMode())}))}set isTrace(e){e?(this._tracer?this.removeParseListener(this._tracer):this._tracer=new k(this.ruleNames,this._input),this.addParseListener(this._tracer)):this._tracer&&(this.removeParseListener(this._tracer),this._tracer=void 0)}get isTrace(){return null!=this._tracer}}S.bypassAltsAtnCache=new Map,i([h.NotNull],S.prototype,"_errHandler",void 0),i([h.NotNull],S.prototype,"match",null),i([h.NotNull],S.prototype,"matchWildcard",null),i([h.NotNull],S.prototype,"getParseListeners",null),i([o(0,h.NotNull)],S.prototype,"addParseListener",null),i([h.NotNull],S.prototype,"getATNWithBypassAlts",null),i([h.NotNull,o(0,h.NotNull)],S.prototype,"errorHandler",null),i([h.Override],S.prototype,"inputStream",null),i([h.NotNull],S.prototype,"currentToken",null),i([o(0,h.NotNull)],S.prototype,"enterRule",null),i([h.Override,o(0,h.Nullable)],S.prototype,"precpred",null),i([h.Override],S.prototype,"getErrorListenerDispatch",null),i([h.NotNull],S.prototype,"getExpectedTokens",null),i([h.NotNull],S.prototype,"getExpectedTokensWithinCurrentRule",null),i([h.Override],S.prototype,"parseInfo",null),t.Parser=S}).call(this,n(34))},function(e,t,n){"use strict";
/*!
 * Copyright 2016 The ANTLR Project. All rights reserved.
 * Licensed under the BSD-3-Clause license. See LICENSE file in the project root for license information.
 */var i=this&&this.__decorate||function(e,t,n,i){var o,a=arguments.length,r=a<3?t:null===i?i=Object.getOwnPropertyDescriptor(t,n):i;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)r=Reflect.decorate(e,t,n,i);else for(var l=e.length-1;l>=0;l--)(o=e[l])&&(r=(a<3?o(r):a>3?o(t,n,r):o(t,n))||r);return a>3&&r&&Object.defineProperty(t,n,r),r},o=this&&this.__param||function(e,t){return function(n,i){t(n,i,e)}};Object.defineProperty(t,"__esModule",{value:!0});const a=n(82),r=n(90),l=n(21),s=n(52),d=n(6),c=n(44),u=n(36),m=n(45),h=n(8),p=n(91),T=n(22),b=n(142),g=n(24),x=n(46),f=n(51),k=n(10),S=n(19),y=n(0),C=n(57),E=n(9),A=n(15),O=n(1),_=n(14),I=n(54),N=n(143),L=n(38),R=n(59),D=n(27),v=n(58),M=n(94),P=n(3),F=n(16),B=n(12);let U=class e extends m.ATNSimulator{constructor(e,t){super(e),this.predictionMode=N.PredictionMode.LL,this.force_global_context=!1,this.always_try_local_context=!0,this.enable_global_context_dfa=!1,this.optimize_unique_closure=!0,this.optimize_ll1=!0,this.optimize_tail_calls=!0,this.tail_call_preserves_sll=!0,this.treat_sllk1_conflict_as_ambiguity=!1,this.reportAmbiguities=!1,this.userWantsCtxSensitive=!0,this._parser=t}getPredictionMode(){return this.predictionMode}setPredictionMode(e){this.predictionMode=e}reset(){}adaptivePredict(t,n,i,o){void 0===o&&(o=!1);let a,r=this.atn.decisionToDFA[n];if(B(null!=r),this.optimize_ll1&&!r.isPrecedenceDfa&&!r.isEmpty){let e=t.LA(1);if(e>=0&&e<=65535){let t=(n<<16>>>0)+e,i=this.atn.LL1Table.get(t);if(null!=i)return i}}this.dfa=r,this.force_global_context?o=!0:this.always_try_local_context||(o=o||r.isContextSensitive),this.userWantsCtxSensitive=o||this.predictionMode!==N.PredictionMode.SLL&&null!=i&&!this.atn.decisionToState[n].sll,null==i&&(i=O.ParserRuleContext.emptyContext()),r.isEmpty||(a=this.getStartState(r,t,i,o)),null==a&&(null==i&&(i=O.ParserRuleContext.emptyContext()),e.debug&&console.log("ATN decision "+r.decision+" exec LA(1)=="+this.getLookaheadName(t)+", outerContext="+i.toString(this._parser)),a=this.computeStartState(r,i,o));let l=t.mark(),s=t.index;try{let n=this.execDFA(r,t,s,a);return e.debug&&console.log("DFA after predictATN: "+r.toString(this._parser.vocabulary,this._parser.ruleNames)),n}finally{this.dfa=void 0,t.seek(s),t.release(l)}}getStartState(e,t,n,i){if(!i){if(e.isPrecedenceDfa){let t=e.getPrecedenceStartState(this._parser.precedence,!1);if(null==t)return;return new M.SimulatorState(n,t,!1,n)}if(null==e.s0)return;return new M.SimulatorState(n,e.s0,!1,n)}if(!this.enable_global_context_dfa)return;let o,a=n;for(B(null!=n),o=e.isPrecedenceDfa?e.getPrecedenceStartState(this._parser.precedence,!0):e.s0full;null!=a&&null!=o&&o.isContextSensitive;)a=this.skipTailCalls(a),o=o.getContextTarget(this.getReturnState(a)),a.isEmpty?B(null==o||!o.isContextSensitive):a=a.parent;return null!=o?new M.SimulatorState(n,o,i,a):void 0}execDFA(t,n,i,o){let a=o.outerContext;e.dfa_debug&&console.log("DFA decision "+t.decision+" exec LA(1)=="+this.getLookaheadName(n)+", outerContext="+a.toString(this._parser)),e.dfa_debug&&console.log(t.toString(this._parser.vocabulary,this._parser.ruleNames));let r=o.s0,l=n.LA(1),s=o.remainingOuterContext;for(;;){if(e.dfa_debug&&console.log("DFA state "+r.stateNumber+" LA(1)=="+this.getLookaheadName(n)),o.useContext)for(;r.isContextSymbol(l);){let e;if(null!=s&&(s=this.skipTailCalls(s),e=r.getContextTarget(this.getReturnState(s))),null==e){let e=new M.SimulatorState(o.outerContext,r,o.useContext,s);return this.execATN(t,n,i,e)}B(null!=s),s=s.parent,r=e}if(this.isAcceptState(r,o.useContext)){null!=r.predicates?e.dfa_debug&&console.log("accept "+r):e.dfa_debug&&console.log("accept; predict "+r.prediction+" in state "+r.stateNumber);break}B(!this.isAcceptState(r,o.useContext));let d=this.getExistingTargetState(r,l);if(null==d){let d;if(e.dfa_debug&&l>=0&&console.log("no edge for "+this._parser.vocabulary.getDisplayName(l)),e.dfa_debug){let e=k.Interval.of(i,this._parser.inputStream.index);console.log("ATN exec upon "+this._parser.inputStream.getText(e)+" at DFA state "+r.stateNumber)}let c=new M.SimulatorState(a,r,o.useContext,s);return d=this.execATN(t,n,i,c),e.dfa_debug&&console.log("back from DFA update, alt="+d+", dfa=\n"+t.toString(this._parser.vocabulary,this._parser.ruleNames)),e.dfa_debug&&console.log("DFA decision "+t.decision+" predicts "+d),d}if(d===m.ATNSimulator.ERROR){let e=new M.SimulatorState(a,r,o.useContext,s);return this.handleNoViableAlt(n,i,e)}r=d,this.isAcceptState(r,o.useContext)||l===S.IntStream.EOF||(n.consume(),l=n.LA(1))}if(!o.useContext&&null!=r.configs.conflictInfo&&t.atnStartState instanceof g.DecisionState&&!(!this.userWantsCtxSensitive||!r.configs.dipsIntoOuterContext&&r.configs.isExactConflict||this.treat_sllk1_conflict_as_ambiguity&&n.index===i)){let e;B(!o.useContext);let l=r.predicates;if(null!=l){let t=n.index;if(t!==i&&n.seek(i),e=this.evalSemanticContext(l,a,!0),1===e.cardinality())return e.nextSetBit(0);t!==i&&n.seek(t)}if(this.reportAmbiguities){let l=new M.SimulatorState(a,r,o.useContext,s);this.reportAttemptingFullContext(t,e,l,i,n.index)}return n.seek(i),this.adaptivePredict(n,t.decision,a,!0)}let d=r.predicates;if(null!=d){let e=n.index;i!==e&&n.seek(i);let o=this.evalSemanticContext(d,a,this.reportAmbiguities&&this.predictionMode===N.PredictionMode.LL_EXACT_AMBIG_DETECTION);switch(o.cardinality()){case 0:throw this.noViableAlt(n,a,r.configs,i);case 1:return o.nextSetBit(0);default:return i!==e&&n.seek(e),this.reportAmbiguity(t,r,i,e,r.configs.isExactConflict,o,r.configs),o.nextSetBit(0)}}return e.dfa_debug&&console.log("DFA decision "+t.decision+" predicts "+r.prediction),r.prediction}isAcceptState(e,t){return!!e.isAcceptState&&(null==e.configs.conflictingAlts||(!t||this.predictionMode!==N.PredictionMode.LL_EXACT_AMBIG_DETECTION||e.configs.isExactConflict))}execATN(t,n,i,o){e.debug&&console.log("execATN decision "+t.decision+" exec LA(1)=="+this.getLookaheadName(n));let a=o.outerContext,r=o.useContext,l=n.LA(1),s=o,c=new I.PredictionContextCache;for(;;){let o=this.computeReachSet(t,s,l,c);if(null==o)return this.setDFAEdge(s.s0,n.LA(1),m.ATNSimulator.ERROR),this.handleNoViableAlt(n,i,s);let u=o.s0;if(B(u.isAcceptState||u.prediction===d.ATN.INVALID_ALT_NUMBER),B(u.isAcceptState||null==u.configs.conflictInfo),this.isAcceptState(u,r)){let s=u.configs.conflictingAlts,c=null==s?u.prediction:d.ATN.INVALID_ALT_NUMBER;if(c!==d.ATN.INVALID_ALT_NUMBER){if(this.optimize_ll1&&n.index===i&&!t.isPrecedenceDfa&&o.outerContext===o.remainingOuterContext&&t.decision>=0&&!u.configs.hasSemanticContext&&l>=0&&l<=65535){let e=(t.decision<<16>>>0)+l;this.atn.LL1Table.set(e,c)}r&&this.always_try_local_context&&this.reportContextSensitivity(t,c,o,i,n.index)}c=u.prediction;let m=null!=s&&this.userWantsCtxSensitive;if(m&&(m=!r&&(u.configs.dipsIntoOuterContext||!u.configs.isExactConflict)&&(!this.treat_sllk1_conflict_as_ambiguity||n.index!==i)),u.configs.hasSemanticContext){let e=u.predicates;if(null!=e){let t=n.index;switch(t!==i&&n.seek(i),s=this.evalSemanticContext(e,a,m||this.reportAmbiguities),s.cardinality()){case 0:throw this.noViableAlt(n,a,u.configs,i);case 1:return s.nextSetBit(0)}t!==i&&n.seek(t)}}if(m){B(!r),B(this.isAcceptState(u,!1)),e.debug&&console.log("RETRY with outerContext="+a);let l=this.computeStartState(t,a,!0);return this.reportAmbiguities&&this.reportAttemptingFullContext(t,s,o,i,n.index),n.seek(i),this.execATN(t,n,i,l)}return null!=s&&(this.reportAmbiguities&&s.cardinality()>1&&this.reportAmbiguity(t,u,i,n.index,u.configs.isExactConflict,s,u.configs),c=s.nextSetBit(0)),c}s=o,l!==S.IntStream.EOF&&(n.consume(),l=n.LA(1))}}handleNoViableAlt(e,t,n){if(null!=n.s0){let i=new T.BitSet,o=0;for(let e of n.s0.configs)(e.reachesIntoOuterContext||e.state instanceof L.RuleStopState)&&(i.set(e.alt),o=Math.max(o,e.alt));switch(i.cardinality()){case 0:break;case 1:return i.nextSetBit(0);default:if(!n.s0.configs.hasSemanticContext)return i.nextSetBit(0);let a=new u.ATNConfigSet;for(let e of n.s0.configs)(e.reachesIntoOuterContext||e.state instanceof L.RuleStopState)&&a.add(e);let r=this.getPredsForAmbigAlts(i,a,o);if(null!=r){let o=this.getPredicatePredictions(i,r);if(null!=o){let i=e.index;try{e.seek(t);let a=this.evalSemanticContext(o,n.outerContext,!1);if(!a.isEmpty)return a.nextSetBit(0)}finally{e.seek(i)}}}return i.nextSetBit(0)}}throw this.noViableAlt(e,n.outerContext,n.s0.configs,t)}computeReachSet(e,t,n,i){let o=t.useContext,a=t.remainingOuterContext,r=t.s0;if(o)for(;r.isContextSymbol(n);){let e;if(null!=a&&(a=this.skipTailCalls(a),e=r.getContextTarget(this.getReturnState(a))),null==e)break;B(null!=a),a=a.parent,r=e}if(B(!this.isAcceptState(r,o)),this.isAcceptState(r,o))return new M.SimulatorState(t.outerContext,r,o,a);let l=r,s=this.getExistingTargetState(l,n);if(null==s){let t=this.computeTargetState(e,l,a,n,o,i);s=t[0],a=t[1]}return s!==m.ATNSimulator.ERROR?(B(!o||!s.configs.dipsIntoOuterContext),new M.SimulatorState(t.outerContext,s,o,a)):void 0}getExistingTargetState(e,t){return e.getTarget(t)}computeTargetState(t,n,i,o,a,r){let l,s,c=n.configs.toArray(),h=new u.ATNConfigSet;do{let t=!a||null!=i;t||(h.isOutermostConfigSet=!0);let n,m=new u.ATNConfigSet;for(let t of c){if(e.debug&&console.log("testing "+this.getTokenName(o)+" at "+t.toString()),t.state instanceof L.RuleStopState){B(t.context.isEmpty),(a&&!t.reachesIntoOuterContext||o===S.IntStream.EOF)&&(null==n&&(n=[]),n.push(t));continue}let i=t.state.numberOfOptimizedTransitions;for(let e=0;e<i;e++){let n=t.state.getOptimizedTransition(e),i=this.getReachableTarget(t,n,o);null!=i&&m.add(t.transform(i,!1),r)}}if(this.optimize_unique_closure&&null==n&&o!==P.Token.EOF&&m.uniqueAlt!==d.ATN.INVALID_ALT_NUMBER){m.isOutermostConfigSet=h.isOutermostConfigSet,h=m;break}let p=!1,T=o===P.Token.EOF;if(this.closure(m,h,p,t,r,T),s=h.dipsIntoOuterContext,o===S.IntStream.EOF&&(h=this.removeAllConfigsNotInRuleStopState(h,r)),!(null==n||a&&N.PredictionMode.hasConfigInRuleStopState(h))){B(n.length>0);for(let e of n)h.add(e,r)}if(a&&s){h.clear(),i=i,i=this.skipTailCalls(i);let e=this.getReturnState(i);if(null==l&&(l=new f.IntegerList),i=i.isEmpty?void 0:i.parent,l.add(e),e!==_.PredictionContext.EMPTY_FULL_STATE_KEY)for(let t=0;t<c.length;t++)c[t]=c[t].appendContext(e,r)}}while(a&&s);return h.isEmpty?(this.setDFAEdge(n,o,m.ATNSimulator.ERROR),[m.ATNSimulator.ERROR,i]):[this.addDFAEdge(t,n,o,l,h,r),i]}removeAllConfigsNotInRuleStopState(e,t){if(N.PredictionMode.allConfigsInRuleStopStates(e))return e;let n=new u.ATNConfigSet;for(let i of e)i.state instanceof L.RuleStopState&&n.add(i,t);return n}computeStartState(e,t,n){let i=e.isPrecedenceDfa?e.getPrecedenceStartState(this._parser.precedence,n):n?e.s0full:e.s0;if(null!=i){if(!n)return new M.SimulatorState(t,i,n,t);i.setContextSensitive(this.atn)}e.decision;let o=e.atnStartState,a=0,r=t,l=n?_.PredictionContext.EMPTY_FULL:_.PredictionContext.EMPTY_LOCAL,s=new I.PredictionContextCache;if(n){if(!this.enable_global_context_dfa)for(;null!=r;)r.isEmpty?(a=_.PredictionContext.EMPTY_FULL_STATE_KEY,r=void 0):(a=this.getReturnState(r),l=l.appendSingleContext(a,s),r=r.parent);for(;null!=i&&i.isContextSensitive&&null!=r;){let e;if(r=this.skipTailCalls(r),r.isEmpty?(e=i.getContextTarget(_.PredictionContext.EMPTY_FULL_STATE_KEY),a=_.PredictionContext.EMPTY_FULL_STATE_KEY,r=void 0):(a=this.getReturnState(r),e=i.getContextTarget(a),l=l.appendSingleContext(a,s),r=r.parent),null==e)break;i=e}}if(null!=i&&!i.isContextSensitive)return new M.SimulatorState(t,i,n,r);let d=new u.ATNConfigSet;for(;;){let m=new u.ATNConfigSet,h=o.numberOfTransitions;for(let e=0;e<h;e++){let t=o.transition(e).target;m.add(c.ATNConfig.create(t,e+1,l))}let p=null!=r;p||(d.isOutermostConfigSet=!0);let T=!0;this.closure(m,d,T,p,s,!1);let b,g=d.dipsIntoOuterContext;if(n&&!this.enable_global_context_dfa){i=this.addDFAState(e,d,s);break}if(null==i?e.isPrecedenceDfa?(d=this.applyPrecedenceFilter(d,t,s),b=this.addDFAState(e,d,s),e.setPrecedenceStartState(this._parser.precedence,n,b)):(b=this.addDFAState(e,d,s),n?e.s0full?b=e.s0full:e.s0full=b:e.s0?b=e.s0:e.s0=b):(e.isPrecedenceDfa&&(d=this.applyPrecedenceFilter(d,t,s)),b=this.addDFAState(e,d,s),i.setContextTarget(a,b)),i=b,!n||!g)break;b.setContextSensitive(this.atn),r=r,d.clear(),r=this.skipTailCalls(r);let x=this.getReturnState(r);r=r.isEmpty?void 0:r.parent,x!==_.PredictionContext.EMPTY_FULL_STATE_KEY&&(l=l.appendSingleContext(x,s)),a=x}return new M.SimulatorState(t,i,n,r)}applyPrecedenceFilter(e,t,n){let i=new Map,o=new u.ATNConfigSet;for(let a of e){if(1!==a.alt)continue;let e=a.semanticContext.evalPrecedence(this._parser,t);null!=e&&(i.set(a.state.stateNumber,a.context),e!==a.semanticContext?o.add(a.transform(a.state,!1,e),n):o.add(a,n))}for(let t of e)if(1!==t.alt){if(!t.isPrecedenceFilterSuppressed){let e=i.get(t.state.stateNumber);if(null!=e&&e.equals(t.context))continue}o.add(t,n)}return o}getReachableTarget(e,t,n){if(t.matches(n,0,this.atn.maxTokenType))return t.target}predicateDFAState(t,n,i){let o=this.getConflictingAltsFromConfigSet(n);if(!o)throw new Error("This unhandled scenario is intended to be unreachable, but I'm currently not sure of why we know that's the case.");e.debug&&console.log("predicateDFAState "+t);let a,r=this.getPredsForAmbigAlts(o,n,i);return null!=r&&(a=this.getPredicatePredictions(o,r),t.predicates=a),a}getPredsForAmbigAlts(t,n,i){let o=new Array(i+1),a=o.length;for(let e of n)t.get(e.alt)&&(o[e.alt]=D.SemanticContext.or(o[e.alt],e.semanticContext));let r=0;for(let e=0;e<a;e++)null==o[e]?o[e]=D.SemanticContext.NONE:o[e]!==D.SemanticContext.NONE&&r++;let l=o;return 0===r&&(l=void 0),e.debug&&console.log("getPredsForAmbigAlts result "+(l?s.Arrays.toString(l):"undefined")),l}getPredicatePredictions(e,t){let n=[],i=!1;for(let o=1;o<t.length;o++){let a=t[o];B(null!=a),null!=e&&e.get(o)&&a===D.SemanticContext.NONE?n.push(new x.DFAState.PredPrediction(a,o)):a!==D.SemanticContext.NONE&&(i=!0,n.push(new x.DFAState.PredPrediction(a,o)))}if(i)return n}evalSemanticContext(t,n,i){let o=new T.BitSet;for(let a of t){if(a.pred===D.SemanticContext.NONE){if(o.set(a.alt),!i)break;continue}let t=this.evalSemanticContextImpl(a.pred,n,a.alt);if((e.debug||e.dfa_debug)&&console.log("eval pred "+a+"="+t),t&&((e.debug||e.dfa_debug)&&console.log("PREDICT "+a.alt),o.set(a.alt),!i))break}return o}evalSemanticContextImpl(e,t,n){return e.eval(this._parser,t)}closure(e,t,n,i,o,a){null==o&&(o=I.PredictionContextCache.UNCACHED);let r=e,s=new l.Array2DHashSet(A.ObjectEqualityComparator.INSTANCE);for(;r.size>0;){let e=new u.ATNConfigSet;for(let l of r)this.closureImpl(l,t,e,s,n,i,o,0,a);r=e}}closureImpl(t,n,i,o,a,l,s,d,u){if(e.debug&&console.log("closure("+t.toString(this._parser,!0)+")"),t.state instanceof L.RuleStopState)if(t.context.isEmpty){if(!l)return void n.add(t,s);e.debug&&console.log("FALLING off rule "+this.getRuleName(t.state.ruleIndex)),t.context===_.PredictionContext.EMPTY_FULL?t=t.transform(t.state,!1,_.PredictionContext.EMPTY_LOCAL):!t.reachesIntoOuterContext&&_.PredictionContext.isEmptyLocal(t.context)&&n.add(t,s)}else{let e=t.context.hasEmpty,r=t.context.size-(e?1:0);for(let e=0;e<r;e++){let r=t.context.getParent(e),m=this.atn.states[t.context.getReturnState(e)],h=c.ATNConfig.create(m,t.alt,r,t.semanticContext);h.outerContextDepth=t.outerContextDepth,h.isPrecedenceFilterSuppressed=t.isPrecedenceFilterSuppressed,B(d>-2147483648),this.closureImpl(h,n,i,o,a,l,s,d-1,u)}if(!e||!l)return;t=t.transform(t.state,!1,_.PredictionContext.EMPTY_LOCAL)}let m=t.state;m.onlyHasEpsilonTransitions||(n.add(t,s),e.debug&&console.log("added config "+n));for(let c=0;c<m.numberOfOptimizedTransitions;c++){if(0===c&&m.stateType===h.ATNStateType.STAR_LOOP_ENTRY&&m.precedenceRuleDecision&&!t.context.hasEmpty){let e=m,n=!0;for(let i=0;i<t.context.size;i++)if(!e.precedenceLoopbackStates.get(t.context.getReturnState(i))){n=!1;break}if(n)continue}let p=m.getOptimizedTransition(c),T=!(p instanceof r.ActionTransition)&&a,b=this.getEpsilonTarget(t,p,T,0===d,s,u);if(null!=b){if(p instanceof R.RuleTransition&&null!=i&&!a){i.add(b,s);continue}let r=d;if(t.state instanceof L.RuleStopState){if(null!=this.dfa&&this.dfa.isPrecedenceDfa){p.outermostPrecedenceReturn===this.dfa.atnStartState.ruleIndex&&(b.isPrecedenceFilterSuppressed=!0)}if(b.outerContextDepth=b.outerContextDepth+1,!o.add(b))continue;B(r>-2147483648),r--,e.debug&&console.log("dips into outer ctx: "+b)}else if(p instanceof R.RuleTransition)!this.optimize_tail_calls||!p.optimizedTailCall||this.tail_call_preserves_sll&&_.PredictionContext.isEmptyLocal(t.context)?r>=0&&r++:(B(b.context===t.context),0===r&&(r--,!this.tail_call_preserves_sll&&_.PredictionContext.isEmptyLocal(t.context)&&(b.outerContextDepth=b.outerContextDepth+1)));else if(!p.isEpsilon&&!o.add(b))continue;this.closureImpl(b,n,i,o,T,l,s,r,u)}}}getRuleName(e){return null!=this._parser&&e>=0?this._parser.ruleNames[e]:"<rule "+e+">"}getEpsilonTarget(e,t,n,i,o,a){switch(t.serializationType){case 3:return this.ruleTransition(e,t,o);case 10:return this.precedenceTransition(e,t,n,i);case 4:return this.predTransition(e,t,n,i);case 6:return this.actionTransition(e,t);case 1:return e.transform(t.target,!1);case 5:case 2:case 7:return a&&t.matches(P.Token.EOF,0,1)?e.transform(t.target,!1):void 0;default:return}}actionTransition(t,n){return e.debug&&console.log("ACTION edge "+n.ruleIndex+":"+n.actionIndex),t.transform(n.target,!1)}precedenceTransition(t,n,i,o){let a;if(e.debug&&(console.log("PRED (collectPredicates="+i+") "+n.precedence+">=_p, ctx dependent=true"),null!=this._parser&&console.log("context surrounding pred is "+this._parser.getRuleInvocationStack())),i&&o){let e=D.SemanticContext.and(t.semanticContext,n.predicate);a=t.transform(n.target,!1,e)}else a=t.transform(n.target,!1);return e.debug&&console.log("config from pred transition="+a),a}predTransition(t,n,i,o){let a;if(e.debug&&(console.log("PRED (collectPredicates="+i+") "+n.ruleIndex+":"+n.predIndex+", ctx dependent="+n.isCtxDependent),null!=this._parser&&console.log("context surrounding pred is "+this._parser.getRuleInvocationStack())),i&&(!n.isCtxDependent||n.isCtxDependent&&o)){let e=D.SemanticContext.and(t.semanticContext,n.predicate);a=t.transform(n.target,!1,e)}else a=t.transform(n.target,!1);return e.debug&&console.log("config from pred transition="+a),a}ruleTransition(t,n,i){e.debug&&console.log("CALL rule "+this.getRuleName(n.target.ruleIndex)+", ctx="+t.context);let o,a=n.followState;return o=!this.optimize_tail_calls||!n.optimizedTailCall||this.tail_call_preserves_sll&&_.PredictionContext.isEmptyLocal(t.context)?null!=i?i.getChild(t.context,a.stateNumber):t.context.getChild(a.stateNumber):t.context,t.transform(n.target,!1,o)}isConflicted(t,n){if(t.uniqueAlt!==d.ATN.INVALID_ALT_NUMBER||t.size<=1)return;let i=t.toArray();i.sort(e.STATE_ALT_SORT_COMPARATOR);let o=!t.dipsIntoOuterContext,a=new T.BitSet,r=i[0].alt;a.set(r);let l,s=i[0].state.nonStopStateNumber;for(let e of i){let t=e.state.nonStopStateNumber;if(t!==s){if(e.alt!==r)return;s=t}}if(o){s=i[0].state.nonStopStateNumber,l=new T.BitSet;let e=r;for(let t of i){if(t.state.nonStopStateNumber!==s)break;let n=t.alt;l.set(n),e=n}s=i[0].state.nonStopStateNumber;let t=r;for(let n of i){let i=n.state.nonStopStateNumber,a=n.alt;if(i!==s){if(t!==e){o=!1;break}s=i,t=r}else if(a!==t){if(a!==l.nextSetBit(t+1)){o=!1;break}t=a}}}s=i[0].state.nonStopStateNumber;let c=0,u=0,m=i[0].context;for(let e=1;e<i.length;e++){let t=i[e];if(t.alt!==r)break;if(t.state.nonStopStateNumber!==s)break;u=e,m=n.join(m,i[e].context)}for(let e=u+1;e<i.length;e++){let t=i[e],l=t.state;if(a.set(t.alt),l.nonStopStateNumber!==s){s=l.nonStopStateNumber,c=e,u=e,m=t.context;for(let e=c+1;e<i.length;e++){let t=i[e];if(t.alt!==r)break;if(t.state.nonStopStateNumber!==s)break;u=e,m=n.join(m,t.context)}e=u;continue}let d=t.context,h=t.alt,p=e;for(let e=p+1;e<i.length;e++){let t=i[e];if(t.alt!==h)break;if(t.state.nonStopStateNumber!==s)break;p=e,d=n.join(d,t.context)}e=p;let T=n.join(m,d);if(!m.equals(T))return;o=o&&m.equals(d)}return new b.ConflictInfo(a,o)}getConflictingAltsFromConfigSet(e){let t=e.conflictingAlts;return null==t&&e.uniqueAlt!==d.ATN.INVALID_ALT_NUMBER&&(t=new T.BitSet,t.set(e.uniqueAlt)),t}getTokenName(e){if(e===P.Token.EOF)return"EOF";let t=(null!=this._parser?this._parser.vocabulary:F.VocabularyImpl.EMPTY_VOCABULARY).getDisplayName(e);return t===String(e)?t:t+"<"+e+">"}getLookaheadName(e){return this.getTokenName(e.LA(1))}dumpDeadEndConfigs(e){console.log("dead end configs: ");let t=e.deadEndConfigs;if(t)for(let e of t){let t="no edges";if(e.state.numberOfOptimizedTransitions>0){let n=e.state.getOptimizedTransition(0);if(n instanceof p.AtomTransition)t="Atom "+this.getTokenName(n._label);else if(n instanceof v.SetTransition){t=(n instanceof C.NotSetTransition?"~":"")+"Set "+n.set.toString()}}console.log(e.toString(this._parser,!0)+":"+t)}}noViableAlt(e,t,n,i){return new E.NoViableAltException(this._parser,e,e.get(i),e.LT(1),n,t)}getUniqueAlt(e){let t=d.ATN.INVALID_ALT_NUMBER;for(let n of e)if(t===d.ATN.INVALID_ALT_NUMBER)t=n.alt;else if(n.alt!==t)return d.ATN.INVALID_ALT_NUMBER;return t}configWithAltAtStopState(e,t){for(let n of e)if(n.alt===t&&n.state instanceof L.RuleStopState)return!0;return!1}addDFAEdge(t,n,i,o,a,r){B(null==o||o.isEmpty||t.isContextSensitive);let l=n,s=this.addDFAState(t,a,r);if(null!=o)for(let e of o.toArray()){if(e===_.PredictionContext.EMPTY_FULL_STATE_KEY&&l.configs.isOutermostConfigSet)continue;l.setContextSensitive(this.atn),l.setContextSymbol(i);let n=l.getContextTarget(e);null==n?(n=this.addDFAContextState(t,l.configs,e,r),B(e!==_.PredictionContext.EMPTY_FULL_STATE_KEY||n.configs.isOutermostConfigSet),l.setContextTarget(e,n),l=n):l=n}return e.debug&&console.log("EDGE "+l+" -> "+s+" upon "+this.getTokenName(i)),this.setDFAEdge(l,i,s),e.debug&&console.log("DFA=\n"+t.toString(null!=this._parser?this._parser.vocabulary:F.VocabularyImpl.EMPTY_VOCABULARY,null!=this._parser?this._parser.ruleNames:void 0)),s}setDFAEdge(e,t,n){null!=e&&e.setTarget(t,n)}addDFAContextState(e,t,n,i){if(n!==_.PredictionContext.EMPTY_FULL_STATE_KEY){let o=new u.ATNConfigSet;for(let e of t)o.add(e.appendContext(n,i));return this.addDFAState(e,o,i)}return B(!t.isOutermostConfigSet,"Shouldn't be adding a duplicate edge."),(t=t.clone(!0)).isOutermostConfigSet=!0,this.addDFAState(e,t,i)}addDFAState(t,n,i){let o=this.enable_global_context_dfa||!n.isOutermostConfigSet;if(o){n.isReadOnly||n.optimizeConfigs(this);let e=this.createDFAState(t,n),i=t.states.get(e);if(null!=i)return i}n.isReadOnly||null==n.conflictInfo&&(n.conflictInfo=this.isConflicted(n,i));let r=this.createDFAState(t,n.clone(!0)),l=this.atn.getDecisionState(t.decision),s=this.getUniqueAlt(n);if(s!==d.ATN.INVALID_ALT_NUMBER)r.acceptStateInfo=new a.AcceptStateInfo(s);else if(null!=n.conflictingAlts){let e=n.conflictingAlts;e&&(r.acceptStateInfo=new a.AcceptStateInfo(e.nextSetBit(0)))}if(r.isAcceptState&&n.hasSemanticContext&&this.predicateDFAState(r,n,l.numberOfTransitions),!o)return r;let c=t.addState(r);return e.debug&&c===r&&console.log("adding new DFA state: "+r),c}createDFAState(e,t){return new x.DFAState(t)}reportAttemptingFullContext(t,n,i,o,a){if(e.debug||e.retry_debug){let e=k.Interval.of(o,a);console.log("reportAttemptingFullContext decision="+t.decision+":"+i.s0.configs+", input="+this._parser.inputStream.getText(e))}if(null!=this._parser){let e=this._parser.getErrorListenerDispatch();e.reportAttemptingFullContext&&e.reportAttemptingFullContext(this._parser,t,o,a,n,i)}}reportContextSensitivity(t,n,i,o,a){if(e.debug||e.retry_debug){let e=k.Interval.of(o,a);console.log("reportContextSensitivity decision="+t.decision+":"+i.s0.configs+", input="+this._parser.inputStream.getText(e))}if(null!=this._parser){let e=this._parser.getErrorListenerDispatch();e.reportContextSensitivity&&e.reportContextSensitivity(this._parser,t,o,a,n,i)}}reportAmbiguity(t,n,i,o,a,r,l){if(e.debug||e.retry_debug){let e=k.Interval.of(i,o);console.log("reportAmbiguity "+r+":"+l+", input="+this._parser.inputStream.getText(e))}if(null!=this._parser){let e=this._parser.getErrorListenerDispatch();e.reportAmbiguity&&e.reportAmbiguity(this._parser,t,i,o,a,r,l)}}getReturnState(e){if(e.isEmpty)return _.PredictionContext.EMPTY_FULL_STATE_KEY;return this.atn.states[e.invokingState].transition(0).followState.stateNumber}skipTailCalls(e){if(!this.optimize_tail_calls)return e;for(;!e.isEmpty;){let t=this.atn.states[e.invokingState];if(B(1===t.numberOfTransitions&&3===t.transition(0).serializationType),!t.transition(0).tailCall)break;e=e.parent}return e}get parser(){return this._parser}};U.debug=!1,U.dfa_debug=!1,U.retry_debug=!1,U.STATE_ALT_SORT_COMPARATOR=(e,t)=>{let n=e.state.nonStopStateNumber-t.state.nonStopStateNumber;return 0!==n?n:(n=e.alt-t.alt,0!==n?n:0)},i([y.NotNull],U.prototype,"predictionMode",void 0),i([y.NotNull],U.prototype,"getPredictionMode",null),i([o(0,y.NotNull)],U.prototype,"setPredictionMode",null),i([y.Override],U.prototype,"reset",null),i([o(0,y.NotNull)],U.prototype,"adaptivePredict",null),i([o(0,y.NotNull),o(1,y.NotNull),o(2,y.NotNull)],U.prototype,"getStartState",null),i([o(0,y.NotNull),o(1,y.NotNull),o(3,y.NotNull)],U.prototype,"execDFA",null),i([o(0,y.NotNull),o(1,y.NotNull),o(3,y.NotNull)],U.prototype,"execATN",null),i([o(0,y.NotNull),o(2,y.NotNull)],U.prototype,"handleNoViableAlt",null),i([o(0,y.NotNull)],U.prototype,"getExistingTargetState",null),i([y.NotNull,o(0,y.NotNull),o(1,y.NotNull)],U.prototype,"computeTargetState",null),i([y.NotNull,o(0,y.NotNull)],U.prototype,"removeAllConfigsNotInRuleStopState",null),i([y.NotNull],U.prototype,"computeStartState",null),i([y.NotNull,o(0,y.NotNull)],U.prototype,"applyPrecedenceFilter",null),i([o(0,y.NotNull),o(1,y.NotNull)],U.prototype,"getReachableTarget",null),i([o(0,y.NotNull),o(1,y.NotNull)],U.prototype,"getPredsForAmbigAlts",null),i([o(0,y.NotNull)],U.prototype,"evalSemanticContext",null),i([o(0,y.NotNull)],U.prototype,"evalSemanticContextImpl",null),i([o(1,y.NotNull),o(4,y.Nullable)],U.prototype,"closure",null),i([o(0,y.NotNull),o(1,y.NotNull),o(2,y.Nullable),o(3,y.NotNull),o(6,y.NotNull)],U.prototype,"closureImpl",null),i([y.NotNull],U.prototype,"getRuleName",null),i([o(0,y.NotNull),o(1,y.NotNull)],U.prototype,"getEpsilonTarget",null),i([y.NotNull,o(0,y.NotNull),o(1,y.NotNull)],U.prototype,"actionTransition",null),i([y.Nullable,o(0,y.NotNull),o(1,y.NotNull)],U.prototype,"precedenceTransition",null),i([y.Nullable,o(0,y.NotNull),o(1,y.NotNull)],U.prototype,"predTransition",null),i([y.NotNull,o(0,y.NotNull),o(1,y.NotNull),o(2,y.Nullable)],U.prototype,"ruleTransition",null),i([o(0,y.NotNull)],U.prototype,"isConflicted",null),i([y.NotNull],U.prototype,"getTokenName",null),i([o(0,y.NotNull)],U.prototype,"dumpDeadEndConfigs",null),i([y.NotNull,o(0,y.NotNull),o(1,y.NotNull),o(2,y.NotNull)],U.prototype,"noViableAlt",null),i([o(0,y.NotNull)],U.prototype,"getUniqueAlt",null),i([o(0,y.NotNull)],U.prototype,"configWithAltAtStopState",null),i([y.NotNull,o(0,y.NotNull),o(1,y.NotNull),o(4,y.NotNull)],U.prototype,"addDFAEdge",null),i([o(0,y.Nullable),o(2,y.Nullable)],U.prototype,"setDFAEdge",null),i([y.NotNull,o(0,y.NotNull),o(1,y.NotNull)],U.prototype,"addDFAContextState",null),i([y.NotNull,o(0,y.NotNull),o(1,y.NotNull)],U.prototype,"addDFAState",null),i([y.NotNull,o(0,y.NotNull),o(1,y.NotNull)],U.prototype,"createDFAState",null),i([o(0,y.NotNull),o(2,y.NotNull)],U.prototype,"reportAttemptingFullContext",null),i([o(0,y.NotNull),o(2,y.NotNull)],U.prototype,"reportContextSensitivity",null),i([o(0,y.NotNull),o(5,y.NotNull),o(6,y.NotNull)],U.prototype,"reportAmbiguity",null),U=i([o(0,y.NotNull)],U),t.ParserATNSimulator=U},function(e,t,n){"use strict";
/*!
 * Copyright 2016 The ANTLR Project. All rights reserved.
 * Licensed under the BSD-3-Clause license. See LICENSE file in the project root for license information.
 */var i=this&&this.__decorate||function(e,t,n,i){var o,a=arguments.length,r=a<3?t:null===i?i=Object.getOwnPropertyDescriptor(t,n):i;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)r=Reflect.decorate(e,t,n,i);else for(var l=e.length-1;l>=0;l--)(o=e[l])&&(r=(a<3?o(r):a>3?o(t,n,r):o(t,n))||r);return a>3&&r&&Object.defineProperty(t,n,r),r},o=this&&this.__param||function(e,t){return function(n,i){t(n,i,e)}};Object.defineProperty(t,"__esModule",{value:!0});const a=n(90),r=n(21),l=n(6),s=n(89),d=n(8),c=n(91),u=n(131),m=n(87),h=n(22),p=n(132),T=n(48),b=n(24),g=n(83),x=n(133),f=n(23),k=n(86),S=n(134),y=n(135),C=n(136),E=n(137),A=n(138),O=n(139),_=n(140),I=n(141),N=n(92),L=n(0),R=n(57),D=n(32),v=n(144),M=n(145),P=n(146),F=n(80),B=n(147),U=n(148),w=n(38),q=n(59),j=n(58),H=n(149),Y=n(150),V=n(56),z=n(3),G=n(151),W=n(152),K=n(88);var Z;!function(e){e[e.UNICODE_BMP=0]="UNICODE_BMP",e[e.UNICODE_SMP=1]="UNICODE_SMP"}(Z||(Z={}));class X{constructor(e){null==e&&(e=s.ATNDeserializationOptions.defaultOptions),this.deserializationOptions=e}static get SERIALIZED_VERSION(){return 3}static isFeatureSupported(e,t){let n=X.SUPPORTED_UUIDS.findIndex(t=>t.equals(e));return!(n<0)&&X.SUPPORTED_UUIDS.findIndex(e=>e.equals(t))>=n}static getUnicodeDeserializer(e){return 0===e?{readUnicode:(e,t)=>X.toInt(e[t]),size:1}:{readUnicode:(e,t)=>X.toInt32(e,t),size:2}}deserialize(e){e=e.slice(0);for(let t=1;t<e.length;t++)e[t]=e[t]-2&65535;let t=0,n=X.toInt(e[t++]);if(n!==X.SERIALIZED_VERSION){let e=`Could not deserialize ATN with version ${n} (expected ${X.SERIALIZED_VERSION}).`;throw new Error(e)}let i=X.toUUID(e,t);if(t+=8,X.SUPPORTED_UUIDS.findIndex(e=>e.equals(i))<0){let e=`Could not deserialize ATN with UUID ${i} (expected ${X.SERIALIZED_UUID} or a legacy UUID).`;throw new Error(e)}let o=X.isFeatureSupported(X.ADDED_LEXER_ACTIONS,i),s=X.toInt(e[t++]),h=X.toInt(e[t++]),b=new l.ATN(s,h),f=[],S=[],C=X.toInt(e[t++]);for(let n=0;n<C;n++){let n=X.toInt(e[t++]);if(n===d.ATNStateType.INVALID_TYPE){b.addState(new k.InvalidState);continue}let i=X.toInt(e[t++]);65535===i&&(i=-1);let o=this.stateFactory(n,i);if(n===d.ATNStateType.LOOP_END){let n=X.toInt(e[t++]);f.push([o,n])}else if(o instanceof T.BlockStartState){let n=X.toInt(e[t++]);S.push([o,n])}b.addState(o)}for(let e of f)e[0].loopBackState=b.states[e[1]];for(let e of S)e[0].endState=b.states[e[1]];let E=X.toInt(e[t++]);for(let n=0;n<E;n++){let n=X.toInt(e[t++]);b.states[n].nonGreedy=!0}let A=X.toInt(e[t++]);for(let n=0;n<A;n++){let n=X.toInt(e[t++]);b.states[n].sll=!0}let O=X.toInt(e[t++]);for(let n=0;n<O;n++){let n=X.toInt(e[t++]);b.states[n].isPrecedenceRule=!0}let _=X.toInt(e[t++]);0===b.grammarType&&(b.ruleToTokenType=new Int32Array(_)),b.ruleToStartState=new Array(_);for(let n=0;n<_;n++){let o=X.toInt(e[t++]),a=b.states[o];if(a.leftFactored=0!==X.toInt(e[t++]),b.ruleToStartState[n]=a,0===b.grammarType){let o=X.toInt(e[t++]);if(65535===o&&(o=z.Token.EOF),b.ruleToTokenType[n]=o,!X.isFeatureSupported(X.ADDED_LEXER_ACTIONS,i)){let n=X.toInt(e[t++]);65535===n&&(n=-1)}}}b.ruleToStopState=new Array(_);for(let e of b.states)e instanceof w.RuleStopState&&(b.ruleToStopState[e.ruleIndex]=e,b.ruleToStartState[e.ruleIndex].stopState=e);let I=X.toInt(e[t++]);for(let n=0;n<I;n++){let n=X.toInt(e[t++]);b.modeToStartState.push(b.states[n])}b.modeToDFA=new Array(I);for(let e=0;e<I;e++)b.modeToDFA[e]=new g.DFA(b.modeToStartState[e]);let L=[];t=this.deserializeSets(e,t,L,X.getUnicodeDeserializer(0)),X.isFeatureSupported(X.ADDED_UNICODE_SMP,i)&&(t=this.deserializeSets(e,t,L,X.getUnicodeDeserializer(1)));let R=X.toInt(e[t++]);for(let n=0;n<R;n++){let n=X.toInt(e[t]),i=X.toInt(e[t+1]),o=X.toInt(e[t+2]),a=X.toInt(e[t+3]),r=X.toInt(e[t+4]),l=X.toInt(e[t+5]),s=this.edgeFactory(b,o,n,i,a,r,l,L);b.states[n].addTransition(s),t+=6}let D=new r.Array2DHashSet({hashCode:e=>e.stopState^e.returnState^e.outermostPrecedenceReturn,equals:(e,t)=>e.stopState===t.stopState&&e.returnState===t.returnState&&e.outermostPrecedenceReturn===t.outermostPrecedenceReturn}),P=[];for(let e of b.states){let t=e.ruleIndex>=0&&b.ruleToStartState[e.ruleIndex].leftFactored;for(let n=0;n<e.numberOfTransitions;n++){let i=e.transition(n);if(!(i instanceof q.RuleTransition))continue;let o=i;if(!b.ruleToStartState[o.target.ruleIndex].leftFactored&&t)continue;let a=-1;b.ruleToStartState[o.target.ruleIndex].isPrecedenceRule&&0===o.precedence&&(a=o.target.ruleIndex);let r={stopState:o.target.ruleIndex,returnState:o.followState.stateNumber,outermostPrecedenceReturn:a};D.add(r)&&P.push(r)}}for(let e of P){let t=new x.EpsilonTransition(b.states[e.returnState],e.outermostPrecedenceReturn);b.ruleToStopState[e.stopState].addTransition(t)}for(let e of b.states){if(e instanceof T.BlockStartState){if(null==e.endState)throw new Error("IllegalStateException");if(null!=e.endState.startState)throw new Error("IllegalStateException");e.endState.startState=e}if(e instanceof M.PlusLoopbackState){let t=e;for(let e=0;e<t.numberOfTransitions;e++){let n=t.transition(e).target;n instanceof v.PlusBlockStartState&&(n.loopBackState=t)}}else if(e instanceof Y.StarLoopbackState){let t=e;for(let e=0;e<t.numberOfTransitions;e++){let n=t.transition(e).target;n instanceof V.StarLoopEntryState&&(n.loopBackState=t)}}}let F=X.toInt(e[t++]);for(let n=1;n<=F;n++){let i=X.toInt(e[t++]),o=b.states[i];b.decisionToState.push(o),o.decision=n-1}if(0===b.grammarType)if(o){b.lexerActions=new Array(X.toInt(e[t++]));for(let n=0;n<b.lexerActions.length;n++){let i=X.toInt(e[t++]),o=X.toInt(e[t++]);65535===o&&(o=-1);let a=X.toInt(e[t++]);65535===a&&(a=-1);let r=this.lexerActionFactory(i,o,a);b.lexerActions[n]=r}}else{let e=[];for(let t of b.states)for(let n=0;n<t.numberOfTransitions;n++){let i=t.transition(n);if(!(i instanceof a.ActionTransition))continue;let o=i.ruleIndex,r=i.actionIndex,l=new y.LexerCustomAction(o,r);t.setTransition(n,new a.ActionTransition(i.target,o,e.length,!1)),e.push(l)}b.lexerActions=e}this.markPrecedenceDecisions(b),b.decisionToDFA=new Array(F);for(let e=0;e<F;e++)b.decisionToDFA[e]=new g.DFA(b.decisionToState[e],e);if(this.deserializationOptions.isVerifyATN&&this.verifyATN(b),this.deserializationOptions.isGenerateRuleBypassTransitions&&1===b.grammarType){b.ruleToTokenType=new Int32Array(b.ruleToStartState.length);for(let e=0;e<b.ruleToStartState.length;e++)b.ruleToTokenType[e]=b.maxTokenType+e+1;for(let e=0;e<b.ruleToStartState.length;e++){let t=new u.BasicBlockStartState;t.ruleIndex=e,b.addState(t);let n,i,o=new p.BlockEndState;if(o.ruleIndex=e,b.addState(o),t.endState=o,b.defineDecisionState(t),o.startState=t,b.ruleToStartState[e].isPrecedenceRule){n=void 0;for(let t of b.states){if(t.ruleIndex!==e)continue;if(!(t instanceof V.StarLoopEntryState))continue;let i=t.transition(t.numberOfTransitions-1).target;if(i instanceof N.LoopEndState&&(i.epsilonOnlyTransitions&&i.transition(0).target instanceof w.RuleStopState)){n=t;break}}if(!n)throw new Error("Couldn't identify final state of the precedence rule prefix section.");i=n.loopBackState.transition(0)}else n=b.ruleToStopState[e];for(let e of b.states)for(let t=0;t<e.numberOfTransitions;t++){let a=e.transition(t);a!==i&&(a.target===n&&(a.target=o))}for(;b.ruleToStartState[e].numberOfTransitions>0;){let n=b.ruleToStartState[e].removeTransition(b.ruleToStartState[e].numberOfTransitions-1);t.addTransition(n)}b.ruleToStartState[e].addTransition(new x.EpsilonTransition(t)),o.addTransition(new x.EpsilonTransition(n));let a=new m.BasicState;b.addState(a),a.addTransition(new c.AtomTransition(o,b.ruleToTokenType[e])),t.addTransition(new x.EpsilonTransition(a))}this.deserializationOptions.isVerifyATN&&this.verifyATN(b)}if(this.deserializationOptions.isOptimize){for(;;){let e=0;e+=X.inlineSetRules(b),e+=X.combineChainedEpsilons(b);let t=0===b.grammarType;if(e+=X.optimizeSets(b,t),0===e)break}this.deserializationOptions.isVerifyATN&&this.verifyATN(b)}return X.identifyTailCalls(b),b}deserializeSets(e,t,n,i){let o=X.toInt(e[t++]);for(let a=0;a<o;a++){let o=X.toInt(e[t]);t++;let a=new f.IntervalSet;n.push(a),0!==X.toInt(e[t++])&&a.add(-1);for(let n=0;n<o;n++){let n=i.readUnicode(e,t);t+=i.size;let o=i.readUnicode(e,t);t+=i.size,a.add(n,o)}}return t}markPrecedenceDecisions(e){let t=new Map;for(let n of e.states)if(n instanceof V.StarLoopEntryState&&e.ruleToStartState[n.ruleIndex].isPrecedenceRule){let i=n.transition(n.numberOfTransitions-1).target;i instanceof N.LoopEndState&&i.epsilonOnlyTransitions&&i.transition(0).target instanceof w.RuleStopState&&(t.set(n.ruleIndex,n),n.precedenceRuleDecision=!0,n.precedenceLoopbackStates=new h.BitSet(e.states.length))}for(let n of t)for(let t of e.ruleToStopState[n[0]].getTransitions()){if(1!==t.serializationType)continue;-1===t.outermostPrecedenceReturn&&n[1].precedenceLoopbackStates.set(t.target.stateNumber)}}verifyATN(e){for(let t of e.states)if(this.checkCondition(null!=t,"ATN states should not be null."),t.stateType!==d.ATNStateType.INVALID_TYPE){if(this.checkCondition(t.onlyHasEpsilonTransitions||t.numberOfTransitions<=1),t instanceof v.PlusBlockStartState&&this.checkCondition(null!=t.loopBackState),t instanceof V.StarLoopEntryState){let e=t;if(this.checkCondition(null!=e.loopBackState),this.checkCondition(2===e.numberOfTransitions),e.transition(0).target instanceof H.StarBlockStartState)this.checkCondition(e.transition(1).target instanceof N.LoopEndState),this.checkCondition(!e.nonGreedy);else{if(!(e.transition(0).target instanceof N.LoopEndState))throw new Error("IllegalStateException");this.checkCondition(e.transition(1).target instanceof H.StarBlockStartState),this.checkCondition(e.nonGreedy)}}if(t instanceof Y.StarLoopbackState&&(this.checkCondition(1===t.numberOfTransitions),this.checkCondition(t.transition(0).target instanceof V.StarLoopEntryState)),t instanceof N.LoopEndState&&this.checkCondition(null!=t.loopBackState),t instanceof U.RuleStartState&&this.checkCondition(null!=t.stopState),t instanceof T.BlockStartState&&this.checkCondition(null!=t.endState),t instanceof p.BlockEndState&&this.checkCondition(null!=t.startState),t instanceof b.DecisionState){let e=t;this.checkCondition(e.numberOfTransitions<=1||e.decision>=0)}else this.checkCondition(t.numberOfTransitions<=1||t instanceof w.RuleStopState)}}checkCondition(e,t){if(!e)throw new Error("IllegalStateException: "+t)}static inlineSetRules(e){let t=0,n=new Array(e.ruleToStartState.length);for(let t=0;t<e.ruleToStartState.length;t++){let i=e.ruleToStartState[t];for(;i.onlyHasEpsilonTransitions&&1===i.numberOfOptimizedTransitions&&1===i.getOptimizedTransition(0).serializationType;)i=i.getOptimizedTransition(0).target;if(1!==i.numberOfOptimizedTransitions)continue;let o=i.getOptimizedTransition(0),a=o.target;if(!o.isEpsilon&&a.onlyHasEpsilonTransitions&&1===a.numberOfOptimizedTransitions&&a.getOptimizedTransition(0).target instanceof w.RuleStopState)switch(o.serializationType){case 5:case 2:case 7:n[t]=o;break;case 8:case 9:default:continue}}for(let i of e.states){if(i.ruleIndex<0)continue;let o;for(let a=0;a<i.numberOfOptimizedTransitions;a++){let r=i.getOptimizedTransition(a);if(!(r instanceof q.RuleTransition)){null!=o&&o.push(r);continue}let l=r,s=n[l.target.ruleIndex];if(null==s){null!=o&&o.push(r);continue}if(null==o){o=[];for(let e=0;e<a;e++)o.push(i.getOptimizedTransition(a))}t++;let d=l.followState,u=new m.BasicState;switch(u.setRuleIndex(d.ruleIndex),e.addState(u),o.push(new x.EpsilonTransition(u)),s.serializationType){case 5:u.addTransition(new c.AtomTransition(d,s._label));break;case 2:u.addTransition(new B.RangeTransition(d,s.from,s.to));break;case 7:u.addTransition(new j.SetTransition(d,s.label));break;default:throw new Error("UnsupportedOperationException")}}if(null!=o){if(i.isOptimized)for(;i.numberOfOptimizedTransitions>0;)i.removeOptimizedTransition(i.numberOfOptimizedTransitions-1);for(let e of o)i.addOptimizedTransition(e)}}return D.ParserATNSimulator.debug&&console.log("ATN runtime optimizer removed "+t+" rule invocations by inlining sets."),t}static combineChainedEpsilons(e){let t=0;for(let n of e.states){if(!n.onlyHasEpsilonTransitions||n instanceof w.RuleStopState)continue;let e;e:for(let i=0;i<n.numberOfOptimizedTransitions;i++){let o=n.getOptimizedTransition(i),a=o.target;if(1===o.serializationType&&-1===o.outermostPrecedenceReturn&&a.stateType===d.ATNStateType.BASIC&&a.onlyHasEpsilonTransitions){for(let t=0;t<a.numberOfOptimizedTransitions;t++)if(1!==a.getOptimizedTransition(t).serializationType||-1!==a.getOptimizedTransition(t).outermostPrecedenceReturn){null!=e&&e.push(o);continue e}if(t++,null==e){e=[];for(let t=0;t<i;t++)e.push(n.getOptimizedTransition(t))}for(let t=0;t<a.numberOfOptimizedTransitions;t++){let n=a.getOptimizedTransition(t).target;e.push(new x.EpsilonTransition(n))}}else null!=e&&e.push(o)}if(null!=e){if(n.isOptimized)for(;n.numberOfOptimizedTransitions>0;)n.removeOptimizedTransition(n.numberOfOptimizedTransitions-1);for(let t of e)n.addOptimizedTransition(t)}}return D.ParserATNSimulator.debug&&console.log("ATN runtime optimizer removed "+t+" transitions by combining chained epsilon transitions."),t}static optimizeSets(e,t){if(t)return 0;let n=0,i=e.decisionToState;for(let t of i){let i=new f.IntervalSet;for(let e=0;e<t.numberOfOptimizedTransitions;e++){let n=t.getOptimizedTransition(e);if(!(n instanceof x.EpsilonTransition))continue;if(1!==n.target.numberOfOptimizedTransitions)continue;let o=n.target.getOptimizedTransition(0);o.target instanceof p.BlockEndState&&(o instanceof R.NotSetTransition||(o instanceof c.AtomTransition||o instanceof B.RangeTransition||o instanceof j.SetTransition)&&i.add(e))}if(i.size<=1)continue;let o=[];for(let e=0;e<t.numberOfOptimizedTransitions;e++)i.contains(e)||o.push(t.getOptimizedTransition(e));let a,r=t.getOptimizedTransition(i.minElement).target.getOptimizedTransition(0).target,l=new f.IntervalSet;for(let e of i.intervals)for(let n=e.a;n<=e.b;n++){let e=t.getOptimizedTransition(n).target.getOptimizedTransition(0);if(e instanceof R.NotSetTransition)throw new Error("Not yet implemented.");l.addAll(e.label)}if(1===l.intervals.length)if(1===l.size)a=new c.AtomTransition(r,l.minElement);else{let e=l.intervals[0];a=new B.RangeTransition(r,e.a,e.b)}else a=new j.SetTransition(r,l);let s=new m.BasicState;if(s.setRuleIndex(t.ruleIndex),e.addState(s),s.addTransition(a),o.push(new x.EpsilonTransition(s)),n+=t.numberOfOptimizedTransitions-o.length,t.isOptimized)for(;t.numberOfOptimizedTransitions>0;)t.removeOptimizedTransition(t.numberOfOptimizedTransitions-1);for(let e of o)t.addOptimizedTransition(e)}return D.ParserATNSimulator.debug&&console.log("ATN runtime optimizer removed "+n+" paths by collapsing sets."),n}static identifyTailCalls(e){for(let t of e.states){for(let n=0;n<t.numberOfTransitions;n++){let i=t.transition(n);i instanceof q.RuleTransition&&(i.tailCall=this.testTailCall(e,i,!1),i.optimizedTailCall=this.testTailCall(e,i,!0))}if(t.isOptimized)for(let n=0;n<t.numberOfOptimizedTransitions;n++){let i=t.getOptimizedTransition(n);i instanceof q.RuleTransition&&(i.tailCall=this.testTailCall(e,i,!1),i.optimizedTailCall=this.testTailCall(e,i,!0))}}}static testTailCall(e,t,n){if(!n&&t.tailCall)return!0;if(n&&t.optimizedTailCall)return!0;let i=new h.BitSet(e.states.length),o=[];for(o.push(t.followState);;){let e=o.pop();if(!e)break;if(i.get(e.stateNumber))continue;if(e instanceof w.RuleStopState)continue;if(!e.onlyHasEpsilonTransitions)return!1;let t=n?e.numberOfOptimizedTransitions:e.numberOfTransitions;for(let i=0;i<t;i++){let t=n?e.getOptimizedTransition(i):e.transition(i);if(1!==t.serializationType)return!1;o.push(t.target)}}return!0}static toInt(e){return e}static toInt32(e,t){return(e[t]|e[t+1]<<16)>>>0}static toUUID(e,t){let n=X.toInt32(e,t),i=X.toInt32(e,t+2),o=X.toInt32(e,t+4),a=X.toInt32(e,t+6);return new W.UUID(a,o,i,n)}edgeFactory(e,t,n,i,o,r,l,s){let d=e.states[i];switch(t){case 1:return new x.EpsilonTransition(d);case 2:return 0!==l?new B.RangeTransition(d,z.Token.EOF,r):new B.RangeTransition(d,o,r);case 3:return new q.RuleTransition(e.states[o],r,l,d);case 4:return new F.PredicateTransition(d,o,r,0!==l);case 10:return new P.PrecedencePredicateTransition(d,o);case 5:return 0!==l?new c.AtomTransition(d,z.Token.EOF):new c.AtomTransition(d,o);case 6:return new a.ActionTransition(d,o,r,0!==l);case 7:return new j.SetTransition(d,s[o]);case 8:return new R.NotSetTransition(d,s[o]);case 9:return new K.WildcardTransition(d)}throw new Error("The specified transition type is not valid.")}stateFactory(e,t){let n;switch(e){case d.ATNStateType.INVALID_TYPE:return new k.InvalidState;case d.ATNStateType.BASIC:n=new m.BasicState;break;case d.ATNStateType.RULE_START:n=new U.RuleStartState;break;case d.ATNStateType.BLOCK_START:n=new u.BasicBlockStartState;break;case d.ATNStateType.PLUS_BLOCK_START:n=new v.PlusBlockStartState;break;case d.ATNStateType.STAR_BLOCK_START:n=new H.StarBlockStartState;break;case d.ATNStateType.TOKEN_START:n=new G.TokensStartState;break;case d.ATNStateType.RULE_STOP:n=new w.RuleStopState;break;case d.ATNStateType.BLOCK_END:n=new p.BlockEndState;break;case d.ATNStateType.STAR_LOOP_BACK:n=new Y.StarLoopbackState;break;case d.ATNStateType.STAR_LOOP_ENTRY:n=new V.StarLoopEntryState;break;case d.ATNStateType.PLUS_LOOP_BACK:n=new M.PlusLoopbackState;break;case d.ATNStateType.LOOP_END:n=new N.LoopEndState;break;default:throw new Error(`The specified state type ${e} is not valid.`)}return n.ruleIndex=t,n}lexerActionFactory(e,t,n){switch(e){case 0:return new S.LexerChannelAction(t);case 1:return new y.LexerCustomAction(t,n);case 2:return new C.LexerModeAction(t);case 3:return E.LexerMoreAction.INSTANCE;case 4:return A.LexerPopModeAction.INSTANCE;case 5:return new O.LexerPushModeAction(t);case 6:return _.LexerSkipAction.INSTANCE;case 7:return new I.LexerTypeAction(t);default:throw new Error(`The specified lexer action type ${e} is not valid.`)}}}X.BASE_SERIALIZED_UUID=W.UUID.fromString("E4178468-DF95-44D0-AD87-F22A5D5FB6D3"),X.ADDED_LEXER_ACTIONS=W.UUID.fromString("AB35191A-1603-487E-B75A-479B831EAF6D"),X.ADDED_UNICODE_SMP=W.UUID.fromString("C23FEA89-0605-4f51-AFB8-058BCAB8C91B"),X.SUPPORTED_UUIDS=[X.BASE_SERIALIZED_UUID,X.ADDED_LEXER_ACTIONS,X.ADDED_UNICODE_SMP],X.SERIALIZED_UUID=X.ADDED_UNICODE_SMP,i([L.NotNull],X.prototype,"deserializationOptions",void 0),i([o(0,L.NotNull)],X.prototype,"deserialize",null),i([o(0,L.NotNull)],X.prototype,"markPrecedenceDecisions",null),i([L.NotNull,o(0,L.NotNull)],X.prototype,"edgeFactory",null),t.ATNDeserializer=X},function(e,t){var n,i,o=e.exports={};function a(){throw new Error("setTimeout has not been defined")}function r(){throw new Error("clearTimeout has not been defined")}function l(e){if(n===setTimeout)return setTimeout(e,0);if((n===a||!n)&&setTimeout)return n=setTimeout,setTimeout(e,0);try{return n(e,0)}catch(t){try{return n.call(null,e,0)}catch(t){return n.call(this,e,0)}}}!function(){try{n="function"==typeof setTimeout?setTimeout:a}catch(e){n=a}try{i="function"==typeof clearTimeout?clearTimeout:r}catch(e){i=r}}();var s,d=[],c=!1,u=-1;function m(){c&&s&&(c=!1,s.length?d=s.concat(d):u=-1,d.length&&h())}function h(){if(!c){var e=l(m);c=!0;for(var t=d.length;t;){for(s=d,d=[];++u<t;)s&&s[u].run();u=-1,t=d.length}s=null,c=!1,function(e){if(i===clearTimeout)return clearTimeout(e);if((i===r||!i)&&clearTimeout)return i=clearTimeout,clearTimeout(e);try{i(e)}catch(t){try{return i.call(null,e)}catch(t){return i.call(this,e)}}}(e)}}function p(e,t){this.fun=e,this.array=t}function T(){}o.nextTick=function(e){var t=new Array(arguments.length-1);if(arguments.length>1)for(var n=1;n<arguments.length;n++)t[n-1]=arguments[n];d.push(new p(e,t)),1!==d.length||c||l(h)},p.prototype.run=function(){this.fun.apply(null,this.array)},o.title="browser",o.browser=!0,o.env={},o.argv=[],o.version="",o.versions={},o.on=T,o.addListener=T,o.once=T,o.off=T,o.removeListener=T,o.removeAllListeners=T,o.emit=T,o.prependListener=T,o.prependOnceListener=T,o.listeners=function(e){return[]},o.binding=function(e){throw new Error("process.binding is not supported")},o.cwd=function(){return"/"},o.chdir=function(e){throw new Error("process.chdir is not supported")},o.umask=function(){return 0}},function(e,t,n){"use strict";
/*!
 * Copyright 2016 The ANTLR Project. All rights reserved.
 * Licensed under the BSD-3-Clause license. See LICENSE file in the project root for license information.
 */var i=this&&this.__decorate||function(e,t,n,i){var o,a=arguments.length,r=a<3?t:null===i?i=Object.getOwnPropertyDescriptor(t,n):i;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)r=Reflect.decorate(e,t,n,i);else for(var l=e.length-1;l>=0;l--)(o=e[l])&&(r=(a<3?o(r):a>3?o(t,n,r):o(t,n))||r);return a>3&&r&&Object.defineProperty(t,n,r),r},o=this&&this.__param||function(e,t){return function(n,i){t(n,i,e)}};Object.defineProperty(t,"__esModule",{value:!0});const a=n(10),r=n(0),l=n(3);let s=class e{constructor(t,n,i=e.EMPTY_SOURCE,o=l.Token.DEFAULT_CHANNEL,a=0,r=0){this._line=0,this._charPositionInLine=-1,this._channel=l.Token.DEFAULT_CHANNEL,this.index=-1,this._text=n,this._type=t,this.source=i,this._channel=o,this.start=a,this.stop=r,null!=i.source&&(this._line=i.source.line,this._charPositionInLine=i.source.charPositionInLine)}static fromToken(t){let n=new e(t.type,void 0,e.EMPTY_SOURCE,t.channel,t.startIndex,t.stopIndex);return n._line=t.line,n.index=t.tokenIndex,n._charPositionInLine=t.charPositionInLine,t instanceof e?(n._text=t.text,n.source=t.source):(n._text=t.text,n.source={source:t.tokenSource,stream:t.inputStream}),n}get type(){return this._type}set type(e){this._type=e}get line(){return this._line}set line(e){this._line=e}get text(){if(null!=this._text)return this._text;let e=this.inputStream;if(null==e)return;let t=e.size;return this.start<t&&this.stop<t?e.getText(a.Interval.of(this.start,this.stop)):"<EOF>"}set text(e){this._text=e}get charPositionInLine(){return this._charPositionInLine}set charPositionInLine(e){this._charPositionInLine=e}get channel(){return this._channel}set channel(e){this._channel=e}get startIndex(){return this.start}set startIndex(e){this.start=e}get stopIndex(){return this.stop}set stopIndex(e){this.stop=e}get tokenIndex(){return this.index}set tokenIndex(e){this.index=e}get tokenSource(){return this.source.source}get inputStream(){return this.source.stream}toString(e){let t="";this._channel>0&&(t=",channel="+this._channel);let n=this.text;null!=n?(n=n.replace(/\n/g,"\\n"),n=n.replace(/\r/g,"\\r"),n=n.replace(/\t/g,"\\t")):n="<no text>";let i=String(this._type);return e&&(i=e.vocabulary.getDisplayName(this._type)),"[@"+this.tokenIndex+","+this.start+":"+this.stop+"='"+n+"',<"+i+">"+t+","+this._line+":"+this.charPositionInLine+"]"}};s.EMPTY_SOURCE={source:void 0,stream:void 0},i([r.NotNull],s.prototype,"source",void 0),i([r.Override],s.prototype,"type",null),i([r.Override],s.prototype,"line",null),i([r.Override],s.prototype,"text",null),i([r.Override],s.prototype,"charPositionInLine",null),i([r.Override],s.prototype,"channel",null),i([r.Override],s.prototype,"startIndex",null),i([r.Override],s.prototype,"stopIndex",null),i([r.Override],s.prototype,"tokenIndex",null),i([r.Override],s.prototype,"tokenSource",null),i([r.Override],s.prototype,"inputStream",null),i([r.Override],s.prototype,"toString",null),i([o(0,r.NotNull)],s,"fromToken",null),s=i([o(2,r.NotNull)],s),t.CommonToken=s},function(e,t,n){"use strict";
/*!
 * Copyright 2016 The ANTLR Project. All rights reserved.
 * Licensed under the BSD-3-Clause license. See LICENSE file in the project root for license information.
 */var i=this&&this.__decorate||function(e,t,n,i){var o,a=arguments.length,r=a<3?t:null===i?i=Object.getOwnPropertyDescriptor(t,n):i;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)r=Reflect.decorate(e,t,n,i);else for(var l=e.length-1;l>=0;l--)(o=e[l])&&(r=(a<3?o(r):a>3?o(t,n,r):o(t,n))||r);return a>3&&r&&Object.defineProperty(t,n,r),r};Object.defineProperty(t,"__esModule",{value:!0});const o=n(28),a=n(21),r=n(42),l=n(6),s=n(44),d=n(22),c=n(0),u=n(15),m=n(14),h=n(54),p=n(27),T=n(12),b=n(11);class g{hashCode(e){return e.state^e.alt}equals(e,t){return e.state===t.state&&e.alt===t.alt}}function x(e){return e?new o.Array2DHashMap(e):new o.Array2DHashMap(g.INSTANCE)}g.INSTANCE=new g;class f{constructor(e,t){this._uniqueAlt=0,this._hasSemanticContext=!1,this._dipsIntoOuterContext=!1,this.outermostConfigSet=!1,this.cachedHashCode=-1,e?(t?(this.mergedConfigs=void 0,this.unmerged=void 0):e.isReadOnly?(this.mergedConfigs=x(),this.unmerged=[]):(this.mergedConfigs=x(e.mergedConfigs),this.unmerged=e.unmerged.slice(0)),this.configs=e.configs.slice(0),this._dipsIntoOuterContext=e._dipsIntoOuterContext,this._hasSemanticContext=e._hasSemanticContext,this.outermostConfigSet=e.outermostConfigSet,!t&&e.isReadOnly||(this._uniqueAlt=e._uniqueAlt,this._conflictInfo=e._conflictInfo)):(this.mergedConfigs=x(),this.unmerged=[],this.configs=[],this._uniqueAlt=l.ATN.INVALID_ALT_NUMBER)}getRepresentedAlternatives(){if(null!=this._conflictInfo)return this._conflictInfo.conflictedAlts.clone();let e=new d.BitSet;for(let t of this)e.set(t.alt);return e}get isReadOnly(){return null==this.mergedConfigs}get isOutermostConfigSet(){return this.outermostConfigSet}set isOutermostConfigSet(e){if(this.outermostConfigSet&&!e)throw new Error("IllegalStateException");T(!e||!this._dipsIntoOuterContext),this.outermostConfigSet=e}getStates(){let e=new a.Array2DHashSet(u.ObjectEqualityComparator.INSTANCE);for(let t of this.configs)e.add(t.state);return e}optimizeConfigs(e){if(0!==this.configs.length)for(let t of this.configs)t.context=e.atn.getCachedContext(t.context)}clone(e){let t=new f(this,e);return!e&&this.isReadOnly&&t.addAll(this.configs),t}get size(){return this.configs.length}get isEmpty(){return 0===this.configs.length}contains(e){if(!(e instanceof s.ATNConfig))return!1;if(this.mergedConfigs&&this.unmerged){let t=e,n=this.getKey(t),i=this.mergedConfigs.get(n);if(null!=i&&this.canMerge(t,n,i))return i.contains(t);for(let t of this.unmerged)if(t.contains(e))return!0}else for(let t of this.configs)if(t.contains(e))return!0;return!1}*[Symbol.iterator](){yield*this.configs}toArray(){return this.configs}add(e,t){if(this.ensureWritable(),!this.mergedConfigs||!this.unmerged)throw new Error("Covered by ensureWritable but duplicated here for strict null check limitation");let n;T(!this.outermostConfigSet||!e.reachesIntoOuterContext),null==t&&(t=h.PredictionContextCache.UNCACHED);let i=this.getKey(e),o=this.mergedConfigs.get(i);if(n=null==o,null!=o&&this.canMerge(e,i,o)){o.outerContextDepth=Math.max(o.outerContextDepth,e.outerContextDepth),e.isPrecedenceFilterSuppressed&&(o.isPrecedenceFilterSuppressed=!0);let n=m.PredictionContext.join(o.context,e.context,t);return this.updatePropertiesForMergedConfig(e),o.context===n?!1:(o.context=n,!0)}for(let o=0;o<this.unmerged.length;o++){let a=this.unmerged[o];if(this.canMerge(e,i,a)){a.outerContextDepth=Math.max(a.outerContextDepth,e.outerContextDepth),e.isPrecedenceFilterSuppressed&&(a.isPrecedenceFilterSuppressed=!0);let r=m.PredictionContext.join(a.context,e.context,t);return this.updatePropertiesForMergedConfig(e),a.context===r?!1:(a.context=r,n&&(this.mergedConfigs.put(i,a),this.unmerged.splice(o,1)),!0)}}return this.configs.push(e),n?this.mergedConfigs.put(i,e):this.unmerged.push(e),this.updatePropertiesForAddedConfig(e),!0}updatePropertiesForMergedConfig(e){this._dipsIntoOuterContext=this._dipsIntoOuterContext||e.reachesIntoOuterContext,T(!this.outermostConfigSet||!this._dipsIntoOuterContext)}updatePropertiesForAddedConfig(e){1===this.configs.length?this._uniqueAlt=e.alt:this._uniqueAlt!==e.alt&&(this._uniqueAlt=l.ATN.INVALID_ALT_NUMBER),this._hasSemanticContext=this._hasSemanticContext||!p.SemanticContext.NONE.equals(e.semanticContext),this._dipsIntoOuterContext=this._dipsIntoOuterContext||e.reachesIntoOuterContext,T(!this.outermostConfigSet||!this._dipsIntoOuterContext)}canMerge(e,t,n){return e.state.stateNumber===n.state.stateNumber&&(t.alt===n.alt&&e.semanticContext.equals(n.semanticContext))}getKey(e){return{state:e.state.stateNumber,alt:e.alt}}containsAll(e){for(let t of e){if(!(t instanceof s.ATNConfig))return!1;if(!this.contains(t))return!1}return!0}addAll(e,t){this.ensureWritable();let n=!1;for(let i of e)this.add(i,t)&&(n=!0);return n}clear(){if(this.ensureWritable(),!this.mergedConfigs||!this.unmerged)throw new Error("Covered by ensureWritable but duplicated here for strict null check limitation");this.mergedConfigs.clear(),this.unmerged.length=0,this.configs.length=0,this._dipsIntoOuterContext=!1,this._hasSemanticContext=!1,this._uniqueAlt=l.ATN.INVALID_ALT_NUMBER,this._conflictInfo=void 0}equals(e){return this===e||e instanceof f&&(this.outermostConfigSet===e.outermostConfigSet&&b.equals(this._conflictInfo,e._conflictInfo)&&r.ArrayEqualityComparator.INSTANCE.equals(this.configs,e.configs))}hashCode(){if(this.isReadOnly&&-1!==this.cachedHashCode)return this.cachedHashCode;let e=1;return e=5*e^(this.outermostConfigSet?1:0),e=5*e^r.ArrayEqualityComparator.INSTANCE.hashCode(this.configs),this.isReadOnly&&(this.cachedHashCode=e),e}toString(e){null==e&&(e=!1);let t="",n=this.configs.slice(0);n.sort((e,t)=>e.alt!==t.alt?e.alt-t.alt:e.state.stateNumber!==t.state.stateNumber?e.state.stateNumber-t.state.stateNumber:e.semanticContext.toString().localeCompare(t.semanticContext.toString())),t+="[";for(let i=0;i<n.length;i++)i>0&&(t+=", "),t+=n[i].toString(void 0,!0,e);return t+="]",this._hasSemanticContext&&(t+=",hasSemanticContext="+this._hasSemanticContext),this._uniqueAlt!==l.ATN.INVALID_ALT_NUMBER&&(t+=",uniqueAlt="+this._uniqueAlt),null!=this._conflictInfo&&(t+=",conflictingAlts="+this._conflictInfo.conflictedAlts,this._conflictInfo.isExact||(t+="*")),this._dipsIntoOuterContext&&(t+=",dipsIntoOuterContext"),t.toString()}get uniqueAlt(){return this._uniqueAlt}get hasSemanticContext(){return this._hasSemanticContext}set hasSemanticContext(e){this.ensureWritable(),this._hasSemanticContext=e}get conflictInfo(){return this._conflictInfo}set conflictInfo(e){this.ensureWritable(),this._conflictInfo=e}get conflictingAlts(){if(null!=this._conflictInfo)return this._conflictInfo.conflictedAlts}get isExactConflict(){return null!=this._conflictInfo&&this._conflictInfo.isExact}get dipsIntoOuterContext(){return this._dipsIntoOuterContext}get(e){return this.configs[e]}ensureWritable(){if(this.isReadOnly)throw new Error("This ATNConfigSet is read only.")}}i([c.NotNull],f.prototype,"getRepresentedAlternatives",null),i([c.Override],f.prototype,"size",null),i([c.Override],f.prototype,"isEmpty",null),i([c.Override],f.prototype,"contains",null),i([c.Override],f.prototype,Symbol.iterator,null),i([c.Override],f.prototype,"toArray",null),i([c.Override],f.prototype,"containsAll",null),i([c.Override],f.prototype,"clear",null),i([c.Override],f.prototype,"equals",null),i([c.Override],f.prototype,"hashCode",null),t.ATNConfigSet=f},function(e,t,n){"use strict";
/*!
 * Copyright 2016 The ANTLR Project. All rights reserved.
 * Licensed under the BSD-3-Clause license. See LICENSE file in the project root for license information.
 */var i=this&&this.__decorate||function(e,t,n,i){var o,a=arguments.length,r=a<3?t:null===i?i=Object.getOwnPropertyDescriptor(t,n):i;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)r=Reflect.decorate(e,t,n,i);else for(var l=e.length-1;l>=0;l--)(o=e[l])&&(r=(a<3?o(r):a>3?o(t,n,r):o(t,n))||r);return a>3&&r&&Object.defineProperty(t,n,r),r},o=this&&this.__param||function(e,t){return function(n,i){t(n,i,e)}};Object.defineProperty(t,"__esModule",{value:!0});const a=n(85),r=n(55),l=n(0),s=n(3),d=n(11);class c{constructor(){this._listeners=[a.ConsoleErrorListener.INSTANCE],this._stateNumber=-1}getTokenTypeMap(){let e=this.vocabulary,t=c.tokenTypeMapCache.get(e);if(null==t){let n=new Map;for(let t=0;t<=this.atn.maxTokenType;t++){let i=e.getLiteralName(t);null!=i&&n.set(i,t);let o=e.getSymbolicName(t);null!=o&&n.set(o,t)}n.set("EOF",s.Token.EOF),t=n,c.tokenTypeMapCache.set(e,t)}return t}getRuleIndexMap(){let e=this.ruleNames;if(null==e)throw new Error("The current recognizer does not provide a list of rule names.");let t=c.ruleIndexMapCache.get(e);return null==t&&(t=d.toMap(e),c.ruleIndexMapCache.set(e,t)),t}getTokenType(e){let t=this.getTokenTypeMap().get(e);return null!=t?t:s.Token.INVALID_TYPE}get serializedATN(){throw new Error("there is no serialized ATN")}get atn(){return this._interp.atn}get interpreter(){return this._interp}set interpreter(e){this._interp=e}get parseInfo(){return Promise.resolve(void 0)}getErrorHeader(e){let t=e.getOffendingToken();return t?"line "+t.line+":"+t.charPositionInLine:""}addErrorListener(e){if(!e)throw new TypeError("listener must not be null");this._listeners.push(e)}removeErrorListener(e){let t=this._listeners.indexOf(e);-1!==t&&this._listeners.splice(t,1)}removeErrorListeners(){this._listeners.length=0}getErrorListeners(){return this._listeners.slice(0)}getErrorListenerDispatch(){return new r.ProxyErrorListener(this.getErrorListeners())}sempred(e,t,n){return!0}precpred(e,t){return!0}action(e,t,n){}get state(){return this._stateNumber}set state(e){this._stateNumber=e}}c.EOF=-1,c.tokenTypeMapCache=new WeakMap,c.ruleIndexMapCache=new WeakMap,i([l.SuppressWarnings("serial"),l.NotNull],c.prototype,"_listeners",void 0),i([l.NotNull],c.prototype,"getTokenTypeMap",null),i([l.NotNull],c.prototype,"getRuleIndexMap",null),i([l.NotNull],c.prototype,"serializedATN",null),i([l.NotNull],c.prototype,"atn",null),i([l.NotNull,o(0,l.NotNull)],c.prototype,"interpreter",null),i([l.NotNull,o(0,l.NotNull)],c.prototype,"getErrorHeader",null),i([o(0,l.NotNull)],c.prototype,"addErrorListener",null),i([o(0,l.NotNull)],c.prototype,"removeErrorListener",null),i([l.NotNull],c.prototype,"getErrorListeners",null),t.Recognizer=c},function(e,t,n){"use strict";
/*!
 * Copyright 2016 The ANTLR Project. All rights reserved.
 * Licensed under the BSD-3-Clause license. See LICENSE file in the project root for license information.
 */var i=this&&this.__decorate||function(e,t,n,i){var o,a=arguments.length,r=a<3?t:null===i?i=Object.getOwnPropertyDescriptor(t,n):i;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)r=Reflect.decorate(e,t,n,i);else for(var l=e.length-1;l>=0;l--)(o=e[l])&&(r=(a<3?o(r):a>3?o(t,n,r):o(t,n))||r);return a>3&&r&&Object.defineProperty(t,n,r),r};Object.defineProperty(t,"__esModule",{value:!0});const o=n(17),a=n(8),r=n(0);class l extends o.ATNState{get nonStopStateNumber(){return-1}get stateType(){return a.ATNStateType.RULE_STOP}}i([r.Override],l.prototype,"nonStopStateNumber",null),i([r.Override],l.prototype,"stateType",null),t.RuleStopState=l},function(e,t,n){"use strict";
/*!
 * Copyright 2016 The ANTLR Project. All rights reserved.
 * Licensed under the BSD-3-Clause license. See LICENSE file in the project root for license information.
 */var i=this&&this.__decorate||function(e,t,n,i){var o,a=arguments.length,r=a<3?t:null===i?i=Object.getOwnPropertyDescriptor(t,n):i;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)r=Reflect.decorate(e,t,n,i);else for(var l=e.length-1;l>=0;l--)(o=e[l])&&(r=(a<3?o(r):a>3?o(t,n,r):o(t,n))||r);return a>3&&r&&Object.defineProperty(t,n,r),r},o=this&&this.__param||function(e,t){return function(n,i){t(n,i,e)}};Object.defineProperty(t,"__esModule",{value:!0});const a=n(0);let r=class{constructor(e,t,n,i,o,a){this.decision=e,this.fullCtx=a,this.stopIndex=o,this.input=n,this.startIndex=i,this.state=t}};i([a.NotNull],r.prototype,"input",void 0),r=i([o(2,a.NotNull)],r),t.DecisionEventInfo=r},function(e,t,n){"use strict";
/*!
 * Copyright 2016 The ANTLR Project. All rights reserved.
 * Licensed under the BSD-3-Clause license. See LICENSE file in the project root for license information.
 */var i=this&&this.__decorate||function(e,t,n,i){var o,a=arguments.length,r=a<3?t:null===i?i=Object.getOwnPropertyDescriptor(t,n):i;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)r=Reflect.decorate(e,t,n,i);else for(var l=e.length-1;l>=0;l--)(o=e[l])&&(r=(a<3?o(r):a>3?o(t,n,r):o(t,n))||r);return a>3&&r&&Object.defineProperty(t,n,r),r},o=this&&this.__param||function(e,t){return function(n,i){t(n,i,e)}};Object.defineProperty(t,"__esModule",{value:!0});const a=n(82),r=n(6),l=n(44),s=n(36),d=n(45),c=n(46),u=n(10),m=n(19),h=n(18),p=n(128),T=n(47),b=n(0),g=n(130),x=n(14),f=n(38),k=n(3),S=n(12);let y=class e extends d.ATNSimulator{constructor(t,n){super(t),this.optimize_tail_calls=!0,this.startIndex=-1,this._line=1,this._charPositionInLine=0,this.mode=h.Lexer.DEFAULT_MODE,this.prevAccept=new e.SimState,this.recog=n}copyState(e){this._charPositionInLine=e.charPositionInLine,this._line=e._line,this.mode=e.mode,this.startIndex=e.startIndex}match(t,n){e.match_calls++,this.mode=n;let i=t.mark();try{this.startIndex=t.index,this.prevAccept.reset();let e=this.atn.modeToDFA[n].s0;return null==e?this.matchATN(t):this.execATN(t,e)}finally{t.release(i)}}reset(){this.prevAccept.reset(),this.startIndex=-1,this._line=1,this._charPositionInLine=0,this.mode=h.Lexer.DEFAULT_MODE}matchATN(t){let n=this.atn.modeToStartState[this.mode];e.debug&&console.log(`matchATN mode ${this.mode} start: ${n}`);let i=this.mode,o=this.computeStartState(t,n),a=o.hasSemanticContext;a&&(o.hasSemanticContext=!1);let r=this.addDFAState(o);if(!a){let e=this.atn.modeToDFA[this.mode];e.s0?r=e.s0:e.s0=r}let l=this.execATN(t,r);return e.debug&&console.log("DFA after matchATN: "+this.atn.modeToDFA[i].toLexerString()),l}execATN(t,n){e.debug&&console.log("start state closure="+n.configs),n.isAcceptState&&this.captureSimState(this.prevAccept,t,n);let i=t.LA(1),o=n;for(;;){e.debug&&console.log("execATN loop starting closure: "+o.configs);let n=this.getExistingTargetState(o,i);if(null==n&&(n=this.computeTargetState(t,o,i)),n===d.ATNSimulator.ERROR)break;if(i!==m.IntStream.EOF&&this.consume(t),n.isAcceptState&&(this.captureSimState(this.prevAccept,t,n),i===m.IntStream.EOF))break;i=t.LA(1),o=n}return this.failOrAccept(this.prevAccept,t,o.configs,i)}getExistingTargetState(t,n){let i=t.getTarget(n);return e.debug&&null!=i&&console.log("reuse state "+t.stateNumber+" edge to "+i.stateNumber),i}computeTargetState(e,t,n){let i=new g.OrderedATNConfigSet;return this.getReachableConfigSet(e,t.configs,i,n),i.isEmpty?(i.hasSemanticContext||this.addDFAEdge(t,n,d.ATNSimulator.ERROR),d.ATNSimulator.ERROR):this.addDFAEdge(t,n,i)}failOrAccept(e,t,n,i){if(null!=e.dfaState){let n=e.dfaState.lexerActionExecutor;return this.accept(t,n,this.startIndex,e.index,e.line,e.charPos),e.dfaState.prediction}if(i===m.IntStream.EOF&&t.index===this.startIndex)return k.Token.EOF;throw new T.LexerNoViableAltException(this.recog,t,this.startIndex,n)}getReachableConfigSet(t,n,i,o){let a=r.ATN.INVALID_ALT_NUMBER;for(let r of n){let n=r.alt===a;if(n&&r.hasPassedThroughNonGreedyDecision)continue;e.debug&&console.log(`testing ${this.getTokenName(o)} at ${r.toString(this.recog,!0)}`);let l=r.state.numberOfOptimizedTransitions;for(let e=0;e<l;e++){let l=r.state.getOptimizedTransition(e),s=this.getReachableTarget(l,o);if(null!=s){let e,l=r.lexerActionExecutor;null!=l?(l=l.fixOffsetBeforeMatch(t.index-this.startIndex),e=r.transform(s,!0,l)):(S(null==r.lexerActionExecutor),e=r.transform(s,!0));let d=o===m.IntStream.EOF;if(this.closure(t,e,i,n,!0,d)){a=r.alt;break}}}}}accept(t,n,i,o,a,r){e.debug&&console.log("ACTION "+n),t.seek(o),this._line=a,this._charPositionInLine=r,null!=n&&null!=this.recog&&n.execute(this.recog,t,i)}getReachableTarget(e,t){if(e.matches(t,h.Lexer.MIN_CHAR_VALUE,h.Lexer.MAX_CHAR_VALUE))return e.target}computeStartState(e,t){let n=x.PredictionContext.EMPTY_FULL,i=new g.OrderedATNConfigSet;for(let o=0;o<t.numberOfTransitions;o++){let a=t.transition(o).target,r=l.ATNConfig.create(a,o+1,n);this.closure(e,r,i,!1,!1,!1)}return i}closure(t,n,i,o,a,r){if(e.debug&&console.log("closure("+n.toString(this.recog,!0)+")"),n.state instanceof f.RuleStopState){e.debug&&(null!=this.recog?console.log(`closure at ${this.recog.ruleNames[n.state.ruleIndex]} rule stop ${n}`):console.log("closure at rule stop "+n));let l=n.context;if(l.isEmpty)return i.add(n),!0;l.hasEmpty&&(i.add(n.transform(n.state,!0,x.PredictionContext.EMPTY_FULL)),o=!0);for(let e=0;e<l.size;e++){let s=l.getReturnState(e);if(s===x.PredictionContext.EMPTY_FULL_STATE_KEY)continue;let d=l.getParent(e),c=this.atn.states[s],u=n.transform(c,!1,d);o=this.closure(t,u,i,o,a,r)}return o}n.state.onlyHasEpsilonTransitions||o&&n.hasPassedThroughNonGreedyDecision||i.add(n);let l=n.state;for(let e=0;e<l.numberOfOptimizedTransitions;e++){let s=l.getOptimizedTransition(e),d=this.getEpsilonTarget(t,n,s,i,a,r);null!=d&&(o=this.closure(t,d,i,o,a,r))}return o}getEpsilonTarget(t,n,i,o,a,r){let l;switch(i.serializationType){case 3:let s=i;if(this.optimize_tail_calls&&s.optimizedTailCall&&!n.context.hasEmpty)l=n.transform(i.target,!0);else{let e=n.context.getChild(s.followState.stateNumber);l=n.transform(i.target,!0,e)}break;case 10:throw new Error("Precedence predicates are not supported in lexers.");case 4:let d=i;e.debug&&console.log("EVAL rule "+d.ruleIndex+":"+d.predIndex),o.hasSemanticContext=!0,l=this.evaluatePredicate(t,d.ruleIndex,d.predIndex,a)?n.transform(i.target,!0):void 0;break;case 6:if(n.context.hasEmpty){let e=p.LexerActionExecutor.append(n.lexerActionExecutor,this.atn.lexerActions[i.actionIndex]);l=n.transform(i.target,!0,e);break}l=n.transform(i.target,!0);break;case 1:l=n.transform(i.target,!0);break;case 5:case 2:case 7:if(r&&i.matches(m.IntStream.EOF,h.Lexer.MIN_CHAR_VALUE,h.Lexer.MAX_CHAR_VALUE)){l=n.transform(i.target,!1);break}l=void 0;break;default:l=void 0}return l}evaluatePredicate(e,t,n,i){if(null==this.recog)return!0;if(!i)return this.recog.sempred(void 0,t,n);let o=this._charPositionInLine,a=this._line,r=e.index,l=e.mark();try{return this.consume(e),this.recog.sempred(void 0,t,n)}finally{this._charPositionInLine=o,this._line=a,e.seek(r),e.release(l)}}captureSimState(e,t,n){e.index=t.index,e.line=this._line,e.charPos=this._charPositionInLine,e.dfaState=n}addDFAEdge(t,n,i){if(i instanceof s.ATNConfigSet){let e=i.hasSemanticContext;e&&(i.hasSemanticContext=!1);let o=this.addDFAState(i);return e||this.addDFAEdge(t,n,o),o}e.debug&&console.log("EDGE "+t+" -> "+i+" upon "+String.fromCharCode(n)),null!=t&&t.setTarget(n,i)}addDFAState(e){S(!e.hasSemanticContext);let t=new c.DFAState(e),n=this.atn.modeToDFA[this.mode].states.get(t);if(null!=n)return n;e.optimizeConfigs(this);let i,o=new c.DFAState(e.clone(!0));for(let t of e)if(t.state instanceof f.RuleStopState){i=t;break}if(null!=i){let e=this.atn.ruleToTokenType[i.state.ruleIndex],t=i.lexerActionExecutor;o.acceptStateInfo=new a.AcceptStateInfo(e,t)}return this.atn.modeToDFA[this.mode].addState(o)}getDFA(e){return this.atn.modeToDFA[e]}getText(e){return e.getText(u.Interval.of(this.startIndex,e.index-1))}get line(){return this._line}set line(e){this._line=e}get charPositionInLine(){return this._charPositionInLine}set charPositionInLine(e){this._charPositionInLine=e}consume(e){e.LA(1)==="\n".charCodeAt(0)?(this._line++,this._charPositionInLine=0):this._charPositionInLine++,e.consume()}getTokenName(e){return-1===e?"EOF":"'"+String.fromCharCode(e)+"'"}};y.match_calls=0,i([b.NotNull],y.prototype,"prevAccept",void 0),i([o(0,b.NotNull)],y.prototype,"copyState",null),i([o(0,b.NotNull)],y.prototype,"match",null),i([b.Override],y.prototype,"reset",null),i([o(0,b.NotNull)],y.prototype,"matchATN",null),i([o(0,b.NotNull),o(1,b.NotNull)],y.prototype,"execATN",null),i([o(0,b.NotNull)],y.prototype,"getExistingTargetState",null),i([b.NotNull,o(0,b.NotNull),o(1,b.NotNull)],y.prototype,"computeTargetState",null),i([o(0,b.NotNull),o(1,b.NotNull),o(2,b.NotNull)],y.prototype,"getReachableConfigSet",null),i([o(0,b.NotNull)],y.prototype,"accept",null),i([b.NotNull,o(0,b.NotNull),o(1,b.NotNull)],y.prototype,"computeStartState",null),i([o(0,b.NotNull),o(1,b.NotNull),o(2,b.NotNull)],y.prototype,"closure",null),i([o(0,b.NotNull),o(1,b.NotNull),o(2,b.NotNull),o(3,b.NotNull)],y.prototype,"getEpsilonTarget",null),i([o(0,b.NotNull)],y.prototype,"evaluatePredicate",null),i([o(0,b.NotNull),o(1,b.NotNull),o(2,b.NotNull)],y.prototype,"captureSimState",null),i([b.NotNull,o(0,b.NotNull)],y.prototype,"addDFAState",null),i([b.NotNull],y.prototype,"getDFA",null),i([b.NotNull,o(0,b.NotNull)],y.prototype,"getText",null),i([o(0,b.NotNull)],y.prototype,"consume",null),i([b.NotNull],y.prototype,"getTokenName",null),y=i([o(0,b.NotNull)],y),t.LexerATNSimulator=y,function(e){e.debug=!1,e.dfa_debug=!1;e.SimState=class{constructor(){this.index=-1,this.line=0,this.charPos=-1}reset(){this.index=-1,this.line=0,this.charPos=-1,this.dfaState=void 0}}}(y=t.LexerATNSimulator||(t.LexerATNSimulator={})),t.LexerATNSimulator=y},function(e,t,n){"use strict";var i=n(116).default;n(121),(t=e.exports=i).default=t},function(e,t,n){"use strict";
/*!
 * Copyright 2016 The ANTLR Project. All rights reserved.
 * Licensed under the BSD-3-Clause license. See LICENSE file in the project root for license information.
 */var i=this&&this.__decorate||function(e,t,n,i){var o,a=arguments.length,r=a<3?t:null===i?i=Object.getOwnPropertyDescriptor(t,n):i;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)r=Reflect.decorate(e,t,n,i);else for(var l=e.length-1;l>=0;l--)(o=e[l])&&(r=(a<3?o(r):a>3?o(t,n,r):o(t,n))||r);return a>3&&r&&Object.defineProperty(t,n,r),r};Object.defineProperty(t,"__esModule",{value:!0});const o=n(0),a=n(5),r=n(15);class l{hashCode(e){return null==e?0:a.MurmurHash.hashCode(e,0)}equals(e,t){if(null==e)return null==t;if(null==t)return!1;if(e.length!==t.length)return!1;for(let n=0;n<e.length;n++)if(!r.ObjectEqualityComparator.INSTANCE.equals(e[n],t[n]))return!1;return!0}}l.INSTANCE=new l,i([o.Override],l.prototype,"hashCode",null),i([o.Override],l.prototype,"equals",null),t.ArrayEqualityComparator=l},function(e,t,n){"use strict";
/*!
 * Copyright 2016 The ANTLR Project. All rights reserved.
 * Licensed under the BSD-3-Clause license. See LICENSE file in the project root for license information.
 */var i=this&&this.__decorate||function(e,t,n,i){var o,a=arguments.length,r=a<3?t:null===i?i=Object.getOwnPropertyDescriptor(t,n):i;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)r=Reflect.decorate(e,t,n,i);else for(var l=e.length-1;l>=0;l--)(o=e[l])&&(r=(a<3?o(r):a>3?o(t,n,r):o(t,n))||r);return a>3&&r&&Object.defineProperty(t,n,r),r},o=this&&this.__param||function(e,t){return function(n,i){t(n,i,e)}};Object.defineProperty(t,"__esModule",{value:!0});const a=n(2),r=n(0);let l=class extends a.RecognitionException{constructor(e,t,n){void 0===n&&(n=e.context),super(e,e.inputStream,n),void 0!==t&&this.setOffendingState(t),this.setOffendingToken(e,e.currentToken)}};l=i([o(0,r.NotNull)],l),t.InputMismatchException=l},function(e,t,n){"use strict";
/*!
 * Copyright 2016 The ANTLR Project. All rights reserved.
 * Licensed under the BSD-3-Clause license. See LICENSE file in the project root for license information.
 */var i=this&&this.__decorate||function(e,t,n,i){var o,a=arguments.length,r=a<3?t:null===i?i=Object.getOwnPropertyDescriptor(t,n):i;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)r=Reflect.decorate(e,t,n,i);else for(var l=e.length-1;l>=0;l--)(o=e[l])&&(r=(a<3?o(r):a>3?o(t,n,r):o(t,n))||r);return a>3&&r&&Object.defineProperty(t,n,r),r},o=this&&this.__param||function(e,t){return function(n,i){t(n,i,e)}};Object.defineProperty(t,"__esModule",{value:!0});const a=n(28),r=n(24),l=n(5),s=n(0),d=n(15),c=n(14),u=n(27),m=n(12);let h=class e{constructor(e,t,n){"number"==typeof t?(m((16777215&t)===t),this._state=e,this.altAndOuterContextDepth=t,this._context=n):(this._state=e,this.altAndOuterContextDepth=t.altAndOuterContextDepth,this._context=n)}static create(t,n,i,o=u.SemanticContext.NONE,a){return o!==u.SemanticContext.NONE?null!=a?new b(a,o,t,n,i,!1):new p(o,t,n,i):null!=a?new T(a,t,n,i,!1):new e(t,n,i)}get state(){return this._state}get alt(){return 16777215&this.altAndOuterContextDepth}get context(){return this._context}set context(e){this._context=e}get reachesIntoOuterContext(){return 0!==this.outerContextDepth}get outerContextDepth(){return this.altAndOuterContextDepth>>>24&127}set outerContextDepth(e){m(e>=0),e=Math.min(e,127),this.altAndOuterContextDepth=e<<24|(-2130706433&this.altAndOuterContextDepth)>>>0}get lexerActionExecutor(){}get semanticContext(){return u.SemanticContext.NONE}get hasPassedThroughNonGreedyDecision(){return!1}clone(){return this.transform(this.state,!1)}transform(e,t,n){return null==n?this.transformImpl(e,this._context,this.semanticContext,t,this.lexerActionExecutor):n instanceof c.PredictionContext?this.transformImpl(e,n,this.semanticContext,t,this.lexerActionExecutor):n instanceof u.SemanticContext?this.transformImpl(e,this._context,n,t,this.lexerActionExecutor):this.transformImpl(e,this._context,this.semanticContext,t,n)}transformImpl(t,n,i,o,a){let r=o&&e.checkNonGreedyDecision(this,t);return i!==u.SemanticContext.NONE?null!=a||r?new b(a,i,t,this,n,r):new p(i,t,this,n):null!=a||r?new T(a,t,this,n,r):new e(t,this,n)}static checkNonGreedyDecision(e,t){return e.hasPassedThroughNonGreedyDecision||t instanceof r.DecisionState&&t.nonGreedy}appendContext(e,t){if("number"==typeof e){let n=this.context.appendSingleContext(e,t);return this.transform(this.state,!1,n)}{let n=this.context.appendContext(e,t);return this.transform(this.state,!1,n)}}contains(e){if(this.state.stateNumber!==e.state.stateNumber||this.alt!==e.alt||!this.semanticContext.equals(e.semanticContext))return!1;let t=[],n=[];for(t.push(this.context),n.push(e.context);;){let e=t.pop(),i=n.pop();if(!e||!i)break;if(e===i)return!0;if(e.size<i.size)return!1;if(i.isEmpty)return e.hasEmpty;for(let o=0;o<i.size;o++){let a=e.findReturnState(i.getReturnState(o));if(a<0)return!1;t.push(e.getParent(a)),n.push(i.getParent(o))}}return!1}get isPrecedenceFilterSuppressed(){return 0!=(2147483648&this.altAndOuterContextDepth)}set isPrecedenceFilterSuppressed(e){e?this.altAndOuterContextDepth|=2147483648:this.altAndOuterContextDepth&=2147483647}equals(t){return this===t||t instanceof e&&(this.state.stateNumber===t.state.stateNumber&&this.alt===t.alt&&this.reachesIntoOuterContext===t.reachesIntoOuterContext&&this.context.equals(t.context)&&this.semanticContext.equals(t.semanticContext)&&this.isPrecedenceFilterSuppressed===t.isPrecedenceFilterSuppressed&&this.hasPassedThroughNonGreedyDecision===t.hasPassedThroughNonGreedyDecision&&d.ObjectEqualityComparator.INSTANCE.equals(this.lexerActionExecutor,t.lexerActionExecutor))}hashCode(){let e=l.MurmurHash.initialize(7);return e=l.MurmurHash.update(e,this.state.stateNumber),e=l.MurmurHash.update(e,this.alt),e=l.MurmurHash.update(e,this.reachesIntoOuterContext?1:0),e=l.MurmurHash.update(e,this.context),e=l.MurmurHash.update(e,this.semanticContext),e=l.MurmurHash.update(e,this.hasPassedThroughNonGreedyDecision?1:0),e=l.MurmurHash.update(e,this.lexerActionExecutor),e=l.MurmurHash.finish(e,7),e}toDotString(){let e="";e+="digraph G {\n",e+="rankdir=LR;\n";let t=new a.Array2DHashMap(c.PredictionContext.IdentityEqualityComparator.INSTANCE),n=[];function i(e){let i=t.size,o=t.putIfAbsent(e,i);return null!=o?o:(n.push(e),i)}for(n.push(this.context),t.put(this.context,0);;){let t=n.pop();if(!t)break;for(let n=0;n<t.size;n++)e+="  s"+i(t),e+="->",e+="s"+i(t.getParent(n)),e+='[label="'+t.getReturnState(n)+'"];\n'}return e+="}\n",e.toString()}toString(e,t,n){null==n&&(n=null!=t),null==t&&(t=!0);let i,o="";i=n?this.context.toStrings(e,this.state.stateNumber):["?"];let a=!0;for(let e of i)a?a=!1:o+=", ",o+="(",o+=this.state,t&&(o+=",",o+=this.alt),this.context&&(o+=",",o+=e),this.semanticContext!==u.SemanticContext.NONE&&(o+=",",o+=this.semanticContext),this.reachesIntoOuterContext&&(o+=",up="+this.outerContextDepth),o+=")";return o.toString()}};i([s.NotNull],h.prototype,"_state",void 0),i([s.NotNull],h.prototype,"_context",void 0),i([s.NotNull],h.prototype,"state",null),i([s.NotNull,o(0,s.NotNull)],h.prototype,"context",null),i([s.NotNull],h.prototype,"semanticContext",null),i([s.Override],h.prototype,"clone",null),i([o(0,s.NotNull),o(2,s.NotNull)],h.prototype,"transformImpl",null),i([s.Override],h.prototype,"equals",null),i([s.Override],h.prototype,"hashCode",null),i([o(0,s.NotNull),o(3,s.NotNull)],h,"create",null),h=i([o(0,s.NotNull),o(2,s.NotNull)],h),t.ATNConfig=h;let p=class extends h{constructor(e,t,n,i){super(t,n,i),this._semanticContext=e}get semanticContext(){return this._semanticContext}};i([s.NotNull],p.prototype,"_semanticContext",void 0),i([s.Override],p.prototype,"semanticContext",null),p=i([o(1,s.NotNull),o(2,s.NotNull)],p);let T=class extends h{constructor(e,t,n,i,o){if("number"==typeof n)super(t,n,i);else if(super(t,n,i),n.semanticContext!==u.SemanticContext.NONE)throw new Error("Not supported");this._lexerActionExecutor=e,this.passedThroughNonGreedyDecision=o}get lexerActionExecutor(){return this._lexerActionExecutor}get hasPassedThroughNonGreedyDecision(){return this.passedThroughNonGreedyDecision}};i([s.Override],T.prototype,"lexerActionExecutor",null),i([s.Override],T.prototype,"hasPassedThroughNonGreedyDecision",null),T=i([o(1,s.NotNull),o(2,s.NotNull)],T);let b=class extends p{constructor(e,t,n,i,o,a){super(t,n,i,o),this._lexerActionExecutor=e,this.passedThroughNonGreedyDecision=a}get lexerActionExecutor(){return this._lexerActionExecutor}get hasPassedThroughNonGreedyDecision(){return this.passedThroughNonGreedyDecision}};i([s.Override],b.prototype,"lexerActionExecutor",null),i([s.Override],b.prototype,"hasPassedThroughNonGreedyDecision",null),b=i([o(1,s.NotNull),o(2,s.NotNull)],b)},function(e,t,n){"use strict";
/*!
 * Copyright 2016 The ANTLR Project. All rights reserved.
 * Licensed under the BSD-3-Clause license. See LICENSE file in the project root for license information.
 */var i=this&&this.__decorate||function(e,t,n,i){var o,a=arguments.length,r=a<3?t:null===i?i=Object.getOwnPropertyDescriptor(t,n):i;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)r=Reflect.decorate(e,t,n,i);else for(var l=e.length-1;l>=0;l--)(o=e[l])&&(r=(a<3?o(r):a>3?o(t,n,r):o(t,n))||r);return a>3&&r&&Object.defineProperty(t,n,r),r},o=this&&this.__param||function(e,t){return function(n,i){t(n,i,e)}};Object.defineProperty(t,"__esModule",{value:!0});const a=n(36),r=n(46),l=n(0),s=n(14);let d=class e{constructor(e){this.atn=e}static get ERROR(){return e._ERROR||(e._ERROR=new r.DFAState(new a.ATNConfigSet),e._ERROR.stateNumber=s.PredictionContext.EMPTY_FULL_STATE_KEY),e._ERROR}clearDFA(){this.atn.clearDFA()}};i([l.NotNull],d.prototype,"atn",void 0),i([l.NotNull],d,"ERROR",null),d=i([o(0,l.NotNull)],d),t.ATNSimulator=d,d=t.ATNSimulator||(t.ATNSimulator={}),t.ATNSimulator=d},function(e,t,n){"use strict";
/*!
 * Copyright 2016 The ANTLR Project. All rights reserved.
 * Licensed under the BSD-3-Clause license. See LICENSE file in the project root for license information.
 */var i=this&&this.__decorate||function(e,t,n,i){var o,a=arguments.length,r=a<3?t:null===i?i=Object.getOwnPropertyDescriptor(t,n):i;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)r=Reflect.decorate(e,t,n,i);else for(var l=e.length-1;l>=0;l--)(o=e[l])&&(r=(a<3?o(r):a>3?o(t,n,r):o(t,n))||r);return a>3&&r&&Object.defineProperty(t,n,r),r},o=this&&this.__param||function(e,t){return function(n,i){t(n,i,e)}};Object.defineProperty(t,"__esModule",{value:!0});const a=n(6),r=n(22),l=n(5),s=n(0),d=n(14),c=n(12);class u{constructor(e){this.stateNumber=-1,this.configs=e,this.edges=new Map,this.contextEdges=new Map}get isContextSensitive(){return!!this.contextSymbols}isContextSymbol(e){return!!this.isContextSensitive&&this.contextSymbols.get(e)}setContextSymbol(e){c(this.isContextSensitive),this.contextSymbols.set(e)}setContextSensitive(e){c(!this.configs.isOutermostConfigSet),this.isContextSensitive||this.contextSymbols||(this.contextSymbols=new r.BitSet)}get acceptStateInfo(){return this._acceptStateInfo}set acceptStateInfo(e){this._acceptStateInfo=e}get isAcceptState(){return!!this._acceptStateInfo}get prediction(){return this._acceptStateInfo?this._acceptStateInfo.prediction:a.ATN.INVALID_ALT_NUMBER}get lexerActionExecutor(){if(this._acceptStateInfo)return this._acceptStateInfo.lexerActionExecutor}getTarget(e){return this.edges.get(e)}setTarget(e,t){this.edges.set(e,t)}getEdgeMap(){return this.edges}getContextTarget(e){return e===d.PredictionContext.EMPTY_FULL_STATE_KEY&&(e=-1),this.contextEdges.get(e)}setContextTarget(e,t){if(!this.isContextSensitive)throw new Error("The state is not context sensitive.");e===d.PredictionContext.EMPTY_FULL_STATE_KEY&&(e=-1),this.contextEdges.set(e,t)}getContextEdgeMap(){let e=new Map(this.contextEdges),t=e.get(-1);if(void 0!==t){if(1===e.size){let e=new Map;return e.set(d.PredictionContext.EMPTY_FULL_STATE_KEY,t),e}e.delete(-1),e.set(d.PredictionContext.EMPTY_FULL_STATE_KEY,t)}return e}hashCode(){let e=l.MurmurHash.initialize(7);return e=l.MurmurHash.update(e,this.configs.hashCode()),e=l.MurmurHash.finish(e,1),e}equals(e){if(this===e)return!0;if(!(e instanceof u))return!1;let t=e;return this.configs.equals(t.configs)}toString(){let e="";return e+=this.stateNumber+":"+this.configs,this.isAcceptState&&(e+="=>",this.predicates?e+=this.predicates:e+=this.prediction),e.toString()}}i([s.NotNull],u.prototype,"configs",void 0),i([s.NotNull],u.prototype,"edges",void 0),i([s.NotNull],u.prototype,"contextEdges",void 0),i([s.Override],u.prototype,"hashCode",null),i([s.Override],u.prototype,"equals",null),i([s.Override],u.prototype,"toString",null),t.DFAState=u,function(e){let t=class{constructor(e,t){this.alt=t,this.pred=e}toString(){return"("+this.pred+", "+this.alt+")"}};i([s.NotNull],t.prototype,"pred",void 0),i([s.Override],t.prototype,"toString",null),t=i([o(0,s.NotNull)],t),e.PredPrediction=t}(u=t.DFAState||(t.DFAState={}))},function(e,t,n){"use strict";
/*!
 * Copyright 2016 The ANTLR Project. All rights reserved.
 * Licensed under the BSD-3-Clause license. See LICENSE file in the project root for license information.
 */var i=this&&this.__decorate||function(e,t,n,i){var o,a=arguments.length,r=a<3?t:null===i?i=Object.getOwnPropertyDescriptor(t,n):i;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)r=Reflect.decorate(e,t,n,i);else for(var l=e.length-1;l>=0;l--)(o=e[l])&&(r=(a<3?o(r):a>3?o(t,n,r):o(t,n))||r);return a>3&&r&&Object.defineProperty(t,n,r),r},o=this&&this.__param||function(e,t){return function(n,i){t(n,i,e)}};Object.defineProperty(t,"__esModule",{value:!0});const a=n(2),r=n(0),l=n(10),s=n(11);let d=class extends a.RecognitionException{constructor(e,t,n,i){super(e,t),this._startIndex=n,this._deadEndConfigs=i}get startIndex(){return this._startIndex}get deadEndConfigs(){return this._deadEndConfigs}get inputStream(){return super.inputStream}toString(){let e="";return this._startIndex>=0&&this._startIndex<this.inputStream.size&&(e=this.inputStream.getText(l.Interval.of(this._startIndex,this._startIndex)),e=s.escapeWhitespace(e,!1)),`LexerNoViableAltException('${e}')`}};i([r.Override],d.prototype,"inputStream",null),i([r.Override],d.prototype,"toString",null),d=i([o(1,r.NotNull)],d),t.LexerNoViableAltException=d},function(e,t,n){"use strict";
/*!
 * Copyright 2016 The ANTLR Project. All rights reserved.
 * Licensed under the BSD-3-Clause license. See LICENSE file in the project root for license information.
 */Object.defineProperty(t,"__esModule",{value:!0});const i=n(24);class o extends i.DecisionState{}t.BlockStartState=o},function(e,t,n){"use strict";
/*!
 * Copyright 2016 The ANTLR Project. All rights reserved.
 * Licensed under the BSD-3-Clause license. See LICENSE file in the project root for license information.
 */var i=this&&this.__decorate||function(e,t,n,i){var o,a=arguments.length,r=a<3?t:null===i?i=Object.getOwnPropertyDescriptor(t,n):i;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)r=Reflect.decorate(e,t,n,i);else for(var l=e.length-1;l>=0;l--)(o=e[l])&&(r=(a<3?o(r):a>3?o(t,n,r):o(t,n))||r);return a>3&&r&&Object.defineProperty(t,n,r),r},o=this&&this.__param||function(e,t){return function(n,i){t(n,i,e)}};Object.defineProperty(t,"__esModule",{value:!0});const a=n(17),r=n(8),l=n(7),s=n(43),d=n(23),c=n(9),u=n(14),m=n(3),h=n(0);class p{constructor(){this.errorRecoveryMode=!1,this.lastErrorIndex=-1,this.nextTokensState=a.ATNState.INVALID_STATE_NUMBER}reset(e){this.endErrorCondition(e)}beginErrorCondition(e){this.errorRecoveryMode=!0}inErrorRecoveryMode(e){return this.errorRecoveryMode}endErrorCondition(e){this.errorRecoveryMode=!1,this.lastErrorStates=void 0,this.lastErrorIndex=-1}reportMatch(e){this.endErrorCondition(e)}reportError(e,t){this.inErrorRecoveryMode(e)||(this.beginErrorCondition(e),t instanceof c.NoViableAltException?this.reportNoViableAlternative(e,t):t instanceof s.InputMismatchException?this.reportInputMismatch(e,t):t instanceof l.FailedPredicateException?this.reportFailedPredicate(e,t):(console.error("unknown recognition error type: "+t),this.notifyErrorListeners(e,t.toString(),t)))}notifyErrorListeners(e,t,n){let i=n.getOffendingToken(e);void 0===i&&(i=null),e.notifyErrorListeners(t,i,n)}recover(e,t){this.lastErrorIndex===e.inputStream.index&&this.lastErrorStates&&this.lastErrorStates.contains(e.state)&&e.consume(),this.lastErrorIndex=e.inputStream.index,this.lastErrorStates||(this.lastErrorStates=new d.IntervalSet),this.lastErrorStates.add(e.state);let n=this.getErrorRecoverySet(e);this.consumeUntil(e,n)}sync(e){let t=e.interpreter.atn.states[e.state];if(this.inErrorRecoveryMode(e))return;let n=e.inputStream.LA(1),i=e.atn.nextTokens(t);if(i.contains(n))return this.nextTokensContext=void 0,void(this.nextTokensState=a.ATNState.INVALID_STATE_NUMBER);if(i.contains(m.Token.EPSILON))void 0===this.nextTokensContext&&(this.nextTokensContext=e.context,this.nextTokensState=e.state);else switch(t.stateType){case r.ATNStateType.BLOCK_START:case r.ATNStateType.STAR_BLOCK_START:case r.ATNStateType.PLUS_BLOCK_START:case r.ATNStateType.STAR_LOOP_ENTRY:if(this.singleTokenDeletion(e))return;throw new s.InputMismatchException(e);case r.ATNStateType.PLUS_LOOP_BACK:case r.ATNStateType.STAR_LOOP_BACK:this.reportUnwantedToken(e);let t=e.getExpectedTokens().or(this.getErrorRecoverySet(e));this.consumeUntil(e,t)}}reportNoViableAlternative(e,t){let n,i=e.inputStream;n=i?t.startToken.type===m.Token.EOF?"<EOF>":i.getTextFromRange(t.startToken,t.getOffendingToken()):"<unknown input>";let o="no viable alternative at input "+this.escapeWSAndQuote(n);this.notifyErrorListeners(e,o,t)}reportInputMismatch(e,t){let n=t.expectedTokens,i=n?n.toStringVocabulary(e.vocabulary):"",o="mismatched input "+this.getTokenErrorDisplay(t.getOffendingToken(e))+" expecting "+i;this.notifyErrorListeners(e,o,t)}reportFailedPredicate(e,t){let n="rule "+e.ruleNames[e.context.ruleIndex]+" "+t.message;this.notifyErrorListeners(e,n,t)}reportUnwantedToken(e){if(this.inErrorRecoveryMode(e))return;this.beginErrorCondition(e);let t=e.currentToken,n="extraneous input "+this.getTokenErrorDisplay(t)+" expecting "+this.getExpectedTokens(e).toStringVocabulary(e.vocabulary);e.notifyErrorListeners(n,t,void 0)}reportMissingToken(e){if(this.inErrorRecoveryMode(e))return;this.beginErrorCondition(e);let t=e.currentToken,n="missing "+this.getExpectedTokens(e).toStringVocabulary(e.vocabulary)+" at "+this.getTokenErrorDisplay(t);e.notifyErrorListeners(n,t,void 0)}recoverInline(e){let t=this.singleTokenDeletion(e);if(t)return e.consume(),t;if(this.singleTokenInsertion(e))return this.getMissingSymbol(e);throw void 0===this.nextTokensContext?new s.InputMismatchException(e):new s.InputMismatchException(e,this.nextTokensState,this.nextTokensContext)}singleTokenInsertion(e){let t=e.inputStream.LA(1),n=e.interpreter.atn.states[e.state].transition(0).target,i=e.interpreter.atn;return!!i.nextTokens(n,u.PredictionContext.fromRuleContext(i,e.context)).contains(t)&&(this.reportMissingToken(e),!0)}singleTokenDeletion(e){let t=e.inputStream.LA(2);if(this.getExpectedTokens(e).contains(t)){this.reportUnwantedToken(e),e.consume();let t=e.currentToken;return this.reportMatch(e),t}}getMissingSymbol(e){let t,n=e.currentToken,i=this.getExpectedTokens(e),o=m.Token.INVALID_TYPE;i.isNil||(o=i.minElement),t=o===m.Token.EOF?"<missing EOF>":"<missing "+e.vocabulary.getDisplayName(o)+">";let a=n,r=e.inputStream.tryLT(-1);return a.type===m.Token.EOF&&null!=r&&(a=r),this.constructToken(e.inputStream.tokenSource,o,t,a)}constructToken(e,t,n,i){let o=e.tokenFactory,a=i.tokenSource,r=a?a.inputStream:void 0;return o.create({source:e,stream:r},t,n,m.Token.DEFAULT_CHANNEL,-1,-1,i.line,i.charPositionInLine)}getExpectedTokens(e){return e.getExpectedTokens()}getTokenErrorDisplay(e){if(!e)return"<no token>";let t=this.getSymbolText(e);return t||(t=this.getSymbolType(e)===m.Token.EOF?"<EOF>":`<${this.getSymbolType(e)}>`),this.escapeWSAndQuote(t)}getSymbolText(e){return e.text}getSymbolType(e){return e.type}escapeWSAndQuote(e){return"'"+(e=(e=(e=e.replace("\n","\\n")).replace("\r","\\r")).replace("\t","\\t"))+"'"}getErrorRecoverySet(e){let t=e.interpreter.atn,n=e.context,i=new d.IntervalSet;for(;n&&n.invokingState>=0;){let e=t.states[n.invokingState].transition(0),o=t.nextTokens(e.followState);i.addAll(o),n=n._parent}return i.remove(m.Token.EPSILON),i}consumeUntil(e,t){let n=e.inputStream.LA(1);for(;n!==m.Token.EOF&&!t.contains(n);)e.consume(),n=e.inputStream.LA(1)}}i([h.Override],p.prototype,"reset",null),i([o(0,h.NotNull)],p.prototype,"beginErrorCondition",null),i([h.Override],p.prototype,"inErrorRecoveryMode",null),i([o(0,h.NotNull)],p.prototype,"endErrorCondition",null),i([h.Override],p.prototype,"reportMatch",null),i([h.Override],p.prototype,"reportError",null),i([o(0,h.NotNull)],p.prototype,"notifyErrorListeners",null),i([h.Override],p.prototype,"recover",null),i([h.Override],p.prototype,"sync",null),i([o(0,h.NotNull),o(1,h.NotNull)],p.prototype,"reportNoViableAlternative",null),i([o(0,h.NotNull),o(1,h.NotNull)],p.prototype,"reportInputMismatch",null),i([o(0,h.NotNull),o(1,h.NotNull)],p.prototype,"reportFailedPredicate",null),i([o(0,h.NotNull)],p.prototype,"reportUnwantedToken",null),i([o(0,h.NotNull)],p.prototype,"reportMissingToken",null),i([h.Override],p.prototype,"recoverInline",null),i([o(0,h.NotNull)],p.prototype,"singleTokenInsertion",null),i([o(0,h.NotNull)],p.prototype,"singleTokenDeletion",null),i([h.NotNull,o(0,h.NotNull)],p.prototype,"getMissingSymbol",null),i([h.NotNull,o(0,h.NotNull)],p.prototype,"getExpectedTokens",null),i([o(0,h.NotNull)],p.prototype,"getSymbolText",null),i([o(0,h.NotNull)],p.prototype,"getSymbolType",null),i([h.NotNull,o(0,h.NotNull)],p.prototype,"escapeWSAndQuote",null),i([h.NotNull,o(0,h.NotNull)],p.prototype,"getErrorRecoverySet",null),i([o(0,h.NotNull),o(1,h.NotNull)],p.prototype,"consumeUntil",null),t.DefaultErrorStrategy=p},function(e,t,n){"use strict";
/*!
 * Copyright 2016 The ANTLR Project. All rights reserved.
 * Licensed under the BSD-3-Clause license. See LICENSE file in the project root for license information.
 */Object.defineProperty(t,"__esModule",{value:!0});const i=n(20);class o extends i.Transition{constructor(e){super(e)}}t.AbstractPredicateTransition=o},function(e,t,n){"use strict";
/*!
 * Copyright 2016 The ANTLR Project. All rights reserved.
 * Licensed under the BSD-3-Clause license. See LICENSE file in the project root for license information.
 */var i=this&&this.__decorate||function(e,t,n,i){var o,a=arguments.length,r=a<3?t:null===i?i=Object.getOwnPropertyDescriptor(t,n):i;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)r=Reflect.decorate(e,t,n,i);else for(var l=e.length-1;l>=0;l--)(o=e[l])&&(r=(a<3?o(r):a>3?o(t,n,r):o(t,n))||r);return a>3&&r&&Object.defineProperty(t,n,r),r};Object.defineProperty(t,"__esModule",{value:!0});const o=n(52),a=n(0),r=new Int32Array(0);class l{constructor(e){if(e)if(e instanceof l)this._data=e._data.slice(0),this._size=e._size;else if("number"==typeof e)0===e?(this._data=r,this._size=0):(this._data=new Int32Array(e),this._size=0);else{this._data=r,this._size=0;for(let t of e)this.add(t)}else this._data=r,this._size=0}add(e){this._data.length===this._size&&this.ensureCapacity(this._size+1),this._data[this._size]=e,this._size++}addAll(e){if(Array.isArray(e))this.ensureCapacity(this._size+e.length),this._data.subarray(this._size,this._size+e.length).set(e),this._size+=e.length;else if(e instanceof l)this.ensureCapacity(this._size+e._size),this._data.subarray(this._size,this._size+e.size).set(e._data),this._size+=e._size;else{this.ensureCapacity(this._size+e.size);let t=0;for(let n of e)this._data[this._size+t]=n,t++;this._size+=e.size}}get(e){if(e<0||e>=this._size)throw RangeError();return this._data[e]}contains(e){for(let t=0;t<this._size;t++)if(this._data[t]===e)return!0;return!1}set(e,t){if(e<0||e>=this._size)throw RangeError();let n=this._data[e];return this._data[e]=t,n}removeAt(e){let t=this.get(e);return this._data.copyWithin(e,e+1,this._size),this._data[this._size-1]=0,this._size--,t}removeRange(e,t){if(e<0||t<0||e>this._size||t>this._size)throw RangeError();if(e>t)throw RangeError();this._data.copyWithin(t,e,this._size),this._data.fill(0,this._size-(t-e),this._size),this._size-=t-e}get isEmpty(){return 0===this._size}get size(){return this._size}trimToSize(){this._data.length!==this._size&&(this._data=this._data.slice(0,this._size))}clear(){this._data.fill(0,0,this._size),this._size=0}toArray(){return 0===this._size?[]:Array.from(this._data.subarray(0,this._size))}sort(){this._data.subarray(0,this._size).sort()}equals(e){if(e===this)return!0;if(!(e instanceof l))return!1;if(this._size!==e._size)return!1;for(let t=0;t<this._size;t++)if(this._data[t]!==e._data[t])return!1;return!0}hashCode(){let e=1;for(let t=0;t<this._size;t++)e=31*e+this._data[t];return e}toString(){return this._data.toString()}binarySearch(e,t,n){if(void 0===t&&(t=0),void 0===n&&(n=this._size),t<0||n<0||t>this._size||n>this._size)throw new RangeError;if(t>n)throw new RangeError;return o.Arrays.binarySearch(this._data,e,t,n)}ensureCapacity(e){if(e<0||e>2147483639)throw new RangeError;let t;for(t=0===this._data.length?4:this._data.length;t<e;)t*=2,(t<0||t>2147483639)&&(t=2147483639);let n=new Int32Array(t);n.set(this._data),this._data=n}toCharArray(){let e=new Uint16Array(this._size),t=0,n=!1;for(let i=0;i<this._size;i++){let o=this._data[i];if(o>=0&&o<65536){e[t]=o,t++;continue}if(!n){let t=new Uint16Array(this.charArraySize());t.set(e,0),e=t,n=!0}let a=String.fromCodePoint(o);e[t]=a.charCodeAt(0),e[t+1]=a.charCodeAt(1),t+=2}return e}charArraySize(){let e=0;for(let t=0;t<this._size;t++)e+=this._data[t]>=65536?2:1;return e}}i([a.NotNull],l.prototype,"_data",void 0),i([a.Override],l.prototype,"equals",null),i([a.Override],l.prototype,"hashCode",null),i([a.Override],l.prototype,"toString",null),t.IntegerList=l},function(e,t,n){"use strict";
/*!
 * Copyright 2016 The ANTLR Project. All rights reserved.
 * Licensed under the BSD-3-Clause license. See LICENSE file in the project root for license information.
 */Object.defineProperty(t,"__esModule",{value:!0}),function(e){e.binarySearch=function(e,t,n,i){return function(e,t,n,i){let o=t,a=n-1;for(;o<=a;){let t=o+a>>>1,n=e[t];if(n<i)o=t+1;else{if(!(n>i))return t;a=t-1}}return-(o+1)}(e,void 0!==n?n:0,void 0!==i?i:e.length,t)},e.toString=function(e){let t="[",n=!0;for(let i of e)n?n=!1:t+=", ",t+=null===i?"null":void 0===i?"undefined":i;return t+="]",t}}(t.Arrays||(t.Arrays={}))},function(e,t,n){"use strict";
/*!
 * Copyright 2016 The ANTLR Project. All rights reserved.
 * Licensed under the BSD-3-Clause license. See LICENSE file in the project root for license information.
 */var i=this&&this.__decorate||function(e,t,n,i){var o,a=arguments.length,r=a<3?t:null===i?i=Object.getOwnPropertyDescriptor(t,n):i;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)r=Reflect.decorate(e,t,n,i);else for(var l=e.length-1;l>=0;l--)(o=e[l])&&(r=(a<3?o(r):a>3?o(t,n,r):o(t,n))||r);return a>3&&r&&Object.defineProperty(t,n,r),r};Object.defineProperty(t,"__esModule",{value:!0});const o=n(35),a=n(10),r=n(0);class l{constructor(e=!1){this.copyText=e}create(e,t,n,i,r,l,s,d){let c=new o.CommonToken(t,n,e,i,r,l);return c.line=s,c.charPositionInLine=d,null==n&&this.copyText&&null!=e.stream&&(c.text=e.stream.getText(a.Interval.of(r,l))),c}createSimple(e,t){return new o.CommonToken(e,t)}}i([r.Override],l.prototype,"create",null),i([r.Override],l.prototype,"createSimple",null),t.CommonTokenFactory=l,function(e){e.DEFAULT=new e}(l=t.CommonTokenFactory||(t.CommonTokenFactory={}))},function(e,t,n){"use strict";
/*!
 * Copyright 2016 The ANTLR Project. All rights reserved.
 * Licensed under the BSD-3-Clause license. See LICENSE file in the project root for license information.
 */var i=this&&this.__decorate||function(e,t,n,i){var o,a=arguments.length,r=a<3?t:null===i?i=Object.getOwnPropertyDescriptor(t,n):i;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)r=Reflect.decorate(e,t,n,i);else for(var l=e.length-1;l>=0;l--)(o=e[l])&&(r=(a<3?o(r):a>3?o(t,n,r):o(t,n))||r);return a>3&&r&&Object.defineProperty(t,n,r),r};Object.defineProperty(t,"__esModule",{value:!0});const o=n(28),a=n(0),r=n(15),l=n(14),s=n(12);class d{constructor(e=!0){this.contexts=new o.Array2DHashMap(r.ObjectEqualityComparator.INSTANCE),this.childContexts=new o.Array2DHashMap(r.ObjectEqualityComparator.INSTANCE),this.joinContexts=new o.Array2DHashMap(r.ObjectEqualityComparator.INSTANCE),this.enableCache=e}getAsCached(e){if(!this.enableCache)return e;let t=this.contexts.get(e);return t||(t=e,this.contexts.put(e,e)),t}getChild(e,t){if(!this.enableCache)return e.getChild(t);let n=new d.PredictionContextAndInt(e,t),i=this.childContexts.get(n);return i||(i=e.getChild(t),i=this.getAsCached(i),this.childContexts.put(n,i)),i}join(e,t){if(!this.enableCache)return l.PredictionContext.join(e,t,this);let n=new d.IdentityCommutativePredictionContextOperands(e,t),i=this.joinContexts.get(n);return i||(i=l.PredictionContext.join(e,t,this),i=this.getAsCached(i),this.joinContexts.put(n,i),i)}}d.UNCACHED=new d(!1),t.PredictionContextCache=d,function(e){class t{constructor(e,t){this.obj=e,this.value=t}equals(e){if(!(e instanceof t))return!1;if(e===this)return!0;let n=e;return this.value===n.value&&(this.obj===n.obj||null!=this.obj&&this.obj.equals(n.obj))}hashCode(){let e=5;return e=7*e+(null!=this.obj?this.obj.hashCode():0),e=7*e+this.value,e}}i([a.Override],t.prototype,"equals",null),i([a.Override],t.prototype,"hashCode",null),e.PredictionContextAndInt=t;class n{constructor(e,t){s(null!=e),s(null!=t),this._x=e,this._y=t}get x(){return this._x}get y(){return this._y}equals(e){if(!(e instanceof n))return!1;if(this===e)return!0;let t=e;return this._x===t._x&&this._y===t._y||this._x===t._y&&this._y===t._x}hashCode(){return this._x.hashCode()^this._y.hashCode()}}i([a.Override],n.prototype,"equals",null),i([a.Override],n.prototype,"hashCode",null),e.IdentityCommutativePredictionContextOperands=n}(d=t.PredictionContextCache||(t.PredictionContextCache={}))},function(e,t,n){"use strict";
/*!
 * Copyright 2016 The ANTLR Project. All rights reserved.
 * Licensed under the BSD-3-Clause license. See LICENSE file in the project root for license information.
 */var i=this&&this.__decorate||function(e,t,n,i){var o,a=arguments.length,r=a<3?t:null===i?i=Object.getOwnPropertyDescriptor(t,n):i;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)r=Reflect.decorate(e,t,n,i);else for(var l=e.length-1;l>=0;l--)(o=e[l])&&(r=(a<3?o(r):a>3?o(t,n,r):o(t,n))||r);return a>3&&r&&Object.defineProperty(t,n,r),r},o=this&&this.__param||function(e,t){return function(n,i){t(n,i,e)}};Object.defineProperty(t,"__esModule",{value:!0});const a=n(0);class r{constructor(e){if(this.delegates=e,!e)throw new Error("Invalid delegates")}getDelegates(){return this.delegates}syntaxError(e,t,n,i,o,a){this.delegates.forEach(r=>{r.syntaxError&&r.syntaxError(e,t,n,i,o,a)})}}i([a.Override,o(0,a.NotNull),o(4,a.NotNull)],r.prototype,"syntaxError",null),t.ProxyErrorListener=r},function(e,t,n){"use strict";
/*!
 * Copyright 2016 The ANTLR Project. All rights reserved.
 * Licensed under the BSD-3-Clause license. See LICENSE file in the project root for license information.
 */var i=this&&this.__decorate||function(e,t,n,i){var o,a=arguments.length,r=a<3?t:null===i?i=Object.getOwnPropertyDescriptor(t,n):i;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)r=Reflect.decorate(e,t,n,i);else for(var l=e.length-1;l>=0;l--)(o=e[l])&&(r=(a<3?o(r):a>3?o(t,n,r):o(t,n))||r);return a>3&&r&&Object.defineProperty(t,n,r),r};Object.defineProperty(t,"__esModule",{value:!0});const o=n(8),a=n(22),r=n(24),l=n(0);class s extends r.DecisionState{constructor(){super(...arguments),this.precedenceRuleDecision=!1,this.precedenceLoopbackStates=new a.BitSet}get stateType(){return o.ATNStateType.STAR_LOOP_ENTRY}}i([l.Override],s.prototype,"stateType",null),t.StarLoopEntryState=s},function(e,t,n){"use strict";
/*!
 * Copyright 2016 The ANTLR Project. All rights reserved.
 * Licensed under the BSD-3-Clause license. See LICENSE file in the project root for license information.
 */var i=this&&this.__decorate||function(e,t,n,i){var o,a=arguments.length,r=a<3?t:null===i?i=Object.getOwnPropertyDescriptor(t,n):i;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)r=Reflect.decorate(e,t,n,i);else for(var l=e.length-1;l>=0;l--)(o=e[l])&&(r=(a<3?o(r):a>3?o(t,n,r):o(t,n))||r);return a>3&&r&&Object.defineProperty(t,n,r),r},o=this&&this.__param||function(e,t){return function(n,i){t(n,i,e)}};Object.defineProperty(t,"__esModule",{value:!0});const a=n(0),r=n(58);let l=class extends r.SetTransition{constructor(e,t){super(e,t)}get serializationType(){return 8}matches(e,t,n){return e>=t&&e<=n&&!super.matches(e,t,n)}toString(){return"~"+super.toString()}};i([a.Override],l.prototype,"serializationType",null),i([a.Override],l.prototype,"matches",null),i([a.Override],l.prototype,"toString",null),l=i([o(0,a.NotNull),o(1,a.Nullable)],l),t.NotSetTransition=l},function(e,t,n){"use strict";
/*!
 * Copyright 2016 The ANTLR Project. All rights reserved.
 * Licensed under the BSD-3-Clause license. See LICENSE file in the project root for license information.
 */var i=this&&this.__decorate||function(e,t,n,i){var o,a=arguments.length,r=a<3?t:null===i?i=Object.getOwnPropertyDescriptor(t,n):i;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)r=Reflect.decorate(e,t,n,i);else for(var l=e.length-1;l>=0;l--)(o=e[l])&&(r=(a<3?o(r):a>3?o(t,n,r):o(t,n))||r);return a>3&&r&&Object.defineProperty(t,n,r),r},o=this&&this.__param||function(e,t){return function(n,i){t(n,i,e)}};Object.defineProperty(t,"__esModule",{value:!0});const a=n(23),r=n(0),l=n(3),s=n(20);let d=class extends s.Transition{constructor(e,t){super(e),null==t&&(t=a.IntervalSet.of(l.Token.INVALID_TYPE)),this.set=t}get serializationType(){return 7}get label(){return this.set}matches(e,t,n){return this.set.contains(e)}toString(){return this.set.toString()}};i([r.NotNull],d.prototype,"set",void 0),i([r.Override],d.prototype,"serializationType",null),i([r.Override,r.NotNull],d.prototype,"label",null),i([r.Override],d.prototype,"matches",null),i([r.Override,r.NotNull],d.prototype,"toString",null),d=i([o(0,r.NotNull),o(1,r.Nullable)],d),t.SetTransition=d},function(e,t,n){"use strict";
/*!
 * Copyright 2016 The ANTLR Project. All rights reserved.
 * Licensed under the BSD-3-Clause license. See LICENSE file in the project root for license information.
 */var i=this&&this.__decorate||function(e,t,n,i){var o,a=arguments.length,r=a<3?t:null===i?i=Object.getOwnPropertyDescriptor(t,n):i;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)r=Reflect.decorate(e,t,n,i);else for(var l=e.length-1;l>=0;l--)(o=e[l])&&(r=(a<3?o(r):a>3?o(t,n,r):o(t,n))||r);return a>3&&r&&Object.defineProperty(t,n,r),r},o=this&&this.__param||function(e,t){return function(n,i){t(n,i,e)}};Object.defineProperty(t,"__esModule",{value:!0});const a=n(0),r=n(20);let l=class extends r.Transition{constructor(e,t,n,i){super(e),this.tailCall=!1,this.optimizedTailCall=!1,this.ruleIndex=t,this.precedence=n,this.followState=i}get serializationType(){return 3}get isEpsilon(){return!0}matches(e,t,n){return!1}};i([a.NotNull],l.prototype,"followState",void 0),i([a.Override],l.prototype,"serializationType",null),i([a.Override],l.prototype,"isEpsilon",null),i([a.Override],l.prototype,"matches",null),l=i([o(0,a.NotNull),o(3,a.NotNull)],l),t.RuleTransition=l},function(e,t,n){"use strict";
/*!
 * Copyright 2016 The ANTLR Project. All rights reserved.
 * Licensed under the BSD-3-Clause license. See LICENSE file in the project root for license information.
 */var i=this&&this.__decorate||function(e,t,n,i){var o,a=arguments.length,r=a<3?t:null===i?i=Object.getOwnPropertyDescriptor(t,n):i;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)r=Reflect.decorate(e,t,n,i);else for(var l=e.length-1;l>=0;l--)(o=e[l])&&(r=(a<3?o(r):a>3?o(t,n,r):o(t,n))||r);return a>3&&r&&Object.defineProperty(t,n,r),r};Object.defineProperty(t,"__esModule",{value:!0});const o=n(0),a=n(29);class r extends a.TerminalNode{constructor(e){super(e)}accept(e){return e.visitErrorNode(this)}}i([o.Override],r.prototype,"accept",null),t.ErrorNode=r},function(e,t,n){"use strict";
/*!
 * Copyright 2016 The ANTLR Project. All rights reserved.
 * Licensed under the BSD-3-Clause license. See LICENSE file in the project root for license information.
 */Object.defineProperty(t,"__esModule",{value:!0});t.RuleNode=class{}},function(e,t,n){"use strict";
/*!
 * Copyright 2016 The ANTLR Project. All rights reserved.
 * Licensed under the BSD-3-Clause license. See LICENSE file in the project root for license information.
 */Object.defineProperty(t,"__esModule",{value:!0});const i=n(96),o=n(97),a=n(19);!function(e){e.fromString=function(e,t){void 0!==t&&0!==t.length||(t=a.IntStream.UNKNOWN_SOURCE_NAME);let n=i.CodePointBuffer.builder(e.length),r=new Uint16Array(e.length);for(let t=0;t<e.length;t++)r[t]=e.charCodeAt(t);return n.append(r),o.CodePointCharStream.fromBuffer(n.build(),t)}}(t.CharStreams||(t.CharStreams={}))},function(e,t,n){"use strict";
/*!
 * Copyright 2016 The ANTLR Project. All rights reserved.
 * Licensed under the BSD-3-Clause license. See LICENSE file in the project root for license information.
 */var i=this&&this.__decorate||function(e,t,n,i){var o,a=arguments.length,r=a<3?t:null===i?i=Object.getOwnPropertyDescriptor(t,n):i;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)r=Reflect.decorate(e,t,n,i);else for(var l=e.length-1;l>=0;l--)(o=e[l])&&(r=(a<3?o(r):a>3?o(t,n,r):o(t,n))||r);return a>3&&r&&Object.defineProperty(t,n,r),r},o=this&&this.__param||function(e,t){return function(n,i){t(n,i,e)}};Object.defineProperty(t,"__esModule",{value:!0});const a=n(98),r=n(0),l=n(3);let s=class extends a.BufferedTokenStream{constructor(e,t=l.Token.DEFAULT_CHANNEL){super(e),this.channel=t}adjustSeekIndex(e){return this.nextTokenOnChannel(e,this.channel)}tryLB(e){if(this.p-e<0)return;let t=this.p,n=1;for(;n<=e&&t>0;)t=this.previousTokenOnChannel(t-1,this.channel),n++;return t<0?void 0:this.tokens[t]}tryLT(e){if(this.lazyInit(),0===e)throw new RangeError("0 is not a valid lookahead index");if(e<0)return this.tryLB(-e);let t=this.p,n=1;for(;n<e;)this.sync(t+1)&&(t=this.nextTokenOnChannel(t+1,this.channel)),n++;return this.tokens[t]}getNumberOfOnChannelTokens(){let e=0;this.fill();for(let t of this.tokens)if(t.channel===this.channel&&e++,t.type===l.Token.EOF)break;return e}};i([r.Override],s.prototype,"adjustSeekIndex",null),i([r.Override],s.prototype,"tryLB",null),i([r.Override],s.prototype,"tryLT",null),s=i([o(0,r.NotNull)],s),t.CommonTokenStream=s},function(e,t,n){"use strict";
/*!
 * Copyright 2016 The ANTLR Project. All rights reserved.
 * Licensed under the BSD-3-Clause license. See LICENSE file in the project root for license information.
 */Object.defineProperty(t,"__esModule",{value:!0});const i=n(62),o=n(63),a=n(47),r=n(1),l=n(3),s=n(159),d=n(160),c=n(161),u=n(162),m=n(163),h=n(164),p=n(165),T=n(166);class b{constructor(e,t){this.parser=e,this.path=t,this.elements=this.split(t)}split(e){let t=new s.XPathLexer(i.CharStreams.fromString(e));t.recover=e=>{throw e},t.removeErrorListeners(),t.addErrorListener(new d.XPathLexerErrorListener);let n=new o.CommonTokenStream(t);try{n.fill()}catch(n){if(n instanceof a.LexerNoViableAltException){let i="Invalid tokens or characters at index "+t.charPositionInLine+" in path '"+e+"' -- "+n.message;throw new RangeError(i)}throw n}let r=n.getTokens(),c=[],u=r.length,m=0;e:for(;m<u;){let e,t=r[m];switch(t.type){case s.XPathLexer.ROOT:case s.XPathLexer.ANYWHERE:let n=t.type===s.XPathLexer.ANYWHERE;m++,e=r[m];let i=e.type===s.XPathLexer.BANG;i&&(m++,e=r[m]);let o=this.getXPathElement(e,n);o.invert=i,c.push(o),m++;break;case s.XPathLexer.TOKEN_REF:case s.XPathLexer.RULE_REF:case s.XPathLexer.WILDCARD:c.push(this.getXPathElement(t,!1)),m++;break;case l.Token.EOF:break e;default:throw new Error("Unknowth path element "+t)}}return c}getXPathElement(e,t){if(e.type===l.Token.EOF)throw new Error("Missing path element at end of path");let n=e.text;if(null==n)throw new Error("Expected wordToken to have text content.");let i=this.parser.getTokenType(n),o=this.parser.getRuleIndex(n);switch(e.type){case s.XPathLexer.WILDCARD:return t?new p.XPathWildcardAnywhereElement:new T.XPathWildcardElement;case s.XPathLexer.TOKEN_REF:case s.XPathLexer.STRING:if(i===l.Token.INVALID_TYPE)throw new Error(n+" at index "+e.startIndex+" isn't a valid token name");return t?new m.XPathTokenAnywhereElement(n,i):new h.XPathTokenElement(n,i);default:if(-1===o)throw new Error(n+" at index "+e.startIndex+" isn't a valid rule name");return t?new c.XPathRuleAnywhereElement(n,o):new u.XPathRuleElement(n,o)}}static findAll(e,t,n){return new b(n,t).evaluate(e)}evaluate(e){let t=new r.ParserRuleContext;t.addChild(e);let n=new Set([t]),i=0;for(;i<this.elements.length;){let e=new Set;for(let t of n)if(t.childCount>0){this.elements[i].evaluate(t).forEach(e.add,e)}i++,n=e}return n}}b.WILDCARD="*",b.NOT="!",t.XPath=b},function(e,t,n){"use strict";
/*!
 * Copyright 2016 The ANTLR Project. All rights reserved.
 * Licensed under the BSD-3-Clause license. See LICENSE file in the project root for license information.
 */function i(e){for(var n in e)t.hasOwnProperty(n)||(t[n]=e[n])}Object.defineProperty(t,"__esModule",{value:!0}),i(n(122)),i(n(79)),i(n(98)),i(n(62)),i(n(96)),i(n(97)),i(n(35)),i(n(53)),i(n(63)),i(n(85)),i(n(49)),i(n(177)),i(n(178)),i(n(7)),i(n(43)),i(n(102)),i(n(19)),i(n(18)),i(n(179)),i(n(47)),i(n(99)),i(n(9)),i(n(31)),i(n(101)),i(n(1)),i(n(55)),i(n(95)),i(n(2)),i(n(37)),i(n(93)),i(n(180)),i(n(181)),i(n(182)),i(n(3)),i(n(183)),i(n(16))},function(e,t){var n;n=function(){return this}();try{n=n||new Function("return this")()}catch(e){"object"==typeof window&&(n=window)}e.exports=n},function(e,t,n){"use strict";t.extend=function(e){var t,n,o,a,r=Array.prototype.slice.call(arguments,1);for(t=0,n=r.length;t<n;t+=1)if(o=r[t])for(a in o)i.call(o,a)&&(e[a]=o[a]);return e};var i=Object.prototype.hasOwnProperty;t.hop=i},function(e){e.exports=JSON.parse('{"suggestions":[{"label":"String","kind":"class","documentation":"Class: String","insertText":"String","properties":[{"label":"copyValueOf","kind":"method","documentation":"copyValueOf(char[] a, int b, int c | char[] a): String","insertText":"copyValueOf"},{"label":"format","kind":"method","documentation":"format(Locale a, String b, def[] c | String a, def[] b): String","insertText":"format"},{"label":"join","kind":"method","documentation":"join(CharSequence a, Iterable b): String","insertText":"join"},{"label":"valueOf","kind":"method","documentation":"valueOf(def a): String","insertText":"valueOf"},{"label":"charAt","kind":"method","documentation":"charAt(int a): char","insertText":"charAt"},{"label":"chars","kind":"method","documentation":"chars(): IntStream","insertText":"chars"},{"label":"codePointAt","kind":"method","documentation":"codePointAt(int a): int","insertText":"codePointAt"},{"label":"codePointBefore","kind":"method","documentation":"codePointBefore(int a): int","insertText":"codePointBefore"},{"label":"codePointCount","kind":"method","documentation":"codePointCount(int a, int b): int","insertText":"codePointCount"},{"label":"codePoints","kind":"method","documentation":"codePoints(): IntStream","insertText":"codePoints"},{"label":"compareTo","kind":"method","documentation":"compareTo(String a): int","insertText":"compareTo"},{"label":"compareToIgnoreCase","kind":"method","documentation":"compareToIgnoreCase(String a): int","insertText":"compareToIgnoreCase"},{"label":"concat","kind":"method","documentation":"concat(String a): String","insertText":"concat"},{"label":"contains","kind":"method","documentation":"contains(CharSequence a): boolean","insertText":"contains"},{"label":"contentEquals","kind":"method","documentation":"contentEquals(CharSequence a): boolean","insertText":"contentEquals"},{"label":"decodeBase64","kind":"method","documentation":"decodeBase64(): String","insertText":"decodeBase64"},{"label":"encodeBase64","kind":"method","documentation":"encodeBase64(): String","insertText":"encodeBase64"},{"label":"endsWith","kind":"method","documentation":"endsWith(String a): boolean","insertText":"endsWith"},{"label":"equals","kind":"method","documentation":"equals(Object a): boolean","insertText":"equals"},{"label":"equalsIgnoreCase","kind":"method","documentation":"equalsIgnoreCase(String a): boolean","insertText":"equalsIgnoreCase"},{"label":"getChars","kind":"method","documentation":"getChars(int a, int b, char[] c, int d): void","insertText":"getChars"},{"label":"hashCode","kind":"method","documentation":"hashCode(): int","insertText":"hashCode"},{"label":"indexOf","kind":"method","documentation":"indexOf(String a, int b | String a): int","insertText":"indexOf"},{"label":"isEmpty","kind":"method","documentation":"isEmpty(): boolean","insertText":"isEmpty"},{"label":"lastIndexOf","kind":"method","documentation":"lastIndexOf(String a, int b | String a): int","insertText":"lastIndexOf"},{"label":"length","kind":"method","documentation":"length(): int","insertText":"length"},{"label":"offsetByCodePoints","kind":"method","documentation":"offsetByCodePoints(int a, int b): int","insertText":"offsetByCodePoints"},{"label":"regionMatches","kind":"method","documentation":"regionMatches(boolean a, int b, String c, int d, int e | int a, String b, int c, int d): boolean","insertText":"regionMatches"},{"label":"replace","kind":"method","documentation":"replace(CharSequence a, CharSequence b): String","insertText":"replace"},{"label":"replaceAll","kind":"method","documentation":"replaceAll(Pattern a, Function b): String","insertText":"replaceAll"},{"label":"replaceFirst","kind":"method","documentation":"replaceFirst(Pattern a, Function b): String","insertText":"replaceFirst"},{"label":"splitOnToken","kind":"method","documentation":"splitOnToken(String a, int b | String a): String[]","insertText":"splitOnToken"},{"label":"startsWith","kind":"method","documentation":"startsWith(String a, int b | String a): boolean","insertText":"startsWith"},{"label":"subSequence","kind":"method","documentation":"subSequence(int a, int b): CharSequence","insertText":"subSequence"},{"label":"substring","kind":"method","documentation":"substring(int a, int b | int a): String","insertText":"substring"},{"label":"toCharArray","kind":"method","documentation":"toCharArray(): char[]","insertText":"toCharArray"},{"label":"toLowerCase","kind":"method","documentation":"toLowerCase(Locale a): String","insertText":"toLowerCase"},{"label":"toString","kind":"method","documentation":"toString(): String","insertText":"toString"},{"label":"toUpperCase","kind":"method","documentation":"toUpperCase(Locale a): String","insertText":"toUpperCase"},{"label":"trim","kind":"method","documentation":"trim(): String","insertText":"trim"}],"constructorDefinition":{"label":"String","kind":"constructor","documentation":"Constructor: String","insertText":"String"}},{"label":"org.elasticsearch.xpack.runtimefields.mapper.StringFieldScript","kind":"class","documentation":"Class: org.elasticsearch.xpack.runtimefields.mapper.StringFieldScript","insertText":"org.elasticsearch.xpack.runtimefields.mapper.StringFieldScript","properties":[{"label":"equals","kind":"method","documentation":"equals(Object a): boolean","insertText":"equals"},{"label":"hashCode","kind":"method","documentation":"hashCode(): int","insertText":"hashCode"},{"label":"toString","kind":"method","documentation":"toString(): String","insertText":"toString"}]},{"label":"org.elasticsearch.xpack.runtimefields.mapper.StringFieldScript.Factory","kind":"class","documentation":"Class: org.elasticsearch.xpack.runtimefields.mapper.StringFieldScript.Factory","insertText":"org.elasticsearch.xpack.runtimefields.mapper.StringFieldScript.Factory","properties":[{"label":"equals","kind":"method","documentation":"equals(Object a): boolean","insertText":"equals"},{"label":"hashCode","kind":"method","documentation":"hashCode(): int","insertText":"hashCode"},{"label":"toString","kind":"method","documentation":"toString(): String","insertText":"toString"}]}]}')},function(e){e.exports=JSON.parse('{"suggestions":[{"label":"String","kind":"class","documentation":"Class: String","insertText":"String","properties":[{"label":"copyValueOf","kind":"method","documentation":"copyValueOf(char[] a, int b, int c | char[] a): String","insertText":"copyValueOf"},{"label":"format","kind":"method","documentation":"format(Locale a, String b, def[] c | String a, def[] b): String","insertText":"format"},{"label":"join","kind":"method","documentation":"join(CharSequence a, Iterable b): String","insertText":"join"},{"label":"valueOf","kind":"method","documentation":"valueOf(def a): String","insertText":"valueOf"},{"label":"charAt","kind":"method","documentation":"charAt(int a): char","insertText":"charAt"},{"label":"chars","kind":"method","documentation":"chars(): IntStream","insertText":"chars"},{"label":"codePointAt","kind":"method","documentation":"codePointAt(int a): int","insertText":"codePointAt"},{"label":"codePointBefore","kind":"method","documentation":"codePointBefore(int a): int","insertText":"codePointBefore"},{"label":"codePointCount","kind":"method","documentation":"codePointCount(int a, int b): int","insertText":"codePointCount"},{"label":"codePoints","kind":"method","documentation":"codePoints(): IntStream","insertText":"codePoints"},{"label":"compareTo","kind":"method","documentation":"compareTo(String a): int","insertText":"compareTo"},{"label":"compareToIgnoreCase","kind":"method","documentation":"compareToIgnoreCase(String a): int","insertText":"compareToIgnoreCase"},{"label":"concat","kind":"method","documentation":"concat(String a): String","insertText":"concat"},{"label":"contains","kind":"method","documentation":"contains(CharSequence a): boolean","insertText":"contains"},{"label":"contentEquals","kind":"method","documentation":"contentEquals(CharSequence a): boolean","insertText":"contentEquals"},{"label":"decodeBase64","kind":"method","documentation":"decodeBase64(): String","insertText":"decodeBase64"},{"label":"encodeBase64","kind":"method","documentation":"encodeBase64(): String","insertText":"encodeBase64"},{"label":"endsWith","kind":"method","documentation":"endsWith(String a): boolean","insertText":"endsWith"},{"label":"equals","kind":"method","documentation":"equals(Object a): boolean","insertText":"equals"},{"label":"equalsIgnoreCase","kind":"method","documentation":"equalsIgnoreCase(String a): boolean","insertText":"equalsIgnoreCase"},{"label":"getChars","kind":"method","documentation":"getChars(int a, int b, char[] c, int d): void","insertText":"getChars"},{"label":"hashCode","kind":"method","documentation":"hashCode(): int","insertText":"hashCode"},{"label":"indexOf","kind":"method","documentation":"indexOf(String a, int b | String a): int","insertText":"indexOf"},{"label":"isEmpty","kind":"method","documentation":"isEmpty(): boolean","insertText":"isEmpty"},{"label":"lastIndexOf","kind":"method","documentation":"lastIndexOf(String a, int b | String a): int","insertText":"lastIndexOf"},{"label":"length","kind":"method","documentation":"length(): int","insertText":"length"},{"label":"offsetByCodePoints","kind":"method","documentation":"offsetByCodePoints(int a, int b): int","insertText":"offsetByCodePoints"},{"label":"regionMatches","kind":"method","documentation":"regionMatches(boolean a, int b, String c, int d, int e | int a, String b, int c, int d): boolean","insertText":"regionMatches"},{"label":"replace","kind":"method","documentation":"replace(CharSequence a, CharSequence b): String","insertText":"replace"},{"label":"replaceAll","kind":"method","documentation":"replaceAll(Pattern a, Function b): String","insertText":"replaceAll"},{"label":"replaceFirst","kind":"method","documentation":"replaceFirst(Pattern a, Function b): String","insertText":"replaceFirst"},{"label":"splitOnToken","kind":"method","documentation":"splitOnToken(String a, int b | String a): String[]","insertText":"splitOnToken"},{"label":"startsWith","kind":"method","documentation":"startsWith(String a, int b | String a): boolean","insertText":"startsWith"},{"label":"subSequence","kind":"method","documentation":"subSequence(int a, int b): CharSequence","insertText":"subSequence"},{"label":"substring","kind":"method","documentation":"substring(int a, int b | int a): String","insertText":"substring"},{"label":"toCharArray","kind":"method","documentation":"toCharArray(): char[]","insertText":"toCharArray"},{"label":"toLowerCase","kind":"method","documentation":"toLowerCase(Locale a): String","insertText":"toLowerCase"},{"label":"toString","kind":"method","documentation":"toString(): String","insertText":"toString"},{"label":"toUpperCase","kind":"method","documentation":"toUpperCase(Locale a): String","insertText":"toUpperCase"},{"label":"trim","kind":"method","documentation":"trim(): String","insertText":"trim"}],"constructorDefinition":{"label":"String","kind":"constructor","documentation":"Constructor: String","insertText":"String"}},{"label":"DenseVectorScriptDocValues","kind":"class","documentation":"Class: DenseVectorScriptDocValues","insertText":"DenseVectorScriptDocValues","properties":[{"label":"add","kind":"method","documentation":"add(int a, def b | def a): void | boolean","insertText":"add"},{"label":"addAll","kind":"method","documentation":"addAll(int a, Collection b | Collection a): boolean","insertText":"addAll"},{"label":"any","kind":"method","documentation":"any(Predicate a): boolean","insertText":"any"},{"label":"asCollection","kind":"method","documentation":"asCollection(): Collection","insertText":"asCollection"},{"label":"asList","kind":"method","documentation":"asList(): List","insertText":"asList"},{"label":"clear","kind":"method","documentation":"clear(): void","insertText":"clear"},{"label":"collect","kind":"method","documentation":"collect(Collection a, Function b | Function a): def | List","insertText":"collect"},{"label":"contains","kind":"method","documentation":"contains(def a): boolean","insertText":"contains"},{"label":"containsAll","kind":"method","documentation":"containsAll(Collection a): boolean","insertText":"containsAll"},{"label":"each","kind":"method","documentation":"each(Consumer a): def","insertText":"each"},{"label":"eachWithIndex","kind":"method","documentation":"eachWithIndex(ObjIntConsumer a): def","insertText":"eachWithIndex"},{"label":"equals","kind":"method","documentation":"equals(Object a): boolean","insertText":"equals"},{"label":"every","kind":"method","documentation":"every(Predicate a): boolean","insertText":"every"},{"label":"find","kind":"method","documentation":"find(Predicate a): def","insertText":"find"},{"label":"findAll","kind":"method","documentation":"findAll(Predicate a): List","insertText":"findAll"},{"label":"findResult","kind":"method","documentation":"findResult(def a, Function b | Function a): def","insertText":"findResult"},{"label":"findResults","kind":"method","documentation":"findResults(Function a): List","insertText":"findResults"},{"label":"forEach","kind":"method","documentation":"forEach(Consumer a): void","insertText":"forEach"},{"label":"get","kind":"method","documentation":"get(int a): def","insertText":"get"},{"label":"getByPath","kind":"method","documentation":"getByPath(String a, Object b | String a): Object","insertText":"getByPath"},{"label":"getLength","kind":"method","documentation":"getLength(): int","insertText":"getLength"},{"label":"groupBy","kind":"method","documentation":"groupBy(Function a): Map","insertText":"groupBy"},{"label":"hashCode","kind":"method","documentation":"hashCode(): int","insertText":"hashCode"},{"label":"indexOf","kind":"method","documentation":"indexOf(def a): int","insertText":"indexOf"},{"label":"isEmpty","kind":"method","documentation":"isEmpty(): boolean","insertText":"isEmpty"},{"label":"iterator","kind":"method","documentation":"iterator(): Iterator","insertText":"iterator"},{"label":"join","kind":"method","documentation":"join(String a): String","insertText":"join"},{"label":"lastIndexOf","kind":"method","documentation":"lastIndexOf(def a): int","insertText":"lastIndexOf"},{"label":"listIterator","kind":"method","documentation":"listIterator(int a): ListIterator","insertText":"listIterator"},{"label":"remove","kind":"method","documentation":"remove(int a): def","insertText":"remove"},{"label":"removeAll","kind":"method","documentation":"removeAll(Collection a): boolean","insertText":"removeAll"},{"label":"removeIf","kind":"method","documentation":"removeIf(Predicate a): boolean","insertText":"removeIf"},{"label":"replaceAll","kind":"method","documentation":"replaceAll(UnaryOperator a): void","insertText":"replaceAll"},{"label":"retainAll","kind":"method","documentation":"retainAll(Collection a): boolean","insertText":"retainAll"},{"label":"set","kind":"method","documentation":"set(int a, def b): def","insertText":"set"},{"label":"size","kind":"method","documentation":"size(): int","insertText":"size"},{"label":"sort","kind":"method","documentation":"sort(Comparator a): void","insertText":"sort"},{"label":"split","kind":"method","documentation":"split(Predicate a): List","insertText":"split"},{"label":"spliterator","kind":"method","documentation":"spliterator(): Spliterator","insertText":"spliterator"},{"label":"stream","kind":"method","documentation":"stream(): Stream","insertText":"stream"},{"label":"subList","kind":"method","documentation":"subList(int a, int b): List","insertText":"subList"},{"label":"sum","kind":"method","documentation":"sum(ToDoubleFunction a): double","insertText":"sum"},{"label":"toArray","kind":"method","documentation":"toArray(def[] a): def[]","insertText":"toArray"},{"label":"toString","kind":"method","documentation":"toString(): String","insertText":"toString"}]},{"label":"VersionScriptDocValues","kind":"class","documentation":"Class: VersionScriptDocValues","insertText":"VersionScriptDocValues","properties":[{"label":"add","kind":"method","documentation":"add(int a, def b | def a): void | boolean","insertText":"add"},{"label":"addAll","kind":"method","documentation":"addAll(int a, Collection b | Collection a): boolean","insertText":"addAll"},{"label":"any","kind":"method","documentation":"any(Predicate a): boolean","insertText":"any"},{"label":"asCollection","kind":"method","documentation":"asCollection(): Collection","insertText":"asCollection"},{"label":"asList","kind":"method","documentation":"asList(): List","insertText":"asList"},{"label":"clear","kind":"method","documentation":"clear(): void","insertText":"clear"},{"label":"collect","kind":"method","documentation":"collect(Collection a, Function b | Function a): def | List","insertText":"collect"},{"label":"contains","kind":"method","documentation":"contains(def a): boolean","insertText":"contains"},{"label":"containsAll","kind":"method","documentation":"containsAll(Collection a): boolean","insertText":"containsAll"},{"label":"each","kind":"method","documentation":"each(Consumer a): def","insertText":"each"},{"label":"eachWithIndex","kind":"method","documentation":"eachWithIndex(ObjIntConsumer a): def","insertText":"eachWithIndex"},{"label":"equals","kind":"method","documentation":"equals(Object a): boolean","insertText":"equals"},{"label":"every","kind":"method","documentation":"every(Predicate a): boolean","insertText":"every"},{"label":"find","kind":"method","documentation":"find(Predicate a): def","insertText":"find"},{"label":"findAll","kind":"method","documentation":"findAll(Predicate a): List","insertText":"findAll"},{"label":"findResult","kind":"method","documentation":"findResult(def a, Function b | Function a): def","insertText":"findResult"},{"label":"findResults","kind":"method","documentation":"findResults(Function a): List","insertText":"findResults"},{"label":"forEach","kind":"method","documentation":"forEach(Consumer a): void","insertText":"forEach"},{"label":"get","kind":"method","documentation":"get(int a): String","insertText":"get"},{"label":"getByPath","kind":"method","documentation":"getByPath(String a, Object b | String a): Object","insertText":"getByPath"},{"label":"getLength","kind":"method","documentation":"getLength(): int","insertText":"getLength"},{"label":"getValue","kind":"method","documentation":"getValue(): String","insertText":"getValue"},{"label":"groupBy","kind":"method","documentation":"groupBy(Function a): Map","insertText":"groupBy"},{"label":"hashCode","kind":"method","documentation":"hashCode(): int","insertText":"hashCode"},{"label":"indexOf","kind":"method","documentation":"indexOf(def a): int","insertText":"indexOf"},{"label":"isEmpty","kind":"method","documentation":"isEmpty(): boolean","insertText":"isEmpty"},{"label":"iterator","kind":"method","documentation":"iterator(): Iterator","insertText":"iterator"},{"label":"join","kind":"method","documentation":"join(String a): String","insertText":"join"},{"label":"lastIndexOf","kind":"method","documentation":"lastIndexOf(def a): int","insertText":"lastIndexOf"},{"label":"listIterator","kind":"method","documentation":"listIterator(int a): ListIterator","insertText":"listIterator"},{"label":"remove","kind":"method","documentation":"remove(int a): def","insertText":"remove"},{"label":"removeAll","kind":"method","documentation":"removeAll(Collection a): boolean","insertText":"removeAll"},{"label":"removeIf","kind":"method","documentation":"removeIf(Predicate a): boolean","insertText":"removeIf"},{"label":"replaceAll","kind":"method","documentation":"replaceAll(UnaryOperator a): void","insertText":"replaceAll"},{"label":"retainAll","kind":"method","documentation":"retainAll(Collection a): boolean","insertText":"retainAll"},{"label":"set","kind":"method","documentation":"set(int a, def b): def","insertText":"set"},{"label":"size","kind":"method","documentation":"size(): int","insertText":"size"},{"label":"sort","kind":"method","documentation":"sort(Comparator a): void","insertText":"sort"},{"label":"split","kind":"method","documentation":"split(Predicate a): List","insertText":"split"},{"label":"spliterator","kind":"method","documentation":"spliterator(): Spliterator","insertText":"spliterator"},{"label":"stream","kind":"method","documentation":"stream(): Stream","insertText":"stream"},{"label":"subList","kind":"method","documentation":"subList(int a, int b): List","insertText":"subList"},{"label":"sum","kind":"method","documentation":"sum(ToDoubleFunction a): double","insertText":"sum"},{"label":"toArray","kind":"method","documentation":"toArray(def[] a): def[]","insertText":"toArray"},{"label":"toString","kind":"method","documentation":"toString(): String","insertText":"toString"}]}]}')},function(e){e.exports=JSON.parse('{"suggestions":[{"label":"String","kind":"class","documentation":"Class: String","insertText":"String","properties":[{"label":"copyValueOf","kind":"method","documentation":"copyValueOf(char[] a, int b, int c | char[] a): String","insertText":"copyValueOf"},{"label":"format","kind":"method","documentation":"format(Locale a, String b, def[] c | String a, def[] b): String","insertText":"format"},{"label":"join","kind":"method","documentation":"join(CharSequence a, Iterable b): String","insertText":"join"},{"label":"valueOf","kind":"method","documentation":"valueOf(def a): String","insertText":"valueOf"},{"label":"charAt","kind":"method","documentation":"charAt(int a): char","insertText":"charAt"},{"label":"chars","kind":"method","documentation":"chars(): IntStream","insertText":"chars"},{"label":"codePointAt","kind":"method","documentation":"codePointAt(int a): int","insertText":"codePointAt"},{"label":"codePointBefore","kind":"method","documentation":"codePointBefore(int a): int","insertText":"codePointBefore"},{"label":"codePointCount","kind":"method","documentation":"codePointCount(int a, int b): int","insertText":"codePointCount"},{"label":"codePoints","kind":"method","documentation":"codePoints(): IntStream","insertText":"codePoints"},{"label":"compareTo","kind":"method","documentation":"compareTo(String a): int","insertText":"compareTo"},{"label":"compareToIgnoreCase","kind":"method","documentation":"compareToIgnoreCase(String a): int","insertText":"compareToIgnoreCase"},{"label":"concat","kind":"method","documentation":"concat(String a): String","insertText":"concat"},{"label":"contains","kind":"method","documentation":"contains(CharSequence a): boolean","insertText":"contains"},{"label":"contentEquals","kind":"method","documentation":"contentEquals(CharSequence a): boolean","insertText":"contentEquals"},{"label":"decodeBase64","kind":"method","documentation":"decodeBase64(): String","insertText":"decodeBase64"},{"label":"encodeBase64","kind":"method","documentation":"encodeBase64(): String","insertText":"encodeBase64"},{"label":"endsWith","kind":"method","documentation":"endsWith(String a): boolean","insertText":"endsWith"},{"label":"equals","kind":"method","documentation":"equals(Object a): boolean","insertText":"equals"},{"label":"equalsIgnoreCase","kind":"method","documentation":"equalsIgnoreCase(String a): boolean","insertText":"equalsIgnoreCase"},{"label":"getChars","kind":"method","documentation":"getChars(int a, int b, char[] c, int d): void","insertText":"getChars"},{"label":"hashCode","kind":"method","documentation":"hashCode(): int","insertText":"hashCode"},{"label":"indexOf","kind":"method","documentation":"indexOf(String a, int b | String a): int","insertText":"indexOf"},{"label":"isEmpty","kind":"method","documentation":"isEmpty(): boolean","insertText":"isEmpty"},{"label":"lastIndexOf","kind":"method","documentation":"lastIndexOf(String a, int b | String a): int","insertText":"lastIndexOf"},{"label":"length","kind":"method","documentation":"length(): int","insertText":"length"},{"label":"offsetByCodePoints","kind":"method","documentation":"offsetByCodePoints(int a, int b): int","insertText":"offsetByCodePoints"},{"label":"regionMatches","kind":"method","documentation":"regionMatches(boolean a, int b, String c, int d, int e | int a, String b, int c, int d): boolean","insertText":"regionMatches"},{"label":"replace","kind":"method","documentation":"replace(CharSequence a, CharSequence b): String","insertText":"replace"},{"label":"replaceAll","kind":"method","documentation":"replaceAll(Pattern a, Function b): String","insertText":"replaceAll"},{"label":"replaceFirst","kind":"method","documentation":"replaceFirst(Pattern a, Function b): String","insertText":"replaceFirst"},{"label":"splitOnToken","kind":"method","documentation":"splitOnToken(String a, int b | String a): String[]","insertText":"splitOnToken"},{"label":"startsWith","kind":"method","documentation":"startsWith(String a, int b | String a): boolean","insertText":"startsWith"},{"label":"subSequence","kind":"method","documentation":"subSequence(int a, int b): CharSequence","insertText":"subSequence"},{"label":"substring","kind":"method","documentation":"substring(int a, int b | int a): String","insertText":"substring"},{"label":"toCharArray","kind":"method","documentation":"toCharArray(): char[]","insertText":"toCharArray"},{"label":"toLowerCase","kind":"method","documentation":"toLowerCase(Locale a): String","insertText":"toLowerCase"},{"label":"toString","kind":"method","documentation":"toString(): String","insertText":"toString"},{"label":"toUpperCase","kind":"method","documentation":"toUpperCase(Locale a): String","insertText":"toUpperCase"},{"label":"trim","kind":"method","documentation":"trim(): String","insertText":"trim"}],"constructorDefinition":{"label":"String","kind":"constructor","documentation":"Constructor: String","insertText":"String"}}]}')},function(e){e.exports=JSON.parse('{"suggestions":[{"label":"Appendable","kind":"class","documentation":"Class: Appendable","insertText":"Appendable","properties":[{"label":"append","kind":"method","documentation":"append(CharSequence a, int b, int c): Appendable","insertText":"append"},{"label":"equals","kind":"method","documentation":"equals(Object a): boolean","insertText":"equals"},{"label":"hashCode","kind":"method","documentation":"hashCode(): int","insertText":"hashCode"},{"label":"toString","kind":"method","documentation":"toString(): String","insertText":"toString"}]},{"label":"ArithmeticException","kind":"class","documentation":"Class: ArithmeticException","insertText":"ArithmeticException","properties":[{"label":"equals","kind":"method","documentation":"equals(Object a): boolean","insertText":"equals"},{"label":"getLocalizedMessage","kind":"method","documentation":"getLocalizedMessage(): String","insertText":"getLocalizedMessage"},{"label":"getMessage","kind":"method","documentation":"getMessage(): String","insertText":"getMessage"},{"label":"getStackTrace","kind":"method","documentation":"getStackTrace(): StackTraceElement[]","insertText":"getStackTrace"},{"label":"hashCode","kind":"method","documentation":"hashCode(): int","insertText":"hashCode"},{"label":"toString","kind":"method","documentation":"toString(): String","insertText":"toString"}],"constructorDefinition":{"label":"ArithmeticException","kind":"constructor","documentation":"Constructor: ArithmeticException","insertText":"ArithmeticException"}},{"label":"ArrayIndexOutOfBoundsException","kind":"class","documentation":"Class: ArrayIndexOutOfBoundsException","insertText":"ArrayIndexOutOfBoundsException","properties":[{"label":"equals","kind":"method","documentation":"equals(Object a): boolean","insertText":"equals"},{"label":"getLocalizedMessage","kind":"method","documentation":"getLocalizedMessage(): String","insertText":"getLocalizedMessage"},{"label":"getMessage","kind":"method","documentation":"getMessage(): String","insertText":"getMessage"},{"label":"getStackTrace","kind":"method","documentation":"getStackTrace(): StackTraceElement[]","insertText":"getStackTrace"},{"label":"hashCode","kind":"method","documentation":"hashCode(): int","insertText":"hashCode"},{"label":"toString","kind":"method","documentation":"toString(): String","insertText":"toString"}],"constructorDefinition":{"label":"ArrayIndexOutOfBoundsException","kind":"constructor","documentation":"Constructor: ArrayIndexOutOfBoundsException","insertText":"ArrayIndexOutOfBoundsException"}},{"label":"ArrayStoreException","kind":"class","documentation":"Class: ArrayStoreException","insertText":"ArrayStoreException","properties":[{"label":"equals","kind":"method","documentation":"equals(Object a): boolean","insertText":"equals"},{"label":"getLocalizedMessage","kind":"method","documentation":"getLocalizedMessage(): String","insertText":"getLocalizedMessage"},{"label":"getMessage","kind":"method","documentation":"getMessage(): String","insertText":"getMessage"},{"label":"getStackTrace","kind":"method","documentation":"getStackTrace(): StackTraceElement[]","insertText":"getStackTrace"},{"label":"hashCode","kind":"method","documentation":"hashCode(): int","insertText":"hashCode"},{"label":"toString","kind":"method","documentation":"toString(): String","insertText":"toString"}],"constructorDefinition":{"label":"ArrayStoreException","kind":"constructor","documentation":"Constructor: ArrayStoreException","insertText":"ArrayStoreException"}},{"label":"Boolean","kind":"class","documentation":"Class: Boolean","insertText":"Boolean","properties":[{"label":"FALSE","kind":"property","documentation":"FALSE: Boolean","insertText":"FALSE"},{"label":"TRUE","kind":"property","documentation":"TRUE: Boolean","insertText":"TRUE"},{"label":"compare","kind":"method","documentation":"compare(boolean a, boolean b): int","insertText":"compare"},{"label":"hashCode","kind":"method","documentation":"hashCode(boolean a): int","insertText":"hashCode"},{"label":"logicalAnd","kind":"method","documentation":"logicalAnd(boolean a, boolean b): boolean","insertText":"logicalAnd"},{"label":"logicalOr","kind":"method","documentation":"logicalOr(boolean a, boolean b): boolean","insertText":"logicalOr"},{"label":"logicalXor","kind":"method","documentation":"logicalXor(boolean a, boolean b): boolean","insertText":"logicalXor"},{"label":"parseBoolean","kind":"method","documentation":"parseBoolean(String a): boolean","insertText":"parseBoolean"},{"label":"toString","kind":"method","documentation":"toString(boolean a): String","insertText":"toString"},{"label":"valueOf","kind":"method","documentation":"valueOf(boolean a): Boolean","insertText":"valueOf"},{"label":"booleanValue","kind":"method","documentation":"booleanValue(): boolean","insertText":"booleanValue"},{"label":"compareTo","kind":"method","documentation":"compareTo(Boolean a): int","insertText":"compareTo"},{"label":"equals","kind":"method","documentation":"equals(Object a): boolean","insertText":"equals"},{"label":"hashCode","kind":"method","documentation":"hashCode(): int","insertText":"hashCode"},{"label":"toString","kind":"method","documentation":"toString(): String","insertText":"toString"}]},{"label":"Byte","kind":"class","documentation":"Class: Byte","insertText":"Byte","properties":[{"label":"BYTES","kind":"property","documentation":"BYTES: int","insertText":"BYTES"},{"label":"MAX_VALUE","kind":"property","documentation":"MAX_VALUE: byte","insertText":"MAX_VALUE"},{"label":"MIN_VALUE","kind":"property","documentation":"MIN_VALUE: byte","insertText":"MIN_VALUE"},{"label":"SIZE","kind":"property","documentation":"SIZE: int","insertText":"SIZE"},{"label":"compare","kind":"method","documentation":"compare(byte a, byte b): int","insertText":"compare"},{"label":"decode","kind":"method","documentation":"decode(String a): Byte","insertText":"decode"},{"label":"hashCode","kind":"method","documentation":"hashCode(byte a): int","insertText":"hashCode"},{"label":"parseByte","kind":"method","documentation":"parseByte(String a, int b | String a): byte","insertText":"parseByte"},{"label":"toString","kind":"method","documentation":"toString(byte a): String","insertText":"toString"},{"label":"toUnsignedInt","kind":"method","documentation":"toUnsignedInt(byte a): int","insertText":"toUnsignedInt"},{"label":"toUnsignedLong","kind":"method","documentation":"toUnsignedLong(byte a): long","insertText":"toUnsignedLong"},{"label":"valueOf","kind":"method","documentation":"valueOf(String a, int b | byte a): Byte","insertText":"valueOf"},{"label":"byteValue","kind":"method","documentation":"byteValue(): byte","insertText":"byteValue"},{"label":"compareTo","kind":"method","documentation":"compareTo(Byte a): int","insertText":"compareTo"},{"label":"doubleValue","kind":"method","documentation":"doubleValue(): double","insertText":"doubleValue"},{"label":"equals","kind":"method","documentation":"equals(Object a): boolean","insertText":"equals"},{"label":"floatValue","kind":"method","documentation":"floatValue(): float","insertText":"floatValue"},{"label":"hashCode","kind":"method","documentation":"hashCode(): int","insertText":"hashCode"},{"label":"intValue","kind":"method","documentation":"intValue(): int","insertText":"intValue"},{"label":"longValue","kind":"method","documentation":"longValue(): long","insertText":"longValue"},{"label":"shortValue","kind":"method","documentation":"shortValue(): short","insertText":"shortValue"},{"label":"toString","kind":"method","documentation":"toString(): String","insertText":"toString"}]},{"label":"CharSequence","kind":"class","documentation":"Class: CharSequence","insertText":"CharSequence","properties":[{"label":"charAt","kind":"method","documentation":"charAt(int a): char","insertText":"charAt"},{"label":"chars","kind":"method","documentation":"chars(): IntStream","insertText":"chars"},{"label":"codePoints","kind":"method","documentation":"codePoints(): IntStream","insertText":"codePoints"},{"label":"equals","kind":"method","documentation":"equals(Object a): boolean","insertText":"equals"},{"label":"hashCode","kind":"method","documentation":"hashCode(): int","insertText":"hashCode"},{"label":"length","kind":"method","documentation":"length(): int","insertText":"length"},{"label":"replaceAll","kind":"method","documentation":"replaceAll(Pattern a, Function b): String","insertText":"replaceAll"},{"label":"replaceFirst","kind":"method","documentation":"replaceFirst(Pattern a, Function b): String","insertText":"replaceFirst"},{"label":"subSequence","kind":"method","documentation":"subSequence(int a, int b): CharSequence","insertText":"subSequence"},{"label":"toString","kind":"method","documentation":"toString(): String","insertText":"toString"}]},{"label":"Character","kind":"class","documentation":"Class: Character","insertText":"Character","properties":[{"label":"BYTES","kind":"property","documentation":"BYTES: int","insertText":"BYTES"},{"label":"COMBINING_SPACING_MARK","kind":"property","documentation":"COMBINING_SPACING_MARK: byte","insertText":"COMBINING_SPACING_MARK"},{"label":"CONNECTOR_PUNCTUATION","kind":"property","documentation":"CONNECTOR_PUNCTUATION: byte","insertText":"CONNECTOR_PUNCTUATION"},{"label":"CONTROL","kind":"property","documentation":"CONTROL: byte","insertText":"CONTROL"},{"label":"CURRENCY_SYMBOL","kind":"property","documentation":"CURRENCY_SYMBOL: byte","insertText":"CURRENCY_SYMBOL"},{"label":"DASH_PUNCTUATION","kind":"property","documentation":"DASH_PUNCTUATION: byte","insertText":"DASH_PUNCTUATION"},{"label":"DECIMAL_DIGIT_NUMBER","kind":"property","documentation":"DECIMAL_DIGIT_NUMBER: byte","insertText":"DECIMAL_DIGIT_NUMBER"},{"label":"DIRECTIONALITY_ARABIC_NUMBER","kind":"property","documentation":"DIRECTIONALITY_ARABIC_NUMBER: byte","insertText":"DIRECTIONALITY_ARABIC_NUMBER"},{"label":"DIRECTIONALITY_BOUNDARY_NEUTRAL","kind":"property","documentation":"DIRECTIONALITY_BOUNDARY_NEUTRAL: byte","insertText":"DIRECTIONALITY_BOUNDARY_NEUTRAL"},{"label":"DIRECTIONALITY_COMMON_NUMBER_SEPARATOR","kind":"property","documentation":"DIRECTIONALITY_COMMON_NUMBER_SEPARATOR: byte","insertText":"DIRECTIONALITY_COMMON_NUMBER_SEPARATOR"},{"label":"DIRECTIONALITY_EUROPEAN_NUMBER","kind":"property","documentation":"DIRECTIONALITY_EUROPEAN_NUMBER: byte","insertText":"DIRECTIONALITY_EUROPEAN_NUMBER"},{"label":"DIRECTIONALITY_EUROPEAN_NUMBER_SEPARATOR","kind":"property","documentation":"DIRECTIONALITY_EUROPEAN_NUMBER_SEPARATOR: byte","insertText":"DIRECTIONALITY_EUROPEAN_NUMBER_SEPARATOR"},{"label":"DIRECTIONALITY_EUROPEAN_NUMBER_TERMINATOR","kind":"property","documentation":"DIRECTIONALITY_EUROPEAN_NUMBER_TERMINATOR: byte","insertText":"DIRECTIONALITY_EUROPEAN_NUMBER_TERMINATOR"},{"label":"DIRECTIONALITY_LEFT_TO_RIGHT","kind":"property","documentation":"DIRECTIONALITY_LEFT_TO_RIGHT: byte","insertText":"DIRECTIONALITY_LEFT_TO_RIGHT"},{"label":"DIRECTIONALITY_LEFT_TO_RIGHT_EMBEDDING","kind":"property","documentation":"DIRECTIONALITY_LEFT_TO_RIGHT_EMBEDDING: byte","insertText":"DIRECTIONALITY_LEFT_TO_RIGHT_EMBEDDING"},{"label":"DIRECTIONALITY_LEFT_TO_RIGHT_OVERRIDE","kind":"property","documentation":"DIRECTIONALITY_LEFT_TO_RIGHT_OVERRIDE: byte","insertText":"DIRECTIONALITY_LEFT_TO_RIGHT_OVERRIDE"},{"label":"DIRECTIONALITY_NONSPACING_MARK","kind":"property","documentation":"DIRECTIONALITY_NONSPACING_MARK: byte","insertText":"DIRECTIONALITY_NONSPACING_MARK"},{"label":"DIRECTIONALITY_OTHER_NEUTRALS","kind":"property","documentation":"DIRECTIONALITY_OTHER_NEUTRALS: byte","insertText":"DIRECTIONALITY_OTHER_NEUTRALS"},{"label":"DIRECTIONALITY_PARAGRAPH_SEPARATOR","kind":"property","documentation":"DIRECTIONALITY_PARAGRAPH_SEPARATOR: byte","insertText":"DIRECTIONALITY_PARAGRAPH_SEPARATOR"},{"label":"DIRECTIONALITY_POP_DIRECTIONAL_FORMAT","kind":"property","documentation":"DIRECTIONALITY_POP_DIRECTIONAL_FORMAT: byte","insertText":"DIRECTIONALITY_POP_DIRECTIONAL_FORMAT"},{"label":"DIRECTIONALITY_RIGHT_TO_LEFT","kind":"property","documentation":"DIRECTIONALITY_RIGHT_TO_LEFT: byte","insertText":"DIRECTIONALITY_RIGHT_TO_LEFT"},{"label":"DIRECTIONALITY_RIGHT_TO_LEFT_ARABIC","kind":"property","documentation":"DIRECTIONALITY_RIGHT_TO_LEFT_ARABIC: byte","insertText":"DIRECTIONALITY_RIGHT_TO_LEFT_ARABIC"},{"label":"DIRECTIONALITY_RIGHT_TO_LEFT_EMBEDDING","kind":"property","documentation":"DIRECTIONALITY_RIGHT_TO_LEFT_EMBEDDING: byte","insertText":"DIRECTIONALITY_RIGHT_TO_LEFT_EMBEDDING"},{"label":"DIRECTIONALITY_RIGHT_TO_LEFT_OVERRIDE","kind":"property","documentation":"DIRECTIONALITY_RIGHT_TO_LEFT_OVERRIDE: byte","insertText":"DIRECTIONALITY_RIGHT_TO_LEFT_OVERRIDE"},{"label":"DIRECTIONALITY_SEGMENT_SEPARATOR","kind":"property","documentation":"DIRECTIONALITY_SEGMENT_SEPARATOR: byte","insertText":"DIRECTIONALITY_SEGMENT_SEPARATOR"},{"label":"DIRECTIONALITY_UNDEFINED","kind":"property","documentation":"DIRECTIONALITY_UNDEFINED: byte","insertText":"DIRECTIONALITY_UNDEFINED"},{"label":"DIRECTIONALITY_WHITESPACE","kind":"property","documentation":"DIRECTIONALITY_WHITESPACE: byte","insertText":"DIRECTIONALITY_WHITESPACE"},{"label":"ENCLOSING_MARK","kind":"property","documentation":"ENCLOSING_MARK: byte","insertText":"ENCLOSING_MARK"},{"label":"END_PUNCTUATION","kind":"property","documentation":"END_PUNCTUATION: byte","insertText":"END_PUNCTUATION"},{"label":"FINAL_QUOTE_PUNCTUATION","kind":"property","documentation":"FINAL_QUOTE_PUNCTUATION: byte","insertText":"FINAL_QUOTE_PUNCTUATION"},{"label":"FORMAT","kind":"property","documentation":"FORMAT: byte","insertText":"FORMAT"},{"label":"INITIAL_QUOTE_PUNCTUATION","kind":"property","documentation":"INITIAL_QUOTE_PUNCTUATION: byte","insertText":"INITIAL_QUOTE_PUNCTUATION"},{"label":"LETTER_NUMBER","kind":"property","documentation":"LETTER_NUMBER: byte","insertText":"LETTER_NUMBER"},{"label":"LINE_SEPARATOR","kind":"property","documentation":"LINE_SEPARATOR: byte","insertText":"LINE_SEPARATOR"},{"label":"LOWERCASE_LETTER","kind":"property","documentation":"LOWERCASE_LETTER: byte","insertText":"LOWERCASE_LETTER"},{"label":"MATH_SYMBOL","kind":"property","documentation":"MATH_SYMBOL: byte","insertText":"MATH_SYMBOL"},{"label":"MAX_CODE_POINT","kind":"property","documentation":"MAX_CODE_POINT: int","insertText":"MAX_CODE_POINT"},{"label":"MAX_HIGH_SURROGATE","kind":"property","documentation":"MAX_HIGH_SURROGATE: char","insertText":"MAX_HIGH_SURROGATE"},{"label":"MAX_LOW_SURROGATE","kind":"property","documentation":"MAX_LOW_SURROGATE: char","insertText":"MAX_LOW_SURROGATE"},{"label":"MAX_RADIX","kind":"property","documentation":"MAX_RADIX: int","insertText":"MAX_RADIX"},{"label":"MAX_SURROGATE","kind":"property","documentation":"MAX_SURROGATE: char","insertText":"MAX_SURROGATE"},{"label":"MAX_VALUE","kind":"property","documentation":"MAX_VALUE: char","insertText":"MAX_VALUE"},{"label":"MIN_CODE_POINT","kind":"property","documentation":"MIN_CODE_POINT: int","insertText":"MIN_CODE_POINT"},{"label":"MIN_HIGH_SURROGATE","kind":"property","documentation":"MIN_HIGH_SURROGATE: char","insertText":"MIN_HIGH_SURROGATE"},{"label":"MIN_LOW_SURROGATE","kind":"property","documentation":"MIN_LOW_SURROGATE: char","insertText":"MIN_LOW_SURROGATE"},{"label":"MIN_RADIX","kind":"property","documentation":"MIN_RADIX: int","insertText":"MIN_RADIX"},{"label":"MIN_SUPPLEMENTARY_CODE_POINT","kind":"property","documentation":"MIN_SUPPLEMENTARY_CODE_POINT: int","insertText":"MIN_SUPPLEMENTARY_CODE_POINT"},{"label":"MIN_SURROGATE","kind":"property","documentation":"MIN_SURROGATE: char","insertText":"MIN_SURROGATE"},{"label":"MIN_VALUE","kind":"property","documentation":"MIN_VALUE: char","insertText":"MIN_VALUE"},{"label":"MODIFIER_LETTER","kind":"property","documentation":"MODIFIER_LETTER: byte","insertText":"MODIFIER_LETTER"},{"label":"MODIFIER_SYMBOL","kind":"property","documentation":"MODIFIER_SYMBOL: byte","insertText":"MODIFIER_SYMBOL"},{"label":"NON_SPACING_MARK","kind":"property","documentation":"NON_SPACING_MARK: byte","insertText":"NON_SPACING_MARK"},{"label":"OTHER_LETTER","kind":"property","documentation":"OTHER_LETTER: byte","insertText":"OTHER_LETTER"},{"label":"OTHER_NUMBER","kind":"property","documentation":"OTHER_NUMBER: byte","insertText":"OTHER_NUMBER"},{"label":"OTHER_PUNCTUATION","kind":"property","documentation":"OTHER_PUNCTUATION: byte","insertText":"OTHER_PUNCTUATION"},{"label":"OTHER_SYMBOL","kind":"property","documentation":"OTHER_SYMBOL: byte","insertText":"OTHER_SYMBOL"},{"label":"PARAGRAPH_SEPARATOR","kind":"property","documentation":"PARAGRAPH_SEPARATOR: byte","insertText":"PARAGRAPH_SEPARATOR"},{"label":"PRIVATE_USE","kind":"property","documentation":"PRIVATE_USE: byte","insertText":"PRIVATE_USE"},{"label":"SIZE","kind":"property","documentation":"SIZE: int","insertText":"SIZE"},{"label":"SPACE_SEPARATOR","kind":"property","documentation":"SPACE_SEPARATOR: byte","insertText":"SPACE_SEPARATOR"},{"label":"START_PUNCTUATION","kind":"property","documentation":"START_PUNCTUATION: byte","insertText":"START_PUNCTUATION"},{"label":"SURROGATE","kind":"property","documentation":"SURROGATE: byte","insertText":"SURROGATE"},{"label":"TITLECASE_LETTER","kind":"property","documentation":"TITLECASE_LETTER: byte","insertText":"TITLECASE_LETTER"},{"label":"UNASSIGNED","kind":"property","documentation":"UNASSIGNED: byte","insertText":"UNASSIGNED"},{"label":"UPPERCASE_LETTER","kind":"property","documentation":"UPPERCASE_LETTER: byte","insertText":"UPPERCASE_LETTER"},{"label":"charCount","kind":"method","documentation":"charCount(int a): int","insertText":"charCount"},{"label":"codePointAt","kind":"method","documentation":"codePointAt(char[] a, int b, int c | CharSequence a, int b): int","insertText":"codePointAt"},{"label":"codePointBefore","kind":"method","documentation":"codePointBefore(char[] a, int b, int c | CharSequence a, int b): int","insertText":"codePointBefore"},{"label":"codePointCount","kind":"method","documentation":"codePointCount(CharSequence a, int b, int c): int","insertText":"codePointCount"},{"label":"compare","kind":"method","documentation":"compare(char a, char b): int","insertText":"compare"},{"label":"digit","kind":"method","documentation":"digit(int a, int b): int","insertText":"digit"},{"label":"forDigit","kind":"method","documentation":"forDigit(int a, int b): char","insertText":"forDigit"},{"label":"getDirectionality","kind":"method","documentation":"getDirectionality(int a): byte","insertText":"getDirectionality"},{"label":"getName","kind":"method","documentation":"getName(int a): String","insertText":"getName"},{"label":"getNumericValue","kind":"method","documentation":"getNumericValue(int a): int","insertText":"getNumericValue"},{"label":"getType","kind":"method","documentation":"getType(int a): int","insertText":"getType"},{"label":"hashCode","kind":"method","documentation":"hashCode(char a): int","insertText":"hashCode"},{"label":"highSurrogate","kind":"method","documentation":"highSurrogate(int a): char","insertText":"highSurrogate"},{"label":"isAlphabetic","kind":"method","documentation":"isAlphabetic(int a): boolean","insertText":"isAlphabetic"},{"label":"isBmpCodePoint","kind":"method","documentation":"isBmpCodePoint(int a): boolean","insertText":"isBmpCodePoint"},{"label":"isDefined","kind":"method","documentation":"isDefined(int a): boolean","insertText":"isDefined"},{"label":"isDigit","kind":"method","documentation":"isDigit(int a): boolean","insertText":"isDigit"},{"label":"isHighSurrogate","kind":"method","documentation":"isHighSurrogate(char a): boolean","insertText":"isHighSurrogate"},{"label":"isISOControl","kind":"method","documentation":"isISOControl(int a): boolean","insertText":"isISOControl"},{"label":"isIdentifierIgnorable","kind":"method","documentation":"isIdentifierIgnorable(int a): boolean","insertText":"isIdentifierIgnorable"},{"label":"isIdeographic","kind":"method","documentation":"isIdeographic(int a): boolean","insertText":"isIdeographic"},{"label":"isJavaIdentifierPart","kind":"method","documentation":"isJavaIdentifierPart(int a): boolean","insertText":"isJavaIdentifierPart"},{"label":"isJavaIdentifierStart","kind":"method","documentation":"isJavaIdentifierStart(int a): boolean","insertText":"isJavaIdentifierStart"},{"label":"isLetter","kind":"method","documentation":"isLetter(int a): boolean","insertText":"isLetter"},{"label":"isLetterOrDigit","kind":"method","documentation":"isLetterOrDigit(int a): boolean","insertText":"isLetterOrDigit"},{"label":"isLowerCase","kind":"method","documentation":"isLowerCase(int a): boolean","insertText":"isLowerCase"},{"label":"isMirrored","kind":"method","documentation":"isMirrored(int a): boolean","insertText":"isMirrored"},{"label":"isSpaceChar","kind":"method","documentation":"isSpaceChar(int a): boolean","insertText":"isSpaceChar"},{"label":"isSupplementaryCodePoint","kind":"method","documentation":"isSupplementaryCodePoint(int a): boolean","insertText":"isSupplementaryCodePoint"},{"label":"isSurrogate","kind":"method","documentation":"isSurrogate(char a): boolean","insertText":"isSurrogate"},{"label":"isSurrogatePair","kind":"method","documentation":"isSurrogatePair(char a, char b): boolean","insertText":"isSurrogatePair"},{"label":"isTitleCase","kind":"method","documentation":"isTitleCase(int a): boolean","insertText":"isTitleCase"},{"label":"isUnicodeIdentifierPart","kind":"method","documentation":"isUnicodeIdentifierPart(int a): boolean","insertText":"isUnicodeIdentifierPart"},{"label":"isUnicodeIdentifierStart","kind":"method","documentation":"isUnicodeIdentifierStart(int a): boolean","insertText":"isUnicodeIdentifierStart"},{"label":"isUpperCase","kind":"method","documentation":"isUpperCase(int a): boolean","insertText":"isUpperCase"},{"label":"isValidCodePoint","kind":"method","documentation":"isValidCodePoint(int a): boolean","insertText":"isValidCodePoint"},{"label":"isWhitespace","kind":"method","documentation":"isWhitespace(int a): boolean","insertText":"isWhitespace"},{"label":"lowSurrogate","kind":"method","documentation":"lowSurrogate(int a): char","insertText":"lowSurrogate"},{"label":"offsetByCodePoints","kind":"method","documentation":"offsetByCodePoints(char[] a, int b, int c, int d, int e | CharSequence a, int b, int c): int","insertText":"offsetByCodePoints"},{"label":"reverseBytes","kind":"method","documentation":"reverseBytes(char a): char","insertText":"reverseBytes"},{"label":"toChars","kind":"method","documentation":"toChars(int a, char[] b, int c | int a): int | char[]","insertText":"toChars"},{"label":"toCodePoint","kind":"method","documentation":"toCodePoint(char a, char b): int","insertText":"toCodePoint"},{"label":"toLowerCase","kind":"method","documentation":"toLowerCase(char a): char","insertText":"toLowerCase"},{"label":"toString","kind":"method","documentation":"toString(char a): String","insertText":"toString"},{"label":"toTitleCase","kind":"method","documentation":"toTitleCase(char a): char","insertText":"toTitleCase"},{"label":"toUpperCase","kind":"method","documentation":"toUpperCase(char a): char","insertText":"toUpperCase"},{"label":"valueOf","kind":"method","documentation":"valueOf(char a): Character","insertText":"valueOf"},{"label":"charValue","kind":"method","documentation":"charValue(): char","insertText":"charValue"},{"label":"compareTo","kind":"method","documentation":"compareTo(Character a): int","insertText":"compareTo"},{"label":"equals","kind":"method","documentation":"equals(Object a): boolean","insertText":"equals"},{"label":"hashCode","kind":"method","documentation":"hashCode(): int","insertText":"hashCode"},{"label":"toString","kind":"method","documentation":"toString(): String","insertText":"toString"}]},{"label":"Subset","kind":"class","documentation":"Class: Subset","insertText":"Subset","properties":[{"label":"equals","kind":"method","documentation":"equals(Object a): boolean","insertText":"equals"},{"label":"hashCode","kind":"method","documentation":"hashCode(): int","insertText":"hashCode"},{"label":"toString","kind":"method","documentation":"toString(): String","insertText":"toString"}]},{"label":"UnicodeBlock","kind":"class","documentation":"Class: UnicodeBlock","insertText":"UnicodeBlock","properties":[{"label":"AEGEAN_NUMBERS","kind":"property","documentation":"AEGEAN_NUMBERS: Character.UnicodeBlock","insertText":"AEGEAN_NUMBERS"},{"label":"ALCHEMICAL_SYMBOLS","kind":"property","documentation":"ALCHEMICAL_SYMBOLS: Character.UnicodeBlock","insertText":"ALCHEMICAL_SYMBOLS"},{"label":"ALPHABETIC_PRESENTATION_FORMS","kind":"property","documentation":"ALPHABETIC_PRESENTATION_FORMS: Character.UnicodeBlock","insertText":"ALPHABETIC_PRESENTATION_FORMS"},{"label":"ANCIENT_GREEK_MUSICAL_NOTATION","kind":"property","documentation":"ANCIENT_GREEK_MUSICAL_NOTATION: Character.UnicodeBlock","insertText":"ANCIENT_GREEK_MUSICAL_NOTATION"},{"label":"ANCIENT_GREEK_NUMBERS","kind":"property","documentation":"ANCIENT_GREEK_NUMBERS: Character.UnicodeBlock","insertText":"ANCIENT_GREEK_NUMBERS"},{"label":"ANCIENT_SYMBOLS","kind":"property","documentation":"ANCIENT_SYMBOLS: Character.UnicodeBlock","insertText":"ANCIENT_SYMBOLS"},{"label":"ARABIC","kind":"property","documentation":"ARABIC: Character.UnicodeBlock","insertText":"ARABIC"},{"label":"ARABIC_EXTENDED_A","kind":"property","documentation":"ARABIC_EXTENDED_A: Character.UnicodeBlock","insertText":"ARABIC_EXTENDED_A"},{"label":"ARABIC_MATHEMATICAL_ALPHABETIC_SYMBOLS","kind":"property","documentation":"ARABIC_MATHEMATICAL_ALPHABETIC_SYMBOLS: Character.UnicodeBlock","insertText":"ARABIC_MATHEMATICAL_ALPHABETIC_SYMBOLS"},{"label":"ARABIC_PRESENTATION_FORMS_A","kind":"property","documentation":"ARABIC_PRESENTATION_FORMS_A: Character.UnicodeBlock","insertText":"ARABIC_PRESENTATION_FORMS_A"},{"label":"ARABIC_PRESENTATION_FORMS_B","kind":"property","documentation":"ARABIC_PRESENTATION_FORMS_B: Character.UnicodeBlock","insertText":"ARABIC_PRESENTATION_FORMS_B"},{"label":"ARABIC_SUPPLEMENT","kind":"property","documentation":"ARABIC_SUPPLEMENT: Character.UnicodeBlock","insertText":"ARABIC_SUPPLEMENT"},{"label":"ARMENIAN","kind":"property","documentation":"ARMENIAN: Character.UnicodeBlock","insertText":"ARMENIAN"},{"label":"ARROWS","kind":"property","documentation":"ARROWS: Character.UnicodeBlock","insertText":"ARROWS"},{"label":"AVESTAN","kind":"property","documentation":"AVESTAN: Character.UnicodeBlock","insertText":"AVESTAN"},{"label":"BALINESE","kind":"property","documentation":"BALINESE: Character.UnicodeBlock","insertText":"BALINESE"},{"label":"BAMUM","kind":"property","documentation":"BAMUM: Character.UnicodeBlock","insertText":"BAMUM"},{"label":"BAMUM_SUPPLEMENT","kind":"property","documentation":"BAMUM_SUPPLEMENT: Character.UnicodeBlock","insertText":"BAMUM_SUPPLEMENT"},{"label":"BASIC_LATIN","kind":"property","documentation":"BASIC_LATIN: Character.UnicodeBlock","insertText":"BASIC_LATIN"},{"label":"BATAK","kind":"property","documentation":"BATAK: Character.UnicodeBlock","insertText":"BATAK"},{"label":"BENGALI","kind":"property","documentation":"BENGALI: Character.UnicodeBlock","insertText":"BENGALI"},{"label":"BLOCK_ELEMENTS","kind":"property","documentation":"BLOCK_ELEMENTS: Character.UnicodeBlock","insertText":"BLOCK_ELEMENTS"},{"label":"BOPOMOFO","kind":"property","documentation":"BOPOMOFO: Character.UnicodeBlock","insertText":"BOPOMOFO"},{"label":"BOPOMOFO_EXTENDED","kind":"property","documentation":"BOPOMOFO_EXTENDED: Character.UnicodeBlock","insertText":"BOPOMOFO_EXTENDED"},{"label":"BOX_DRAWING","kind":"property","documentation":"BOX_DRAWING: Character.UnicodeBlock","insertText":"BOX_DRAWING"},{"label":"BRAHMI","kind":"property","documentation":"BRAHMI: Character.UnicodeBlock","insertText":"BRAHMI"},{"label":"BRAILLE_PATTERNS","kind":"property","documentation":"BRAILLE_PATTERNS: Character.UnicodeBlock","insertText":"BRAILLE_PATTERNS"},{"label":"BUGINESE","kind":"property","documentation":"BUGINESE: Character.UnicodeBlock","insertText":"BUGINESE"},{"label":"BUHID","kind":"property","documentation":"BUHID: Character.UnicodeBlock","insertText":"BUHID"},{"label":"BYZANTINE_MUSICAL_SYMBOLS","kind":"property","documentation":"BYZANTINE_MUSICAL_SYMBOLS: Character.UnicodeBlock","insertText":"BYZANTINE_MUSICAL_SYMBOLS"},{"label":"CARIAN","kind":"property","documentation":"CARIAN: Character.UnicodeBlock","insertText":"CARIAN"},{"label":"CHAKMA","kind":"property","documentation":"CHAKMA: Character.UnicodeBlock","insertText":"CHAKMA"},{"label":"CHAM","kind":"property","documentation":"CHAM: Character.UnicodeBlock","insertText":"CHAM"},{"label":"CHEROKEE","kind":"property","documentation":"CHEROKEE: Character.UnicodeBlock","insertText":"CHEROKEE"},{"label":"CJK_COMPATIBILITY","kind":"property","documentation":"CJK_COMPATIBILITY: Character.UnicodeBlock","insertText":"CJK_COMPATIBILITY"},{"label":"CJK_COMPATIBILITY_FORMS","kind":"property","documentation":"CJK_COMPATIBILITY_FORMS: Character.UnicodeBlock","insertText":"CJK_COMPATIBILITY_FORMS"},{"label":"CJK_COMPATIBILITY_IDEOGRAPHS","kind":"property","documentation":"CJK_COMPATIBILITY_IDEOGRAPHS: Character.UnicodeBlock","insertText":"CJK_COMPATIBILITY_IDEOGRAPHS"},{"label":"CJK_COMPATIBILITY_IDEOGRAPHS_SUPPLEMENT","kind":"property","documentation":"CJK_COMPATIBILITY_IDEOGRAPHS_SUPPLEMENT: Character.UnicodeBlock","insertText":"CJK_COMPATIBILITY_IDEOGRAPHS_SUPPLEMENT"},{"label":"CJK_RADICALS_SUPPLEMENT","kind":"property","documentation":"CJK_RADICALS_SUPPLEMENT: Character.UnicodeBlock","insertText":"CJK_RADICALS_SUPPLEMENT"},{"label":"CJK_STROKES","kind":"property","documentation":"CJK_STROKES: Character.UnicodeBlock","insertText":"CJK_STROKES"},{"label":"CJK_SYMBOLS_AND_PUNCTUATION","kind":"property","documentation":"CJK_SYMBOLS_AND_PUNCTUATION: Character.UnicodeBlock","insertText":"CJK_SYMBOLS_AND_PUNCTUATION"},{"label":"CJK_UNIFIED_IDEOGRAPHS","kind":"property","documentation":"CJK_UNIFIED_IDEOGRAPHS: Character.UnicodeBlock","insertText":"CJK_UNIFIED_IDEOGRAPHS"},{"label":"CJK_UNIFIED_IDEOGRAPHS_EXTENSION_A","kind":"property","documentation":"CJK_UNIFIED_IDEOGRAPHS_EXTENSION_A: Character.UnicodeBlock","insertText":"CJK_UNIFIED_IDEOGRAPHS_EXTENSION_A"},{"label":"CJK_UNIFIED_IDEOGRAPHS_EXTENSION_B","kind":"property","documentation":"CJK_UNIFIED_IDEOGRAPHS_EXTENSION_B: Character.UnicodeBlock","insertText":"CJK_UNIFIED_IDEOGRAPHS_EXTENSION_B"},{"label":"CJK_UNIFIED_IDEOGRAPHS_EXTENSION_C","kind":"property","documentation":"CJK_UNIFIED_IDEOGRAPHS_EXTENSION_C: Character.UnicodeBlock","insertText":"CJK_UNIFIED_IDEOGRAPHS_EXTENSION_C"},{"label":"CJK_UNIFIED_IDEOGRAPHS_EXTENSION_D","kind":"property","documentation":"CJK_UNIFIED_IDEOGRAPHS_EXTENSION_D: Character.UnicodeBlock","insertText":"CJK_UNIFIED_IDEOGRAPHS_EXTENSION_D"},{"label":"COMBINING_DIACRITICAL_MARKS","kind":"property","documentation":"COMBINING_DIACRITICAL_MARKS: Character.UnicodeBlock","insertText":"COMBINING_DIACRITICAL_MARKS"},{"label":"COMBINING_DIACRITICAL_MARKS_SUPPLEMENT","kind":"property","documentation":"COMBINING_DIACRITICAL_MARKS_SUPPLEMENT: Character.UnicodeBlock","insertText":"COMBINING_DIACRITICAL_MARKS_SUPPLEMENT"},{"label":"COMBINING_HALF_MARKS","kind":"property","documentation":"COMBINING_HALF_MARKS: Character.UnicodeBlock","insertText":"COMBINING_HALF_MARKS"},{"label":"COMBINING_MARKS_FOR_SYMBOLS","kind":"property","documentation":"COMBINING_MARKS_FOR_SYMBOLS: Character.UnicodeBlock","insertText":"COMBINING_MARKS_FOR_SYMBOLS"},{"label":"COMMON_INDIC_NUMBER_FORMS","kind":"property","documentation":"COMMON_INDIC_NUMBER_FORMS: Character.UnicodeBlock","insertText":"COMMON_INDIC_NUMBER_FORMS"},{"label":"CONTROL_PICTURES","kind":"property","documentation":"CONTROL_PICTURES: Character.UnicodeBlock","insertText":"CONTROL_PICTURES"},{"label":"COPTIC","kind":"property","documentation":"COPTIC: Character.UnicodeBlock","insertText":"COPTIC"},{"label":"COUNTING_ROD_NUMERALS","kind":"property","documentation":"COUNTING_ROD_NUMERALS: Character.UnicodeBlock","insertText":"COUNTING_ROD_NUMERALS"},{"label":"CUNEIFORM","kind":"property","documentation":"CUNEIFORM: Character.UnicodeBlock","insertText":"CUNEIFORM"},{"label":"CUNEIFORM_NUMBERS_AND_PUNCTUATION","kind":"property","documentation":"CUNEIFORM_NUMBERS_AND_PUNCTUATION: Character.UnicodeBlock","insertText":"CUNEIFORM_NUMBERS_AND_PUNCTUATION"},{"label":"CURRENCY_SYMBOLS","kind":"property","documentation":"CURRENCY_SYMBOLS: Character.UnicodeBlock","insertText":"CURRENCY_SYMBOLS"},{"label":"CYPRIOT_SYLLABARY","kind":"property","documentation":"CYPRIOT_SYLLABARY: Character.UnicodeBlock","insertText":"CYPRIOT_SYLLABARY"},{"label":"CYRILLIC","kind":"property","documentation":"CYRILLIC: Character.UnicodeBlock","insertText":"CYRILLIC"},{"label":"CYRILLIC_EXTENDED_A","kind":"property","documentation":"CYRILLIC_EXTENDED_A: Character.UnicodeBlock","insertText":"CYRILLIC_EXTENDED_A"},{"label":"CYRILLIC_EXTENDED_B","kind":"property","documentation":"CYRILLIC_EXTENDED_B: Character.UnicodeBlock","insertText":"CYRILLIC_EXTENDED_B"},{"label":"CYRILLIC_SUPPLEMENTARY","kind":"property","documentation":"CYRILLIC_SUPPLEMENTARY: Character.UnicodeBlock","insertText":"CYRILLIC_SUPPLEMENTARY"},{"label":"DESERET","kind":"property","documentation":"DESERET: Character.UnicodeBlock","insertText":"DESERET"},{"label":"DEVANAGARI","kind":"property","documentation":"DEVANAGARI: Character.UnicodeBlock","insertText":"DEVANAGARI"},{"label":"DEVANAGARI_EXTENDED","kind":"property","documentation":"DEVANAGARI_EXTENDED: Character.UnicodeBlock","insertText":"DEVANAGARI_EXTENDED"},{"label":"DINGBATS","kind":"property","documentation":"DINGBATS: Character.UnicodeBlock","insertText":"DINGBATS"},{"label":"DOMINO_TILES","kind":"property","documentation":"DOMINO_TILES: Character.UnicodeBlock","insertText":"DOMINO_TILES"},{"label":"EGYPTIAN_HIEROGLYPHS","kind":"property","documentation":"EGYPTIAN_HIEROGLYPHS: Character.UnicodeBlock","insertText":"EGYPTIAN_HIEROGLYPHS"},{"label":"EMOTICONS","kind":"property","documentation":"EMOTICONS: Character.UnicodeBlock","insertText":"EMOTICONS"},{"label":"ENCLOSED_ALPHANUMERICS","kind":"property","documentation":"ENCLOSED_ALPHANUMERICS: Character.UnicodeBlock","insertText":"ENCLOSED_ALPHANUMERICS"},{"label":"ENCLOSED_ALPHANUMERIC_SUPPLEMENT","kind":"property","documentation":"ENCLOSED_ALPHANUMERIC_SUPPLEMENT: Character.UnicodeBlock","insertText":"ENCLOSED_ALPHANUMERIC_SUPPLEMENT"},{"label":"ENCLOSED_CJK_LETTERS_AND_MONTHS","kind":"property","documentation":"ENCLOSED_CJK_LETTERS_AND_MONTHS: Character.UnicodeBlock","insertText":"ENCLOSED_CJK_LETTERS_AND_MONTHS"},{"label":"ENCLOSED_IDEOGRAPHIC_SUPPLEMENT","kind":"property","documentation":"ENCLOSED_IDEOGRAPHIC_SUPPLEMENT: Character.UnicodeBlock","insertText":"ENCLOSED_IDEOGRAPHIC_SUPPLEMENT"},{"label":"ETHIOPIC","kind":"property","documentation":"ETHIOPIC: Character.UnicodeBlock","insertText":"ETHIOPIC"},{"label":"ETHIOPIC_EXTENDED","kind":"property","documentation":"ETHIOPIC_EXTENDED: Character.UnicodeBlock","insertText":"ETHIOPIC_EXTENDED"},{"label":"ETHIOPIC_EXTENDED_A","kind":"property","documentation":"ETHIOPIC_EXTENDED_A: Character.UnicodeBlock","insertText":"ETHIOPIC_EXTENDED_A"},{"label":"ETHIOPIC_SUPPLEMENT","kind":"property","documentation":"ETHIOPIC_SUPPLEMENT: Character.UnicodeBlock","insertText":"ETHIOPIC_SUPPLEMENT"},{"label":"GENERAL_PUNCTUATION","kind":"property","documentation":"GENERAL_PUNCTUATION: Character.UnicodeBlock","insertText":"GENERAL_PUNCTUATION"},{"label":"GEOMETRIC_SHAPES","kind":"property","documentation":"GEOMETRIC_SHAPES: Character.UnicodeBlock","insertText":"GEOMETRIC_SHAPES"},{"label":"GEORGIAN","kind":"property","documentation":"GEORGIAN: Character.UnicodeBlock","insertText":"GEORGIAN"},{"label":"GEORGIAN_SUPPLEMENT","kind":"property","documentation":"GEORGIAN_SUPPLEMENT: Character.UnicodeBlock","insertText":"GEORGIAN_SUPPLEMENT"},{"label":"GLAGOLITIC","kind":"property","documentation":"GLAGOLITIC: Character.UnicodeBlock","insertText":"GLAGOLITIC"},{"label":"GOTHIC","kind":"property","documentation":"GOTHIC: Character.UnicodeBlock","insertText":"GOTHIC"},{"label":"GREEK","kind":"property","documentation":"GREEK: Character.UnicodeBlock","insertText":"GREEK"},{"label":"GREEK_EXTENDED","kind":"property","documentation":"GREEK_EXTENDED: Character.UnicodeBlock","insertText":"GREEK_EXTENDED"},{"label":"GUJARATI","kind":"property","documentation":"GUJARATI: Character.UnicodeBlock","insertText":"GUJARATI"},{"label":"GURMUKHI","kind":"property","documentation":"GURMUKHI: Character.UnicodeBlock","insertText":"GURMUKHI"},{"label":"HALFWIDTH_AND_FULLWIDTH_FORMS","kind":"property","documentation":"HALFWIDTH_AND_FULLWIDTH_FORMS: Character.UnicodeBlock","insertText":"HALFWIDTH_AND_FULLWIDTH_FORMS"},{"label":"HANGUL_COMPATIBILITY_JAMO","kind":"property","documentation":"HANGUL_COMPATIBILITY_JAMO: Character.UnicodeBlock","insertText":"HANGUL_COMPATIBILITY_JAMO"},{"label":"HANGUL_JAMO","kind":"property","documentation":"HANGUL_JAMO: Character.UnicodeBlock","insertText":"HANGUL_JAMO"},{"label":"HANGUL_JAMO_EXTENDED_A","kind":"property","documentation":"HANGUL_JAMO_EXTENDED_A: Character.UnicodeBlock","insertText":"HANGUL_JAMO_EXTENDED_A"},{"label":"HANGUL_JAMO_EXTENDED_B","kind":"property","documentation":"HANGUL_JAMO_EXTENDED_B: Character.UnicodeBlock","insertText":"HANGUL_JAMO_EXTENDED_B"},{"label":"HANGUL_SYLLABLES","kind":"property","documentation":"HANGUL_SYLLABLES: Character.UnicodeBlock","insertText":"HANGUL_SYLLABLES"},{"label":"HANUNOO","kind":"property","documentation":"HANUNOO: Character.UnicodeBlock","insertText":"HANUNOO"},{"label":"HEBREW","kind":"property","documentation":"HEBREW: Character.UnicodeBlock","insertText":"HEBREW"},{"label":"HIGH_PRIVATE_USE_SURROGATES","kind":"property","documentation":"HIGH_PRIVATE_USE_SURROGATES: Character.UnicodeBlock","insertText":"HIGH_PRIVATE_USE_SURROGATES"},{"label":"HIGH_SURROGATES","kind":"property","documentation":"HIGH_SURROGATES: Character.UnicodeBlock","insertText":"HIGH_SURROGATES"},{"label":"HIRAGANA","kind":"property","documentation":"HIRAGANA: Character.UnicodeBlock","insertText":"HIRAGANA"},{"label":"IDEOGRAPHIC_DESCRIPTION_CHARACTERS","kind":"property","documentation":"IDEOGRAPHIC_DESCRIPTION_CHARACTERS: Character.UnicodeBlock","insertText":"IDEOGRAPHIC_DESCRIPTION_CHARACTERS"},{"label":"IMPERIAL_ARAMAIC","kind":"property","documentation":"IMPERIAL_ARAMAIC: Character.UnicodeBlock","insertText":"IMPERIAL_ARAMAIC"},{"label":"INSCRIPTIONAL_PAHLAVI","kind":"property","documentation":"INSCRIPTIONAL_PAHLAVI: Character.UnicodeBlock","insertText":"INSCRIPTIONAL_PAHLAVI"},{"label":"INSCRIPTIONAL_PARTHIAN","kind":"property","documentation":"INSCRIPTIONAL_PARTHIAN: Character.UnicodeBlock","insertText":"INSCRIPTIONAL_PARTHIAN"},{"label":"IPA_EXTENSIONS","kind":"property","documentation":"IPA_EXTENSIONS: Character.UnicodeBlock","insertText":"IPA_EXTENSIONS"},{"label":"JAVANESE","kind":"property","documentation":"JAVANESE: Character.UnicodeBlock","insertText":"JAVANESE"},{"label":"KAITHI","kind":"property","documentation":"KAITHI: Character.UnicodeBlock","insertText":"KAITHI"},{"label":"KANA_SUPPLEMENT","kind":"property","documentation":"KANA_SUPPLEMENT: Character.UnicodeBlock","insertText":"KANA_SUPPLEMENT"},{"label":"KANBUN","kind":"property","documentation":"KANBUN: Character.UnicodeBlock","insertText":"KANBUN"},{"label":"KANGXI_RADICALS","kind":"property","documentation":"KANGXI_RADICALS: Character.UnicodeBlock","insertText":"KANGXI_RADICALS"},{"label":"KANNADA","kind":"property","documentation":"KANNADA: Character.UnicodeBlock","insertText":"KANNADA"},{"label":"KATAKANA","kind":"property","documentation":"KATAKANA: Character.UnicodeBlock","insertText":"KATAKANA"},{"label":"KATAKANA_PHONETIC_EXTENSIONS","kind":"property","documentation":"KATAKANA_PHONETIC_EXTENSIONS: Character.UnicodeBlock","insertText":"KATAKANA_PHONETIC_EXTENSIONS"},{"label":"KAYAH_LI","kind":"property","documentation":"KAYAH_LI: Character.UnicodeBlock","insertText":"KAYAH_LI"},{"label":"KHAROSHTHI","kind":"property","documentation":"KHAROSHTHI: Character.UnicodeBlock","insertText":"KHAROSHTHI"},{"label":"KHMER","kind":"property","documentation":"KHMER: Character.UnicodeBlock","insertText":"KHMER"},{"label":"KHMER_SYMBOLS","kind":"property","documentation":"KHMER_SYMBOLS: Character.UnicodeBlock","insertText":"KHMER_SYMBOLS"},{"label":"LAO","kind":"property","documentation":"LAO: Character.UnicodeBlock","insertText":"LAO"},{"label":"LATIN_1_SUPPLEMENT","kind":"property","documentation":"LATIN_1_SUPPLEMENT: Character.UnicodeBlock","insertText":"LATIN_1_SUPPLEMENT"},{"label":"LATIN_EXTENDED_A","kind":"property","documentation":"LATIN_EXTENDED_A: Character.UnicodeBlock","insertText":"LATIN_EXTENDED_A"},{"label":"LATIN_EXTENDED_ADDITIONAL","kind":"property","documentation":"LATIN_EXTENDED_ADDITIONAL: Character.UnicodeBlock","insertText":"LATIN_EXTENDED_ADDITIONAL"},{"label":"LATIN_EXTENDED_B","kind":"property","documentation":"LATIN_EXTENDED_B: Character.UnicodeBlock","insertText":"LATIN_EXTENDED_B"},{"label":"LATIN_EXTENDED_C","kind":"property","documentation":"LATIN_EXTENDED_C: Character.UnicodeBlock","insertText":"LATIN_EXTENDED_C"},{"label":"LATIN_EXTENDED_D","kind":"property","documentation":"LATIN_EXTENDED_D: Character.UnicodeBlock","insertText":"LATIN_EXTENDED_D"},{"label":"LEPCHA","kind":"property","documentation":"LEPCHA: Character.UnicodeBlock","insertText":"LEPCHA"},{"label":"LETTERLIKE_SYMBOLS","kind":"property","documentation":"LETTERLIKE_SYMBOLS: Character.UnicodeBlock","insertText":"LETTERLIKE_SYMBOLS"},{"label":"LIMBU","kind":"property","documentation":"LIMBU: Character.UnicodeBlock","insertText":"LIMBU"},{"label":"LINEAR_B_IDEOGRAMS","kind":"property","documentation":"LINEAR_B_IDEOGRAMS: Character.UnicodeBlock","insertText":"LINEAR_B_IDEOGRAMS"},{"label":"LINEAR_B_SYLLABARY","kind":"property","documentation":"LINEAR_B_SYLLABARY: Character.UnicodeBlock","insertText":"LINEAR_B_SYLLABARY"},{"label":"LISU","kind":"property","documentation":"LISU: Character.UnicodeBlock","insertText":"LISU"},{"label":"LOW_SURROGATES","kind":"property","documentation":"LOW_SURROGATES: Character.UnicodeBlock","insertText":"LOW_SURROGATES"},{"label":"LYCIAN","kind":"property","documentation":"LYCIAN: Character.UnicodeBlock","insertText":"LYCIAN"},{"label":"LYDIAN","kind":"property","documentation":"LYDIAN: Character.UnicodeBlock","insertText":"LYDIAN"},{"label":"MAHJONG_TILES","kind":"property","documentation":"MAHJONG_TILES: Character.UnicodeBlock","insertText":"MAHJONG_TILES"},{"label":"MALAYALAM","kind":"property","documentation":"MALAYALAM: Character.UnicodeBlock","insertText":"MALAYALAM"},{"label":"MANDAIC","kind":"property","documentation":"MANDAIC: Character.UnicodeBlock","insertText":"MANDAIC"},{"label":"MATHEMATICAL_ALPHANUMERIC_SYMBOLS","kind":"property","documentation":"MATHEMATICAL_ALPHANUMERIC_SYMBOLS: Character.UnicodeBlock","insertText":"MATHEMATICAL_ALPHANUMERIC_SYMBOLS"},{"label":"MATHEMATICAL_OPERATORS","kind":"property","documentation":"MATHEMATICAL_OPERATORS: Character.UnicodeBlock","insertText":"MATHEMATICAL_OPERATORS"},{"label":"MEETEI_MAYEK","kind":"property","documentation":"MEETEI_MAYEK: Character.UnicodeBlock","insertText":"MEETEI_MAYEK"},{"label":"MEETEI_MAYEK_EXTENSIONS","kind":"property","documentation":"MEETEI_MAYEK_EXTENSIONS: Character.UnicodeBlock","insertText":"MEETEI_MAYEK_EXTENSIONS"},{"label":"MEROITIC_CURSIVE","kind":"property","documentation":"MEROITIC_CURSIVE: Character.UnicodeBlock","insertText":"MEROITIC_CURSIVE"},{"label":"MEROITIC_HIEROGLYPHS","kind":"property","documentation":"MEROITIC_HIEROGLYPHS: Character.UnicodeBlock","insertText":"MEROITIC_HIEROGLYPHS"},{"label":"MIAO","kind":"property","documentation":"MIAO: Character.UnicodeBlock","insertText":"MIAO"},{"label":"MISCELLANEOUS_MATHEMATICAL_SYMBOLS_A","kind":"property","documentation":"MISCELLANEOUS_MATHEMATICAL_SYMBOLS_A: Character.UnicodeBlock","insertText":"MISCELLANEOUS_MATHEMATICAL_SYMBOLS_A"},{"label":"MISCELLANEOUS_MATHEMATICAL_SYMBOLS_B","kind":"property","documentation":"MISCELLANEOUS_MATHEMATICAL_SYMBOLS_B: Character.UnicodeBlock","insertText":"MISCELLANEOUS_MATHEMATICAL_SYMBOLS_B"},{"label":"MISCELLANEOUS_SYMBOLS","kind":"property","documentation":"MISCELLANEOUS_SYMBOLS: Character.UnicodeBlock","insertText":"MISCELLANEOUS_SYMBOLS"},{"label":"MISCELLANEOUS_SYMBOLS_AND_ARROWS","kind":"property","documentation":"MISCELLANEOUS_SYMBOLS_AND_ARROWS: Character.UnicodeBlock","insertText":"MISCELLANEOUS_SYMBOLS_AND_ARROWS"},{"label":"MISCELLANEOUS_SYMBOLS_AND_PICTOGRAPHS","kind":"property","documentation":"MISCELLANEOUS_SYMBOLS_AND_PICTOGRAPHS: Character.UnicodeBlock","insertText":"MISCELLANEOUS_SYMBOLS_AND_PICTOGRAPHS"},{"label":"MISCELLANEOUS_TECHNICAL","kind":"property","documentation":"MISCELLANEOUS_TECHNICAL: Character.UnicodeBlock","insertText":"MISCELLANEOUS_TECHNICAL"},{"label":"MODIFIER_TONE_LETTERS","kind":"property","documentation":"MODIFIER_TONE_LETTERS: Character.UnicodeBlock","insertText":"MODIFIER_TONE_LETTERS"},{"label":"MONGOLIAN","kind":"property","documentation":"MONGOLIAN: Character.UnicodeBlock","insertText":"MONGOLIAN"},{"label":"MUSICAL_SYMBOLS","kind":"property","documentation":"MUSICAL_SYMBOLS: Character.UnicodeBlock","insertText":"MUSICAL_SYMBOLS"},{"label":"MYANMAR","kind":"property","documentation":"MYANMAR: Character.UnicodeBlock","insertText":"MYANMAR"},{"label":"MYANMAR_EXTENDED_A","kind":"property","documentation":"MYANMAR_EXTENDED_A: Character.UnicodeBlock","insertText":"MYANMAR_EXTENDED_A"},{"label":"NEW_TAI_LUE","kind":"property","documentation":"NEW_TAI_LUE: Character.UnicodeBlock","insertText":"NEW_TAI_LUE"},{"label":"NKO","kind":"property","documentation":"NKO: Character.UnicodeBlock","insertText":"NKO"},{"label":"NUMBER_FORMS","kind":"property","documentation":"NUMBER_FORMS: Character.UnicodeBlock","insertText":"NUMBER_FORMS"},{"label":"OGHAM","kind":"property","documentation":"OGHAM: Character.UnicodeBlock","insertText":"OGHAM"},{"label":"OLD_ITALIC","kind":"property","documentation":"OLD_ITALIC: Character.UnicodeBlock","insertText":"OLD_ITALIC"},{"label":"OLD_PERSIAN","kind":"property","documentation":"OLD_PERSIAN: Character.UnicodeBlock","insertText":"OLD_PERSIAN"},{"label":"OLD_SOUTH_ARABIAN","kind":"property","documentation":"OLD_SOUTH_ARABIAN: Character.UnicodeBlock","insertText":"OLD_SOUTH_ARABIAN"},{"label":"OLD_TURKIC","kind":"property","documentation":"OLD_TURKIC: Character.UnicodeBlock","insertText":"OLD_TURKIC"},{"label":"OL_CHIKI","kind":"property","documentation":"OL_CHIKI: Character.UnicodeBlock","insertText":"OL_CHIKI"},{"label":"OPTICAL_CHARACTER_RECOGNITION","kind":"property","documentation":"OPTICAL_CHARACTER_RECOGNITION: Character.UnicodeBlock","insertText":"OPTICAL_CHARACTER_RECOGNITION"},{"label":"ORIYA","kind":"property","documentation":"ORIYA: Character.UnicodeBlock","insertText":"ORIYA"},{"label":"OSMANYA","kind":"property","documentation":"OSMANYA: Character.UnicodeBlock","insertText":"OSMANYA"},{"label":"PHAGS_PA","kind":"property","documentation":"PHAGS_PA: Character.UnicodeBlock","insertText":"PHAGS_PA"},{"label":"PHAISTOS_DISC","kind":"property","documentation":"PHAISTOS_DISC: Character.UnicodeBlock","insertText":"PHAISTOS_DISC"},{"label":"PHOENICIAN","kind":"property","documentation":"PHOENICIAN: Character.UnicodeBlock","insertText":"PHOENICIAN"},{"label":"PHONETIC_EXTENSIONS","kind":"property","documentation":"PHONETIC_EXTENSIONS: Character.UnicodeBlock","insertText":"PHONETIC_EXTENSIONS"},{"label":"PHONETIC_EXTENSIONS_SUPPLEMENT","kind":"property","documentation":"PHONETIC_EXTENSIONS_SUPPLEMENT: Character.UnicodeBlock","insertText":"PHONETIC_EXTENSIONS_SUPPLEMENT"},{"label":"PLAYING_CARDS","kind":"property","documentation":"PLAYING_CARDS: Character.UnicodeBlock","insertText":"PLAYING_CARDS"},{"label":"PRIVATE_USE_AREA","kind":"property","documentation":"PRIVATE_USE_AREA: Character.UnicodeBlock","insertText":"PRIVATE_USE_AREA"},{"label":"REJANG","kind":"property","documentation":"REJANG: Character.UnicodeBlock","insertText":"REJANG"},{"label":"RUMI_NUMERAL_SYMBOLS","kind":"property","documentation":"RUMI_NUMERAL_SYMBOLS: Character.UnicodeBlock","insertText":"RUMI_NUMERAL_SYMBOLS"},{"label":"RUNIC","kind":"property","documentation":"RUNIC: Character.UnicodeBlock","insertText":"RUNIC"},{"label":"SAMARITAN","kind":"property","documentation":"SAMARITAN: Character.UnicodeBlock","insertText":"SAMARITAN"},{"label":"SAURASHTRA","kind":"property","documentation":"SAURASHTRA: Character.UnicodeBlock","insertText":"SAURASHTRA"},{"label":"SHARADA","kind":"property","documentation":"SHARADA: Character.UnicodeBlock","insertText":"SHARADA"},{"label":"SHAVIAN","kind":"property","documentation":"SHAVIAN: Character.UnicodeBlock","insertText":"SHAVIAN"},{"label":"SINHALA","kind":"property","documentation":"SINHALA: Character.UnicodeBlock","insertText":"SINHALA"},{"label":"SMALL_FORM_VARIANTS","kind":"property","documentation":"SMALL_FORM_VARIANTS: Character.UnicodeBlock","insertText":"SMALL_FORM_VARIANTS"},{"label":"SORA_SOMPENG","kind":"property","documentation":"SORA_SOMPENG: Character.UnicodeBlock","insertText":"SORA_SOMPENG"},{"label":"SPACING_MODIFIER_LETTERS","kind":"property","documentation":"SPACING_MODIFIER_LETTERS: Character.UnicodeBlock","insertText":"SPACING_MODIFIER_LETTERS"},{"label":"SPECIALS","kind":"property","documentation":"SPECIALS: Character.UnicodeBlock","insertText":"SPECIALS"},{"label":"SUNDANESE","kind":"property","documentation":"SUNDANESE: Character.UnicodeBlock","insertText":"SUNDANESE"},{"label":"SUNDANESE_SUPPLEMENT","kind":"property","documentation":"SUNDANESE_SUPPLEMENT: Character.UnicodeBlock","insertText":"SUNDANESE_SUPPLEMENT"},{"label":"SUPERSCRIPTS_AND_SUBSCRIPTS","kind":"property","documentation":"SUPERSCRIPTS_AND_SUBSCRIPTS: Character.UnicodeBlock","insertText":"SUPERSCRIPTS_AND_SUBSCRIPTS"},{"label":"SUPPLEMENTAL_ARROWS_A","kind":"property","documentation":"SUPPLEMENTAL_ARROWS_A: Character.UnicodeBlock","insertText":"SUPPLEMENTAL_ARROWS_A"},{"label":"SUPPLEMENTAL_ARROWS_B","kind":"property","documentation":"SUPPLEMENTAL_ARROWS_B: Character.UnicodeBlock","insertText":"SUPPLEMENTAL_ARROWS_B"},{"label":"SUPPLEMENTAL_MATHEMATICAL_OPERATORS","kind":"property","documentation":"SUPPLEMENTAL_MATHEMATICAL_OPERATORS: Character.UnicodeBlock","insertText":"SUPPLEMENTAL_MATHEMATICAL_OPERATORS"},{"label":"SUPPLEMENTAL_PUNCTUATION","kind":"property","documentation":"SUPPLEMENTAL_PUNCTUATION: Character.UnicodeBlock","insertText":"SUPPLEMENTAL_PUNCTUATION"},{"label":"SUPPLEMENTARY_PRIVATE_USE_AREA_A","kind":"property","documentation":"SUPPLEMENTARY_PRIVATE_USE_AREA_A: Character.UnicodeBlock","insertText":"SUPPLEMENTARY_PRIVATE_USE_AREA_A"},{"label":"SUPPLEMENTARY_PRIVATE_USE_AREA_B","kind":"property","documentation":"SUPPLEMENTARY_PRIVATE_USE_AREA_B: Character.UnicodeBlock","insertText":"SUPPLEMENTARY_PRIVATE_USE_AREA_B"},{"label":"SYLOTI_NAGRI","kind":"property","documentation":"SYLOTI_NAGRI: Character.UnicodeBlock","insertText":"SYLOTI_NAGRI"},{"label":"SYRIAC","kind":"property","documentation":"SYRIAC: Character.UnicodeBlock","insertText":"SYRIAC"},{"label":"TAGALOG","kind":"property","documentation":"TAGALOG: Character.UnicodeBlock","insertText":"TAGALOG"},{"label":"TAGBANWA","kind":"property","documentation":"TAGBANWA: Character.UnicodeBlock","insertText":"TAGBANWA"},{"label":"TAGS","kind":"property","documentation":"TAGS: Character.UnicodeBlock","insertText":"TAGS"},{"label":"TAI_LE","kind":"property","documentation":"TAI_LE: Character.UnicodeBlock","insertText":"TAI_LE"},{"label":"TAI_THAM","kind":"property","documentation":"TAI_THAM: Character.UnicodeBlock","insertText":"TAI_THAM"},{"label":"TAI_VIET","kind":"property","documentation":"TAI_VIET: Character.UnicodeBlock","insertText":"TAI_VIET"},{"label":"TAI_XUAN_JING_SYMBOLS","kind":"property","documentation":"TAI_XUAN_JING_SYMBOLS: Character.UnicodeBlock","insertText":"TAI_XUAN_JING_SYMBOLS"},{"label":"TAKRI","kind":"property","documentation":"TAKRI: Character.UnicodeBlock","insertText":"TAKRI"},{"label":"TAMIL","kind":"property","documentation":"TAMIL: Character.UnicodeBlock","insertText":"TAMIL"},{"label":"TELUGU","kind":"property","documentation":"TELUGU: Character.UnicodeBlock","insertText":"TELUGU"},{"label":"THAANA","kind":"property","documentation":"THAANA: Character.UnicodeBlock","insertText":"THAANA"},{"label":"THAI","kind":"property","documentation":"THAI: Character.UnicodeBlock","insertText":"THAI"},{"label":"TIBETAN","kind":"property","documentation":"TIBETAN: Character.UnicodeBlock","insertText":"TIBETAN"},{"label":"TIFINAGH","kind":"property","documentation":"TIFINAGH: Character.UnicodeBlock","insertText":"TIFINAGH"},{"label":"TRANSPORT_AND_MAP_SYMBOLS","kind":"property","documentation":"TRANSPORT_AND_MAP_SYMBOLS: Character.UnicodeBlock","insertText":"TRANSPORT_AND_MAP_SYMBOLS"},{"label":"UGARITIC","kind":"property","documentation":"UGARITIC: Character.UnicodeBlock","insertText":"UGARITIC"},{"label":"UNIFIED_CANADIAN_ABORIGINAL_SYLLABICS","kind":"property","documentation":"UNIFIED_CANADIAN_ABORIGINAL_SYLLABICS: Character.UnicodeBlock","insertText":"UNIFIED_CANADIAN_ABORIGINAL_SYLLABICS"},{"label":"UNIFIED_CANADIAN_ABORIGINAL_SYLLABICS_EXTENDED","kind":"property","documentation":"UNIFIED_CANADIAN_ABORIGINAL_SYLLABICS_EXTENDED: Character.UnicodeBlock","insertText":"UNIFIED_CANADIAN_ABORIGINAL_SYLLABICS_EXTENDED"},{"label":"VAI","kind":"property","documentation":"VAI: Character.UnicodeBlock","insertText":"VAI"},{"label":"VARIATION_SELECTORS","kind":"property","documentation":"VARIATION_SELECTORS: Character.UnicodeBlock","insertText":"VARIATION_SELECTORS"},{"label":"VARIATION_SELECTORS_SUPPLEMENT","kind":"property","documentation":"VARIATION_SELECTORS_SUPPLEMENT: Character.UnicodeBlock","insertText":"VARIATION_SELECTORS_SUPPLEMENT"},{"label":"VEDIC_EXTENSIONS","kind":"property","documentation":"VEDIC_EXTENSIONS: Character.UnicodeBlock","insertText":"VEDIC_EXTENSIONS"},{"label":"VERTICAL_FORMS","kind":"property","documentation":"VERTICAL_FORMS: Character.UnicodeBlock","insertText":"VERTICAL_FORMS"},{"label":"YIJING_HEXAGRAM_SYMBOLS","kind":"property","documentation":"YIJING_HEXAGRAM_SYMBOLS: Character.UnicodeBlock","insertText":"YIJING_HEXAGRAM_SYMBOLS"},{"label":"YI_RADICALS","kind":"property","documentation":"YI_RADICALS: Character.UnicodeBlock","insertText":"YI_RADICALS"},{"label":"YI_SYLLABLES","kind":"property","documentation":"YI_SYLLABLES: Character.UnicodeBlock","insertText":"YI_SYLLABLES"},{"label":"forName","kind":"method","documentation":"forName(String a): Character.UnicodeBlock","insertText":"forName"},{"label":"of","kind":"method","documentation":"of(int a): Character.UnicodeBlock","insertText":"of"},{"label":"equals","kind":"method","documentation":"equals(Object a): boolean","insertText":"equals"},{"label":"hashCode","kind":"method","documentation":"hashCode(): int","insertText":"hashCode"},{"label":"toString","kind":"method","documentation":"toString(): String","insertText":"toString"}]},{"label":"UnicodeScript","kind":"class","documentation":"Class: UnicodeScript","insertText":"UnicodeScript","properties":[{"label":"ARABIC","kind":"property","documentation":"ARABIC: Character.UnicodeScript","insertText":"ARABIC"},{"label":"ARMENIAN","kind":"property","documentation":"ARMENIAN: Character.UnicodeScript","insertText":"ARMENIAN"},{"label":"AVESTAN","kind":"property","documentation":"AVESTAN: Character.UnicodeScript","insertText":"AVESTAN"},{"label":"BALINESE","kind":"property","documentation":"BALINESE: Character.UnicodeScript","insertText":"BALINESE"},{"label":"BAMUM","kind":"property","documentation":"BAMUM: Character.UnicodeScript","insertText":"BAMUM"},{"label":"BATAK","kind":"property","documentation":"BATAK: Character.UnicodeScript","insertText":"BATAK"},{"label":"BENGALI","kind":"property","documentation":"BENGALI: Character.UnicodeScript","insertText":"BENGALI"},{"label":"BOPOMOFO","kind":"property","documentation":"BOPOMOFO: Character.UnicodeScript","insertText":"BOPOMOFO"},{"label":"BRAHMI","kind":"property","documentation":"BRAHMI: Character.UnicodeScript","insertText":"BRAHMI"},{"label":"BRAILLE","kind":"property","documentation":"BRAILLE: Character.UnicodeScript","insertText":"BRAILLE"},{"label":"BUGINESE","kind":"property","documentation":"BUGINESE: Character.UnicodeScript","insertText":"BUGINESE"},{"label":"BUHID","kind":"property","documentation":"BUHID: Character.UnicodeScript","insertText":"BUHID"},{"label":"CANADIAN_ABORIGINAL","kind":"property","documentation":"CANADIAN_ABORIGINAL: Character.UnicodeScript","insertText":"CANADIAN_ABORIGINAL"},{"label":"CARIAN","kind":"property","documentation":"CARIAN: Character.UnicodeScript","insertText":"CARIAN"},{"label":"CHAKMA","kind":"property","documentation":"CHAKMA: Character.UnicodeScript","insertText":"CHAKMA"},{"label":"CHAM","kind":"property","documentation":"CHAM: Character.UnicodeScript","insertText":"CHAM"},{"label":"CHEROKEE","kind":"property","documentation":"CHEROKEE: Character.UnicodeScript","insertText":"CHEROKEE"},{"label":"COMMON","kind":"property","documentation":"COMMON: Character.UnicodeScript","insertText":"COMMON"},{"label":"COPTIC","kind":"property","documentation":"COPTIC: Character.UnicodeScript","insertText":"COPTIC"},{"label":"CUNEIFORM","kind":"property","documentation":"CUNEIFORM: Character.UnicodeScript","insertText":"CUNEIFORM"},{"label":"CYPRIOT","kind":"property","documentation":"CYPRIOT: Character.UnicodeScript","insertText":"CYPRIOT"},{"label":"CYRILLIC","kind":"property","documentation":"CYRILLIC: Character.UnicodeScript","insertText":"CYRILLIC"},{"label":"DESERET","kind":"property","documentation":"DESERET: Character.UnicodeScript","insertText":"DESERET"},{"label":"DEVANAGARI","kind":"property","documentation":"DEVANAGARI: Character.UnicodeScript","insertText":"DEVANAGARI"},{"label":"EGYPTIAN_HIEROGLYPHS","kind":"property","documentation":"EGYPTIAN_HIEROGLYPHS: Character.UnicodeScript","insertText":"EGYPTIAN_HIEROGLYPHS"},{"label":"ETHIOPIC","kind":"property","documentation":"ETHIOPIC: Character.UnicodeScript","insertText":"ETHIOPIC"},{"label":"GEORGIAN","kind":"property","documentation":"GEORGIAN: Character.UnicodeScript","insertText":"GEORGIAN"},{"label":"GLAGOLITIC","kind":"property","documentation":"GLAGOLITIC: Character.UnicodeScript","insertText":"GLAGOLITIC"},{"label":"GOTHIC","kind":"property","documentation":"GOTHIC: Character.UnicodeScript","insertText":"GOTHIC"},{"label":"GREEK","kind":"property","documentation":"GREEK: Character.UnicodeScript","insertText":"GREEK"},{"label":"GUJARATI","kind":"property","documentation":"GUJARATI: Character.UnicodeScript","insertText":"GUJARATI"},{"label":"GURMUKHI","kind":"property","documentation":"GURMUKHI: Character.UnicodeScript","insertText":"GURMUKHI"},{"label":"HAN","kind":"property","documentation":"HAN: Character.UnicodeScript","insertText":"HAN"},{"label":"HANGUL","kind":"property","documentation":"HANGUL: Character.UnicodeScript","insertText":"HANGUL"},{"label":"HANUNOO","kind":"property","documentation":"HANUNOO: Character.UnicodeScript","insertText":"HANUNOO"},{"label":"HEBREW","kind":"property","documentation":"HEBREW: Character.UnicodeScript","insertText":"HEBREW"},{"label":"HIRAGANA","kind":"property","documentation":"HIRAGANA: Character.UnicodeScript","insertText":"HIRAGANA"},{"label":"IMPERIAL_ARAMAIC","kind":"property","documentation":"IMPERIAL_ARAMAIC: Character.UnicodeScript","insertText":"IMPERIAL_ARAMAIC"},{"label":"INHERITED","kind":"property","documentation":"INHERITED: Character.UnicodeScript","insertText":"INHERITED"},{"label":"INSCRIPTIONAL_PAHLAVI","kind":"property","documentation":"INSCRIPTIONAL_PAHLAVI: Character.UnicodeScript","insertText":"INSCRIPTIONAL_PAHLAVI"},{"label":"INSCRIPTIONAL_PARTHIAN","kind":"property","documentation":"INSCRIPTIONAL_PARTHIAN: Character.UnicodeScript","insertText":"INSCRIPTIONAL_PARTHIAN"},{"label":"JAVANESE","kind":"property","documentation":"JAVANESE: Character.UnicodeScript","insertText":"JAVANESE"},{"label":"KAITHI","kind":"property","documentation":"KAITHI: Character.UnicodeScript","insertText":"KAITHI"},{"label":"KANNADA","kind":"property","documentation":"KANNADA: Character.UnicodeScript","insertText":"KANNADA"},{"label":"KATAKANA","kind":"property","documentation":"KATAKANA: Character.UnicodeScript","insertText":"KATAKANA"},{"label":"KAYAH_LI","kind":"property","documentation":"KAYAH_LI: Character.UnicodeScript","insertText":"KAYAH_LI"},{"label":"KHAROSHTHI","kind":"property","documentation":"KHAROSHTHI: Character.UnicodeScript","insertText":"KHAROSHTHI"},{"label":"KHMER","kind":"property","documentation":"KHMER: Character.UnicodeScript","insertText":"KHMER"},{"label":"LAO","kind":"property","documentation":"LAO: Character.UnicodeScript","insertText":"LAO"},{"label":"LATIN","kind":"property","documentation":"LATIN: Character.UnicodeScript","insertText":"LATIN"},{"label":"LEPCHA","kind":"property","documentation":"LEPCHA: Character.UnicodeScript","insertText":"LEPCHA"},{"label":"LIMBU","kind":"property","documentation":"LIMBU: Character.UnicodeScript","insertText":"LIMBU"},{"label":"LINEAR_B","kind":"property","documentation":"LINEAR_B: Character.UnicodeScript","insertText":"LINEAR_B"},{"label":"LISU","kind":"property","documentation":"LISU: Character.UnicodeScript","insertText":"LISU"},{"label":"LYCIAN","kind":"property","documentation":"LYCIAN: Character.UnicodeScript","insertText":"LYCIAN"},{"label":"LYDIAN","kind":"property","documentation":"LYDIAN: Character.UnicodeScript","insertText":"LYDIAN"},{"label":"MALAYALAM","kind":"property","documentation":"MALAYALAM: Character.UnicodeScript","insertText":"MALAYALAM"},{"label":"MANDAIC","kind":"property","documentation":"MANDAIC: Character.UnicodeScript","insertText":"MANDAIC"},{"label":"MEETEI_MAYEK","kind":"property","documentation":"MEETEI_MAYEK: Character.UnicodeScript","insertText":"MEETEI_MAYEK"},{"label":"MEROITIC_CURSIVE","kind":"property","documentation":"MEROITIC_CURSIVE: Character.UnicodeScript","insertText":"MEROITIC_CURSIVE"},{"label":"MEROITIC_HIEROGLYPHS","kind":"property","documentation":"MEROITIC_HIEROGLYPHS: Character.UnicodeScript","insertText":"MEROITIC_HIEROGLYPHS"},{"label":"MIAO","kind":"property","documentation":"MIAO: Character.UnicodeScript","insertText":"MIAO"},{"label":"MONGOLIAN","kind":"property","documentation":"MONGOLIAN: Character.UnicodeScript","insertText":"MONGOLIAN"},{"label":"MYANMAR","kind":"property","documentation":"MYANMAR: Character.UnicodeScript","insertText":"MYANMAR"},{"label":"NEW_TAI_LUE","kind":"property","documentation":"NEW_TAI_LUE: Character.UnicodeScript","insertText":"NEW_TAI_LUE"},{"label":"NKO","kind":"property","documentation":"NKO: Character.UnicodeScript","insertText":"NKO"},{"label":"OGHAM","kind":"property","documentation":"OGHAM: Character.UnicodeScript","insertText":"OGHAM"},{"label":"OLD_ITALIC","kind":"property","documentation":"OLD_ITALIC: Character.UnicodeScript","insertText":"OLD_ITALIC"},{"label":"OLD_PERSIAN","kind":"property","documentation":"OLD_PERSIAN: Character.UnicodeScript","insertText":"OLD_PERSIAN"},{"label":"OLD_SOUTH_ARABIAN","kind":"property","documentation":"OLD_SOUTH_ARABIAN: Character.UnicodeScript","insertText":"OLD_SOUTH_ARABIAN"},{"label":"OLD_TURKIC","kind":"property","documentation":"OLD_TURKIC: Character.UnicodeScript","insertText":"OLD_TURKIC"},{"label":"OL_CHIKI","kind":"property","documentation":"OL_CHIKI: Character.UnicodeScript","insertText":"OL_CHIKI"},{"label":"ORIYA","kind":"property","documentation":"ORIYA: Character.UnicodeScript","insertText":"ORIYA"},{"label":"OSMANYA","kind":"property","documentation":"OSMANYA: Character.UnicodeScript","insertText":"OSMANYA"},{"label":"PHAGS_PA","kind":"property","documentation":"PHAGS_PA: Character.UnicodeScript","insertText":"PHAGS_PA"},{"label":"PHOENICIAN","kind":"property","documentation":"PHOENICIAN: Character.UnicodeScript","insertText":"PHOENICIAN"},{"label":"REJANG","kind":"property","documentation":"REJANG: Character.UnicodeScript","insertText":"REJANG"},{"label":"RUNIC","kind":"property","documentation":"RUNIC: Character.UnicodeScript","insertText":"RUNIC"},{"label":"SAMARITAN","kind":"property","documentation":"SAMARITAN: Character.UnicodeScript","insertText":"SAMARITAN"},{"label":"SAURASHTRA","kind":"property","documentation":"SAURASHTRA: Character.UnicodeScript","insertText":"SAURASHTRA"},{"label":"SHARADA","kind":"property","documentation":"SHARADA: Character.UnicodeScript","insertText":"SHARADA"},{"label":"SHAVIAN","kind":"property","documentation":"SHAVIAN: Character.UnicodeScript","insertText":"SHAVIAN"},{"label":"SINHALA","kind":"property","documentation":"SINHALA: Character.UnicodeScript","insertText":"SINHALA"},{"label":"SORA_SOMPENG","kind":"property","documentation":"SORA_SOMPENG: Character.UnicodeScript","insertText":"SORA_SOMPENG"},{"label":"SUNDANESE","kind":"property","documentation":"SUNDANESE: Character.UnicodeScript","insertText":"SUNDANESE"},{"label":"SYLOTI_NAGRI","kind":"property","documentation":"SYLOTI_NAGRI: Character.UnicodeScript","insertText":"SYLOTI_NAGRI"},{"label":"SYRIAC","kind":"property","documentation":"SYRIAC: Character.UnicodeScript","insertText":"SYRIAC"},{"label":"TAGALOG","kind":"property","documentation":"TAGALOG: Character.UnicodeScript","insertText":"TAGALOG"},{"label":"TAGBANWA","kind":"property","documentation":"TAGBANWA: Character.UnicodeScript","insertText":"TAGBANWA"},{"label":"TAI_LE","kind":"property","documentation":"TAI_LE: Character.UnicodeScript","insertText":"TAI_LE"},{"label":"TAI_THAM","kind":"property","documentation":"TAI_THAM: Character.UnicodeScript","insertText":"TAI_THAM"},{"label":"TAI_VIET","kind":"property","documentation":"TAI_VIET: Character.UnicodeScript","insertText":"TAI_VIET"},{"label":"TAKRI","kind":"property","documentation":"TAKRI: Character.UnicodeScript","insertText":"TAKRI"},{"label":"TAMIL","kind":"property","documentation":"TAMIL: Character.UnicodeScript","insertText":"TAMIL"},{"label":"TELUGU","kind":"property","documentation":"TELUGU: Character.UnicodeScript","insertText":"TELUGU"},{"label":"THAANA","kind":"property","documentation":"THAANA: Character.UnicodeScript","insertText":"THAANA"},{"label":"THAI","kind":"property","documentation":"THAI: Character.UnicodeScript","insertText":"THAI"},{"label":"TIBETAN","kind":"property","documentation":"TIBETAN: Character.UnicodeScript","insertText":"TIBETAN"},{"label":"TIFINAGH","kind":"property","documentation":"TIFINAGH: Character.UnicodeScript","insertText":"TIFINAGH"},{"label":"UGARITIC","kind":"property","documentation":"UGARITIC: Character.UnicodeScript","insertText":"UGARITIC"},{"label":"UNKNOWN","kind":"property","documentation":"UNKNOWN: Character.UnicodeScript","insertText":"UNKNOWN"},{"label":"VAI","kind":"property","documentation":"VAI: Character.UnicodeScript","insertText":"VAI"},{"label":"YI","kind":"property","documentation":"YI: Character.UnicodeScript","insertText":"YI"},{"label":"forName","kind":"method","documentation":"forName(String a): Character.UnicodeScript","insertText":"forName"},{"label":"of","kind":"method","documentation":"of(int a): Character.UnicodeScript","insertText":"of"},{"label":"valueOf","kind":"method","documentation":"valueOf(String a): Character.UnicodeScript","insertText":"valueOf"},{"label":"values","kind":"method","documentation":"values(): Character.UnicodeScript[]","insertText":"values"},{"label":"compareTo","kind":"method","documentation":"compareTo(Enum a): int","insertText":"compareTo"},{"label":"equals","kind":"method","documentation":"equals(Object a): boolean","insertText":"equals"},{"label":"hashCode","kind":"method","documentation":"hashCode(): int","insertText":"hashCode"},{"label":"name","kind":"method","documentation":"name(): String","insertText":"name"},{"label":"ordinal","kind":"method","documentation":"ordinal(): int","insertText":"ordinal"},{"label":"toString","kind":"method","documentation":"toString(): String","insertText":"toString"}]},{"label":"ClassCastException","kind":"class","documentation":"Class: ClassCastException","insertText":"ClassCastException","properties":[{"label":"equals","kind":"method","documentation":"equals(Object a): boolean","insertText":"equals"},{"label":"getLocalizedMessage","kind":"method","documentation":"getLocalizedMessage(): String","insertText":"getLocalizedMessage"},{"label":"getMessage","kind":"method","documentation":"getMessage(): String","insertText":"getMessage"},{"label":"getStackTrace","kind":"method","documentation":"getStackTrace(): StackTraceElement[]","insertText":"getStackTrace"},{"label":"hashCode","kind":"method","documentation":"hashCode(): int","insertText":"hashCode"},{"label":"toString","kind":"method","documentation":"toString(): String","insertText":"toString"}],"constructorDefinition":{"label":"ClassCastException","kind":"constructor","documentation":"Constructor: ClassCastException","insertText":"ClassCastException"}},{"label":"ClassNotFoundException","kind":"class","documentation":"Class: ClassNotFoundException","insertText":"ClassNotFoundException","properties":[{"label":"equals","kind":"method","documentation":"equals(Object a): boolean","insertText":"equals"},{"label":"getLocalizedMessage","kind":"method","documentation":"getLocalizedMessage(): String","insertText":"getLocalizedMessage"},{"label":"getMessage","kind":"method","documentation":"getMessage(): String","insertText":"getMessage"},{"label":"getStackTrace","kind":"method","documentation":"getStackTrace(): StackTraceElement[]","insertText":"getStackTrace"},{"label":"hashCode","kind":"method","documentation":"hashCode(): int","insertText":"hashCode"},{"label":"toString","kind":"method","documentation":"toString(): String","insertText":"toString"}],"constructorDefinition":{"label":"ClassNotFoundException","kind":"constructor","documentation":"Constructor: ClassNotFoundException","insertText":"ClassNotFoundException"}},{"label":"CloneNotSupportedException","kind":"class","documentation":"Class: CloneNotSupportedException","insertText":"CloneNotSupportedException","properties":[{"label":"equals","kind":"method","documentation":"equals(Object a): boolean","insertText":"equals"},{"label":"getLocalizedMessage","kind":"method","documentation":"getLocalizedMessage(): String","insertText":"getLocalizedMessage"},{"label":"getMessage","kind":"method","documentation":"getMessage(): String","insertText":"getMessage"},{"label":"getStackTrace","kind":"method","documentation":"getStackTrace(): StackTraceElement[]","insertText":"getStackTrace"},{"label":"hashCode","kind":"method","documentation":"hashCode(): int","insertText":"hashCode"},{"label":"toString","kind":"method","documentation":"toString(): String","insertText":"toString"}],"constructorDefinition":{"label":"CloneNotSupportedException","kind":"constructor","documentation":"Constructor: CloneNotSupportedException","insertText":"CloneNotSupportedException"}},{"label":"Comparable","kind":"class","documentation":"Class: Comparable","insertText":"Comparable","properties":[{"label":"compareTo","kind":"method","documentation":"compareTo(def a): int","insertText":"compareTo"},{"label":"equals","kind":"method","documentation":"equals(Object a): boolean","insertText":"equals"},{"label":"hashCode","kind":"method","documentation":"hashCode(): int","insertText":"hashCode"},{"label":"toString","kind":"method","documentation":"toString(): String","insertText":"toString"}]},{"label":"Double","kind":"class","documentation":"Class: Double","insertText":"Double","properties":[{"label":"BYTES","kind":"property","documentation":"BYTES: int","insertText":"BYTES"},{"label":"MAX_EXPONENT","kind":"property","documentation":"MAX_EXPONENT: int","insertText":"MAX_EXPONENT"},{"label":"MAX_VALUE","kind":"property","documentation":"MAX_VALUE: double","insertText":"MAX_VALUE"},{"label":"MIN_EXPONENT","kind":"property","documentation":"MIN_EXPONENT: int","insertText":"MIN_EXPONENT"},{"label":"MIN_NORMAL","kind":"property","documentation":"MIN_NORMAL: double","insertText":"MIN_NORMAL"},{"label":"MIN_VALUE","kind":"property","documentation":"MIN_VALUE: double","insertText":"MIN_VALUE"},{"label":"NEGATIVE_INFINITY","kind":"property","documentation":"NEGATIVE_INFINITY: double","insertText":"NEGATIVE_INFINITY"},{"label":"NaN","kind":"property","documentation":"NaN: double","insertText":"NaN"},{"label":"POSITIVE_INFINITY","kind":"property","documentation":"POSITIVE_INFINITY: double","insertText":"POSITIVE_INFINITY"},{"label":"SIZE","kind":"property","documentation":"SIZE: int","insertText":"SIZE"},{"label":"compare","kind":"method","documentation":"compare(double a, double b): int","insertText":"compare"},{"label":"doubleToLongBits","kind":"method","documentation":"doubleToLongBits(double a): long","insertText":"doubleToLongBits"},{"label":"doubleToRawLongBits","kind":"method","documentation":"doubleToRawLongBits(double a): long","insertText":"doubleToRawLongBits"},{"label":"hashCode","kind":"method","documentation":"hashCode(double a): int","insertText":"hashCode"},{"label":"isFinite","kind":"method","documentation":"isFinite(double a): boolean","insertText":"isFinite"},{"label":"isInfinite","kind":"method","documentation":"isInfinite(double a): boolean","insertText":"isInfinite"},{"label":"isNaN","kind":"method","documentation":"isNaN(double a): boolean","insertText":"isNaN"},{"label":"longBitsToDouble","kind":"method","documentation":"longBitsToDouble(long a): double","insertText":"longBitsToDouble"},{"label":"max","kind":"method","documentation":"max(double a, double b): double","insertText":"max"},{"label":"min","kind":"method","documentation":"min(double a, double b): double","insertText":"min"},{"label":"parseDouble","kind":"method","documentation":"parseDouble(String a): double","insertText":"parseDouble"},{"label":"sum","kind":"method","documentation":"sum(double a, double b): double","insertText":"sum"},{"label":"toHexString","kind":"method","documentation":"toHexString(double a): String","insertText":"toHexString"},{"label":"toString","kind":"method","documentation":"toString(double a): String","insertText":"toString"},{"label":"valueOf","kind":"method","documentation":"valueOf(double a): Double","insertText":"valueOf"},{"label":"byteValue","kind":"method","documentation":"byteValue(): byte","insertText":"byteValue"},{"label":"compareTo","kind":"method","documentation":"compareTo(Double a): int","insertText":"compareTo"},{"label":"doubleValue","kind":"method","documentation":"doubleValue(): double","insertText":"doubleValue"},{"label":"equals","kind":"method","documentation":"equals(Object a): boolean","insertText":"equals"},{"label":"floatValue","kind":"method","documentation":"floatValue(): float","insertText":"floatValue"},{"label":"hashCode","kind":"method","documentation":"hashCode(): int","insertText":"hashCode"},{"label":"intValue","kind":"method","documentation":"intValue(): int","insertText":"intValue"},{"label":"isInfinite","kind":"method","documentation":"isInfinite(): boolean","insertText":"isInfinite"},{"label":"isNaN","kind":"method","documentation":"isNaN(): boolean","insertText":"isNaN"},{"label":"longValue","kind":"method","documentation":"longValue(): long","insertText":"longValue"},{"label":"shortValue","kind":"method","documentation":"shortValue(): short","insertText":"shortValue"},{"label":"toString","kind":"method","documentation":"toString(): String","insertText":"toString"}]},{"label":"Enum","kind":"class","documentation":"Class: Enum","insertText":"Enum","properties":[{"label":"compareTo","kind":"method","documentation":"compareTo(Enum a): int","insertText":"compareTo"},{"label":"equals","kind":"method","documentation":"equals(Object a): boolean","insertText":"equals"},{"label":"hashCode","kind":"method","documentation":"hashCode(): int","insertText":"hashCode"},{"label":"name","kind":"method","documentation":"name(): String","insertText":"name"},{"label":"ordinal","kind":"method","documentation":"ordinal(): int","insertText":"ordinal"},{"label":"toString","kind":"method","documentation":"toString(): String","insertText":"toString"}]},{"label":"EnumConstantNotPresentException","kind":"class","documentation":"Class: EnumConstantNotPresentException","insertText":"EnumConstantNotPresentException","properties":[{"label":"constantName","kind":"method","documentation":"constantName(): String","insertText":"constantName"},{"label":"equals","kind":"method","documentation":"equals(Object a): boolean","insertText":"equals"},{"label":"getLocalizedMessage","kind":"method","documentation":"getLocalizedMessage(): String","insertText":"getLocalizedMessage"},{"label":"getMessage","kind":"method","documentation":"getMessage(): String","insertText":"getMessage"},{"label":"getStackTrace","kind":"method","documentation":"getStackTrace(): StackTraceElement[]","insertText":"getStackTrace"},{"label":"hashCode","kind":"method","documentation":"hashCode(): int","insertText":"hashCode"},{"label":"toString","kind":"method","documentation":"toString(): String","insertText":"toString"}]},{"label":"Exception","kind":"class","documentation":"Class: Exception","insertText":"Exception","properties":[{"label":"equals","kind":"method","documentation":"equals(Object a): boolean","insertText":"equals"},{"label":"getLocalizedMessage","kind":"method","documentation":"getLocalizedMessage(): String","insertText":"getLocalizedMessage"},{"label":"getMessage","kind":"method","documentation":"getMessage(): String","insertText":"getMessage"},{"label":"getStackTrace","kind":"method","documentation":"getStackTrace(): StackTraceElement[]","insertText":"getStackTrace"},{"label":"hashCode","kind":"method","documentation":"hashCode(): int","insertText":"hashCode"},{"label":"toString","kind":"method","documentation":"toString(): String","insertText":"toString"}],"constructorDefinition":{"label":"Exception","kind":"constructor","documentation":"Constructor: Exception","insertText":"Exception"}},{"label":"Float","kind":"class","documentation":"Class: Float","insertText":"Float","properties":[{"label":"BYTES","kind":"property","documentation":"BYTES: int","insertText":"BYTES"},{"label":"MAX_EXPONENT","kind":"property","documentation":"MAX_EXPONENT: int","insertText":"MAX_EXPONENT"},{"label":"MAX_VALUE","kind":"property","documentation":"MAX_VALUE: float","insertText":"MAX_VALUE"},{"label":"MIN_EXPONENT","kind":"property","documentation":"MIN_EXPONENT: int","insertText":"MIN_EXPONENT"},{"label":"MIN_NORMAL","kind":"property","documentation":"MIN_NORMAL: float","insertText":"MIN_NORMAL"},{"label":"MIN_VALUE","kind":"property","documentation":"MIN_VALUE: float","insertText":"MIN_VALUE"},{"label":"NEGATIVE_INFINITY","kind":"property","documentation":"NEGATIVE_INFINITY: float","insertText":"NEGATIVE_INFINITY"},{"label":"NaN","kind":"property","documentation":"NaN: float","insertText":"NaN"},{"label":"POSITIVE_INFINITY","kind":"property","documentation":"POSITIVE_INFINITY: float","insertText":"POSITIVE_INFINITY"},{"label":"SIZE","kind":"property","documentation":"SIZE: int","insertText":"SIZE"},{"label":"compare","kind":"method","documentation":"compare(float a, float b): int","insertText":"compare"},{"label":"floatToIntBits","kind":"method","documentation":"floatToIntBits(float a): int","insertText":"floatToIntBits"},{"label":"floatToRawIntBits","kind":"method","documentation":"floatToRawIntBits(float a): int","insertText":"floatToRawIntBits"},{"label":"hashCode","kind":"method","documentation":"hashCode(float a): int","insertText":"hashCode"},{"label":"intBitsToFloat","kind":"method","documentation":"intBitsToFloat(int a): float","insertText":"intBitsToFloat"},{"label":"isFinite","kind":"method","documentation":"isFinite(float a): boolean","insertText":"isFinite"},{"label":"isInfinite","kind":"method","documentation":"isInfinite(float a): boolean","insertText":"isInfinite"},{"label":"isNaN","kind":"method","documentation":"isNaN(float a): boolean","insertText":"isNaN"},{"label":"max","kind":"method","documentation":"max(float a, float b): float","insertText":"max"},{"label":"min","kind":"method","documentation":"min(float a, float b): float","insertText":"min"},{"label":"parseFloat","kind":"method","documentation":"parseFloat(String a): float","insertText":"parseFloat"},{"label":"sum","kind":"method","documentation":"sum(float a, float b): float","insertText":"sum"},{"label":"toHexString","kind":"method","documentation":"toHexString(float a): String","insertText":"toHexString"},{"label":"toString","kind":"method","documentation":"toString(float a): String","insertText":"toString"},{"label":"valueOf","kind":"method","documentation":"valueOf(float a): Float","insertText":"valueOf"},{"label":"byteValue","kind":"method","documentation":"byteValue(): byte","insertText":"byteValue"},{"label":"compareTo","kind":"method","documentation":"compareTo(Float a): int","insertText":"compareTo"},{"label":"doubleValue","kind":"method","documentation":"doubleValue(): double","insertText":"doubleValue"},{"label":"equals","kind":"method","documentation":"equals(Object a): boolean","insertText":"equals"},{"label":"floatValue","kind":"method","documentation":"floatValue(): float","insertText":"floatValue"},{"label":"hashCode","kind":"method","documentation":"hashCode(): int","insertText":"hashCode"},{"label":"intValue","kind":"method","documentation":"intValue(): int","insertText":"intValue"},{"label":"isInfinite","kind":"method","documentation":"isInfinite(): boolean","insertText":"isInfinite"},{"label":"isNaN","kind":"method","documentation":"isNaN(): boolean","insertText":"isNaN"},{"label":"longValue","kind":"method","documentation":"longValue(): long","insertText":"longValue"},{"label":"shortValue","kind":"method","documentation":"shortValue(): short","insertText":"shortValue"},{"label":"toString","kind":"method","documentation":"toString(): String","insertText":"toString"}]},{"label":"IllegalAccessException","kind":"class","documentation":"Class: IllegalAccessException","insertText":"IllegalAccessException","properties":[{"label":"equals","kind":"method","documentation":"equals(Object a): boolean","insertText":"equals"},{"label":"getLocalizedMessage","kind":"method","documentation":"getLocalizedMessage(): String","insertText":"getLocalizedMessage"},{"label":"getMessage","kind":"method","documentation":"getMessage(): String","insertText":"getMessage"},{"label":"getStackTrace","kind":"method","documentation":"getStackTrace(): StackTraceElement[]","insertText":"getStackTrace"},{"label":"hashCode","kind":"method","documentation":"hashCode(): int","insertText":"hashCode"},{"label":"toString","kind":"method","documentation":"toString(): String","insertText":"toString"}],"constructorDefinition":{"label":"IllegalAccessException","kind":"constructor","documentation":"Constructor: IllegalAccessException","insertText":"IllegalAccessException"}},{"label":"IllegalArgumentException","kind":"class","documentation":"Class: IllegalArgumentException","insertText":"IllegalArgumentException","properties":[{"label":"equals","kind":"method","documentation":"equals(Object a): boolean","insertText":"equals"},{"label":"getLocalizedMessage","kind":"method","documentation":"getLocalizedMessage(): String","insertText":"getLocalizedMessage"},{"label":"getMessage","kind":"method","documentation":"getMessage(): String","insertText":"getMessage"},{"label":"getStackTrace","kind":"method","documentation":"getStackTrace(): StackTraceElement[]","insertText":"getStackTrace"},{"label":"hashCode","kind":"method","documentation":"hashCode(): int","insertText":"hashCode"},{"label":"toString","kind":"method","documentation":"toString(): String","insertText":"toString"}],"constructorDefinition":{"label":"IllegalArgumentException","kind":"constructor","documentation":"Constructor: IllegalArgumentException","insertText":"IllegalArgumentException"}},{"label":"IllegalMonitorStateException","kind":"class","documentation":"Class: IllegalMonitorStateException","insertText":"IllegalMonitorStateException","properties":[{"label":"equals","kind":"method","documentation":"equals(Object a): boolean","insertText":"equals"},{"label":"getLocalizedMessage","kind":"method","documentation":"getLocalizedMessage(): String","insertText":"getLocalizedMessage"},{"label":"getMessage","kind":"method","documentation":"getMessage(): String","insertText":"getMessage"},{"label":"getStackTrace","kind":"method","documentation":"getStackTrace(): StackTraceElement[]","insertText":"getStackTrace"},{"label":"hashCode","kind":"method","documentation":"hashCode(): int","insertText":"hashCode"},{"label":"toString","kind":"method","documentation":"toString(): String","insertText":"toString"}],"constructorDefinition":{"label":"IllegalMonitorStateException","kind":"constructor","documentation":"Constructor: IllegalMonitorStateException","insertText":"IllegalMonitorStateException"}},{"label":"IllegalStateException","kind":"class","documentation":"Class: IllegalStateException","insertText":"IllegalStateException","properties":[{"label":"equals","kind":"method","documentation":"equals(Object a): boolean","insertText":"equals"},{"label":"getLocalizedMessage","kind":"method","documentation":"getLocalizedMessage(): String","insertText":"getLocalizedMessage"},{"label":"getMessage","kind":"method","documentation":"getMessage(): String","insertText":"getMessage"},{"label":"getStackTrace","kind":"method","documentation":"getStackTrace(): StackTraceElement[]","insertText":"getStackTrace"},{"label":"hashCode","kind":"method","documentation":"hashCode(): int","insertText":"hashCode"},{"label":"toString","kind":"method","documentation":"toString(): String","insertText":"toString"}],"constructorDefinition":{"label":"IllegalStateException","kind":"constructor","documentation":"Constructor: IllegalStateException","insertText":"IllegalStateException"}},{"label":"IllegalThreadStateException","kind":"class","documentation":"Class: IllegalThreadStateException","insertText":"IllegalThreadStateException","properties":[{"label":"equals","kind":"method","documentation":"equals(Object a): boolean","insertText":"equals"},{"label":"getLocalizedMessage","kind":"method","documentation":"getLocalizedMessage(): String","insertText":"getLocalizedMessage"},{"label":"getMessage","kind":"method","documentation":"getMessage(): String","insertText":"getMessage"},{"label":"getStackTrace","kind":"method","documentation":"getStackTrace(): StackTraceElement[]","insertText":"getStackTrace"},{"label":"hashCode","kind":"method","documentation":"hashCode(): int","insertText":"hashCode"},{"label":"toString","kind":"method","documentation":"toString(): String","insertText":"toString"}],"constructorDefinition":{"label":"IllegalThreadStateException","kind":"constructor","documentation":"Constructor: IllegalThreadStateException","insertText":"IllegalThreadStateException"}},{"label":"IndexOutOfBoundsException","kind":"class","documentation":"Class: IndexOutOfBoundsException","insertText":"IndexOutOfBoundsException","properties":[{"label":"equals","kind":"method","documentation":"equals(Object a): boolean","insertText":"equals"},{"label":"getLocalizedMessage","kind":"method","documentation":"getLocalizedMessage(): String","insertText":"getLocalizedMessage"},{"label":"getMessage","kind":"method","documentation":"getMessage(): String","insertText":"getMessage"},{"label":"getStackTrace","kind":"method","documentation":"getStackTrace(): StackTraceElement[]","insertText":"getStackTrace"},{"label":"hashCode","kind":"method","documentation":"hashCode(): int","insertText":"hashCode"},{"label":"toString","kind":"method","documentation":"toString(): String","insertText":"toString"}],"constructorDefinition":{"label":"IndexOutOfBoundsException","kind":"constructor","documentation":"Constructor: IndexOutOfBoundsException","insertText":"IndexOutOfBoundsException"}},{"label":"InstantiationException","kind":"class","documentation":"Class: InstantiationException","insertText":"InstantiationException","properties":[{"label":"equals","kind":"method","documentation":"equals(Object a): boolean","insertText":"equals"},{"label":"getLocalizedMessage","kind":"method","documentation":"getLocalizedMessage(): String","insertText":"getLocalizedMessage"},{"label":"getMessage","kind":"method","documentation":"getMessage(): String","insertText":"getMessage"},{"label":"getStackTrace","kind":"method","documentation":"getStackTrace(): StackTraceElement[]","insertText":"getStackTrace"},{"label":"hashCode","kind":"method","documentation":"hashCode(): int","insertText":"hashCode"},{"label":"toString","kind":"method","documentation":"toString(): String","insertText":"toString"}],"constructorDefinition":{"label":"InstantiationException","kind":"constructor","documentation":"Constructor: InstantiationException","insertText":"InstantiationException"}},{"label":"Integer","kind":"class","documentation":"Class: Integer","insertText":"Integer","properties":[{"label":"BYTES","kind":"property","documentation":"BYTES: int","insertText":"BYTES"},{"label":"MAX_VALUE","kind":"property","documentation":"MAX_VALUE: int","insertText":"MAX_VALUE"},{"label":"MIN_VALUE","kind":"property","documentation":"MIN_VALUE: int","insertText":"MIN_VALUE"},{"label":"SIZE","kind":"property","documentation":"SIZE: int","insertText":"SIZE"},{"label":"bitCount","kind":"method","documentation":"bitCount(int a): int","insertText":"bitCount"},{"label":"compare","kind":"method","documentation":"compare(int a, int b): int","insertText":"compare"},{"label":"compareUnsigned","kind":"method","documentation":"compareUnsigned(int a, int b): int","insertText":"compareUnsigned"},{"label":"decode","kind":"method","documentation":"decode(String a): Integer","insertText":"decode"},{"label":"divideUnsigned","kind":"method","documentation":"divideUnsigned(int a, int b): int","insertText":"divideUnsigned"},{"label":"hashCode","kind":"method","documentation":"hashCode(int a): int","insertText":"hashCode"},{"label":"highestOneBit","kind":"method","documentation":"highestOneBit(int a): int","insertText":"highestOneBit"},{"label":"lowestOneBit","kind":"method","documentation":"lowestOneBit(int a): int","insertText":"lowestOneBit"},{"label":"max","kind":"method","documentation":"max(int a, int b): int","insertText":"max"},{"label":"min","kind":"method","documentation":"min(int a, int b): int","insertText":"min"},{"label":"numberOfLeadingZeros","kind":"method","documentation":"numberOfLeadingZeros(int a): int","insertText":"numberOfLeadingZeros"},{"label":"numberOfTrailingZeros","kind":"method","documentation":"numberOfTrailingZeros(int a): int","insertText":"numberOfTrailingZeros"},{"label":"parseInt","kind":"method","documentation":"parseInt(String a, int b | String a): int","insertText":"parseInt"},{"label":"parseUnsignedInt","kind":"method","documentation":"parseUnsignedInt(String a, int b | String a): int","insertText":"parseUnsignedInt"},{"label":"remainderUnsigned","kind":"method","documentation":"remainderUnsigned(int a, int b): int","insertText":"remainderUnsigned"},{"label":"reverse","kind":"method","documentation":"reverse(int a): int","insertText":"reverse"},{"label":"reverseBytes","kind":"method","documentation":"reverseBytes(int a): int","insertText":"reverseBytes"},{"label":"rotateLeft","kind":"method","documentation":"rotateLeft(int a, int b): int","insertText":"rotateLeft"},{"label":"rotateRight","kind":"method","documentation":"rotateRight(int a, int b): int","insertText":"rotateRight"},{"label":"signum","kind":"method","documentation":"signum(int a): int","insertText":"signum"},{"label":"toBinaryString","kind":"method","documentation":"toBinaryString(int a): String","insertText":"toBinaryString"},{"label":"toHexString","kind":"method","documentation":"toHexString(int a): String","insertText":"toHexString"},{"label":"toOctalString","kind":"method","documentation":"toOctalString(int a): String","insertText":"toOctalString"},{"label":"toString","kind":"method","documentation":"toString(int a, int b | int a): String","insertText":"toString"},{"label":"toUnsignedLong","kind":"method","documentation":"toUnsignedLong(int a): long","insertText":"toUnsignedLong"},{"label":"toUnsignedString","kind":"method","documentation":"toUnsignedString(int a, int b | int a): String","insertText":"toUnsignedString"},{"label":"valueOf","kind":"method","documentation":"valueOf(String a, int b | int a): Integer","insertText":"valueOf"},{"label":"byteValue","kind":"method","documentation":"byteValue(): byte","insertText":"byteValue"},{"label":"compareTo","kind":"method","documentation":"compareTo(Integer a): int","insertText":"compareTo"},{"label":"doubleValue","kind":"method","documentation":"doubleValue(): double","insertText":"doubleValue"},{"label":"equals","kind":"method","documentation":"equals(Object a): boolean","insertText":"equals"},{"label":"floatValue","kind":"method","documentation":"floatValue(): float","insertText":"floatValue"},{"label":"hashCode","kind":"method","documentation":"hashCode(): int","insertText":"hashCode"},{"label":"intValue","kind":"method","documentation":"intValue(): int","insertText":"intValue"},{"label":"longValue","kind":"method","documentation":"longValue(): long","insertText":"longValue"},{"label":"shortValue","kind":"method","documentation":"shortValue(): short","insertText":"shortValue"},{"label":"toString","kind":"method","documentation":"toString(): String","insertText":"toString"}]},{"label":"InterruptedException","kind":"class","documentation":"Class: InterruptedException","insertText":"InterruptedException","properties":[{"label":"equals","kind":"method","documentation":"equals(Object a): boolean","insertText":"equals"},{"label":"getLocalizedMessage","kind":"method","documentation":"getLocalizedMessage(): String","insertText":"getLocalizedMessage"},{"label":"getMessage","kind":"method","documentation":"getMessage(): String","insertText":"getMessage"},{"label":"getStackTrace","kind":"method","documentation":"getStackTrace(): StackTraceElement[]","insertText":"getStackTrace"},{"label":"hashCode","kind":"method","documentation":"hashCode(): int","insertText":"hashCode"},{"label":"toString","kind":"method","documentation":"toString(): String","insertText":"toString"}],"constructorDefinition":{"label":"InterruptedException","kind":"constructor","documentation":"Constructor: InterruptedException","insertText":"InterruptedException"}},{"label":"Iterable","kind":"class","documentation":"Class: Iterable","insertText":"Iterable","properties":[{"label":"any","kind":"method","documentation":"any(Predicate a): boolean","insertText":"any"},{"label":"asCollection","kind":"method","documentation":"asCollection(): Collection","insertText":"asCollection"},{"label":"asList","kind":"method","documentation":"asList(): List","insertText":"asList"},{"label":"each","kind":"method","documentation":"each(Consumer a): def","insertText":"each"},{"label":"eachWithIndex","kind":"method","documentation":"eachWithIndex(ObjIntConsumer a): def","insertText":"eachWithIndex"},{"label":"equals","kind":"method","documentation":"equals(Object a): boolean","insertText":"equals"},{"label":"every","kind":"method","documentation":"every(Predicate a): boolean","insertText":"every"},{"label":"findResults","kind":"method","documentation":"findResults(Function a): List","insertText":"findResults"},{"label":"forEach","kind":"method","documentation":"forEach(Consumer a): void","insertText":"forEach"},{"label":"groupBy","kind":"method","documentation":"groupBy(Function a): Map","insertText":"groupBy"},{"label":"hashCode","kind":"method","documentation":"hashCode(): int","insertText":"hashCode"},{"label":"iterator","kind":"method","documentation":"iterator(): Iterator","insertText":"iterator"},{"label":"join","kind":"method","documentation":"join(String a): String","insertText":"join"},{"label":"spliterator","kind":"method","documentation":"spliterator(): Spliterator","insertText":"spliterator"},{"label":"sum","kind":"method","documentation":"sum(ToDoubleFunction a): double","insertText":"sum"},{"label":"toString","kind":"method","documentation":"toString(): String","insertText":"toString"}]},{"label":"Long","kind":"class","documentation":"Class: Long","insertText":"Long","properties":[{"label":"BYTES","kind":"property","documentation":"BYTES: int","insertText":"BYTES"},{"label":"MAX_VALUE","kind":"property","documentation":"MAX_VALUE: long","insertText":"MAX_VALUE"},{"label":"MIN_VALUE","kind":"property","documentation":"MIN_VALUE: long","insertText":"MIN_VALUE"},{"label":"SIZE","kind":"property","documentation":"SIZE: int","insertText":"SIZE"},{"label":"bitCount","kind":"method","documentation":"bitCount(long a): int","insertText":"bitCount"},{"label":"compare","kind":"method","documentation":"compare(long a, long b): int","insertText":"compare"},{"label":"compareUnsigned","kind":"method","documentation":"compareUnsigned(long a, long b): int","insertText":"compareUnsigned"},{"label":"decode","kind":"method","documentation":"decode(String a): Long","insertText":"decode"},{"label":"divideUnsigned","kind":"method","documentation":"divideUnsigned(long a, long b): long","insertText":"divideUnsigned"},{"label":"hashCode","kind":"method","documentation":"hashCode(long a): int","insertText":"hashCode"},{"label":"highestOneBit","kind":"method","documentation":"highestOneBit(long a): long","insertText":"highestOneBit"},{"label":"lowestOneBit","kind":"method","documentation":"lowestOneBit(long a): long","insertText":"lowestOneBit"},{"label":"max","kind":"method","documentation":"max(long a, long b): long","insertText":"max"},{"label":"min","kind":"method","documentation":"min(long a, long b): long","insertText":"min"},{"label":"numberOfLeadingZeros","kind":"method","documentation":"numberOfLeadingZeros(long a): int","insertText":"numberOfLeadingZeros"},{"label":"numberOfTrailingZeros","kind":"method","documentation":"numberOfTrailingZeros(long a): int","insertText":"numberOfTrailingZeros"},{"label":"parseLong","kind":"method","documentation":"parseLong(String a, int b | String a): long","insertText":"parseLong"},{"label":"parseUnsignedLong","kind":"method","documentation":"parseUnsignedLong(String a, int b | String a): long","insertText":"parseUnsignedLong"},{"label":"remainderUnsigned","kind":"method","documentation":"remainderUnsigned(long a, long b): long","insertText":"remainderUnsigned"},{"label":"reverse","kind":"method","documentation":"reverse(long a): long","insertText":"reverse"},{"label":"reverseBytes","kind":"method","documentation":"reverseBytes(long a): long","insertText":"reverseBytes"},{"label":"rotateLeft","kind":"method","documentation":"rotateLeft(long a, int b): long","insertText":"rotateLeft"},{"label":"rotateRight","kind":"method","documentation":"rotateRight(long a, int b): long","insertText":"rotateRight"},{"label":"signum","kind":"method","documentation":"signum(long a): int","insertText":"signum"},{"label":"sum","kind":"method","documentation":"sum(long a, long b): long","insertText":"sum"},{"label":"toBinaryString","kind":"method","documentation":"toBinaryString(long a): String","insertText":"toBinaryString"},{"label":"toHexString","kind":"method","documentation":"toHexString(long a): String","insertText":"toHexString"},{"label":"toOctalString","kind":"method","documentation":"toOctalString(long a): String","insertText":"toOctalString"},{"label":"toString","kind":"method","documentation":"toString(long a, int b | long a): String","insertText":"toString"},{"label":"toUnsignedString","kind":"method","documentation":"toUnsignedString(long a, int b | long a): String","insertText":"toUnsignedString"},{"label":"valueOf","kind":"method","documentation":"valueOf(String a, int b | long a): Long","insertText":"valueOf"},{"label":"byteValue","kind":"method","documentation":"byteValue(): byte","insertText":"byteValue"},{"label":"compareTo","kind":"method","documentation":"compareTo(Long a): int","insertText":"compareTo"},{"label":"doubleValue","kind":"method","documentation":"doubleValue(): double","insertText":"doubleValue"},{"label":"equals","kind":"method","documentation":"equals(Object a): boolean","insertText":"equals"},{"label":"floatValue","kind":"method","documentation":"floatValue(): float","insertText":"floatValue"},{"label":"hashCode","kind":"method","documentation":"hashCode(): int","insertText":"hashCode"},{"label":"intValue","kind":"method","documentation":"intValue(): int","insertText":"intValue"},{"label":"longValue","kind":"method","documentation":"longValue(): long","insertText":"longValue"},{"label":"shortValue","kind":"method","documentation":"shortValue(): short","insertText":"shortValue"},{"label":"toString","kind":"method","documentation":"toString(): String","insertText":"toString"}]},{"label":"Math","kind":"class","documentation":"Class: Math","insertText":"Math","properties":[{"label":"E","kind":"property","documentation":"E: double","insertText":"E"},{"label":"PI","kind":"property","documentation":"PI: double","insertText":"PI"},{"label":"IEEEremainder","kind":"method","documentation":"IEEEremainder(double a, double b): double","insertText":"IEEEremainder"},{"label":"abs","kind":"method","documentation":"abs(double a): double","insertText":"abs"},{"label":"acos","kind":"method","documentation":"acos(double a): double","insertText":"acos"},{"label":"asin","kind":"method","documentation":"asin(double a): double","insertText":"asin"},{"label":"atan","kind":"method","documentation":"atan(double a): double","insertText":"atan"},{"label":"atan2","kind":"method","documentation":"atan2(double a, double b): double","insertText":"atan2"},{"label":"cbrt","kind":"method","documentation":"cbrt(double a): double","insertText":"cbrt"},{"label":"ceil","kind":"method","documentation":"ceil(double a): double","insertText":"ceil"},{"label":"copySign","kind":"method","documentation":"copySign(double a, double b): double","insertText":"copySign"},{"label":"cos","kind":"method","documentation":"cos(double a): double","insertText":"cos"},{"label":"cosh","kind":"method","documentation":"cosh(double a): double","insertText":"cosh"},{"label":"exp","kind":"method","documentation":"exp(double a): double","insertText":"exp"},{"label":"expm1","kind":"method","documentation":"expm1(double a): double","insertText":"expm1"},{"label":"floor","kind":"method","documentation":"floor(double a): double","insertText":"floor"},{"label":"hypot","kind":"method","documentation":"hypot(double a, double b): double","insertText":"hypot"},{"label":"log","kind":"method","documentation":"log(double a): double","insertText":"log"},{"label":"log10","kind":"method","documentation":"log10(double a): double","insertText":"log10"},{"label":"log1p","kind":"method","documentation":"log1p(double a): double","insertText":"log1p"},{"label":"max","kind":"method","documentation":"max(double a, double b): double","insertText":"max"},{"label":"min","kind":"method","documentation":"min(double a, double b): double","insertText":"min"},{"label":"nextAfter","kind":"method","documentation":"nextAfter(double a, double b): double","insertText":"nextAfter"},{"label":"nextDown","kind":"method","documentation":"nextDown(double a): double","insertText":"nextDown"},{"label":"nextUp","kind":"method","documentation":"nextUp(double a): double","insertText":"nextUp"},{"label":"pow","kind":"method","documentation":"pow(double a, double b): double","insertText":"pow"},{"label":"random","kind":"method","documentation":"random(): double","insertText":"random"},{"label":"rint","kind":"method","documentation":"rint(double a): double","insertText":"rint"},{"label":"round","kind":"method","documentation":"round(double a): long","insertText":"round"},{"label":"scalb","kind":"method","documentation":"scalb(double a, int b): double","insertText":"scalb"},{"label":"signum","kind":"method","documentation":"signum(double a): double","insertText":"signum"},{"label":"sin","kind":"method","documentation":"sin(double a): double","insertText":"sin"},{"label":"sinh","kind":"method","documentation":"sinh(double a): double","insertText":"sinh"},{"label":"sqrt","kind":"method","documentation":"sqrt(double a): double","insertText":"sqrt"},{"label":"tan","kind":"method","documentation":"tan(double a): double","insertText":"tan"},{"label":"tanh","kind":"method","documentation":"tanh(double a): double","insertText":"tanh"},{"label":"toDegrees","kind":"method","documentation":"toDegrees(double a): double","insertText":"toDegrees"},{"label":"toRadians","kind":"method","documentation":"toRadians(double a): double","insertText":"toRadians"},{"label":"ulp","kind":"method","documentation":"ulp(double a): double","insertText":"ulp"},{"label":"equals","kind":"method","documentation":"equals(Object a): boolean","insertText":"equals"},{"label":"hashCode","kind":"method","documentation":"hashCode(): int","insertText":"hashCode"},{"label":"toString","kind":"method","documentation":"toString(): String","insertText":"toString"}]},{"label":"NegativeArraySizeException","kind":"class","documentation":"Class: NegativeArraySizeException","insertText":"NegativeArraySizeException","properties":[{"label":"equals","kind":"method","documentation":"equals(Object a): boolean","insertText":"equals"},{"label":"getLocalizedMessage","kind":"method","documentation":"getLocalizedMessage(): String","insertText":"getLocalizedMessage"},{"label":"getMessage","kind":"method","documentation":"getMessage(): String","insertText":"getMessage"},{"label":"getStackTrace","kind":"method","documentation":"getStackTrace(): StackTraceElement[]","insertText":"getStackTrace"},{"label":"hashCode","kind":"method","documentation":"hashCode(): int","insertText":"hashCode"},{"label":"toString","kind":"method","documentation":"toString(): String","insertText":"toString"}],"constructorDefinition":{"label":"NegativeArraySizeException","kind":"constructor","documentation":"Constructor: NegativeArraySizeException","insertText":"NegativeArraySizeException"}},{"label":"NoSuchFieldException","kind":"class","documentation":"Class: NoSuchFieldException","insertText":"NoSuchFieldException","properties":[{"label":"equals","kind":"method","documentation":"equals(Object a): boolean","insertText":"equals"},{"label":"getLocalizedMessage","kind":"method","documentation":"getLocalizedMessage(): String","insertText":"getLocalizedMessage"},{"label":"getMessage","kind":"method","documentation":"getMessage(): String","insertText":"getMessage"},{"label":"getStackTrace","kind":"method","documentation":"getStackTrace(): StackTraceElement[]","insertText":"getStackTrace"},{"label":"hashCode","kind":"method","documentation":"hashCode(): int","insertText":"hashCode"},{"label":"toString","kind":"method","documentation":"toString(): String","insertText":"toString"}],"constructorDefinition":{"label":"NoSuchFieldException","kind":"constructor","documentation":"Constructor: NoSuchFieldException","insertText":"NoSuchFieldException"}},{"label":"NoSuchMethodException","kind":"class","documentation":"Class: NoSuchMethodException","insertText":"NoSuchMethodException","properties":[{"label":"equals","kind":"method","documentation":"equals(Object a): boolean","insertText":"equals"},{"label":"getLocalizedMessage","kind":"method","documentation":"getLocalizedMessage(): String","insertText":"getLocalizedMessage"},{"label":"getMessage","kind":"method","documentation":"getMessage(): String","insertText":"getMessage"},{"label":"getStackTrace","kind":"method","documentation":"getStackTrace(): StackTraceElement[]","insertText":"getStackTrace"},{"label":"hashCode","kind":"method","documentation":"hashCode(): int","insertText":"hashCode"},{"label":"toString","kind":"method","documentation":"toString(): String","insertText":"toString"}],"constructorDefinition":{"label":"NoSuchMethodException","kind":"constructor","documentation":"Constructor: NoSuchMethodException","insertText":"NoSuchMethodException"}},{"label":"NullPointerException","kind":"class","documentation":"Class: NullPointerException","insertText":"NullPointerException","properties":[{"label":"equals","kind":"method","documentation":"equals(Object a): boolean","insertText":"equals"},{"label":"getLocalizedMessage","kind":"method","documentation":"getLocalizedMessage(): String","insertText":"getLocalizedMessage"},{"label":"getMessage","kind":"method","documentation":"getMessage(): String","insertText":"getMessage"},{"label":"getStackTrace","kind":"method","documentation":"getStackTrace(): StackTraceElement[]","insertText":"getStackTrace"},{"label":"hashCode","kind":"method","documentation":"hashCode(): int","insertText":"hashCode"},{"label":"toString","kind":"method","documentation":"toString(): String","insertText":"toString"}],"constructorDefinition":{"label":"NullPointerException","kind":"constructor","documentation":"Constructor: NullPointerException","insertText":"NullPointerException"}},{"label":"Number","kind":"class","documentation":"Class: Number","insertText":"Number","properties":[{"label":"byteValue","kind":"method","documentation":"byteValue(): byte","insertText":"byteValue"},{"label":"doubleValue","kind":"method","documentation":"doubleValue(): double","insertText":"doubleValue"},{"label":"equals","kind":"method","documentation":"equals(Object a): boolean","insertText":"equals"},{"label":"floatValue","kind":"method","documentation":"floatValue(): float","insertText":"floatValue"},{"label":"hashCode","kind":"method","documentation":"hashCode(): int","insertText":"hashCode"},{"label":"intValue","kind":"method","documentation":"intValue(): int","insertText":"intValue"},{"label":"longValue","kind":"method","documentation":"longValue(): long","insertText":"longValue"},{"label":"shortValue","kind":"method","documentation":"shortValue(): short","insertText":"shortValue"},{"label":"toString","kind":"method","documentation":"toString(): String","insertText":"toString"}]},{"label":"NumberFormatException","kind":"class","documentation":"Class: NumberFormatException","insertText":"NumberFormatException","properties":[{"label":"equals","kind":"method","documentation":"equals(Object a): boolean","insertText":"equals"},{"label":"getLocalizedMessage","kind":"method","documentation":"getLocalizedMessage(): String","insertText":"getLocalizedMessage"},{"label":"getMessage","kind":"method","documentation":"getMessage(): String","insertText":"getMessage"},{"label":"getStackTrace","kind":"method","documentation":"getStackTrace(): StackTraceElement[]","insertText":"getStackTrace"},{"label":"hashCode","kind":"method","documentation":"hashCode(): int","insertText":"hashCode"},{"label":"toString","kind":"method","documentation":"toString(): String","insertText":"toString"}],"constructorDefinition":{"label":"NumberFormatException","kind":"constructor","documentation":"Constructor: NumberFormatException","insertText":"NumberFormatException"}},{"label":"Object","kind":"class","documentation":"Class: Object","insertText":"Object","properties":[{"label":"equals","kind":"method","documentation":"equals(Object a): boolean","insertText":"equals"},{"label":"hashCode","kind":"method","documentation":"hashCode(): int","insertText":"hashCode"},{"label":"toString","kind":"method","documentation":"toString(): String","insertText":"toString"}]},{"label":"ReflectiveOperationException","kind":"class","documentation":"Class: ReflectiveOperationException","insertText":"ReflectiveOperationException","properties":[{"label":"equals","kind":"method","documentation":"equals(Object a): boolean","insertText":"equals"},{"label":"getLocalizedMessage","kind":"method","documentation":"getLocalizedMessage(): String","insertText":"getLocalizedMessage"},{"label":"getMessage","kind":"method","documentation":"getMessage(): String","insertText":"getMessage"},{"label":"getStackTrace","kind":"method","documentation":"getStackTrace(): StackTraceElement[]","insertText":"getStackTrace"},{"label":"hashCode","kind":"method","documentation":"hashCode(): int","insertText":"hashCode"},{"label":"toString","kind":"method","documentation":"toString(): String","insertText":"toString"}],"constructorDefinition":{"label":"ReflectiveOperationException","kind":"constructor","documentation":"Constructor: ReflectiveOperationException","insertText":"ReflectiveOperationException"}},{"label":"RuntimeException","kind":"class","documentation":"Class: RuntimeException","insertText":"RuntimeException","properties":[{"label":"equals","kind":"method","documentation":"equals(Object a): boolean","insertText":"equals"},{"label":"getLocalizedMessage","kind":"method","documentation":"getLocalizedMessage(): String","insertText":"getLocalizedMessage"},{"label":"getMessage","kind":"method","documentation":"getMessage(): String","insertText":"getMessage"},{"label":"getStackTrace","kind":"method","documentation":"getStackTrace(): StackTraceElement[]","insertText":"getStackTrace"},{"label":"hashCode","kind":"method","documentation":"hashCode(): int","insertText":"hashCode"},{"label":"toString","kind":"method","documentation":"toString(): String","insertText":"toString"}],"constructorDefinition":{"label":"RuntimeException","kind":"constructor","documentation":"Constructor: RuntimeException","insertText":"RuntimeException"}},{"label":"SecurityException","kind":"class","documentation":"Class: SecurityException","insertText":"SecurityException","properties":[{"label":"equals","kind":"method","documentation":"equals(Object a): boolean","insertText":"equals"},{"label":"getLocalizedMessage","kind":"method","documentation":"getLocalizedMessage(): String","insertText":"getLocalizedMessage"},{"label":"getMessage","kind":"method","documentation":"getMessage(): String","insertText":"getMessage"},{"label":"getStackTrace","kind":"method","documentation":"getStackTrace(): StackTraceElement[]","insertText":"getStackTrace"},{"label":"hashCode","kind":"method","documentation":"hashCode(): int","insertText":"hashCode"},{"label":"toString","kind":"method","documentation":"toString(): String","insertText":"toString"}],"constructorDefinition":{"label":"SecurityException","kind":"constructor","documentation":"Constructor: SecurityException","insertText":"SecurityException"}},{"label":"Short","kind":"class","documentation":"Class: Short","insertText":"Short","properties":[{"label":"BYTES","kind":"property","documentation":"BYTES: int","insertText":"BYTES"},{"label":"MAX_VALUE","kind":"property","documentation":"MAX_VALUE: short","insertText":"MAX_VALUE"},{"label":"MIN_VALUE","kind":"property","documentation":"MIN_VALUE: short","insertText":"MIN_VALUE"},{"label":"SIZE","kind":"property","documentation":"SIZE: int","insertText":"SIZE"},{"label":"compare","kind":"method","documentation":"compare(short a, short b): int","insertText":"compare"},{"label":"decode","kind":"method","documentation":"decode(String a): Short","insertText":"decode"},{"label":"hashCode","kind":"method","documentation":"hashCode(short a): int","insertText":"hashCode"},{"label":"parseShort","kind":"method","documentation":"parseShort(String a, int b | String a): short","insertText":"parseShort"},{"label":"reverseBytes","kind":"method","documentation":"reverseBytes(short a): short","insertText":"reverseBytes"},{"label":"toString","kind":"method","documentation":"toString(short a): String","insertText":"toString"},{"label":"toUnsignedInt","kind":"method","documentation":"toUnsignedInt(short a): int","insertText":"toUnsignedInt"},{"label":"toUnsignedLong","kind":"method","documentation":"toUnsignedLong(short a): long","insertText":"toUnsignedLong"},{"label":"valueOf","kind":"method","documentation":"valueOf(String a, int b | short a): Short","insertText":"valueOf"},{"label":"byteValue","kind":"method","documentation":"byteValue(): byte","insertText":"byteValue"},{"label":"compareTo","kind":"method","documentation":"compareTo(Short a): int","insertText":"compareTo"},{"label":"doubleValue","kind":"method","documentation":"doubleValue(): double","insertText":"doubleValue"},{"label":"equals","kind":"method","documentation":"equals(Object a): boolean","insertText":"equals"},{"label":"floatValue","kind":"method","documentation":"floatValue(): float","insertText":"floatValue"},{"label":"hashCode","kind":"method","documentation":"hashCode(): int","insertText":"hashCode"},{"label":"intValue","kind":"method","documentation":"intValue(): int","insertText":"intValue"},{"label":"longValue","kind":"method","documentation":"longValue(): long","insertText":"longValue"},{"label":"shortValue","kind":"method","documentation":"shortValue(): short","insertText":"shortValue"},{"label":"toString","kind":"method","documentation":"toString(): String","insertText":"toString"}]},{"label":"StackTraceElement","kind":"class","documentation":"Class: StackTraceElement","insertText":"StackTraceElement","properties":[{"label":"equals","kind":"method","documentation":"equals(Object a): boolean","insertText":"equals"},{"label":"getClassName","kind":"method","documentation":"getClassName(): String","insertText":"getClassName"},{"label":"getFileName","kind":"method","documentation":"getFileName(): String","insertText":"getFileName"},{"label":"getLineNumber","kind":"method","documentation":"getLineNumber(): int","insertText":"getLineNumber"},{"label":"getMethodName","kind":"method","documentation":"getMethodName(): String","insertText":"getMethodName"},{"label":"hashCode","kind":"method","documentation":"hashCode(): int","insertText":"hashCode"},{"label":"isNativeMethod","kind":"method","documentation":"isNativeMethod(): boolean","insertText":"isNativeMethod"},{"label":"toString","kind":"method","documentation":"toString(): String","insertText":"toString"}],"constructorDefinition":{"label":"StackTraceElement","kind":"constructor","documentation":"Constructor: StackTraceElement","insertText":"StackTraceElement"}},{"label":"StrictMath","kind":"class","documentation":"Class: StrictMath","insertText":"StrictMath","properties":[{"label":"E","kind":"property","documentation":"E: double","insertText":"E"},{"label":"PI","kind":"property","documentation":"PI: double","insertText":"PI"},{"label":"IEEEremainder","kind":"method","documentation":"IEEEremainder(double a, double b): double","insertText":"IEEEremainder"},{"label":"abs","kind":"method","documentation":"abs(double a): double","insertText":"abs"},{"label":"acos","kind":"method","documentation":"acos(double a): double","insertText":"acos"},{"label":"asin","kind":"method","documentation":"asin(double a): double","insertText":"asin"},{"label":"atan","kind":"method","documentation":"atan(double a): double","insertText":"atan"},{"label":"atan2","kind":"method","documentation":"atan2(double a, double b): double","insertText":"atan2"},{"label":"cbrt","kind":"method","documentation":"cbrt(double a): double","insertText":"cbrt"},{"label":"ceil","kind":"method","documentation":"ceil(double a): double","insertText":"ceil"},{"label":"copySign","kind":"method","documentation":"copySign(double a, double b): double","insertText":"copySign"},{"label":"cos","kind":"method","documentation":"cos(double a): double","insertText":"cos"},{"label":"cosh","kind":"method","documentation":"cosh(double a): double","insertText":"cosh"},{"label":"exp","kind":"method","documentation":"exp(double a): double","insertText":"exp"},{"label":"expm1","kind":"method","documentation":"expm1(double a): double","insertText":"expm1"},{"label":"floor","kind":"method","documentation":"floor(double a): double","insertText":"floor"},{"label":"hypot","kind":"method","documentation":"hypot(double a, double b): double","insertText":"hypot"},{"label":"log","kind":"method","documentation":"log(double a): double","insertText":"log"},{"label":"log10","kind":"method","documentation":"log10(double a): double","insertText":"log10"},{"label":"log1p","kind":"method","documentation":"log1p(double a): double","insertText":"log1p"},{"label":"max","kind":"method","documentation":"max(double a, double b): double","insertText":"max"},{"label":"min","kind":"method","documentation":"min(double a, double b): double","insertText":"min"},{"label":"nextAfter","kind":"method","documentation":"nextAfter(double a, double b): double","insertText":"nextAfter"},{"label":"nextDown","kind":"method","documentation":"nextDown(double a): double","insertText":"nextDown"},{"label":"nextUp","kind":"method","documentation":"nextUp(double a): double","insertText":"nextUp"},{"label":"pow","kind":"method","documentation":"pow(double a, double b): double","insertText":"pow"},{"label":"random","kind":"method","documentation":"random(): double","insertText":"random"},{"label":"rint","kind":"method","documentation":"rint(double a): double","insertText":"rint"},{"label":"round","kind":"method","documentation":"round(double a): long","insertText":"round"},{"label":"scalb","kind":"method","documentation":"scalb(double a, int b): double","insertText":"scalb"},{"label":"signum","kind":"method","documentation":"signum(double a): double","insertText":"signum"},{"label":"sin","kind":"method","documentation":"sin(double a): double","insertText":"sin"},{"label":"sinh","kind":"method","documentation":"sinh(double a): double","insertText":"sinh"},{"label":"sqrt","kind":"method","documentation":"sqrt(double a): double","insertText":"sqrt"},{"label":"tan","kind":"method","documentation":"tan(double a): double","insertText":"tan"},{"label":"tanh","kind":"method","documentation":"tanh(double a): double","insertText":"tanh"},{"label":"toDegrees","kind":"method","documentation":"toDegrees(double a): double","insertText":"toDegrees"},{"label":"toRadians","kind":"method","documentation":"toRadians(double a): double","insertText":"toRadians"},{"label":"ulp","kind":"method","documentation":"ulp(double a): double","insertText":"ulp"},{"label":"equals","kind":"method","documentation":"equals(Object a): boolean","insertText":"equals"},{"label":"hashCode","kind":"method","documentation":"hashCode(): int","insertText":"hashCode"},{"label":"toString","kind":"method","documentation":"toString(): String","insertText":"toString"}]},{"label":"StringBuffer","kind":"class","documentation":"Class: StringBuffer","insertText":"StringBuffer","properties":[{"label":"append","kind":"method","documentation":"append(CharSequence a, int b, int c | def a): StringBuffer","insertText":"append"},{"label":"appendCodePoint","kind":"method","documentation":"appendCodePoint(int a): StringBuffer","insertText":"appendCodePoint"},{"label":"capacity","kind":"method","documentation":"capacity(): int","insertText":"capacity"},{"label":"charAt","kind":"method","documentation":"charAt(int a): char","insertText":"charAt"},{"label":"chars","kind":"method","documentation":"chars(): IntStream","insertText":"chars"},{"label":"codePointAt","kind":"method","documentation":"codePointAt(int a): int","insertText":"codePointAt"},{"label":"codePointBefore","kind":"method","documentation":"codePointBefore(int a): int","insertText":"codePointBefore"},{"label":"codePointCount","kind":"method","documentation":"codePointCount(int a, int b): int","insertText":"codePointCount"},{"label":"codePoints","kind":"method","documentation":"codePoints(): IntStream","insertText":"codePoints"},{"label":"compareTo","kind":"method","documentation":"compareTo(def a): int","insertText":"compareTo"},{"label":"delete","kind":"method","documentation":"delete(int a, int b): StringBuffer","insertText":"delete"},{"label":"deleteCharAt","kind":"method","documentation":"deleteCharAt(int a): StringBuffer","insertText":"deleteCharAt"},{"label":"equals","kind":"method","documentation":"equals(Object a): boolean","insertText":"equals"},{"label":"getChars","kind":"method","documentation":"getChars(int a, int b, char[] c, int d): void","insertText":"getChars"},{"label":"hashCode","kind":"method","documentation":"hashCode(): int","insertText":"hashCode"},{"label":"indexOf","kind":"method","documentation":"indexOf(String a, int b | String a): int","insertText":"indexOf"},{"label":"insert","kind":"method","documentation":"insert(int a, def b): StringBuffer","insertText":"insert"},{"label":"lastIndexOf","kind":"method","documentation":"lastIndexOf(String a, int b | String a): int","insertText":"lastIndexOf"},{"label":"length","kind":"method","documentation":"length(): int","insertText":"length"},{"label":"offsetByCodePoints","kind":"method","documentation":"offsetByCodePoints(int a, int b): int","insertText":"offsetByCodePoints"},{"label":"replace","kind":"method","documentation":"replace(int a, int b, String c): StringBuffer","insertText":"replace"},{"label":"replaceAll","kind":"method","documentation":"replaceAll(Pattern a, Function b): String","insertText":"replaceAll"},{"label":"replaceFirst","kind":"method","documentation":"replaceFirst(Pattern a, Function b): String","insertText":"replaceFirst"},{"label":"reverse","kind":"method","documentation":"reverse(): StringBuffer","insertText":"reverse"},{"label":"setCharAt","kind":"method","documentation":"setCharAt(int a, char b): void","insertText":"setCharAt"},{"label":"setLength","kind":"method","documentation":"setLength(int a): void","insertText":"setLength"},{"label":"subSequence","kind":"method","documentation":"subSequence(int a, int b): CharSequence","insertText":"subSequence"},{"label":"substring","kind":"method","documentation":"substring(int a, int b | int a): String","insertText":"substring"},{"label":"toString","kind":"method","documentation":"toString(): String","insertText":"toString"}],"constructorDefinition":{"label":"StringBuffer","kind":"constructor","documentation":"Constructor: StringBuffer","insertText":"StringBuffer"}},{"label":"StringBuilder","kind":"class","documentation":"Class: StringBuilder","insertText":"StringBuilder","properties":[{"label":"append","kind":"method","documentation":"append(CharSequence a, int b, int c | def a): StringBuilder","insertText":"append"},{"label":"appendCodePoint","kind":"method","documentation":"appendCodePoint(int a): StringBuilder","insertText":"appendCodePoint"},{"label":"capacity","kind":"method","documentation":"capacity(): int","insertText":"capacity"},{"label":"charAt","kind":"method","documentation":"charAt(int a): char","insertText":"charAt"},{"label":"chars","kind":"method","documentation":"chars(): IntStream","insertText":"chars"},{"label":"codePointAt","kind":"method","documentation":"codePointAt(int a): int","insertText":"codePointAt"},{"label":"codePointBefore","kind":"method","documentation":"codePointBefore(int a): int","insertText":"codePointBefore"},{"label":"codePointCount","kind":"method","documentation":"codePointCount(int a, int b): int","insertText":"codePointCount"},{"label":"codePoints","kind":"method","documentation":"codePoints(): IntStream","insertText":"codePoints"},{"label":"compareTo","kind":"method","documentation":"compareTo(def a): int","insertText":"compareTo"},{"label":"delete","kind":"method","documentation":"delete(int a, int b): StringBuilder","insertText":"delete"},{"label":"deleteCharAt","kind":"method","documentation":"deleteCharAt(int a): StringBuilder","insertText":"deleteCharAt"},{"label":"equals","kind":"method","documentation":"equals(Object a): boolean","insertText":"equals"},{"label":"getChars","kind":"method","documentation":"getChars(int a, int b, char[] c, int d): void","insertText":"getChars"},{"label":"hashCode","kind":"method","documentation":"hashCode(): int","insertText":"hashCode"},{"label":"indexOf","kind":"method","documentation":"indexOf(String a, int b | String a): int","insertText":"indexOf"},{"label":"insert","kind":"method","documentation":"insert(int a, def b): StringBuilder","insertText":"insert"},{"label":"lastIndexOf","kind":"method","documentation":"lastIndexOf(String a, int b | String a): int","insertText":"lastIndexOf"},{"label":"length","kind":"method","documentation":"length(): int","insertText":"length"},{"label":"offsetByCodePoints","kind":"method","documentation":"offsetByCodePoints(int a, int b): int","insertText":"offsetByCodePoints"},{"label":"replace","kind":"method","documentation":"replace(int a, int b, String c): StringBuilder","insertText":"replace"},{"label":"replaceAll","kind":"method","documentation":"replaceAll(Pattern a, Function b): String","insertText":"replaceAll"},{"label":"replaceFirst","kind":"method","documentation":"replaceFirst(Pattern a, Function b): String","insertText":"replaceFirst"},{"label":"reverse","kind":"method","documentation":"reverse(): StringBuilder","insertText":"reverse"},{"label":"setCharAt","kind":"method","documentation":"setCharAt(int a, char b): void","insertText":"setCharAt"},{"label":"setLength","kind":"method","documentation":"setLength(int a): void","insertText":"setLength"},{"label":"subSequence","kind":"method","documentation":"subSequence(int a, int b): CharSequence","insertText":"subSequence"},{"label":"substring","kind":"method","documentation":"substring(int a, int b | int a): String","insertText":"substring"},{"label":"toString","kind":"method","documentation":"toString(): String","insertText":"toString"}],"constructorDefinition":{"label":"StringBuilder","kind":"constructor","documentation":"Constructor: StringBuilder","insertText":"StringBuilder"}},{"label":"StringIndexOutOfBoundsException","kind":"class","documentation":"Class: StringIndexOutOfBoundsException","insertText":"StringIndexOutOfBoundsException","properties":[{"label":"equals","kind":"method","documentation":"equals(Object a): boolean","insertText":"equals"},{"label":"getLocalizedMessage","kind":"method","documentation":"getLocalizedMessage(): String","insertText":"getLocalizedMessage"},{"label":"getMessage","kind":"method","documentation":"getMessage(): String","insertText":"getMessage"},{"label":"getStackTrace","kind":"method","documentation":"getStackTrace(): StackTraceElement[]","insertText":"getStackTrace"},{"label":"hashCode","kind":"method","documentation":"hashCode(): int","insertText":"hashCode"},{"label":"toString","kind":"method","documentation":"toString(): String","insertText":"toString"}],"constructorDefinition":{"label":"StringIndexOutOfBoundsException","kind":"constructor","documentation":"Constructor: StringIndexOutOfBoundsException","insertText":"StringIndexOutOfBoundsException"}},{"label":"System","kind":"class","documentation":"Class: System","insertText":"System","properties":[{"label":"arraycopy","kind":"method","documentation":"arraycopy(Object a, int b, Object c, int d, int e): void","insertText":"arraycopy"},{"label":"currentTimeMillis","kind":"method","documentation":"currentTimeMillis(): long","insertText":"currentTimeMillis"},{"label":"nanoTime","kind":"method","documentation":"nanoTime(): long","insertText":"nanoTime"},{"label":"equals","kind":"method","documentation":"equals(Object a): boolean","insertText":"equals"},{"label":"hashCode","kind":"method","documentation":"hashCode(): int","insertText":"hashCode"},{"label":"toString","kind":"method","documentation":"toString(): String","insertText":"toString"}]},{"label":"TypeNotPresentException","kind":"class","documentation":"Class: TypeNotPresentException","insertText":"TypeNotPresentException","properties":[{"label":"equals","kind":"method","documentation":"equals(Object a): boolean","insertText":"equals"},{"label":"getLocalizedMessage","kind":"method","documentation":"getLocalizedMessage(): String","insertText":"getLocalizedMessage"},{"label":"getMessage","kind":"method","documentation":"getMessage(): String","insertText":"getMessage"},{"label":"getStackTrace","kind":"method","documentation":"getStackTrace(): StackTraceElement[]","insertText":"getStackTrace"},{"label":"hashCode","kind":"method","documentation":"hashCode(): int","insertText":"hashCode"},{"label":"toString","kind":"method","documentation":"toString(): String","insertText":"toString"},{"label":"typeName","kind":"method","documentation":"typeName(): String","insertText":"typeName"}]},{"label":"UnsupportedOperationException","kind":"class","documentation":"Class: UnsupportedOperationException","insertText":"UnsupportedOperationException","properties":[{"label":"equals","kind":"method","documentation":"equals(Object a): boolean","insertText":"equals"},{"label":"getLocalizedMessage","kind":"method","documentation":"getLocalizedMessage(): String","insertText":"getLocalizedMessage"},{"label":"getMessage","kind":"method","documentation":"getMessage(): String","insertText":"getMessage"},{"label":"getStackTrace","kind":"method","documentation":"getStackTrace(): StackTraceElement[]","insertText":"getStackTrace"},{"label":"hashCode","kind":"method","documentation":"hashCode(): int","insertText":"hashCode"},{"label":"toString","kind":"method","documentation":"toString(): String","insertText":"toString"}],"constructorDefinition":{"label":"UnsupportedOperationException","kind":"constructor","documentation":"Constructor: UnsupportedOperationException","insertText":"UnsupportedOperationException"}},{"label":"Void","kind":"class","documentation":"Class: Void","insertText":"Void","properties":[{"label":"equals","kind":"method","documentation":"equals(Object a): boolean","insertText":"equals"},{"label":"hashCode","kind":"method","documentation":"hashCode(): int","insertText":"hashCode"},{"label":"toString","kind":"method","documentation":"toString(): String","insertText":"toString"}]},{"label":"BigDecimal","kind":"class","documentation":"Class: BigDecimal","insertText":"BigDecimal","properties":[{"label":"ONE","kind":"property","documentation":"ONE: BigDecimal","insertText":"ONE"},{"label":"TEN","kind":"property","documentation":"TEN: BigDecimal","insertText":"TEN"},{"label":"ZERO","kind":"property","documentation":"ZERO: BigDecimal","insertText":"ZERO"},{"label":"valueOf","kind":"method","documentation":"valueOf(double a): BigDecimal","insertText":"valueOf"},{"label":"abs","kind":"method","documentation":"abs(MathContext a): BigDecimal","insertText":"abs"},{"label":"add","kind":"method","documentation":"add(BigDecimal a, MathContext b | BigDecimal a): BigDecimal","insertText":"add"},{"label":"byteValue","kind":"method","documentation":"byteValue(): byte","insertText":"byteValue"},{"label":"byteValueExact","kind":"method","documentation":"byteValueExact(): byte","insertText":"byteValueExact"},{"label":"compareTo","kind":"method","documentation":"compareTo(BigDecimal a): int","insertText":"compareTo"},{"label":"divide","kind":"method","documentation":"divide(BigDecimal a, MathContext b | BigDecimal a): BigDecimal","insertText":"divide"},{"label":"divideAndRemainder","kind":"method","documentation":"divideAndRemainder(BigDecimal a, MathContext b | BigDecimal a): BigDecimal[]","insertText":"divideAndRemainder"},{"label":"divideToIntegralValue","kind":"method","documentation":"divideToIntegralValue(BigDecimal a, MathContext b | BigDecimal a): BigDecimal","insertText":"divideToIntegralValue"},{"label":"doubleValue","kind":"method","documentation":"doubleValue(): double","insertText":"doubleValue"},{"label":"equals","kind":"method","documentation":"equals(Object a): boolean","insertText":"equals"},{"label":"floatValue","kind":"method","documentation":"floatValue(): float","insertText":"floatValue"},{"label":"hashCode","kind":"method","documentation":"hashCode(): int","insertText":"hashCode"},{"label":"intValue","kind":"method","documentation":"intValue(): int","insertText":"intValue"},{"label":"intValueExact","kind":"method","documentation":"intValueExact(): int","insertText":"intValueExact"},{"label":"longValue","kind":"method","documentation":"longValue(): long","insertText":"longValue"},{"label":"longValueExact","kind":"method","documentation":"longValueExact(): long","insertText":"longValueExact"},{"label":"max","kind":"method","documentation":"max(BigDecimal a): BigDecimal","insertText":"max"},{"label":"min","kind":"method","documentation":"min(BigDecimal a): BigDecimal","insertText":"min"},{"label":"movePointLeft","kind":"method","documentation":"movePointLeft(int a): BigDecimal","insertText":"movePointLeft"},{"label":"movePointRight","kind":"method","documentation":"movePointRight(int a): BigDecimal","insertText":"movePointRight"},{"label":"multiply","kind":"method","documentation":"multiply(BigDecimal a, MathContext b | BigDecimal a): BigDecimal","insertText":"multiply"},{"label":"negate","kind":"method","documentation":"negate(MathContext a): BigDecimal","insertText":"negate"},{"label":"plus","kind":"method","documentation":"plus(MathContext a): BigDecimal","insertText":"plus"},{"label":"pow","kind":"method","documentation":"pow(int a, MathContext b | int a): BigDecimal","insertText":"pow"},{"label":"precision","kind":"method","documentation":"precision(): int","insertText":"precision"},{"label":"remainder","kind":"method","documentation":"remainder(BigDecimal a, MathContext b | BigDecimal a): BigDecimal","insertText":"remainder"},{"label":"round","kind":"method","documentation":"round(MathContext a): BigDecimal","insertText":"round"},{"label":"scale","kind":"method","documentation":"scale(): int","insertText":"scale"},{"label":"scaleByPowerOfTen","kind":"method","documentation":"scaleByPowerOfTen(int a): BigDecimal","insertText":"scaleByPowerOfTen"},{"label":"setScale","kind":"method","documentation":"setScale(int a, RoundingMode b | int a): BigDecimal","insertText":"setScale"},{"label":"shortValue","kind":"method","documentation":"shortValue(): short","insertText":"shortValue"},{"label":"shortValueExact","kind":"method","documentation":"shortValueExact(): short","insertText":"shortValueExact"},{"label":"signum","kind":"method","documentation":"signum(): int","insertText":"signum"},{"label":"stripTrailingZeros","kind":"method","documentation":"stripTrailingZeros(): BigDecimal","insertText":"stripTrailingZeros"},{"label":"subtract","kind":"method","documentation":"subtract(BigDecimal a, MathContext b | BigDecimal a): BigDecimal","insertText":"subtract"},{"label":"toBigInteger","kind":"method","documentation":"toBigInteger(): BigInteger","insertText":"toBigInteger"},{"label":"toBigIntegerExact","kind":"method","documentation":"toBigIntegerExact(): BigInteger","insertText":"toBigIntegerExact"},{"label":"toEngineeringString","kind":"method","documentation":"toEngineeringString(): String","insertText":"toEngineeringString"},{"label":"toPlainString","kind":"method","documentation":"toPlainString(): String","insertText":"toPlainString"},{"label":"toString","kind":"method","documentation":"toString(): String","insertText":"toString"},{"label":"ulp","kind":"method","documentation":"ulp(): BigDecimal","insertText":"ulp"}],"constructorDefinition":{"label":"BigDecimal","kind":"constructor","documentation":"Constructor: BigDecimal","insertText":"BigDecimal"}},{"label":"BigInteger","kind":"class","documentation":"Class: BigInteger","insertText":"BigInteger","properties":[{"label":"ONE","kind":"property","documentation":"ONE: BigInteger","insertText":"ONE"},{"label":"TEN","kind":"property","documentation":"TEN: BigInteger","insertText":"TEN"},{"label":"ZERO","kind":"property","documentation":"ZERO: BigInteger","insertText":"ZERO"},{"label":"valueOf","kind":"method","documentation":"valueOf(long a): BigInteger","insertText":"valueOf"},{"label":"abs","kind":"method","documentation":"abs(): BigInteger","insertText":"abs"},{"label":"add","kind":"method","documentation":"add(BigInteger a): BigInteger","insertText":"add"},{"label":"and","kind":"method","documentation":"and(BigInteger a): BigInteger","insertText":"and"},{"label":"andNot","kind":"method","documentation":"andNot(BigInteger a): BigInteger","insertText":"andNot"},{"label":"bitCount","kind":"method","documentation":"bitCount(): int","insertText":"bitCount"},{"label":"bitLength","kind":"method","documentation":"bitLength(): int","insertText":"bitLength"},{"label":"byteValue","kind":"method","documentation":"byteValue(): byte","insertText":"byteValue"},{"label":"byteValueExact","kind":"method","documentation":"byteValueExact(): byte","insertText":"byteValueExact"},{"label":"clearBit","kind":"method","documentation":"clearBit(int a): BigInteger","insertText":"clearBit"},{"label":"compareTo","kind":"method","documentation":"compareTo(BigInteger a): int","insertText":"compareTo"},{"label":"divide","kind":"method","documentation":"divide(BigInteger a): BigInteger","insertText":"divide"},{"label":"divideAndRemainder","kind":"method","documentation":"divideAndRemainder(BigInteger a): BigInteger[]","insertText":"divideAndRemainder"},{"label":"doubleValue","kind":"method","documentation":"doubleValue(): double","insertText":"doubleValue"},{"label":"equals","kind":"method","documentation":"equals(Object a): boolean","insertText":"equals"},{"label":"flipBit","kind":"method","documentation":"flipBit(int a): BigInteger","insertText":"flipBit"},{"label":"floatValue","kind":"method","documentation":"floatValue(): float","insertText":"floatValue"},{"label":"gcd","kind":"method","documentation":"gcd(BigInteger a): BigInteger","insertText":"gcd"},{"label":"getLowestSetBit","kind":"method","documentation":"getLowestSetBit(): int","insertText":"getLowestSetBit"},{"label":"hashCode","kind":"method","documentation":"hashCode(): int","insertText":"hashCode"},{"label":"intValue","kind":"method","documentation":"intValue(): int","insertText":"intValue"},{"label":"intValueExact","kind":"method","documentation":"intValueExact(): int","insertText":"intValueExact"},{"label":"longValue","kind":"method","documentation":"longValue(): long","insertText":"longValue"},{"label":"longValueExact","kind":"method","documentation":"longValueExact(): long","insertText":"longValueExact"},{"label":"max","kind":"method","documentation":"max(BigInteger a): BigInteger","insertText":"max"},{"label":"min","kind":"method","documentation":"min(BigInteger a): BigInteger","insertText":"min"},{"label":"mod","kind":"method","documentation":"mod(BigInteger a): BigInteger","insertText":"mod"},{"label":"modInverse","kind":"method","documentation":"modInverse(BigInteger a): BigInteger","insertText":"modInverse"},{"label":"modPow","kind":"method","documentation":"modPow(BigInteger a, BigInteger b): BigInteger","insertText":"modPow"},{"label":"multiply","kind":"method","documentation":"multiply(BigInteger a): BigInteger","insertText":"multiply"},{"label":"negate","kind":"method","documentation":"negate(): BigInteger","insertText":"negate"},{"label":"not","kind":"method","documentation":"not(): BigInteger","insertText":"not"},{"label":"or","kind":"method","documentation":"or(BigInteger a): BigInteger","insertText":"or"},{"label":"pow","kind":"method","documentation":"pow(int a): BigInteger","insertText":"pow"},{"label":"remainder","kind":"method","documentation":"remainder(BigInteger a): BigInteger","insertText":"remainder"},{"label":"setBit","kind":"method","documentation":"setBit(int a): BigInteger","insertText":"setBit"},{"label":"shiftLeft","kind":"method","documentation":"shiftLeft(int a): BigInteger","insertText":"shiftLeft"},{"label":"shiftRight","kind":"method","documentation":"shiftRight(int a): BigInteger","insertText":"shiftRight"},{"label":"shortValue","kind":"method","documentation":"shortValue(): short","insertText":"shortValue"},{"label":"shortValueExact","kind":"method","documentation":"shortValueExact(): short","insertText":"shortValueExact"},{"label":"signum","kind":"method","documentation":"signum(): int","insertText":"signum"},{"label":"subtract","kind":"method","documentation":"subtract(BigInteger a): BigInteger","insertText":"subtract"},{"label":"testBit","kind":"method","documentation":"testBit(int a): boolean","insertText":"testBit"},{"label":"toByteArray","kind":"method","documentation":"toByteArray(): byte[]","insertText":"toByteArray"},{"label":"toString","kind":"method","documentation":"toString(int a): String","insertText":"toString"},{"label":"xor","kind":"method","documentation":"xor(BigInteger a): BigInteger","insertText":"xor"}],"constructorDefinition":{"label":"BigInteger","kind":"constructor","documentation":"Constructor: BigInteger","insertText":"BigInteger"}},{"label":"MathContext","kind":"class","documentation":"Class: MathContext","insertText":"MathContext","properties":[{"label":"DECIMAL128","kind":"property","documentation":"DECIMAL128: MathContext","insertText":"DECIMAL128"},{"label":"DECIMAL32","kind":"property","documentation":"DECIMAL32: MathContext","insertText":"DECIMAL32"},{"label":"DECIMAL64","kind":"property","documentation":"DECIMAL64: MathContext","insertText":"DECIMAL64"},{"label":"UNLIMITED","kind":"property","documentation":"UNLIMITED: MathContext","insertText":"UNLIMITED"},{"label":"equals","kind":"method","documentation":"equals(Object a): boolean","insertText":"equals"},{"label":"getPrecision","kind":"method","documentation":"getPrecision(): int","insertText":"getPrecision"},{"label":"getRoundingMode","kind":"method","documentation":"getRoundingMode(): RoundingMode","insertText":"getRoundingMode"},{"label":"hashCode","kind":"method","documentation":"hashCode(): int","insertText":"hashCode"},{"label":"toString","kind":"method","documentation":"toString(): String","insertText":"toString"}],"constructorDefinition":{"label":"MathContext","kind":"constructor","documentation":"Constructor: MathContext","insertText":"MathContext"}},{"label":"RoundingMode","kind":"class","documentation":"Class: RoundingMode","insertText":"RoundingMode","properties":[{"label":"CEILING","kind":"property","documentation":"CEILING: RoundingMode","insertText":"CEILING"},{"label":"DOWN","kind":"property","documentation":"DOWN: RoundingMode","insertText":"DOWN"},{"label":"FLOOR","kind":"property","documentation":"FLOOR: RoundingMode","insertText":"FLOOR"},{"label":"HALF_DOWN","kind":"property","documentation":"HALF_DOWN: RoundingMode","insertText":"HALF_DOWN"},{"label":"HALF_EVEN","kind":"property","documentation":"HALF_EVEN: RoundingMode","insertText":"HALF_EVEN"},{"label":"HALF_UP","kind":"property","documentation":"HALF_UP: RoundingMode","insertText":"HALF_UP"},{"label":"UNNECESSARY","kind":"property","documentation":"UNNECESSARY: RoundingMode","insertText":"UNNECESSARY"},{"label":"UP","kind":"property","documentation":"UP: RoundingMode","insertText":"UP"},{"label":"valueOf","kind":"method","documentation":"valueOf(String a): RoundingMode","insertText":"valueOf"},{"label":"values","kind":"method","documentation":"values(): RoundingMode[]","insertText":"values"},{"label":"compareTo","kind":"method","documentation":"compareTo(Enum a): int","insertText":"compareTo"},{"label":"equals","kind":"method","documentation":"equals(Object a): boolean","insertText":"equals"},{"label":"hashCode","kind":"method","documentation":"hashCode(): int","insertText":"hashCode"},{"label":"name","kind":"method","documentation":"name(): String","insertText":"name"},{"label":"ordinal","kind":"method","documentation":"ordinal(): int","insertText":"ordinal"},{"label":"toString","kind":"method","documentation":"toString(): String","insertText":"toString"}]},{"label":"Annotation","kind":"class","documentation":"Class: Annotation","insertText":"Annotation","properties":[{"label":"equals","kind":"method","documentation":"equals(Object a): boolean","insertText":"equals"},{"label":"getValue","kind":"method","documentation":"getValue(): def","insertText":"getValue"},{"label":"hashCode","kind":"method","documentation":"hashCode(): int","insertText":"hashCode"},{"label":"toString","kind":"method","documentation":"toString(): String","insertText":"toString"}],"constructorDefinition":{"label":"Annotation","kind":"constructor","documentation":"Constructor: Annotation","insertText":"Annotation"}},{"label":"AttributedCharacterIterator","kind":"class","documentation":"Class: AttributedCharacterIterator","insertText":"AttributedCharacterIterator","properties":[{"label":"clone","kind":"method","documentation":"clone(): def","insertText":"clone"},{"label":"current","kind":"method","documentation":"current(): char","insertText":"current"},{"label":"equals","kind":"method","documentation":"equals(Object a): boolean","insertText":"equals"},{"label":"first","kind":"method","documentation":"first(): char","insertText":"first"},{"label":"getAllAttributeKeys","kind":"method","documentation":"getAllAttributeKeys(): Set","insertText":"getAllAttributeKeys"},{"label":"getAttribute","kind":"method","documentation":"getAttribute(AttributedCharacterIterator.Attribute a): def","insertText":"getAttribute"},{"label":"getAttributes","kind":"method","documentation":"getAttributes(): Map","insertText":"getAttributes"},{"label":"getBeginIndex","kind":"method","documentation":"getBeginIndex(): int","insertText":"getBeginIndex"},{"label":"getEndIndex","kind":"method","documentation":"getEndIndex(): int","insertText":"getEndIndex"},{"label":"getIndex","kind":"method","documentation":"getIndex(): int","insertText":"getIndex"},{"label":"getRunLimit","kind":"method","documentation":"getRunLimit(Set a): int","insertText":"getRunLimit"},{"label":"getRunStart","kind":"method","documentation":"getRunStart(Set a): int","insertText":"getRunStart"},{"label":"hashCode","kind":"method","documentation":"hashCode(): int","insertText":"hashCode"},{"label":"last","kind":"method","documentation":"last(): char","insertText":"last"},{"label":"next","kind":"method","documentation":"next(): char","insertText":"next"},{"label":"previous","kind":"method","documentation":"previous(): char","insertText":"previous"},{"label":"setIndex","kind":"method","documentation":"setIndex(int a): char","insertText":"setIndex"},{"label":"toString","kind":"method","documentation":"toString(): String","insertText":"toString"}]},{"label":"Attribute","kind":"class","documentation":"Class: Attribute","insertText":"Attribute","properties":[{"label":"INPUT_METHOD_SEGMENT","kind":"property","documentation":"INPUT_METHOD_SEGMENT: AttributedCharacterIterator.Attribute","insertText":"INPUT_METHOD_SEGMENT"},{"label":"LANGUAGE","kind":"property","documentation":"LANGUAGE: AttributedCharacterIterator.Attribute","insertText":"LANGUAGE"},{"label":"READING","kind":"property","documentation":"READING: AttributedCharacterIterator.Attribute","insertText":"READING"},{"label":"equals","kind":"method","documentation":"equals(Object a): boolean","insertText":"equals"},{"label":"hashCode","kind":"method","documentation":"hashCode(): int","insertText":"hashCode"},{"label":"toString","kind":"method","documentation":"toString(): String","insertText":"toString"}]},{"label":"AttributedString","kind":"class","documentation":"Class: AttributedString","insertText":"AttributedString","properties":[{"label":"addAttribute","kind":"method","documentation":"addAttribute(AttributedCharacterIterator.Attribute a, Object b, int c, int d | AttributedCharacterIterator.Attribute a, Object b): void","insertText":"addAttribute"},{"label":"addAttributes","kind":"method","documentation":"addAttributes(Map a, int b, int c): void","insertText":"addAttributes"},{"label":"equals","kind":"method","documentation":"equals(Object a): boolean","insertText":"equals"},{"label":"getIterator","kind":"method","documentation":"getIterator(AttributedCharacterIterator.Attribute[] a, int b, int c | AttributedCharacterIterator.Attribute[] a): AttributedCharacterIterator","insertText":"getIterator"},{"label":"hashCode","kind":"method","documentation":"hashCode(): int","insertText":"hashCode"},{"label":"toString","kind":"method","documentation":"toString(): String","insertText":"toString"}],"constructorDefinition":{"label":"AttributedString","kind":"constructor","documentation":"Constructor: AttributedString","insertText":"AttributedString"}},{"label":"Bidi","kind":"class","documentation":"Class: Bidi","insertText":"Bidi","properties":[{"label":"DIRECTION_DEFAULT_LEFT_TO_RIGHT","kind":"property","documentation":"DIRECTION_DEFAULT_LEFT_TO_RIGHT: int","insertText":"DIRECTION_DEFAULT_LEFT_TO_RIGHT"},{"label":"DIRECTION_DEFAULT_RIGHT_TO_LEFT","kind":"property","documentation":"DIRECTION_DEFAULT_RIGHT_TO_LEFT: int","insertText":"DIRECTION_DEFAULT_RIGHT_TO_LEFT"},{"label":"DIRECTION_LEFT_TO_RIGHT","kind":"property","documentation":"DIRECTION_LEFT_TO_RIGHT: int","insertText":"DIRECTION_LEFT_TO_RIGHT"},{"label":"DIRECTION_RIGHT_TO_LEFT","kind":"property","documentation":"DIRECTION_RIGHT_TO_LEFT: int","insertText":"DIRECTION_RIGHT_TO_LEFT"},{"label":"reorderVisually","kind":"method","documentation":"reorderVisually(byte[] a, int b, Object[] c, int d, int e): void","insertText":"reorderVisually"},{"label":"requiresBidi","kind":"method","documentation":"requiresBidi(char[] a, int b, int c): boolean","insertText":"requiresBidi"},{"label":"baseIsLeftToRight","kind":"method","documentation":"baseIsLeftToRight(): boolean","insertText":"baseIsLeftToRight"},{"label":"createLineBidi","kind":"method","documentation":"createLineBidi(int a, int b): Bidi","insertText":"createLineBidi"},{"label":"equals","kind":"method","documentation":"equals(Object a): boolean","insertText":"equals"},{"label":"getBaseLevel","kind":"method","documentation":"getBaseLevel(): int","insertText":"getBaseLevel"},{"label":"getLength","kind":"method","documentation":"getLength(): int","insertText":"getLength"},{"label":"getLevelAt","kind":"method","documentation":"getLevelAt(int a): int","insertText":"getLevelAt"},{"label":"getRunCount","kind":"method","documentation":"getRunCount(): int","insertText":"getRunCount"},{"label":"getRunLevel","kind":"method","documentation":"getRunLevel(int a): int","insertText":"getRunLevel"},{"label":"getRunLimit","kind":"method","documentation":"getRunLimit(int a): int","insertText":"getRunLimit"},{"label":"getRunStart","kind":"method","documentation":"getRunStart(int a): int","insertText":"getRunStart"},{"label":"hashCode","kind":"method","documentation":"hashCode(): int","insertText":"hashCode"},{"label":"isLeftToRight","kind":"method","documentation":"isLeftToRight(): boolean","insertText":"isLeftToRight"},{"label":"isMixed","kind":"method","documentation":"isMixed(): boolean","insertText":"isMixed"},{"label":"isRightToLeft","kind":"method","documentation":"isRightToLeft(): boolean","insertText":"isRightToLeft"},{"label":"toString","kind":"method","documentation":"toString(): String","insertText":"toString"}],"constructorDefinition":{"label":"Bidi","kind":"constructor","documentation":"Constructor: Bidi","insertText":"Bidi"}},{"label":"BreakIterator","kind":"class","documentation":"Class: BreakIterator","insertText":"BreakIterator","properties":[{"label":"DONE","kind":"property","documentation":"DONE: int","insertText":"DONE"},{"label":"getAvailableLocales","kind":"method","documentation":"getAvailableLocales(): Locale[]","insertText":"getAvailableLocales"},{"label":"getCharacterInstance","kind":"method","documentation":"getCharacterInstance(Locale a): BreakIterator","insertText":"getCharacterInstance"},{"label":"getLineInstance","kind":"method","documentation":"getLineInstance(Locale a): BreakIterator","insertText":"getLineInstance"},{"label":"getSentenceInstance","kind":"method","documentation":"getSentenceInstance(Locale a): BreakIterator","insertText":"getSentenceInstance"},{"label":"getWordInstance","kind":"method","documentation":"getWordInstance(Locale a): BreakIterator","insertText":"getWordInstance"},{"label":"clone","kind":"method","documentation":"clone(): def","insertText":"clone"},{"label":"current","kind":"method","documentation":"current(): int","insertText":"current"},{"label":"equals","kind":"method","documentation":"equals(Object a): boolean","insertText":"equals"},{"label":"first","kind":"method","documentation":"first(): int","insertText":"first"},{"label":"following","kind":"method","documentation":"following(int a): int","insertText":"following"},{"label":"getText","kind":"method","documentation":"getText(): CharacterIterator","insertText":"getText"},{"label":"hashCode","kind":"method","documentation":"hashCode(): int","insertText":"hashCode"},{"label":"isBoundary","kind":"method","documentation":"isBoundary(int a): boolean","insertText":"isBoundary"},{"label":"last","kind":"method","documentation":"last(): int","insertText":"last"},{"label":"next","kind":"method","documentation":"next(int a): int","insertText":"next"},{"label":"preceding","kind":"method","documentation":"preceding(int a): int","insertText":"preceding"},{"label":"previous","kind":"method","documentation":"previous(): int","insertText":"previous"},{"label":"setText","kind":"method","documentation":"setText(String a): void","insertText":"setText"},{"label":"toString","kind":"method","documentation":"toString(): String","insertText":"toString"}]},{"label":"CharacterIterator","kind":"class","documentation":"Class: CharacterIterator","insertText":"CharacterIterator","properties":[{"label":"DONE","kind":"property","documentation":"DONE: char","insertText":"DONE"},{"label":"clone","kind":"method","documentation":"clone(): def","insertText":"clone"},{"label":"current","kind":"method","documentation":"current(): char","insertText":"current"},{"label":"equals","kind":"method","documentation":"equals(Object a): boolean","insertText":"equals"},{"label":"first","kind":"method","documentation":"first(): char","insertText":"first"},{"label":"getBeginIndex","kind":"method","documentation":"getBeginIndex(): int","insertText":"getBeginIndex"},{"label":"getEndIndex","kind":"method","documentation":"getEndIndex(): int","insertText":"getEndIndex"},{"label":"getIndex","kind":"method","documentation":"getIndex(): int","insertText":"getIndex"},{"label":"hashCode","kind":"method","documentation":"hashCode(): int","insertText":"hashCode"},{"label":"last","kind":"method","documentation":"last(): char","insertText":"last"},{"label":"next","kind":"method","documentation":"next(): char","insertText":"next"},{"label":"previous","kind":"method","documentation":"previous(): char","insertText":"previous"},{"label":"setIndex","kind":"method","documentation":"setIndex(int a): char","insertText":"setIndex"},{"label":"toString","kind":"method","documentation":"toString(): String","insertText":"toString"}]},{"label":"ChoiceFormat","kind":"class","documentation":"Class: ChoiceFormat","insertText":"ChoiceFormat","properties":[{"label":"nextDouble","kind":"method","documentation":"nextDouble(double a, boolean b | double a): double","insertText":"nextDouble"},{"label":"previousDouble","kind":"method","documentation":"previousDouble(double a): double","insertText":"previousDouble"},{"label":"applyPattern","kind":"method","documentation":"applyPattern(String a): void","insertText":"applyPattern"},{"label":"clone","kind":"method","documentation":"clone(): def","insertText":"clone"},{"label":"equals","kind":"method","documentation":"equals(Object a): boolean","insertText":"equals"},{"label":"format","kind":"method","documentation":"format(Object a, StringBuffer b, FieldPosition c | Object a): StringBuffer | String","insertText":"format"},{"label":"formatToCharacterIterator","kind":"method","documentation":"formatToCharacterIterator(Object a): AttributedCharacterIterator","insertText":"formatToCharacterIterator"},{"label":"getCurrency","kind":"method","documentation":"getCurrency(): Currency","insertText":"getCurrency"},{"label":"getFormats","kind":"method","documentation":"getFormats(): def[]","insertText":"getFormats"},{"label":"getLimits","kind":"method","documentation":"getLimits(): double[]","insertText":"getLimits"},{"label":"getMaximumFractionDigits","kind":"method","documentation":"getMaximumFractionDigits(): int","insertText":"getMaximumFractionDigits"},{"label":"getMaximumIntegerDigits","kind":"method","documentation":"getMaximumIntegerDigits(): int","insertText":"getMaximumIntegerDigits"},{"label":"getMinimumFractionDigits","kind":"method","documentation":"getMinimumFractionDigits(): int","insertText":"getMinimumFractionDigits"},{"label":"getMinimumIntegerDigits","kind":"method","documentation":"getMinimumIntegerDigits(): int","insertText":"getMinimumIntegerDigits"},{"label":"getRoundingMode","kind":"method","documentation":"getRoundingMode(): RoundingMode","insertText":"getRoundingMode"},{"label":"hashCode","kind":"method","documentation":"hashCode(): int","insertText":"hashCode"},{"label":"isGroupingUsed","kind":"method","documentation":"isGroupingUsed(): boolean","insertText":"isGroupingUsed"},{"label":"isParseIntegerOnly","kind":"method","documentation":"isParseIntegerOnly(): boolean","insertText":"isParseIntegerOnly"},{"label":"parse","kind":"method","documentation":"parse(String a, ParsePosition b | String a): Number","insertText":"parse"},{"label":"parseObject","kind":"method","documentation":"parseObject(String a, ParsePosition b | String a): Object","insertText":"parseObject"},{"label":"setChoices","kind":"method","documentation":"setChoices(double[] a, String[] b): void","insertText":"setChoices"},{"label":"setCurrency","kind":"method","documentation":"setCurrency(Currency a): void","insertText":"setCurrency"},{"label":"setGroupingUsed","kind":"method","documentation":"setGroupingUsed(boolean a): void","insertText":"setGroupingUsed"},{"label":"setMaximumFractionDigits","kind":"method","documentation":"setMaximumFractionDigits(int a): void","insertText":"setMaximumFractionDigits"},{"label":"setMaximumIntegerDigits","kind":"method","documentation":"setMaximumIntegerDigits(int a): void","insertText":"setMaximumIntegerDigits"},{"label":"setMinimumFractionDigits","kind":"method","documentation":"setMinimumFractionDigits(int a): void","insertText":"setMinimumFractionDigits"},{"label":"setMinimumIntegerDigits","kind":"method","documentation":"setMinimumIntegerDigits(int a): void","insertText":"setMinimumIntegerDigits"},{"label":"setParseIntegerOnly","kind":"method","documentation":"setParseIntegerOnly(boolean a): void","insertText":"setParseIntegerOnly"},{"label":"setRoundingMode","kind":"method","documentation":"setRoundingMode(RoundingMode a): void","insertText":"setRoundingMode"},{"label":"toPattern","kind":"method","documentation":"toPattern(): String","insertText":"toPattern"},{"label":"toString","kind":"method","documentation":"toString(): String","insertText":"toString"}],"constructorDefinition":{"label":"ChoiceFormat","kind":"constructor","documentation":"Constructor: ChoiceFormat","insertText":"ChoiceFormat"}},{"label":"CollationElementIterator","kind":"class","documentation":"Class: CollationElementIterator","insertText":"CollationElementIterator","properties":[{"label":"NULLORDER","kind":"property","documentation":"NULLORDER: int","insertText":"NULLORDER"},{"label":"primaryOrder","kind":"method","documentation":"primaryOrder(int a): int","insertText":"primaryOrder"},{"label":"secondaryOrder","kind":"method","documentation":"secondaryOrder(int a): short","insertText":"secondaryOrder"},{"label":"tertiaryOrder","kind":"method","documentation":"tertiaryOrder(int a): short","insertText":"tertiaryOrder"},{"label":"equals","kind":"method","documentation":"equals(Object a): boolean","insertText":"equals"},{"label":"getMaxExpansion","kind":"method","documentation":"getMaxExpansion(int a): int","insertText":"getMaxExpansion"},{"label":"getOffset","kind":"method","documentation":"getOffset(): int","insertText":"getOffset"},{"label":"hashCode","kind":"method","documentation":"hashCode(): int","insertText":"hashCode"},{"label":"next","kind":"method","documentation":"next(): int","insertText":"next"},{"label":"previous","kind":"method","documentation":"previous(): int","insertText":"previous"},{"label":"reset","kind":"method","documentation":"reset(): void","insertText":"reset"},{"label":"setOffset","kind":"method","documentation":"setOffset(int a): void","insertText":"setOffset"},{"label":"setText","kind":"method","documentation":"setText(String a): void","insertText":"setText"},{"label":"toString","kind":"method","documentation":"toString(): String","insertText":"toString"}]},{"label":"CollationKey","kind":"class","documentation":"Class: CollationKey","insertText":"CollationKey","properties":[{"label":"compareTo","kind":"method","documentation":"compareTo(CollationKey a): int","insertText":"compareTo"},{"label":"equals","kind":"method","documentation":"equals(Object a): boolean","insertText":"equals"},{"label":"getSourceString","kind":"method","documentation":"getSourceString(): String","insertText":"getSourceString"},{"label":"hashCode","kind":"method","documentation":"hashCode(): int","insertText":"hashCode"},{"label":"toByteArray","kind":"method","documentation":"toByteArray(): byte[]","insertText":"toByteArray"},{"label":"toString","kind":"method","documentation":"toString(): String","insertText":"toString"}]},{"label":"Collator","kind":"class","documentation":"Class: Collator","insertText":"Collator","properties":[{"label":"CANONICAL_DECOMPOSITION","kind":"property","documentation":"CANONICAL_DECOMPOSITION: int","insertText":"CANONICAL_DECOMPOSITION"},{"label":"FULL_DECOMPOSITION","kind":"property","documentation":"FULL_DECOMPOSITION: int","insertText":"FULL_DECOMPOSITION"},{"label":"IDENTICAL","kind":"property","documentation":"IDENTICAL: int","insertText":"IDENTICAL"},{"label":"NO_DECOMPOSITION","kind":"property","documentation":"NO_DECOMPOSITION: int","insertText":"NO_DECOMPOSITION"},{"label":"PRIMARY","kind":"property","documentation":"PRIMARY: int","insertText":"PRIMARY"},{"label":"SECONDARY","kind":"property","documentation":"SECONDARY: int","insertText":"SECONDARY"},{"label":"TERTIARY","kind":"property","documentation":"TERTIARY: int","insertText":"TERTIARY"},{"label":"getAvailableLocales","kind":"method","documentation":"getAvailableLocales(): Locale[]","insertText":"getAvailableLocales"},{"label":"getInstance","kind":"method","documentation":"getInstance(Locale a): Collator","insertText":"getInstance"},{"label":"clone","kind":"method","documentation":"clone(): def","insertText":"clone"},{"label":"compare","kind":"method","documentation":"compare(def a, def b): int","insertText":"compare"},{"label":"equals","kind":"method","documentation":"equals(String a, String b | Object a): boolean","insertText":"equals"},{"label":"getCollationKey","kind":"method","documentation":"getCollationKey(String a): CollationKey","insertText":"getCollationKey"},{"label":"getDecomposition","kind":"method","documentation":"getDecomposition(): int","insertText":"getDecomposition"},{"label":"getStrength","kind":"method","documentation":"getStrength(): int","insertText":"getStrength"},{"label":"hashCode","kind":"method","documentation":"hashCode(): int","insertText":"hashCode"},{"label":"reversed","kind":"method","documentation":"reversed(): Comparator","insertText":"reversed"},{"label":"setDecomposition","kind":"method","documentation":"setDecomposition(int a): void","insertText":"setDecomposition"},{"label":"setStrength","kind":"method","documentation":"setStrength(int a): void","insertText":"setStrength"},{"label":"thenComparing","kind":"method","documentation":"thenComparing(Function a, Comparator b | Comparator a): Comparator","insertText":"thenComparing"},{"label":"thenComparingDouble","kind":"method","documentation":"thenComparingDouble(ToDoubleFunction a): Comparator","insertText":"thenComparingDouble"},{"label":"thenComparingInt","kind":"method","documentation":"thenComparingInt(ToIntFunction a): Comparator","insertText":"thenComparingInt"},{"label":"thenComparingLong","kind":"method","documentation":"thenComparingLong(ToLongFunction a): Comparator","insertText":"thenComparingLong"},{"label":"toString","kind":"method","documentation":"toString(): String","insertText":"toString"}]},{"label":"DateFormat","kind":"class","documentation":"Class: DateFormat","insertText":"DateFormat","properties":[{"label":"AM_PM_FIELD","kind":"property","documentation":"AM_PM_FIELD: int","insertText":"AM_PM_FIELD"},{"label":"DATE_FIELD","kind":"property","documentation":"DATE_FIELD: int","insertText":"DATE_FIELD"},{"label":"DAY_OF_WEEK_FIELD","kind":"property","documentation":"DAY_OF_WEEK_FIELD: int","insertText":"DAY_OF_WEEK_FIELD"},{"label":"DAY_OF_WEEK_IN_MONTH_FIELD","kind":"property","documentation":"DAY_OF_WEEK_IN_MONTH_FIELD: int","insertText":"DAY_OF_WEEK_IN_MONTH_FIELD"},{"label":"DAY_OF_YEAR_FIELD","kind":"property","documentation":"DAY_OF_YEAR_FIELD: int","insertText":"DAY_OF_YEAR_FIELD"},{"label":"DEFAULT","kind":"property","documentation":"DEFAULT: int","insertText":"DEFAULT"},{"label":"ERA_FIELD","kind":"property","documentation":"ERA_FIELD: int","insertText":"ERA_FIELD"},{"label":"FULL","kind":"property","documentation":"FULL: int","insertText":"FULL"},{"label":"HOUR0_FIELD","kind":"property","documentation":"HOUR0_FIELD: int","insertText":"HOUR0_FIELD"},{"label":"HOUR1_FIELD","kind":"property","documentation":"HOUR1_FIELD: int","insertText":"HOUR1_FIELD"},{"label":"HOUR_OF_DAY0_FIELD","kind":"property","documentation":"HOUR_OF_DAY0_FIELD: int","insertText":"HOUR_OF_DAY0_FIELD"},{"label":"HOUR_OF_DAY1_FIELD","kind":"property","documentation":"HOUR_OF_DAY1_FIELD: int","insertText":"HOUR_OF_DAY1_FIELD"},{"label":"LONG","kind":"property","documentation":"LONG: int","insertText":"LONG"},{"label":"MEDIUM","kind":"property","documentation":"MEDIUM: int","insertText":"MEDIUM"},{"label":"MILLISECOND_FIELD","kind":"property","documentation":"MILLISECOND_FIELD: int","insertText":"MILLISECOND_FIELD"},{"label":"MINUTE_FIELD","kind":"property","documentation":"MINUTE_FIELD: int","insertText":"MINUTE_FIELD"},{"label":"MONTH_FIELD","kind":"property","documentation":"MONTH_FIELD: int","insertText":"MONTH_FIELD"},{"label":"SECOND_FIELD","kind":"property","documentation":"SECOND_FIELD: int","insertText":"SECOND_FIELD"},{"label":"SHORT","kind":"property","documentation":"SHORT: int","insertText":"SHORT"},{"label":"TIMEZONE_FIELD","kind":"property","documentation":"TIMEZONE_FIELD: int","insertText":"TIMEZONE_FIELD"},{"label":"WEEK_OF_MONTH_FIELD","kind":"property","documentation":"WEEK_OF_MONTH_FIELD: int","insertText":"WEEK_OF_MONTH_FIELD"},{"label":"WEEK_OF_YEAR_FIELD","kind":"property","documentation":"WEEK_OF_YEAR_FIELD: int","insertText":"WEEK_OF_YEAR_FIELD"},{"label":"YEAR_FIELD","kind":"property","documentation":"YEAR_FIELD: int","insertText":"YEAR_FIELD"},{"label":"getAvailableLocales","kind":"method","documentation":"getAvailableLocales(): Locale[]","insertText":"getAvailableLocales"},{"label":"getDateInstance","kind":"method","documentation":"getDateInstance(int a, Locale b | int a): DateFormat","insertText":"getDateInstance"},{"label":"getDateTimeInstance","kind":"method","documentation":"getDateTimeInstance(int a, int b, Locale c | int a, int b): DateFormat","insertText":"getDateTimeInstance"},{"label":"getInstance","kind":"method","documentation":"getInstance(): DateFormat","insertText":"getInstance"},{"label":"getTimeInstance","kind":"method","documentation":"getTimeInstance(int a, Locale b | int a): DateFormat","insertText":"getTimeInstance"},{"label":"clone","kind":"method","documentation":"clone(): def","insertText":"clone"},{"label":"equals","kind":"method","documentation":"equals(Object a): boolean","insertText":"equals"},{"label":"format","kind":"method","documentation":"format(Object a, StringBuffer b, FieldPosition c | Object a): StringBuffer | String","insertText":"format"},{"label":"formatToCharacterIterator","kind":"method","documentation":"formatToCharacterIterator(Object a): AttributedCharacterIterator","insertText":"formatToCharacterIterator"},{"label":"getCalendar","kind":"method","documentation":"getCalendar(): Calendar","insertText":"getCalendar"},{"label":"getNumberFormat","kind":"method","documentation":"getNumberFormat(): NumberFormat","insertText":"getNumberFormat"},{"label":"getTimeZone","kind":"method","documentation":"getTimeZone(): TimeZone","insertText":"getTimeZone"},{"label":"hashCode","kind":"method","documentation":"hashCode(): int","insertText":"hashCode"},{"label":"isLenient","kind":"method","documentation":"isLenient(): boolean","insertText":"isLenient"},{"label":"parse","kind":"method","documentation":"parse(String a, ParsePosition b | String a): Date","insertText":"parse"},{"label":"parseObject","kind":"method","documentation":"parseObject(String a, ParsePosition b | String a): Object","insertText":"parseObject"},{"label":"setCalendar","kind":"method","documentation":"setCalendar(Calendar a): void","insertText":"setCalendar"},{"label":"setLenient","kind":"method","documentation":"setLenient(boolean a): void","insertText":"setLenient"},{"label":"setNumberFormat","kind":"method","documentation":"setNumberFormat(NumberFormat a): void","insertText":"setNumberFormat"},{"label":"setTimeZone","kind":"method","documentation":"setTimeZone(TimeZone a): void","insertText":"setTimeZone"},{"label":"toString","kind":"method","documentation":"toString(): String","insertText":"toString"}]},{"label":"Field","kind":"class","documentation":"Class: Field","insertText":"Field","properties":[{"label":"AM_PM","kind":"property","documentation":"AM_PM: DateFormat.Field","insertText":"AM_PM"},{"label":"DAY_OF_MONTH","kind":"property","documentation":"DAY_OF_MONTH: DateFormat.Field","insertText":"DAY_OF_MONTH"},{"label":"DAY_OF_WEEK","kind":"property","documentation":"DAY_OF_WEEK: DateFormat.Field","insertText":"DAY_OF_WEEK"},{"label":"DAY_OF_WEEK_IN_MONTH","kind":"property","documentation":"DAY_OF_WEEK_IN_MONTH: DateFormat.Field","insertText":"DAY_OF_WEEK_IN_MONTH"},{"label":"DAY_OF_YEAR","kind":"property","documentation":"DAY_OF_YEAR: DateFormat.Field","insertText":"DAY_OF_YEAR"},{"label":"ERA","kind":"property","documentation":"ERA: DateFormat.Field","insertText":"ERA"},{"label":"HOUR0","kind":"property","documentation":"HOUR0: DateFormat.Field","insertText":"HOUR0"},{"label":"HOUR1","kind":"property","documentation":"HOUR1: DateFormat.Field","insertText":"HOUR1"},{"label":"HOUR_OF_DAY0","kind":"property","documentation":"HOUR_OF_DAY0: DateFormat.Field","insertText":"HOUR_OF_DAY0"},{"label":"HOUR_OF_DAY1","kind":"property","documentation":"HOUR_OF_DAY1: DateFormat.Field","insertText":"HOUR_OF_DAY1"},{"label":"MILLISECOND","kind":"property","documentation":"MILLISECOND: DateFormat.Field","insertText":"MILLISECOND"},{"label":"MINUTE","kind":"property","documentation":"MINUTE: DateFormat.Field","insertText":"MINUTE"},{"label":"MONTH","kind":"property","documentation":"MONTH: DateFormat.Field","insertText":"MONTH"},{"label":"SECOND","kind":"property","documentation":"SECOND: DateFormat.Field","insertText":"SECOND"},{"label":"TIME_ZONE","kind":"property","documentation":"TIME_ZONE: DateFormat.Field","insertText":"TIME_ZONE"},{"label":"WEEK_OF_MONTH","kind":"property","documentation":"WEEK_OF_MONTH: DateFormat.Field","insertText":"WEEK_OF_MONTH"},{"label":"WEEK_OF_YEAR","kind":"property","documentation":"WEEK_OF_YEAR: DateFormat.Field","insertText":"WEEK_OF_YEAR"},{"label":"YEAR","kind":"property","documentation":"YEAR: DateFormat.Field","insertText":"YEAR"},{"label":"ofCalendarField","kind":"method","documentation":"ofCalendarField(int a): DateFormat.Field","insertText":"ofCalendarField"},{"label":"equals","kind":"method","documentation":"equals(Object a): boolean","insertText":"equals"},{"label":"getCalendarField","kind":"method","documentation":"getCalendarField(): int","insertText":"getCalendarField"},{"label":"hashCode","kind":"method","documentation":"hashCode(): int","insertText":"hashCode"},{"label":"toString","kind":"method","documentation":"toString(): String","insertText":"toString"}]},{"label":"DateFormatSymbols","kind":"class","documentation":"Class: DateFormatSymbols","insertText":"DateFormatSymbols","properties":[{"label":"getAvailableLocales","kind":"method","documentation":"getAvailableLocales(): Locale[]","insertText":"getAvailableLocales"},{"label":"getInstance","kind":"method","documentation":"getInstance(Locale a): DateFormatSymbols","insertText":"getInstance"},{"label":"clone","kind":"method","documentation":"clone(): def","insertText":"clone"},{"label":"equals","kind":"method","documentation":"equals(Object a): boolean","insertText":"equals"},{"label":"getAmPmStrings","kind":"method","documentation":"getAmPmStrings(): String[]","insertText":"getAmPmStrings"},{"label":"getEras","kind":"method","documentation":"getEras(): String[]","insertText":"getEras"},{"label":"getLocalPatternChars","kind":"method","documentation":"getLocalPatternChars(): String","insertText":"getLocalPatternChars"},{"label":"getMonths","kind":"method","documentation":"getMonths(): String[]","insertText":"getMonths"},{"label":"getShortMonths","kind":"method","documentation":"getShortMonths(): String[]","insertText":"getShortMonths"},{"label":"getShortWeekdays","kind":"method","documentation":"getShortWeekdays(): String[]","insertText":"getShortWeekdays"},{"label":"getWeekdays","kind":"method","documentation":"getWeekdays(): String[]","insertText":"getWeekdays"},{"label":"getZoneStrings","kind":"method","documentation":"getZoneStrings(): String[][]","insertText":"getZoneStrings"},{"label":"hashCode","kind":"method","documentation":"hashCode(): int","insertText":"hashCode"},{"label":"setAmPmStrings","kind":"method","documentation":"setAmPmStrings(String[] a): void","insertText":"setAmPmStrings"},{"label":"setEras","kind":"method","documentation":"setEras(String[] a): void","insertText":"setEras"},{"label":"setLocalPatternChars","kind":"method","documentation":"setLocalPatternChars(String a): void","insertText":"setLocalPatternChars"},{"label":"setMonths","kind":"method","documentation":"setMonths(String[] a): void","insertText":"setMonths"},{"label":"setShortMonths","kind":"method","documentation":"setShortMonths(String[] a): void","insertText":"setShortMonths"},{"label":"setShortWeekdays","kind":"method","documentation":"setShortWeekdays(String[] a): void","insertText":"setShortWeekdays"},{"label":"setWeekdays","kind":"method","documentation":"setWeekdays(String[] a): void","insertText":"setWeekdays"},{"label":"setZoneStrings","kind":"method","documentation":"setZoneStrings(String[][] a): void","insertText":"setZoneStrings"},{"label":"toString","kind":"method","documentation":"toString(): String","insertText":"toString"}],"constructorDefinition":{"label":"DateFormatSymbols","kind":"constructor","documentation":"Constructor: DateFormatSymbols","insertText":"DateFormatSymbols"}},{"label":"DecimalFormat","kind":"class","documentation":"Class: DecimalFormat","insertText":"DecimalFormat","properties":[{"label":"applyLocalizedPattern","kind":"method","documentation":"applyLocalizedPattern(String a): void","insertText":"applyLocalizedPattern"},{"label":"applyPattern","kind":"method","documentation":"applyPattern(String a): void","insertText":"applyPattern"},{"label":"clone","kind":"method","documentation":"clone(): def","insertText":"clone"},{"label":"equals","kind":"method","documentation":"equals(Object a): boolean","insertText":"equals"},{"label":"format","kind":"method","documentation":"format(Object a, StringBuffer b, FieldPosition c | Object a): StringBuffer | String","insertText":"format"},{"label":"formatToCharacterIterator","kind":"method","documentation":"formatToCharacterIterator(Object a): AttributedCharacterIterator","insertText":"formatToCharacterIterator"},{"label":"getCurrency","kind":"method","documentation":"getCurrency(): Currency","insertText":"getCurrency"},{"label":"getDecimalFormatSymbols","kind":"method","documentation":"getDecimalFormatSymbols(): DecimalFormatSymbols","insertText":"getDecimalFormatSymbols"},{"label":"getGroupingSize","kind":"method","documentation":"getGroupingSize(): int","insertText":"getGroupingSize"},{"label":"getMaximumFractionDigits","kind":"method","documentation":"getMaximumFractionDigits(): int","insertText":"getMaximumFractionDigits"},{"label":"getMaximumIntegerDigits","kind":"method","documentation":"getMaximumIntegerDigits(): int","insertText":"getMaximumIntegerDigits"},{"label":"getMinimumFractionDigits","kind":"method","documentation":"getMinimumFractionDigits(): int","insertText":"getMinimumFractionDigits"},{"label":"getMinimumIntegerDigits","kind":"method","documentation":"getMinimumIntegerDigits(): int","insertText":"getMinimumIntegerDigits"},{"label":"getMultiplier","kind":"method","documentation":"getMultiplier(): int","insertText":"getMultiplier"},{"label":"getNegativePrefix","kind":"method","documentation":"getNegativePrefix(): String","insertText":"getNegativePrefix"},{"label":"getNegativeSuffix","kind":"method","documentation":"getNegativeSuffix(): String","insertText":"getNegativeSuffix"},{"label":"getPositivePrefix","kind":"method","documentation":"getPositivePrefix(): String","insertText":"getPositivePrefix"},{"label":"getPositiveSuffix","kind":"method","documentation":"getPositiveSuffix(): String","insertText":"getPositiveSuffix"},{"label":"getRoundingMode","kind":"method","documentation":"getRoundingMode(): RoundingMode","insertText":"getRoundingMode"},{"label":"hashCode","kind":"method","documentation":"hashCode(): int","insertText":"hashCode"},{"label":"isDecimalSeparatorAlwaysShown","kind":"method","documentation":"isDecimalSeparatorAlwaysShown(): boolean","insertText":"isDecimalSeparatorAlwaysShown"},{"label":"isGroupingUsed","kind":"method","documentation":"isGroupingUsed(): boolean","insertText":"isGroupingUsed"},{"label":"isParseBigDecimal","kind":"method","documentation":"isParseBigDecimal(): boolean","insertText":"isParseBigDecimal"},{"label":"isParseIntegerOnly","kind":"method","documentation":"isParseIntegerOnly(): boolean","insertText":"isParseIntegerOnly"},{"label":"parse","kind":"method","documentation":"parse(String a, ParsePosition b | String a): Number","insertText":"parse"},{"label":"parseObject","kind":"method","documentation":"parseObject(String a, ParsePosition b | String a): Object","insertText":"parseObject"},{"label":"setCurrency","kind":"method","documentation":"setCurrency(Currency a): void","insertText":"setCurrency"},{"label":"setDecimalFormatSymbols","kind":"method","documentation":"setDecimalFormatSymbols(DecimalFormatSymbols a): void","insertText":"setDecimalFormatSymbols"},{"label":"setDecimalSeparatorAlwaysShown","kind":"method","documentation":"setDecimalSeparatorAlwaysShown(boolean a): void","insertText":"setDecimalSeparatorAlwaysShown"},{"label":"setGroupingSize","kind":"method","documentation":"setGroupingSize(int a): void","insertText":"setGroupingSize"},{"label":"setGroupingUsed","kind":"method","documentation":"setGroupingUsed(boolean a): void","insertText":"setGroupingUsed"},{"label":"setMaximumFractionDigits","kind":"method","documentation":"setMaximumFractionDigits(int a): void","insertText":"setMaximumFractionDigits"},{"label":"setMaximumIntegerDigits","kind":"method","documentation":"setMaximumIntegerDigits(int a): void","insertText":"setMaximumIntegerDigits"},{"label":"setMinimumFractionDigits","kind":"method","documentation":"setMinimumFractionDigits(int a): void","insertText":"setMinimumFractionDigits"},{"label":"setMinimumIntegerDigits","kind":"method","documentation":"setMinimumIntegerDigits(int a): void","insertText":"setMinimumIntegerDigits"},{"label":"setMultiplier","kind":"method","documentation":"setMultiplier(int a): void","insertText":"setMultiplier"},{"label":"setNegativePrefix","kind":"method","documentation":"setNegativePrefix(String a): void","insertText":"setNegativePrefix"},{"label":"setNegativeSuffix","kind":"method","documentation":"setNegativeSuffix(String a): void","insertText":"setNegativeSuffix"},{"label":"setParseBigDecimal","kind":"method","documentation":"setParseBigDecimal(boolean a): void","insertText":"setParseBigDecimal"},{"label":"setParseIntegerOnly","kind":"method","documentation":"setParseIntegerOnly(boolean a): void","insertText":"setParseIntegerOnly"},{"label":"setPositivePrefix","kind":"method","documentation":"setPositivePrefix(String a): void","insertText":"setPositivePrefix"},{"label":"setPositiveSuffix","kind":"method","documentation":"setPositiveSuffix(String a): void","insertText":"setPositiveSuffix"},{"label":"setRoundingMode","kind":"method","documentation":"setRoundingMode(RoundingMode a): void","insertText":"setRoundingMode"},{"label":"toLocalizedPattern","kind":"method","documentation":"toLocalizedPattern(): String","insertText":"toLocalizedPattern"},{"label":"toPattern","kind":"method","documentation":"toPattern(): String","insertText":"toPattern"},{"label":"toString","kind":"method","documentation":"toString(): String","insertText":"toString"}],"constructorDefinition":{"label":"DecimalFormat","kind":"constructor","documentation":"Constructor: DecimalFormat","insertText":"DecimalFormat"}},{"label":"DecimalFormatSymbols","kind":"class","documentation":"Class: DecimalFormatSymbols","insertText":"DecimalFormatSymbols","properties":[{"label":"getAvailableLocales","kind":"method","documentation":"getAvailableLocales(): Locale[]","insertText":"getAvailableLocales"},{"label":"getInstance","kind":"method","documentation":"getInstance(Locale a): DecimalFormatSymbols","insertText":"getInstance"},{"label":"clone","kind":"method","documentation":"clone(): def","insertText":"clone"},{"label":"equals","kind":"method","documentation":"equals(Object a): boolean","insertText":"equals"},{"label":"getCurrency","kind":"method","documentation":"getCurrency(): Currency","insertText":"getCurrency"},{"label":"getCurrencySymbol","kind":"method","documentation":"getCurrencySymbol(): String","insertText":"getCurrencySymbol"},{"label":"getDecimalSeparator","kind":"method","documentation":"getDecimalSeparator(): char","insertText":"getDecimalSeparator"},{"label":"getDigit","kind":"method","documentation":"getDigit(): char","insertText":"getDigit"},{"label":"getExponentSeparator","kind":"method","documentation":"getExponentSeparator(): String","insertText":"getExponentSeparator"},{"label":"getGroupingSeparator","kind":"method","documentation":"getGroupingSeparator(): char","insertText":"getGroupingSeparator"},{"label":"getInfinity","kind":"method","documentation":"getInfinity(): String","insertText":"getInfinity"},{"label":"getInternationalCurrencySymbol","kind":"method","documentation":"getInternationalCurrencySymbol(): String","insertText":"getInternationalCurrencySymbol"},{"label":"getMinusSign","kind":"method","documentation":"getMinusSign(): char","insertText":"getMinusSign"},{"label":"getMonetaryDecimalSeparator","kind":"method","documentation":"getMonetaryDecimalSeparator(): char","insertText":"getMonetaryDecimalSeparator"},{"label":"getNaN","kind":"method","documentation":"getNaN(): String","insertText":"getNaN"},{"label":"getPatternSeparator","kind":"method","documentation":"getPatternSeparator(): char","insertText":"getPatternSeparator"},{"label":"getPerMill","kind":"method","documentation":"getPerMill(): char","insertText":"getPerMill"},{"label":"getPercent","kind":"method","documentation":"getPercent(): char","insertText":"getPercent"},{"label":"getZeroDigit","kind":"method","documentation":"getZeroDigit(): char","insertText":"getZeroDigit"},{"label":"hashCode","kind":"method","documentation":"hashCode(): int","insertText":"hashCode"},{"label":"setCurrency","kind":"method","documentation":"setCurrency(Currency a): void","insertText":"setCurrency"},{"label":"setCurrencySymbol","kind":"method","documentation":"setCurrencySymbol(String a): void","insertText":"setCurrencySymbol"},{"label":"setDecimalSeparator","kind":"method","documentation":"setDecimalSeparator(char a): void","insertText":"setDecimalSeparator"},{"label":"setDigit","kind":"method","documentation":"setDigit(char a): void","insertText":"setDigit"},{"label":"setExponentSeparator","kind":"method","documentation":"setExponentSeparator(String a): void","insertText":"setExponentSeparator"},{"label":"setGroupingSeparator","kind":"method","documentation":"setGroupingSeparator(char a): void","insertText":"setGroupingSeparator"},{"label":"setInfinity","kind":"method","documentation":"setInfinity(String a): void","insertText":"setInfinity"},{"label":"setInternationalCurrencySymbol","kind":"method","documentation":"setInternationalCurrencySymbol(String a): void","insertText":"setInternationalCurrencySymbol"},{"label":"setMinusSign","kind":"method","documentation":"setMinusSign(char a): void","insertText":"setMinusSign"},{"label":"setMonetaryDecimalSeparator","kind":"method","documentation":"setMonetaryDecimalSeparator(char a): void","insertText":"setMonetaryDecimalSeparator"},{"label":"setNaN","kind":"method","documentation":"setNaN(String a): void","insertText":"setNaN"},{"label":"setPatternSeparator","kind":"method","documentation":"setPatternSeparator(char a): void","insertText":"setPatternSeparator"},{"label":"setPerMill","kind":"method","documentation":"setPerMill(char a): void","insertText":"setPerMill"},{"label":"setPercent","kind":"method","documentation":"setPercent(char a): void","insertText":"setPercent"},{"label":"setZeroDigit","kind":"method","documentation":"setZeroDigit(char a): void","insertText":"setZeroDigit"},{"label":"toString","kind":"method","documentation":"toString(): String","insertText":"toString"}],"constructorDefinition":{"label":"DecimalFormatSymbols","kind":"constructor","documentation":"Constructor: DecimalFormatSymbols","insertText":"DecimalFormatSymbols"}},{"label":"FieldPosition","kind":"class","documentation":"Class: FieldPosition","insertText":"FieldPosition","properties":[{"label":"equals","kind":"method","documentation":"equals(Object a): boolean","insertText":"equals"},{"label":"getBeginIndex","kind":"method","documentation":"getBeginIndex(): int","insertText":"getBeginIndex"},{"label":"getEndIndex","kind":"method","documentation":"getEndIndex(): int","insertText":"getEndIndex"},{"label":"getField","kind":"method","documentation":"getField(): int","insertText":"getField"},{"label":"getFieldAttribute","kind":"method","documentation":"getFieldAttribute(): Format.Field","insertText":"getFieldAttribute"},{"label":"hashCode","kind":"method","documentation":"hashCode(): int","insertText":"hashCode"},{"label":"setBeginIndex","kind":"method","documentation":"setBeginIndex(int a): void","insertText":"setBeginIndex"},{"label":"setEndIndex","kind":"method","documentation":"setEndIndex(int a): void","insertText":"setEndIndex"},{"label":"toString","kind":"method","documentation":"toString(): String","insertText":"toString"}],"constructorDefinition":{"label":"FieldPosition","kind":"constructor","documentation":"Constructor: FieldPosition","insertText":"FieldPosition"}},{"label":"Format","kind":"class","documentation":"Class: Format","insertText":"Format","properties":[{"label":"clone","kind":"method","documentation":"clone(): def","insertText":"clone"},{"label":"equals","kind":"method","documentation":"equals(Object a): boolean","insertText":"equals"},{"label":"format","kind":"method","documentation":"format(Object a, StringBuffer b, FieldPosition c | Object a): StringBuffer | String","insertText":"format"},{"label":"formatToCharacterIterator","kind":"method","documentation":"formatToCharacterIterator(Object a): AttributedCharacterIterator","insertText":"formatToCharacterIterator"},{"label":"hashCode","kind":"method","documentation":"hashCode(): int","insertText":"hashCode"},{"label":"parseObject","kind":"method","documentation":"parseObject(String a, ParsePosition b | String a): Object","insertText":"parseObject"},{"label":"toString","kind":"method","documentation":"toString(): String","insertText":"toString"}]},{"label":"Field","kind":"class","documentation":"Class: Field","insertText":"Field","properties":[{"label":"equals","kind":"method","documentation":"equals(Object a): boolean","insertText":"equals"},{"label":"hashCode","kind":"method","documentation":"hashCode(): int","insertText":"hashCode"},{"label":"toString","kind":"method","documentation":"toString(): String","insertText":"toString"}]},{"label":"MessageFormat","kind":"class","documentation":"Class: MessageFormat","insertText":"MessageFormat","properties":[{"label":"format","kind":"method","documentation":"format(String a, Object[] b): String","insertText":"format"},{"label":"applyPattern","kind":"method","documentation":"applyPattern(String a): void","insertText":"applyPattern"},{"label":"clone","kind":"method","documentation":"clone(): def","insertText":"clone"},{"label":"equals","kind":"method","documentation":"equals(Object a): boolean","insertText":"equals"},{"label":"format","kind":"method","documentation":"format(Object a, StringBuffer b, FieldPosition c | Object a): StringBuffer | String","insertText":"format"},{"label":"formatToCharacterIterator","kind":"method","documentation":"formatToCharacterIterator(Object a): AttributedCharacterIterator","insertText":"formatToCharacterIterator"},{"label":"getFormats","kind":"method","documentation":"getFormats(): Format[]","insertText":"getFormats"},{"label":"getFormatsByArgumentIndex","kind":"method","documentation":"getFormatsByArgumentIndex(): Format[]","insertText":"getFormatsByArgumentIndex"},{"label":"getLocale","kind":"method","documentation":"getLocale(): Locale","insertText":"getLocale"},{"label":"hashCode","kind":"method","documentation":"hashCode(): int","insertText":"hashCode"},{"label":"parse","kind":"method","documentation":"parse(String a, ParsePosition b | String a): Object[]","insertText":"parse"},{"label":"parseObject","kind":"method","documentation":"parseObject(String a, ParsePosition b | String a): Object","insertText":"parseObject"},{"label":"setFormat","kind":"method","documentation":"setFormat(int a, Format b): void","insertText":"setFormat"},{"label":"setFormatByArgumentIndex","kind":"method","documentation":"setFormatByArgumentIndex(int a, Format b): void","insertText":"setFormatByArgumentIndex"},{"label":"setFormats","kind":"method","documentation":"setFormats(Format[] a): void","insertText":"setFormats"},{"label":"setFormatsByArgumentIndex","kind":"method","documentation":"setFormatsByArgumentIndex(Format[] a): void","insertText":"setFormatsByArgumentIndex"},{"label":"setLocale","kind":"method","documentation":"setLocale(Locale a): void","insertText":"setLocale"},{"label":"toPattern","kind":"method","documentation":"toPattern(): String","insertText":"toPattern"},{"label":"toString","kind":"method","documentation":"toString(): String","insertText":"toString"}]},{"label":"Field","kind":"class","documentation":"Class: Field","insertText":"Field","properties":[{"label":"ARGUMENT","kind":"property","documentation":"ARGUMENT: MessageFormat.Field","insertText":"ARGUMENT"},{"label":"equals","kind":"method","documentation":"equals(Object a): boolean","insertText":"equals"},{"label":"hashCode","kind":"method","documentation":"hashCode(): int","insertText":"hashCode"},{"label":"toString","kind":"method","documentation":"toString(): String","insertText":"toString"}]},{"label":"Normalizer","kind":"class","documentation":"Class: Normalizer","insertText":"Normalizer","properties":[{"label":"isNormalized","kind":"method","documentation":"isNormalized(CharSequence a, Normalizer.Form b): boolean","insertText":"isNormalized"},{"label":"normalize","kind":"method","documentation":"normalize(CharSequence a, Normalizer.Form b): String","insertText":"normalize"},{"label":"equals","kind":"method","documentation":"equals(Object a): boolean","insertText":"equals"},{"label":"hashCode","kind":"method","documentation":"hashCode(): int","insertText":"hashCode"},{"label":"toString","kind":"method","documentation":"toString(): String","insertText":"toString"}]},{"label":"Form","kind":"class","documentation":"Class: Form","insertText":"Form","properties":[{"label":"NFC","kind":"property","documentation":"NFC: Normalizer.Form","insertText":"NFC"},{"label":"NFD","kind":"property","documentation":"NFD: Normalizer.Form","insertText":"NFD"},{"label":"NFKC","kind":"property","documentation":"NFKC: Normalizer.Form","insertText":"NFKC"},{"label":"NFKD","kind":"property","documentation":"NFKD: Normalizer.Form","insertText":"NFKD"},{"label":"valueOf","kind":"method","documentation":"valueOf(String a): Normalizer.Form","insertText":"valueOf"},{"label":"values","kind":"method","documentation":"values(): Normalizer.Form[]","insertText":"values"},{"label":"compareTo","kind":"method","documentation":"compareTo(Enum a): int","insertText":"compareTo"},{"label":"equals","kind":"method","documentation":"equals(Object a): boolean","insertText":"equals"},{"label":"hashCode","kind":"method","documentation":"hashCode(): int","insertText":"hashCode"},{"label":"name","kind":"method","documentation":"name(): String","insertText":"name"},{"label":"ordinal","kind":"method","documentation":"ordinal(): int","insertText":"ordinal"},{"label":"toString","kind":"method","documentation":"toString(): String","insertText":"toString"}]},{"label":"NumberFormat","kind":"class","documentation":"Class: NumberFormat","insertText":"NumberFormat","properties":[{"label":"FRACTION_FIELD","kind":"property","documentation":"FRACTION_FIELD: int","insertText":"FRACTION_FIELD"},{"label":"INTEGER_FIELD","kind":"property","documentation":"INTEGER_FIELD: int","insertText":"INTEGER_FIELD"},{"label":"getAvailableLocales","kind":"method","documentation":"getAvailableLocales(): Locale[]","insertText":"getAvailableLocales"},{"label":"getCurrencyInstance","kind":"method","documentation":"getCurrencyInstance(Locale a): NumberFormat","insertText":"getCurrencyInstance"},{"label":"getInstance","kind":"method","documentation":"getInstance(Locale a): NumberFormat","insertText":"getInstance"},{"label":"getIntegerInstance","kind":"method","documentation":"getIntegerInstance(Locale a): NumberFormat","insertText":"getIntegerInstance"},{"label":"getNumberInstance","kind":"method","documentation":"getNumberInstance(Locale a): NumberFormat","insertText":"getNumberInstance"},{"label":"getPercentInstance","kind":"method","documentation":"getPercentInstance(Locale a): NumberFormat","insertText":"getPercentInstance"},{"label":"clone","kind":"method","documentation":"clone(): def","insertText":"clone"},{"label":"equals","kind":"method","documentation":"equals(Object a): boolean","insertText":"equals"},{"label":"format","kind":"method","documentation":"format(Object a, StringBuffer b, FieldPosition c | Object a): StringBuffer | String","insertText":"format"},{"label":"formatToCharacterIterator","kind":"method","documentation":"formatToCharacterIterator(Object a): AttributedCharacterIterator","insertText":"formatToCharacterIterator"},{"label":"getCurrency","kind":"method","documentation":"getCurrency(): Currency","insertText":"getCurrency"},{"label":"getMaximumFractionDigits","kind":"method","documentation":"getMaximumFractionDigits(): int","insertText":"getMaximumFractionDigits"},{"label":"getMaximumIntegerDigits","kind":"method","documentation":"getMaximumIntegerDigits(): int","insertText":"getMaximumIntegerDigits"},{"label":"getMinimumFractionDigits","kind":"method","documentation":"getMinimumFractionDigits(): int","insertText":"getMinimumFractionDigits"},{"label":"getMinimumIntegerDigits","kind":"method","documentation":"getMinimumIntegerDigits(): int","insertText":"getMinimumIntegerDigits"},{"label":"getRoundingMode","kind":"method","documentation":"getRoundingMode(): RoundingMode","insertText":"getRoundingMode"},{"label":"hashCode","kind":"method","documentation":"hashCode(): int","insertText":"hashCode"},{"label":"isGroupingUsed","kind":"method","documentation":"isGroupingUsed(): boolean","insertText":"isGroupingUsed"},{"label":"isParseIntegerOnly","kind":"method","documentation":"isParseIntegerOnly(): boolean","insertText":"isParseIntegerOnly"},{"label":"parse","kind":"method","documentation":"parse(String a, ParsePosition b | String a): Number","insertText":"parse"},{"label":"parseObject","kind":"method","documentation":"parseObject(String a, ParsePosition b | String a): Object","insertText":"parseObject"},{"label":"setCurrency","kind":"method","documentation":"setCurrency(Currency a): void","insertText":"setCurrency"},{"label":"setGroupingUsed","kind":"method","documentation":"setGroupingUsed(boolean a): void","insertText":"setGroupingUsed"},{"label":"setMaximumFractionDigits","kind":"method","documentation":"setMaximumFractionDigits(int a): void","insertText":"setMaximumFractionDigits"},{"label":"setMaximumIntegerDigits","kind":"method","documentation":"setMaximumIntegerDigits(int a): void","insertText":"setMaximumIntegerDigits"},{"label":"setMinimumFractionDigits","kind":"method","documentation":"setMinimumFractionDigits(int a): void","insertText":"setMinimumFractionDigits"},{"label":"setMinimumIntegerDigits","kind":"method","documentation":"setMinimumIntegerDigits(int a): void","insertText":"setMinimumIntegerDigits"},{"label":"setParseIntegerOnly","kind":"method","documentation":"setParseIntegerOnly(boolean a): void","insertText":"setParseIntegerOnly"},{"label":"setRoundingMode","kind":"method","documentation":"setRoundingMode(RoundingMode a): void","insertText":"setRoundingMode"},{"label":"toString","kind":"method","documentation":"toString(): String","insertText":"toString"}]},{"label":"Field","kind":"class","documentation":"Class: Field","insertText":"Field","properties":[{"label":"CURRENCY","kind":"property","documentation":"CURRENCY: NumberFormat.Field","insertText":"CURRENCY"},{"label":"DECIMAL_SEPARATOR","kind":"property","documentation":"DECIMAL_SEPARATOR: NumberFormat.Field","insertText":"DECIMAL_SEPARATOR"},{"label":"EXPONENT","kind":"property","documentation":"EXPONENT: NumberFormat.Field","insertText":"EXPONENT"},{"label":"EXPONENT_SIGN","kind":"property","documentation":"EXPONENT_SIGN: NumberFormat.Field","insertText":"EXPONENT_SIGN"},{"label":"EXPONENT_SYMBOL","kind":"property","documentation":"EXPONENT_SYMBOL: NumberFormat.Field","insertText":"EXPONENT_SYMBOL"},{"label":"FRACTION","kind":"property","documentation":"FRACTION: NumberFormat.Field","insertText":"FRACTION"},{"label":"GROUPING_SEPARATOR","kind":"property","documentation":"GROUPING_SEPARATOR: NumberFormat.Field","insertText":"GROUPING_SEPARATOR"},{"label":"INTEGER","kind":"property","documentation":"INTEGER: NumberFormat.Field","insertText":"INTEGER"},{"label":"PERCENT","kind":"property","documentation":"PERCENT: NumberFormat.Field","insertText":"PERCENT"},{"label":"PERMILLE","kind":"property","documentation":"PERMILLE: NumberFormat.Field","insertText":"PERMILLE"},{"label":"SIGN","kind":"property","documentation":"SIGN: NumberFormat.Field","insertText":"SIGN"},{"label":"equals","kind":"method","documentation":"equals(Object a): boolean","insertText":"equals"},{"label":"hashCode","kind":"method","documentation":"hashCode(): int","insertText":"hashCode"},{"label":"toString","kind":"method","documentation":"toString(): String","insertText":"toString"}]},{"label":"ParseException","kind":"class","documentation":"Class: ParseException","insertText":"ParseException","properties":[{"label":"equals","kind":"method","documentation":"equals(Object a): boolean","insertText":"equals"},{"label":"getErrorOffset","kind":"method","documentation":"getErrorOffset(): int","insertText":"getErrorOffset"},{"label":"getLocalizedMessage","kind":"method","documentation":"getLocalizedMessage(): String","insertText":"getLocalizedMessage"},{"label":"getMessage","kind":"method","documentation":"getMessage(): String","insertText":"getMessage"},{"label":"getStackTrace","kind":"method","documentation":"getStackTrace(): StackTraceElement[]","insertText":"getStackTrace"},{"label":"hashCode","kind":"method","documentation":"hashCode(): int","insertText":"hashCode"},{"label":"toString","kind":"method","documentation":"toString(): String","insertText":"toString"}],"constructorDefinition":{"label":"ParseException","kind":"constructor","documentation":"Constructor: ParseException","insertText":"ParseException"}},{"label":"ParsePosition","kind":"class","documentation":"Class: ParsePosition","insertText":"ParsePosition","properties":[{"label":"equals","kind":"method","documentation":"equals(Object a): boolean","insertText":"equals"},{"label":"getErrorIndex","kind":"method","documentation":"getErrorIndex(): int","insertText":"getErrorIndex"},{"label":"getIndex","kind":"method","documentation":"getIndex(): int","insertText":"getIndex"},{"label":"hashCode","kind":"method","documentation":"hashCode(): int","insertText":"hashCode"},{"label":"setErrorIndex","kind":"method","documentation":"setErrorIndex(int a): void","insertText":"setErrorIndex"},{"label":"setIndex","kind":"method","documentation":"setIndex(int a): void","insertText":"setIndex"},{"label":"toString","kind":"method","documentation":"toString(): String","insertText":"toString"}],"constructorDefinition":{"label":"ParsePosition","kind":"constructor","documentation":"Constructor: ParsePosition","insertText":"ParsePosition"}},{"label":"RuleBasedCollator","kind":"class","documentation":"Class: RuleBasedCollator","insertText":"RuleBasedCollator","properties":[{"label":"clone","kind":"method","documentation":"clone(): def","insertText":"clone"},{"label":"compare","kind":"method","documentation":"compare(def a, def b): int","insertText":"compare"},{"label":"equals","kind":"method","documentation":"equals(String a, String b | Object a): boolean","insertText":"equals"},{"label":"getCollationElementIterator","kind":"method","documentation":"getCollationElementIterator(String a): CollationElementIterator","insertText":"getCollationElementIterator"},{"label":"getCollationKey","kind":"method","documentation":"getCollationKey(String a): CollationKey","insertText":"getCollationKey"},{"label":"getDecomposition","kind":"method","documentation":"getDecomposition(): int","insertText":"getDecomposition"},{"label":"getRules","kind":"method","documentation":"getRules(): String","insertText":"getRules"},{"label":"getStrength","kind":"method","documentation":"getStrength(): int","insertText":"getStrength"},{"label":"hashCode","kind":"method","documentation":"hashCode(): int","insertText":"hashCode"},{"label":"reversed","kind":"method","documentation":"reversed(): Comparator","insertText":"reversed"},{"label":"setDecomposition","kind":"method","documentation":"setDecomposition(int a): void","insertText":"setDecomposition"},{"label":"setStrength","kind":"method","documentation":"setStrength(int a): void","insertText":"setStrength"},{"label":"thenComparing","kind":"method","documentation":"thenComparing(Function a, Comparator b | Comparator a): Comparator","insertText":"thenComparing"},{"label":"thenComparingDouble","kind":"method","documentation":"thenComparingDouble(ToDoubleFunction a): Comparator","insertText":"thenComparingDouble"},{"label":"thenComparingInt","kind":"method","documentation":"thenComparingInt(ToIntFunction a): Comparator","insertText":"thenComparingInt"},{"label":"thenComparingLong","kind":"method","documentation":"thenComparingLong(ToLongFunction a): Comparator","insertText":"thenComparingLong"},{"label":"toString","kind":"method","documentation":"toString(): String","insertText":"toString"}],"constructorDefinition":{"label":"RuleBasedCollator","kind":"constructor","documentation":"Constructor: RuleBasedCollator","insertText":"RuleBasedCollator"}},{"label":"SimpleDateFormat","kind":"class","documentation":"Class: SimpleDateFormat","insertText":"SimpleDateFormat","properties":[{"label":"applyLocalizedPattern","kind":"method","documentation":"applyLocalizedPattern(String a): void","insertText":"applyLocalizedPattern"},{"label":"applyPattern","kind":"method","documentation":"applyPattern(String a): void","insertText":"applyPattern"},{"label":"clone","kind":"method","documentation":"clone(): def","insertText":"clone"},{"label":"equals","kind":"method","documentation":"equals(Object a): boolean","insertText":"equals"},{"label":"format","kind":"method","documentation":"format(Object a, StringBuffer b, FieldPosition c | Object a): StringBuffer | String","insertText":"format"},{"label":"formatToCharacterIterator","kind":"method","documentation":"formatToCharacterIterator(Object a): AttributedCharacterIterator","insertText":"formatToCharacterIterator"},{"label":"get2DigitYearStart","kind":"method","documentation":"get2DigitYearStart(): Date","insertText":"get2DigitYearStart"},{"label":"getCalendar","kind":"method","documentation":"getCalendar(): Calendar","insertText":"getCalendar"},{"label":"getDateFormatSymbols","kind":"method","documentation":"getDateFormatSymbols(): DateFormatSymbols","insertText":"getDateFormatSymbols"},{"label":"getNumberFormat","kind":"method","documentation":"getNumberFormat(): NumberFormat","insertText":"getNumberFormat"},{"label":"getTimeZone","kind":"method","documentation":"getTimeZone(): TimeZone","insertText":"getTimeZone"},{"label":"hashCode","kind":"method","documentation":"hashCode(): int","insertText":"hashCode"},{"label":"isLenient","kind":"method","documentation":"isLenient(): boolean","insertText":"isLenient"},{"label":"parse","kind":"method","documentation":"parse(String a, ParsePosition b | String a): Date","insertText":"parse"},{"label":"parseObject","kind":"method","documentation":"parseObject(String a, ParsePosition b | String a): Object","insertText":"parseObject"},{"label":"set2DigitYearStart","kind":"method","documentation":"set2DigitYearStart(Date a): void","insertText":"set2DigitYearStart"},{"label":"setCalendar","kind":"method","documentation":"setCalendar(Calendar a): void","insertText":"setCalendar"},{"label":"setDateFormatSymbols","kind":"method","documentation":"setDateFormatSymbols(DateFormatSymbols a): void","insertText":"setDateFormatSymbols"},{"label":"setLenient","kind":"method","documentation":"setLenient(boolean a): void","insertText":"setLenient"},{"label":"setNumberFormat","kind":"method","documentation":"setNumberFormat(NumberFormat a): void","insertText":"setNumberFormat"},{"label":"setTimeZone","kind":"method","documentation":"setTimeZone(TimeZone a): void","insertText":"setTimeZone"},{"label":"toLocalizedPattern","kind":"method","documentation":"toLocalizedPattern(): String","insertText":"toLocalizedPattern"},{"label":"toPattern","kind":"method","documentation":"toPattern(): String","insertText":"toPattern"},{"label":"toString","kind":"method","documentation":"toString(): String","insertText":"toString"}],"constructorDefinition":{"label":"SimpleDateFormat","kind":"constructor","documentation":"Constructor: SimpleDateFormat","insertText":"SimpleDateFormat"}},{"label":"StringCharacterIterator","kind":"class","documentation":"Class: StringCharacterIterator","insertText":"StringCharacterIterator","properties":[{"label":"clone","kind":"method","documentation":"clone(): def","insertText":"clone"},{"label":"current","kind":"method","documentation":"current(): char","insertText":"current"},{"label":"equals","kind":"method","documentation":"equals(Object a): boolean","insertText":"equals"},{"label":"first","kind":"method","documentation":"first(): char","insertText":"first"},{"label":"getBeginIndex","kind":"method","documentation":"getBeginIndex(): int","insertText":"getBeginIndex"},{"label":"getEndIndex","kind":"method","documentation":"getEndIndex(): int","insertText":"getEndIndex"},{"label":"getIndex","kind":"method","documentation":"getIndex(): int","insertText":"getIndex"},{"label":"hashCode","kind":"method","documentation":"hashCode(): int","insertText":"hashCode"},{"label":"last","kind":"method","documentation":"last(): char","insertText":"last"},{"label":"next","kind":"method","documentation":"next(): char","insertText":"next"},{"label":"previous","kind":"method","documentation":"previous(): char","insertText":"previous"},{"label":"setIndex","kind":"method","documentation":"setIndex(int a): char","insertText":"setIndex"},{"label":"setText","kind":"method","documentation":"setText(String a): void","insertText":"setText"},{"label":"toString","kind":"method","documentation":"toString(): String","insertText":"toString"}],"constructorDefinition":{"label":"StringCharacterIterator","kind":"constructor","documentation":"Constructor: StringCharacterIterator","insertText":"StringCharacterIterator"}},{"label":"Clock","kind":"class","documentation":"Class: Clock","insertText":"Clock","properties":[{"label":"fixed","kind":"method","documentation":"fixed(Instant a, ZoneId b): Clock","insertText":"fixed"},{"label":"offset","kind":"method","documentation":"offset(Clock a, Duration b): Clock","insertText":"offset"},{"label":"tick","kind":"method","documentation":"tick(Clock a, Duration b): Clock","insertText":"tick"},{"label":"equals","kind":"method","documentation":"equals(Object a): boolean","insertText":"equals"},{"label":"getZone","kind":"method","documentation":"getZone(): ZoneId","insertText":"getZone"},{"label":"hashCode","kind":"method","documentation":"hashCode(): int","insertText":"hashCode"},{"label":"instant","kind":"method","documentation":"instant(): Instant","insertText":"instant"},{"label":"millis","kind":"method","documentation":"millis(): long","insertText":"millis"},{"label":"toString","kind":"method","documentation":"toString(): String","insertText":"toString"}]},{"label":"DateTimeException","kind":"class","documentation":"Class: DateTimeException","insertText":"DateTimeException","properties":[{"label":"equals","kind":"method","documentation":"equals(Object a): boolean","insertText":"equals"},{"label":"getLocalizedMessage","kind":"method","documentation":"getLocalizedMessage(): String","insertText":"getLocalizedMessage"},{"label":"getMessage","kind":"method","documentation":"getMessage(): String","insertText":"getMessage"},{"label":"getStackTrace","kind":"method","documentation":"getStackTrace(): StackTraceElement[]","insertText":"getStackTrace"},{"label":"hashCode","kind":"method","documentation":"hashCode(): int","insertText":"hashCode"},{"label":"toString","kind":"method","documentation":"toString(): String","insertText":"toString"}],"constructorDefinition":{"label":"DateTimeException","kind":"constructor","documentation":"Constructor: DateTimeException","insertText":"DateTimeException"}},{"label":"DayOfWeek","kind":"class","documentation":"Class: DayOfWeek","insertText":"DayOfWeek","properties":[{"label":"FRIDAY","kind":"property","documentation":"FRIDAY: DayOfWeek","insertText":"FRIDAY"},{"label":"MONDAY","kind":"property","documentation":"MONDAY: DayOfWeek","insertText":"MONDAY"},{"label":"SATURDAY","kind":"property","documentation":"SATURDAY: DayOfWeek","insertText":"SATURDAY"},{"label":"SUNDAY","kind":"property","documentation":"SUNDAY: DayOfWeek","insertText":"SUNDAY"},{"label":"THURSDAY","kind":"property","documentation":"THURSDAY: DayOfWeek","insertText":"THURSDAY"},{"label":"TUESDAY","kind":"property","documentation":"TUESDAY: DayOfWeek","insertText":"TUESDAY"},{"label":"WEDNESDAY","kind":"property","documentation":"WEDNESDAY: DayOfWeek","insertText":"WEDNESDAY"},{"label":"from","kind":"method","documentation":"from(TemporalAccessor a): DayOfWeek","insertText":"from"},{"label":"of","kind":"method","documentation":"of(int a): DayOfWeek","insertText":"of"},{"label":"valueOf","kind":"method","documentation":"valueOf(String a): DayOfWeek","insertText":"valueOf"},{"label":"values","kind":"method","documentation":"values(): DayOfWeek[]","insertText":"values"},{"label":"adjustInto","kind":"method","documentation":"adjustInto(Temporal a): Temporal","insertText":"adjustInto"},{"label":"compareTo","kind":"method","documentation":"compareTo(Enum a): int","insertText":"compareTo"},{"label":"equals","kind":"method","documentation":"equals(Object a): boolean","insertText":"equals"},{"label":"get","kind":"method","documentation":"get(TemporalField a): int","insertText":"get"},{"label":"getDisplayName","kind":"method","documentation":"getDisplayName(TextStyle a, Locale b): String","insertText":"getDisplayName"},{"label":"getLong","kind":"method","documentation":"getLong(TemporalField a): long","insertText":"getLong"},{"label":"getValue","kind":"method","documentation":"getValue(): int","insertText":"getValue"},{"label":"hashCode","kind":"method","documentation":"hashCode(): int","insertText":"hashCode"},{"label":"isSupported","kind":"method","documentation":"isSupported(TemporalField a): boolean","insertText":"isSupported"},{"label":"minus","kind":"method","documentation":"minus(long a): DayOfWeek","insertText":"minus"},{"label":"name","kind":"method","documentation":"name(): String","insertText":"name"},{"label":"ordinal","kind":"method","documentation":"ordinal(): int","insertText":"ordinal"},{"label":"plus","kind":"method","documentation":"plus(long a): DayOfWeek","insertText":"plus"},{"label":"query","kind":"method","documentation":"query(TemporalQuery a): def","insertText":"query"},{"label":"range","kind":"method","documentation":"range(TemporalField a): ValueRange","insertText":"range"},{"label":"toEpochMilli","kind":"method","documentation":"toEpochMilli(): long","insertText":"toEpochMilli"},{"label":"toString","kind":"method","documentation":"toString(): String","insertText":"toString"}]},{"label":"Duration","kind":"class","documentation":"Class: Duration","insertText":"Duration","properties":[{"label":"ZERO","kind":"property","documentation":"ZERO: Duration","insertText":"ZERO"},{"label":"between","kind":"method","documentation":"between(Temporal a, Temporal b): Duration","insertText":"between"},{"label":"from","kind":"method","documentation":"from(TemporalAmount a): Duration","insertText":"from"},{"label":"of","kind":"method","documentation":"of(long a, TemporalUnit b): Duration","insertText":"of"},{"label":"ofDays","kind":"method","documentation":"ofDays(long a): Duration","insertText":"ofDays"},{"label":"ofHours","kind":"method","documentation":"ofHours(long a): Duration","insertText":"ofHours"},{"label":"ofMillis","kind":"method","documentation":"ofMillis(long a): Duration","insertText":"ofMillis"},{"label":"ofMinutes","kind":"method","documentation":"ofMinutes(long a): Duration","insertText":"ofMinutes"},{"label":"ofNanos","kind":"method","documentation":"ofNanos(long a): Duration","insertText":"ofNanos"},{"label":"ofSeconds","kind":"method","documentation":"ofSeconds(long a, long b | long a): Duration","insertText":"ofSeconds"},{"label":"parse","kind":"method","documentation":"parse(CharSequence a): Duration","insertText":"parse"},{"label":"abs","kind":"method","documentation":"abs(): Duration","insertText":"abs"},{"label":"addTo","kind":"method","documentation":"addTo(Temporal a): Temporal","insertText":"addTo"},{"label":"compareTo","kind":"method","documentation":"compareTo(Duration a): int","insertText":"compareTo"},{"label":"dividedBy","kind":"method","documentation":"dividedBy(long a): Duration","insertText":"dividedBy"},{"label":"equals","kind":"method","documentation":"equals(Object a): boolean","insertText":"equals"},{"label":"get","kind":"method","documentation":"get(TemporalUnit a): long","insertText":"get"},{"label":"getNano","kind":"method","documentation":"getNano(): int","insertText":"getNano"},{"label":"getSeconds","kind":"method","documentation":"getSeconds(): long","insertText":"getSeconds"},{"label":"getUnits","kind":"method","documentation":"getUnits(): List","insertText":"getUnits"},{"label":"hashCode","kind":"method","documentation":"hashCode(): int","insertText":"hashCode"},{"label":"isNegative","kind":"method","documentation":"isNegative(): boolean","insertText":"isNegative"},{"label":"isZero","kind":"method","documentation":"isZero(): boolean","insertText":"isZero"},{"label":"minus","kind":"method","documentation":"minus(long a, TemporalUnit b | Duration a): Duration","insertText":"minus"},{"label":"minusDays","kind":"method","documentation":"minusDays(long a): Duration","insertText":"minusDays"},{"label":"minusHours","kind":"method","documentation":"minusHours(long a): Duration","insertText":"minusHours"},{"label":"minusMillis","kind":"method","documentation":"minusMillis(long a): Duration","insertText":"minusMillis"},{"label":"minusMinutes","kind":"method","documentation":"minusMinutes(long a): Duration","insertText":"minusMinutes"},{"label":"minusNanos","kind":"method","documentation":"minusNanos(long a): Duration","insertText":"minusNanos"},{"label":"minusSeconds","kind":"method","documentation":"minusSeconds(long a): Duration","insertText":"minusSeconds"},{"label":"multipliedBy","kind":"method","documentation":"multipliedBy(long a): Duration","insertText":"multipliedBy"},{"label":"negated","kind":"method","documentation":"negated(): Duration","insertText":"negated"},{"label":"plus","kind":"method","documentation":"plus(long a, TemporalUnit b | Duration a): Duration","insertText":"plus"},{"label":"plusDays","kind":"method","documentation":"plusDays(long a): Duration","insertText":"plusDays"},{"label":"plusHours","kind":"method","documentation":"plusHours(long a): Duration","insertText":"plusHours"},{"label":"plusMillis","kind":"method","documentation":"plusMillis(long a): Duration","insertText":"plusMillis"},{"label":"plusMinutes","kind":"method","documentation":"plusMinutes(long a): Duration","insertText":"plusMinutes"},{"label":"plusNanos","kind":"method","documentation":"plusNanos(long a): Duration","insertText":"plusNanos"},{"label":"plusSeconds","kind":"method","documentation":"plusSeconds(long a): Duration","insertText":"plusSeconds"},{"label":"subtractFrom","kind":"method","documentation":"subtractFrom(Temporal a): Temporal","insertText":"subtractFrom"},{"label":"toDays","kind":"method","documentation":"toDays(): long","insertText":"toDays"},{"label":"toHours","kind":"method","documentation":"toHours(): long","insertText":"toHours"},{"label":"toMillis","kind":"method","documentation":"toMillis(): long","insertText":"toMillis"},{"label":"toMinutes","kind":"method","documentation":"toMinutes(): long","insertText":"toMinutes"},{"label":"toNanos","kind":"method","documentation":"toNanos(): long","insertText":"toNanos"},{"label":"toString","kind":"method","documentation":"toString(): String","insertText":"toString"},{"label":"withNanos","kind":"method","documentation":"withNanos(int a): Duration","insertText":"withNanos"},{"label":"withSeconds","kind":"method","documentation":"withSeconds(long a): Duration","insertText":"withSeconds"}]},{"label":"Instant","kind":"class","documentation":"Class: Instant","insertText":"Instant","properties":[{"label":"EPOCH","kind":"property","documentation":"EPOCH: Instant","insertText":"EPOCH"},{"label":"MAX","kind":"property","documentation":"MAX: Instant","insertText":"MAX"},{"label":"MIN","kind":"property","documentation":"MIN: Instant","insertText":"MIN"},{"label":"from","kind":"method","documentation":"from(TemporalAccessor a): Instant","insertText":"from"},{"label":"ofEpochMilli","kind":"method","documentation":"ofEpochMilli(long a): Instant","insertText":"ofEpochMilli"},{"label":"ofEpochSecond","kind":"method","documentation":"ofEpochSecond(long a, long b | long a): Instant","insertText":"ofEpochSecond"},{"label":"parse","kind":"method","documentation":"parse(CharSequence a): Instant","insertText":"parse"},{"label":"adjustInto","kind":"method","documentation":"adjustInto(Temporal a): Temporal","insertText":"adjustInto"},{"label":"atOffset","kind":"method","documentation":"atOffset(ZoneOffset a): OffsetDateTime","insertText":"atOffset"},{"label":"atZone","kind":"method","documentation":"atZone(ZoneId a): ZonedDateTime","insertText":"atZone"},{"label":"compareTo","kind":"method","documentation":"compareTo(Instant a): int","insertText":"compareTo"},{"label":"equals","kind":"method","documentation":"equals(Object a): boolean","insertText":"equals"},{"label":"get","kind":"method","documentation":"get(TemporalField a): int","insertText":"get"},{"label":"getEpochSecond","kind":"method","documentation":"getEpochSecond(): long","insertText":"getEpochSecond"},{"label":"getLong","kind":"method","documentation":"getLong(TemporalField a): long","insertText":"getLong"},{"label":"getNano","kind":"method","documentation":"getNano(): int","insertText":"getNano"},{"label":"hashCode","kind":"method","documentation":"hashCode(): int","insertText":"hashCode"},{"label":"isAfter","kind":"method","documentation":"isAfter(Instant a): boolean","insertText":"isAfter"},{"label":"isBefore","kind":"method","documentation":"isBefore(Instant a): boolean","insertText":"isBefore"},{"label":"isSupported","kind":"method","documentation":"isSupported(TemporalField a): boolean","insertText":"isSupported"},{"label":"minus","kind":"method","documentation":"minus(long a, TemporalUnit b | TemporalAmount a): Instant","insertText":"minus"},{"label":"minusMillis","kind":"method","documentation":"minusMillis(long a): Instant","insertText":"minusMillis"},{"label":"minusNanos","kind":"method","documentation":"minusNanos(long a): Instant","insertText":"minusNanos"},{"label":"minusSeconds","kind":"method","documentation":"minusSeconds(long a): Instant","insertText":"minusSeconds"},{"label":"plus","kind":"method","documentation":"plus(long a, TemporalUnit b | TemporalAmount a): Instant","insertText":"plus"},{"label":"plusMillis","kind":"method","documentation":"plusMillis(long a): Instant","insertText":"plusMillis"},{"label":"plusNanos","kind":"method","documentation":"plusNanos(long a): Instant","insertText":"plusNanos"},{"label":"plusSeconds","kind":"method","documentation":"plusSeconds(long a): Instant","insertText":"plusSeconds"},{"label":"query","kind":"method","documentation":"query(TemporalQuery a): def","insertText":"query"},{"label":"range","kind":"method","documentation":"range(TemporalField a): ValueRange","insertText":"range"},{"label":"toEpochMilli","kind":"method","documentation":"toEpochMilli(): long","insertText":"toEpochMilli"},{"label":"toString","kind":"method","documentation":"toString(): String","insertText":"toString"},{"label":"truncatedTo","kind":"method","documentation":"truncatedTo(TemporalUnit a): Instant","insertText":"truncatedTo"},{"label":"until","kind":"method","documentation":"until(Temporal a, TemporalUnit b): long","insertText":"until"},{"label":"with","kind":"method","documentation":"with(TemporalField a, long b | TemporalAdjuster a): Instant","insertText":"with"}]},{"label":"LocalDate","kind":"class","documentation":"Class: LocalDate","insertText":"LocalDate","properties":[{"label":"MAX","kind":"property","documentation":"MAX: LocalDate","insertText":"MAX"},{"label":"MIN","kind":"property","documentation":"MIN: LocalDate","insertText":"MIN"},{"label":"from","kind":"method","documentation":"from(TemporalAccessor a): LocalDate","insertText":"from"},{"label":"of","kind":"method","documentation":"of(int a, int b, int c): LocalDate","insertText":"of"},{"label":"ofEpochDay","kind":"method","documentation":"ofEpochDay(long a): LocalDate","insertText":"ofEpochDay"},{"label":"ofYearDay","kind":"method","documentation":"ofYearDay(int a, int b): LocalDate","insertText":"ofYearDay"},{"label":"parse","kind":"method","documentation":"parse(CharSequence a, DateTimeFormatter b | CharSequence a): LocalDate","insertText":"parse"},{"label":"adjustInto","kind":"method","documentation":"adjustInto(Temporal a): Temporal","insertText":"adjustInto"},{"label":"atStartOfDay","kind":"method","documentation":"atStartOfDay(ZoneId a): ZonedDateTime | LocalDateTime","insertText":"atStartOfDay"},{"label":"atTime","kind":"method","documentation":"atTime(int a, int b, int c, int d | int a, int b, int c | int a, int b | LocalTime a): LocalDateTime","insertText":"atTime"},{"label":"compareTo","kind":"method","documentation":"compareTo(ChronoLocalDate a): int","insertText":"compareTo"},{"label":"equals","kind":"method","documentation":"equals(Object a): boolean","insertText":"equals"},{"label":"format","kind":"method","documentation":"format(DateTimeFormatter a): String","insertText":"format"},{"label":"get","kind":"method","documentation":"get(TemporalField a): int","insertText":"get"},{"label":"getChronology","kind":"method","documentation":"getChronology(): IsoChronology","insertText":"getChronology"},{"label":"getDayOfMonth","kind":"method","documentation":"getDayOfMonth(): int","insertText":"getDayOfMonth"},{"label":"getDayOfWeek","kind":"method","documentation":"getDayOfWeek(): DayOfWeek","insertText":"getDayOfWeek"},{"label":"getDayOfYear","kind":"method","documentation":"getDayOfYear(): int","insertText":"getDayOfYear"},{"label":"getEra","kind":"method","documentation":"getEra(): Era","insertText":"getEra"},{"label":"getLong","kind":"method","documentation":"getLong(TemporalField a): long","insertText":"getLong"},{"label":"getMonth","kind":"method","documentation":"getMonth(): Month","insertText":"getMonth"},{"label":"getMonthValue","kind":"method","documentation":"getMonthValue(): int","insertText":"getMonthValue"},{"label":"getYear","kind":"method","documentation":"getYear(): int","insertText":"getYear"},{"label":"hashCode","kind":"method","documentation":"hashCode(): int","insertText":"hashCode"},{"label":"isAfter","kind":"method","documentation":"isAfter(ChronoLocalDate a): boolean","insertText":"isAfter"},{"label":"isBefore","kind":"method","documentation":"isBefore(ChronoLocalDate a): boolean","insertText":"isBefore"},{"label":"isEqual","kind":"method","documentation":"isEqual(ChronoLocalDate a): boolean","insertText":"isEqual"},{"label":"isLeapYear","kind":"method","documentation":"isLeapYear(): boolean","insertText":"isLeapYear"},{"label":"isSupported","kind":"method","documentation":"isSupported(TemporalField a): boolean","insertText":"isSupported"},{"label":"lengthOfMonth","kind":"method","documentation":"lengthOfMonth(): int","insertText":"lengthOfMonth"},{"label":"lengthOfYear","kind":"method","documentation":"lengthOfYear(): int","insertText":"lengthOfYear"},{"label":"minus","kind":"method","documentation":"minus(long a, TemporalUnit b | TemporalAmount a): LocalDate","insertText":"minus"},{"label":"minusDays","kind":"method","documentation":"minusDays(long a): LocalDate","insertText":"minusDays"},{"label":"minusMonths","kind":"method","documentation":"minusMonths(long a): LocalDate","insertText":"minusMonths"},{"label":"minusWeeks","kind":"method","documentation":"minusWeeks(long a): LocalDate","insertText":"minusWeeks"},{"label":"minusYears","kind":"method","documentation":"minusYears(long a): LocalDate","insertText":"minusYears"},{"label":"plus","kind":"method","documentation":"plus(long a, TemporalUnit b | TemporalAmount a): LocalDate","insertText":"plus"},{"label":"plusDays","kind":"method","documentation":"plusDays(long a): LocalDate","insertText":"plusDays"},{"label":"plusMonths","kind":"method","documentation":"plusMonths(long a): LocalDate","insertText":"plusMonths"},{"label":"plusWeeks","kind":"method","documentation":"plusWeeks(long a): LocalDate","insertText":"plusWeeks"},{"label":"plusYears","kind":"method","documentation":"plusYears(long a): LocalDate","insertText":"plusYears"},{"label":"query","kind":"method","documentation":"query(TemporalQuery a): def","insertText":"query"},{"label":"range","kind":"method","documentation":"range(TemporalField a): ValueRange","insertText":"range"},{"label":"toEpochDay","kind":"method","documentation":"toEpochDay(): long","insertText":"toEpochDay"},{"label":"toEpochMilli","kind":"method","documentation":"toEpochMilli(): long","insertText":"toEpochMilli"},{"label":"toString","kind":"method","documentation":"toString(): String","insertText":"toString"},{"label":"until","kind":"method","documentation":"until(Temporal a, TemporalUnit b | ChronoLocalDate a): long | Period","insertText":"until"},{"label":"with","kind":"method","documentation":"with(TemporalField a, long b | TemporalAdjuster a): LocalDate","insertText":"with"},{"label":"withDayOfMonth","kind":"method","documentation":"withDayOfMonth(int a): LocalDate","insertText":"withDayOfMonth"},{"label":"withDayOfYear","kind":"method","documentation":"withDayOfYear(int a): LocalDate","insertText":"withDayOfYear"},{"label":"withMonth","kind":"method","documentation":"withMonth(int a): LocalDate","insertText":"withMonth"},{"label":"withYear","kind":"method","documentation":"withYear(int a): LocalDate","insertText":"withYear"}]},{"label":"LocalDateTime","kind":"class","documentation":"Class: LocalDateTime","insertText":"LocalDateTime","properties":[{"label":"MAX","kind":"property","documentation":"MAX: LocalDateTime","insertText":"MAX"},{"label":"MIN","kind":"property","documentation":"MIN: LocalDateTime","insertText":"MIN"},{"label":"from","kind":"method","documentation":"from(TemporalAccessor a): LocalDateTime","insertText":"from"},{"label":"of","kind":"method","documentation":"of(int a, int b, int c, int d, int e, int f, int undefined | int a, int b, int c, int d, int e, int f | int a, int b, int c, int d, int e | LocalDate a, LocalTime b): LocalDateTime","insertText":"of"},{"label":"ofEpochSecond","kind":"method","documentation":"ofEpochSecond(long a, int b, ZoneOffset c): LocalDateTime","insertText":"ofEpochSecond"},{"label":"ofInstant","kind":"method","documentation":"ofInstant(Instant a, ZoneId b): LocalDateTime","insertText":"ofInstant"},{"label":"parse","kind":"method","documentation":"parse(CharSequence a, DateTimeFormatter b | CharSequence a): LocalDateTime","insertText":"parse"},{"label":"adjustInto","kind":"method","documentation":"adjustInto(Temporal a): Temporal","insertText":"adjustInto"},{"label":"atOffset","kind":"method","documentation":"atOffset(ZoneOffset a): OffsetDateTime","insertText":"atOffset"},{"label":"atZone","kind":"method","documentation":"atZone(ZoneId a): ZonedDateTime","insertText":"atZone"},{"label":"compareTo","kind":"method","documentation":"compareTo(ChronoLocalDateTime a): int","insertText":"compareTo"},{"label":"equals","kind":"method","documentation":"equals(Object a): boolean","insertText":"equals"},{"label":"format","kind":"method","documentation":"format(DateTimeFormatter a): String","insertText":"format"},{"label":"get","kind":"method","documentation":"get(TemporalField a): int","insertText":"get"},{"label":"getChronology","kind":"method","documentation":"getChronology(): Chronology","insertText":"getChronology"},{"label":"getDayOfMonth","kind":"method","documentation":"getDayOfMonth(): int","insertText":"getDayOfMonth"},{"label":"getDayOfWeek","kind":"method","documentation":"getDayOfWeek(): DayOfWeek","insertText":"getDayOfWeek"},{"label":"getDayOfYear","kind":"method","documentation":"getDayOfYear(): int","insertText":"getDayOfYear"},{"label":"getHour","kind":"method","documentation":"getHour(): int","insertText":"getHour"},{"label":"getLong","kind":"method","documentation":"getLong(TemporalField a): long","insertText":"getLong"},{"label":"getMinute","kind":"method","documentation":"getMinute(): int","insertText":"getMinute"},{"label":"getMonth","kind":"method","documentation":"getMonth(): Month","insertText":"getMonth"},{"label":"getMonthValue","kind":"method","documentation":"getMonthValue(): int","insertText":"getMonthValue"},{"label":"getNano","kind":"method","documentation":"getNano(): int","insertText":"getNano"},{"label":"getSecond","kind":"method","documentation":"getSecond(): int","insertText":"getSecond"},{"label":"getYear","kind":"method","documentation":"getYear(): int","insertText":"getYear"},{"label":"hashCode","kind":"method","documentation":"hashCode(): int","insertText":"hashCode"},{"label":"isAfter","kind":"method","documentation":"isAfter(ChronoLocalDateTime a): boolean","insertText":"isAfter"},{"label":"isBefore","kind":"method","documentation":"isBefore(ChronoLocalDateTime a): boolean","insertText":"isBefore"},{"label":"isEqual","kind":"method","documentation":"isEqual(ChronoLocalDateTime a): boolean","insertText":"isEqual"},{"label":"isSupported","kind":"method","documentation":"isSupported(TemporalField a): boolean","insertText":"isSupported"},{"label":"minus","kind":"method","documentation":"minus(long a, TemporalUnit b | TemporalAmount a): LocalDateTime","insertText":"minus"},{"label":"minusDays","kind":"method","documentation":"minusDays(long a): LocalDateTime","insertText":"minusDays"},{"label":"minusHours","kind":"method","documentation":"minusHours(long a): LocalDateTime","insertText":"minusHours"},{"label":"minusMinutes","kind":"method","documentation":"minusMinutes(long a): LocalDateTime","insertText":"minusMinutes"},{"label":"minusMonths","kind":"method","documentation":"minusMonths(long a): LocalDateTime","insertText":"minusMonths"},{"label":"minusNanos","kind":"method","documentation":"minusNanos(long a): LocalDateTime","insertText":"minusNanos"},{"label":"minusSeconds","kind":"method","documentation":"minusSeconds(long a): LocalDateTime","insertText":"minusSeconds"},{"label":"minusWeeks","kind":"method","documentation":"minusWeeks(long a): LocalDateTime","insertText":"minusWeeks"},{"label":"minusYears","kind":"method","documentation":"minusYears(long a): LocalDateTime","insertText":"minusYears"},{"label":"plus","kind":"method","documentation":"plus(long a, TemporalUnit b | TemporalAmount a): LocalDateTime","insertText":"plus"},{"label":"plusDays","kind":"method","documentation":"plusDays(long a): LocalDateTime","insertText":"plusDays"},{"label":"plusHours","kind":"method","documentation":"plusHours(long a): LocalDateTime","insertText":"plusHours"},{"label":"plusMinutes","kind":"method","documentation":"plusMinutes(long a): LocalDateTime","insertText":"plusMinutes"},{"label":"plusMonths","kind":"method","documentation":"plusMonths(long a): LocalDateTime","insertText":"plusMonths"},{"label":"plusNanos","kind":"method","documentation":"plusNanos(long a): LocalDateTime","insertText":"plusNanos"},{"label":"plusSeconds","kind":"method","documentation":"plusSeconds(long a): LocalDateTime","insertText":"plusSeconds"},{"label":"plusWeeks","kind":"method","documentation":"plusWeeks(long a): LocalDateTime","insertText":"plusWeeks"},{"label":"plusYears","kind":"method","documentation":"plusYears(long a): LocalDateTime","insertText":"plusYears"},{"label":"query","kind":"method","documentation":"query(TemporalQuery a): def","insertText":"query"},{"label":"range","kind":"method","documentation":"range(TemporalField a): ValueRange","insertText":"range"},{"label":"toEpochMilli","kind":"method","documentation":"toEpochMilli(): long","insertText":"toEpochMilli"},{"label":"toEpochSecond","kind":"method","documentation":"toEpochSecond(ZoneOffset a): long","insertText":"toEpochSecond"},{"label":"toInstant","kind":"method","documentation":"toInstant(ZoneOffset a): Instant","insertText":"toInstant"},{"label":"toLocalDate","kind":"method","documentation":"toLocalDate(): LocalDate","insertText":"toLocalDate"},{"label":"toLocalTime","kind":"method","documentation":"toLocalTime(): LocalTime","insertText":"toLocalTime"},{"label":"toString","kind":"method","documentation":"toString(): String","insertText":"toString"},{"label":"truncatedTo","kind":"method","documentation":"truncatedTo(TemporalUnit a): LocalDateTime","insertText":"truncatedTo"},{"label":"until","kind":"method","documentation":"until(Temporal a, TemporalUnit b): long","insertText":"until"},{"label":"with","kind":"method","documentation":"with(TemporalField a, long b | TemporalAdjuster a): LocalDateTime","insertText":"with"},{"label":"withDayOfMonth","kind":"method","documentation":"withDayOfMonth(int a): LocalDateTime","insertText":"withDayOfMonth"},{"label":"withDayOfYear","kind":"method","documentation":"withDayOfYear(int a): LocalDateTime","insertText":"withDayOfYear"},{"label":"withHour","kind":"method","documentation":"withHour(int a): LocalDateTime","insertText":"withHour"},{"label":"withMinute","kind":"method","documentation":"withMinute(int a): LocalDateTime","insertText":"withMinute"},{"label":"withMonth","kind":"method","documentation":"withMonth(int a): LocalDateTime","insertText":"withMonth"},{"label":"withSecond","kind":"method","documentation":"withSecond(int a): LocalDateTime","insertText":"withSecond"},{"label":"withYear","kind":"method","documentation":"withYear(int a): LocalDateTime","insertText":"withYear"}]},{"label":"LocalTime","kind":"class","documentation":"Class: LocalTime","insertText":"LocalTime","properties":[{"label":"MAX","kind":"property","documentation":"MAX: LocalTime","insertText":"MAX"},{"label":"MIDNIGHT","kind":"property","documentation":"MIDNIGHT: LocalTime","insertText":"MIDNIGHT"},{"label":"MIN","kind":"property","documentation":"MIN: LocalTime","insertText":"MIN"},{"label":"NOON","kind":"property","documentation":"NOON: LocalTime","insertText":"NOON"},{"label":"from","kind":"method","documentation":"from(TemporalAccessor a): LocalTime","insertText":"from"},{"label":"of","kind":"method","documentation":"of(int a, int b, int c, int d | int a, int b, int c | int a, int b): LocalTime","insertText":"of"},{"label":"ofNanoOfDay","kind":"method","documentation":"ofNanoOfDay(long a): LocalTime","insertText":"ofNanoOfDay"},{"label":"ofSecondOfDay","kind":"method","documentation":"ofSecondOfDay(long a): LocalTime","insertText":"ofSecondOfDay"},{"label":"parse","kind":"method","documentation":"parse(CharSequence a, DateTimeFormatter b | CharSequence a): LocalTime","insertText":"parse"},{"label":"adjustInto","kind":"method","documentation":"adjustInto(Temporal a): Temporal","insertText":"adjustInto"},{"label":"atDate","kind":"method","documentation":"atDate(LocalDate a): LocalDateTime","insertText":"atDate"},{"label":"atOffset","kind":"method","documentation":"atOffset(ZoneOffset a): OffsetTime","insertText":"atOffset"},{"label":"compareTo","kind":"method","documentation":"compareTo(LocalTime a): int","insertText":"compareTo"},{"label":"equals","kind":"method","documentation":"equals(Object a): boolean","insertText":"equals"},{"label":"format","kind":"method","documentation":"format(DateTimeFormatter a): String","insertText":"format"},{"label":"get","kind":"method","documentation":"get(TemporalField a): int","insertText":"get"},{"label":"getHour","kind":"method","documentation":"getHour(): int","insertText":"getHour"},{"label":"getLong","kind":"method","documentation":"getLong(TemporalField a): long","insertText":"getLong"},{"label":"getMinute","kind":"method","documentation":"getMinute(): int","insertText":"getMinute"},{"label":"getNano","kind":"method","documentation":"getNano(): int","insertText":"getNano"},{"label":"getSecond","kind":"method","documentation":"getSecond(): int","insertText":"getSecond"},{"label":"hashCode","kind":"method","documentation":"hashCode(): int","insertText":"hashCode"},{"label":"isAfter","kind":"method","documentation":"isAfter(LocalTime a): boolean","insertText":"isAfter"},{"label":"isBefore","kind":"method","documentation":"isBefore(LocalTime a): boolean","insertText":"isBefore"},{"label":"isSupported","kind":"method","documentation":"isSupported(TemporalField a): boolean","insertText":"isSupported"},{"label":"minus","kind":"method","documentation":"minus(long a, TemporalUnit b | TemporalAmount a): LocalTime","insertText":"minus"},{"label":"minusHours","kind":"method","documentation":"minusHours(long a): LocalTime","insertText":"minusHours"},{"label":"minusMinutes","kind":"method","documentation":"minusMinutes(long a): LocalTime","insertText":"minusMinutes"},{"label":"minusNanos","kind":"method","documentation":"minusNanos(long a): LocalTime","insertText":"minusNanos"},{"label":"minusSeconds","kind":"method","documentation":"minusSeconds(long a): LocalTime","insertText":"minusSeconds"},{"label":"plus","kind":"method","documentation":"plus(long a, TemporalUnit b | TemporalAmount a): LocalTime","insertText":"plus"},{"label":"plusHours","kind":"method","documentation":"plusHours(long a): LocalTime","insertText":"plusHours"},{"label":"plusMinutes","kind":"method","documentation":"plusMinutes(long a): LocalTime","insertText":"plusMinutes"},{"label":"plusNanos","kind":"method","documentation":"plusNanos(long a): LocalTime","insertText":"plusNanos"},{"label":"plusSeconds","kind":"method","documentation":"plusSeconds(long a): LocalTime","insertText":"plusSeconds"},{"label":"query","kind":"method","documentation":"query(TemporalQuery a): def","insertText":"query"},{"label":"range","kind":"method","documentation":"range(TemporalField a): ValueRange","insertText":"range"},{"label":"toEpochMilli","kind":"method","documentation":"toEpochMilli(): long","insertText":"toEpochMilli"},{"label":"toNanoOfDay","kind":"method","documentation":"toNanoOfDay(): long","insertText":"toNanoOfDay"},{"label":"toSecondOfDay","kind":"method","documentation":"toSecondOfDay(): int","insertText":"toSecondOfDay"},{"label":"toString","kind":"method","documentation":"toString(): String","insertText":"toString"},{"label":"truncatedTo","kind":"method","documentation":"truncatedTo(TemporalUnit a): LocalTime","insertText":"truncatedTo"},{"label":"until","kind":"method","documentation":"until(Temporal a, TemporalUnit b): long","insertText":"until"},{"label":"with","kind":"method","documentation":"with(TemporalField a, long b | TemporalAdjuster a): LocalTime","insertText":"with"},{"label":"withHour","kind":"method","documentation":"withHour(int a): LocalTime","insertText":"withHour"},{"label":"withMinute","kind":"method","documentation":"withMinute(int a): LocalTime","insertText":"withMinute"},{"label":"withNano","kind":"method","documentation":"withNano(int a): LocalTime","insertText":"withNano"},{"label":"withSecond","kind":"method","documentation":"withSecond(int a): LocalTime","insertText":"withSecond"}]},{"label":"Month","kind":"class","documentation":"Class: Month","insertText":"Month","properties":[{"label":"APRIL","kind":"property","documentation":"APRIL: Month","insertText":"APRIL"},{"label":"AUGUST","kind":"property","documentation":"AUGUST: Month","insertText":"AUGUST"},{"label":"DECEMBER","kind":"property","documentation":"DECEMBER: Month","insertText":"DECEMBER"},{"label":"FEBRUARY","kind":"property","documentation":"FEBRUARY: Month","insertText":"FEBRUARY"},{"label":"JANUARY","kind":"property","documentation":"JANUARY: Month","insertText":"JANUARY"},{"label":"JULY","kind":"property","documentation":"JULY: Month","insertText":"JULY"},{"label":"JUNE","kind":"property","documentation":"JUNE: Month","insertText":"JUNE"},{"label":"MARCH","kind":"property","documentation":"MARCH: Month","insertText":"MARCH"},{"label":"MAY","kind":"property","documentation":"MAY: Month","insertText":"MAY"},{"label":"NOVEMBER","kind":"property","documentation":"NOVEMBER: Month","insertText":"NOVEMBER"},{"label":"OCTOBER","kind":"property","documentation":"OCTOBER: Month","insertText":"OCTOBER"},{"label":"SEPTEMBER","kind":"property","documentation":"SEPTEMBER: Month","insertText":"SEPTEMBER"},{"label":"from","kind":"method","documentation":"from(TemporalAccessor a): Month","insertText":"from"},{"label":"of","kind":"method","documentation":"of(int a): Month","insertText":"of"},{"label":"valueOf","kind":"method","documentation":"valueOf(String a): Month","insertText":"valueOf"},{"label":"values","kind":"method","documentation":"values(): Month[]","insertText":"values"},{"label":"adjustInto","kind":"method","documentation":"adjustInto(Temporal a): Temporal","insertText":"adjustInto"},{"label":"compareTo","kind":"method","documentation":"compareTo(Enum a): int","insertText":"compareTo"},{"label":"equals","kind":"method","documentation":"equals(Object a): boolean","insertText":"equals"},{"label":"firstDayOfYear","kind":"method","documentation":"firstDayOfYear(boolean a): int","insertText":"firstDayOfYear"},{"label":"firstMonthOfQuarter","kind":"method","documentation":"firstMonthOfQuarter(): Month","insertText":"firstMonthOfQuarter"},{"label":"get","kind":"method","documentation":"get(TemporalField a): int","insertText":"get"},{"label":"getDisplayName","kind":"method","documentation":"getDisplayName(TextStyle a, Locale b): String","insertText":"getDisplayName"},{"label":"getLong","kind":"method","documentation":"getLong(TemporalField a): long","insertText":"getLong"},{"label":"getValue","kind":"method","documentation":"getValue(): int","insertText":"getValue"},{"label":"hashCode","kind":"method","documentation":"hashCode(): int","insertText":"hashCode"},{"label":"isSupported","kind":"method","documentation":"isSupported(TemporalField a): boolean","insertText":"isSupported"},{"label":"length","kind":"method","documentation":"length(boolean a): int","insertText":"length"},{"label":"maxLength","kind":"method","documentation":"maxLength(): int","insertText":"maxLength"},{"label":"minLength","kind":"method","documentation":"minLength(): int","insertText":"minLength"},{"label":"minus","kind":"method","documentation":"minus(long a): Month","insertText":"minus"},{"label":"name","kind":"method","documentation":"name(): String","insertText":"name"},{"label":"ordinal","kind":"method","documentation":"ordinal(): int","insertText":"ordinal"},{"label":"plus","kind":"method","documentation":"plus(long a): Month","insertText":"plus"},{"label":"query","kind":"method","documentation":"query(TemporalQuery a): def","insertText":"query"},{"label":"range","kind":"method","documentation":"range(TemporalField a): ValueRange","insertText":"range"},{"label":"toEpochMilli","kind":"method","documentation":"toEpochMilli(): long","insertText":"toEpochMilli"},{"label":"toString","kind":"method","documentation":"toString(): String","insertText":"toString"}]},{"label":"MonthDay","kind":"class","documentation":"Class: MonthDay","insertText":"MonthDay","properties":[{"label":"from","kind":"method","documentation":"from(TemporalAccessor a): MonthDay","insertText":"from"},{"label":"of","kind":"method","documentation":"of(int a, int b): MonthDay","insertText":"of"},{"label":"parse","kind":"method","documentation":"parse(CharSequence a, DateTimeFormatter b | CharSequence a): MonthDay","insertText":"parse"},{"label":"adjustInto","kind":"method","documentation":"adjustInto(Temporal a): Temporal","insertText":"adjustInto"},{"label":"atYear","kind":"method","documentation":"atYear(int a): LocalDate","insertText":"atYear"},{"label":"compareTo","kind":"method","documentation":"compareTo(MonthDay a): int","insertText":"compareTo"},{"label":"equals","kind":"method","documentation":"equals(Object a): boolean","insertText":"equals"},{"label":"format","kind":"method","documentation":"format(DateTimeFormatter a): String","insertText":"format"},{"label":"get","kind":"method","documentation":"get(TemporalField a): int","insertText":"get"},{"label":"getDayOfMonth","kind":"method","documentation":"getDayOfMonth(): int","insertText":"getDayOfMonth"},{"label":"getLong","kind":"method","documentation":"getLong(TemporalField a): long","insertText":"getLong"},{"label":"getMonth","kind":"method","documentation":"getMonth(): Month","insertText":"getMonth"},{"label":"getMonthValue","kind":"method","documentation":"getMonthValue(): int","insertText":"getMonthValue"},{"label":"hashCode","kind":"method","documentation":"hashCode(): int","insertText":"hashCode"},{"label":"isAfter","kind":"method","documentation":"isAfter(MonthDay a): boolean","insertText":"isAfter"},{"label":"isBefore","kind":"method","documentation":"isBefore(MonthDay a): boolean","insertText":"isBefore"},{"label":"isSupported","kind":"method","documentation":"isSupported(TemporalField a): boolean","insertText":"isSupported"},{"label":"isValidYear","kind":"method","documentation":"isValidYear(int a): boolean","insertText":"isValidYear"},{"label":"query","kind":"method","documentation":"query(TemporalQuery a): def","insertText":"query"},{"label":"range","kind":"method","documentation":"range(TemporalField a): ValueRange","insertText":"range"},{"label":"toEpochMilli","kind":"method","documentation":"toEpochMilli(): long","insertText":"toEpochMilli"},{"label":"toString","kind":"method","documentation":"toString(): String","insertText":"toString"},{"label":"with","kind":"method","documentation":"with(Month a): MonthDay","insertText":"with"},{"label":"withDayOfMonth","kind":"method","documentation":"withDayOfMonth(int a): MonthDay","insertText":"withDayOfMonth"},{"label":"withMonth","kind":"method","documentation":"withMonth(int a): MonthDay","insertText":"withMonth"}]},{"label":"OffsetDateTime","kind":"class","documentation":"Class: OffsetDateTime","insertText":"OffsetDateTime","properties":[{"label":"MAX","kind":"property","documentation":"MAX: OffsetDateTime","insertText":"MAX"},{"label":"MIN","kind":"property","documentation":"MIN: OffsetDateTime","insertText":"MIN"},{"label":"from","kind":"method","documentation":"from(TemporalAccessor a): OffsetDateTime","insertText":"from"},{"label":"of","kind":"method","documentation":"of(int a, int b, int c, int d, int e, int f, int undefined, ZoneOffset undefined | LocalDate a, LocalTime b, ZoneOffset c | LocalDateTime a, ZoneOffset b): OffsetDateTime","insertText":"of"},{"label":"ofInstant","kind":"method","documentation":"ofInstant(Instant a, ZoneId b): OffsetDateTime","insertText":"ofInstant"},{"label":"parse","kind":"method","documentation":"parse(CharSequence a, DateTimeFormatter b | CharSequence a): OffsetDateTime","insertText":"parse"},{"label":"timeLineOrder","kind":"method","documentation":"timeLineOrder(): Comparator","insertText":"timeLineOrder"},{"label":"adjustInto","kind":"method","documentation":"adjustInto(Temporal a): Temporal","insertText":"adjustInto"},{"label":"atZoneSameInstant","kind":"method","documentation":"atZoneSameInstant(ZoneId a): ZonedDateTime","insertText":"atZoneSameInstant"},{"label":"atZoneSimilarLocal","kind":"method","documentation":"atZoneSimilarLocal(ZoneId a): ZonedDateTime","insertText":"atZoneSimilarLocal"},{"label":"compareTo","kind":"method","documentation":"compareTo(OffsetDateTime a): int","insertText":"compareTo"},{"label":"equals","kind":"method","documentation":"equals(Object a): boolean","insertText":"equals"},{"label":"format","kind":"method","documentation":"format(DateTimeFormatter a): String","insertText":"format"},{"label":"get","kind":"method","documentation":"get(TemporalField a): int","insertText":"get"},{"label":"getDayOfMonth","kind":"method","documentation":"getDayOfMonth(): int","insertText":"getDayOfMonth"},{"label":"getDayOfWeek","kind":"method","documentation":"getDayOfWeek(): DayOfWeek","insertText":"getDayOfWeek"},{"label":"getDayOfYear","kind":"method","documentation":"getDayOfYear(): int","insertText":"getDayOfYear"},{"label":"getHour","kind":"method","documentation":"getHour(): int","insertText":"getHour"},{"label":"getLong","kind":"method","documentation":"getLong(TemporalField a): long","insertText":"getLong"},{"label":"getMinute","kind":"method","documentation":"getMinute(): int","insertText":"getMinute"},{"label":"getMonth","kind":"method","documentation":"getMonth(): Month","insertText":"getMonth"},{"label":"getMonthValue","kind":"method","documentation":"getMonthValue(): int","insertText":"getMonthValue"},{"label":"getNano","kind":"method","documentation":"getNano(): int","insertText":"getNano"},{"label":"getOffset","kind":"method","documentation":"getOffset(): ZoneOffset","insertText":"getOffset"},{"label":"getSecond","kind":"method","documentation":"getSecond(): int","insertText":"getSecond"},{"label":"getYear","kind":"method","documentation":"getYear(): int","insertText":"getYear"},{"label":"hashCode","kind":"method","documentation":"hashCode(): int","insertText":"hashCode"},{"label":"isAfter","kind":"method","documentation":"isAfter(OffsetDateTime a): boolean","insertText":"isAfter"},{"label":"isBefore","kind":"method","documentation":"isBefore(OffsetDateTime a): boolean","insertText":"isBefore"},{"label":"isEqual","kind":"method","documentation":"isEqual(OffsetDateTime a): boolean","insertText":"isEqual"},{"label":"isSupported","kind":"method","documentation":"isSupported(TemporalField a): boolean","insertText":"isSupported"},{"label":"minus","kind":"method","documentation":"minus(long a, TemporalUnit b | TemporalAmount a): OffsetDateTime","insertText":"minus"},{"label":"minusDays","kind":"method","documentation":"minusDays(long a): OffsetDateTime","insertText":"minusDays"},{"label":"minusHours","kind":"method","documentation":"minusHours(long a): OffsetDateTime","insertText":"minusHours"},{"label":"minusMinutes","kind":"method","documentation":"minusMinutes(long a): OffsetDateTime","insertText":"minusMinutes"},{"label":"minusMonths","kind":"method","documentation":"minusMonths(long a): OffsetDateTime","insertText":"minusMonths"},{"label":"minusNanos","kind":"method","documentation":"minusNanos(long a): OffsetDateTime","insertText":"minusNanos"},{"label":"minusSeconds","kind":"method","documentation":"minusSeconds(long a): OffsetDateTime","insertText":"minusSeconds"},{"label":"minusWeeks","kind":"method","documentation":"minusWeeks(long a): OffsetDateTime","insertText":"minusWeeks"},{"label":"minusYears","kind":"method","documentation":"minusYears(long a): OffsetDateTime","insertText":"minusYears"},{"label":"plus","kind":"method","documentation":"plus(long a, TemporalUnit b | TemporalAmount a): OffsetDateTime","insertText":"plus"},{"label":"plusDays","kind":"method","documentation":"plusDays(long a): OffsetDateTime","insertText":"plusDays"},{"label":"plusHours","kind":"method","documentation":"plusHours(long a): OffsetDateTime","insertText":"plusHours"},{"label":"plusMinutes","kind":"method","documentation":"plusMinutes(long a): OffsetDateTime","insertText":"plusMinutes"},{"label":"plusMonths","kind":"method","documentation":"plusMonths(long a): OffsetDateTime","insertText":"plusMonths"},{"label":"plusNanos","kind":"method","documentation":"plusNanos(long a): OffsetDateTime","insertText":"plusNanos"},{"label":"plusSeconds","kind":"method","documentation":"plusSeconds(long a): OffsetDateTime","insertText":"plusSeconds"},{"label":"plusWeeks","kind":"method","documentation":"plusWeeks(long a): OffsetDateTime","insertText":"plusWeeks"},{"label":"plusYears","kind":"method","documentation":"plusYears(long a): OffsetDateTime","insertText":"plusYears"},{"label":"query","kind":"method","documentation":"query(TemporalQuery a): def","insertText":"query"},{"label":"range","kind":"method","documentation":"range(TemporalField a): ValueRange","insertText":"range"},{"label":"toEpochMilli","kind":"method","documentation":"toEpochMilli(): long","insertText":"toEpochMilli"},{"label":"toEpochSecond","kind":"method","documentation":"toEpochSecond(): long","insertText":"toEpochSecond"},{"label":"toInstant","kind":"method","documentation":"toInstant(): Instant","insertText":"toInstant"},{"label":"toLocalDate","kind":"method","documentation":"toLocalDate(): LocalDate","insertText":"toLocalDate"},{"label":"toLocalDateTime","kind":"method","documentation":"toLocalDateTime(): LocalDateTime","insertText":"toLocalDateTime"},{"label":"toLocalTime","kind":"method","documentation":"toLocalTime(): LocalTime","insertText":"toLocalTime"},{"label":"toOffsetTime","kind":"method","documentation":"toOffsetTime(): OffsetTime","insertText":"toOffsetTime"},{"label":"toString","kind":"method","documentation":"toString(): String","insertText":"toString"},{"label":"toZonedDateTime","kind":"method","documentation":"toZonedDateTime(): ZonedDateTime","insertText":"toZonedDateTime"},{"label":"truncatedTo","kind":"method","documentation":"truncatedTo(TemporalUnit a): OffsetDateTime","insertText":"truncatedTo"},{"label":"until","kind":"method","documentation":"until(Temporal a, TemporalUnit b): long","insertText":"until"},{"label":"with","kind":"method","documentation":"with(TemporalField a, long b | TemporalAdjuster a): OffsetDateTime","insertText":"with"},{"label":"withDayOfMonth","kind":"method","documentation":"withDayOfMonth(int a): OffsetDateTime","insertText":"withDayOfMonth"},{"label":"withDayOfYear","kind":"method","documentation":"withDayOfYear(int a): OffsetDateTime","insertText":"withDayOfYear"},{"label":"withHour","kind":"method","documentation":"withHour(int a): OffsetDateTime","insertText":"withHour"},{"label":"withMinute","kind":"method","documentation":"withMinute(int a): OffsetDateTime","insertText":"withMinute"},{"label":"withMonth","kind":"method","documentation":"withMonth(int a): OffsetDateTime","insertText":"withMonth"},{"label":"withNano","kind":"method","documentation":"withNano(int a): OffsetDateTime","insertText":"withNano"},{"label":"withOffsetSameInstant","kind":"method","documentation":"withOffsetSameInstant(ZoneOffset a): OffsetDateTime","insertText":"withOffsetSameInstant"},{"label":"withOffsetSameLocal","kind":"method","documentation":"withOffsetSameLocal(ZoneOffset a): OffsetDateTime","insertText":"withOffsetSameLocal"},{"label":"withSecond","kind":"method","documentation":"withSecond(int a): OffsetDateTime","insertText":"withSecond"},{"label":"withYear","kind":"method","documentation":"withYear(int a): OffsetDateTime","insertText":"withYear"}]},{"label":"OffsetTime","kind":"class","documentation":"Class: OffsetTime","insertText":"OffsetTime","properties":[{"label":"MAX","kind":"property","documentation":"MAX: OffsetTime","insertText":"MAX"},{"label":"MIN","kind":"property","documentation":"MIN: OffsetTime","insertText":"MIN"},{"label":"from","kind":"method","documentation":"from(TemporalAccessor a): OffsetTime","insertText":"from"},{"label":"of","kind":"method","documentation":"of(int a, int b, int c, int d, ZoneOffset e | LocalTime a, ZoneOffset b): OffsetTime","insertText":"of"},{"label":"ofInstant","kind":"method","documentation":"ofInstant(Instant a, ZoneId b): OffsetTime","insertText":"ofInstant"},{"label":"parse","kind":"method","documentation":"parse(CharSequence a, DateTimeFormatter b | CharSequence a): OffsetTime","insertText":"parse"},{"label":"adjustInto","kind":"method","documentation":"adjustInto(Temporal a): Temporal","insertText":"adjustInto"},{"label":"compareTo","kind":"method","documentation":"compareTo(OffsetTime a): int","insertText":"compareTo"},{"label":"equals","kind":"method","documentation":"equals(Object a): boolean","insertText":"equals"},{"label":"format","kind":"method","documentation":"format(DateTimeFormatter a): String","insertText":"format"},{"label":"get","kind":"method","documentation":"get(TemporalField a): int","insertText":"get"},{"label":"getHour","kind":"method","documentation":"getHour(): int","insertText":"getHour"},{"label":"getLong","kind":"method","documentation":"getLong(TemporalField a): long","insertText":"getLong"},{"label":"getMinute","kind":"method","documentation":"getMinute(): int","insertText":"getMinute"},{"label":"getNano","kind":"method","documentation":"getNano(): int","insertText":"getNano"},{"label":"getOffset","kind":"method","documentation":"getOffset(): ZoneOffset","insertText":"getOffset"},{"label":"getSecond","kind":"method","documentation":"getSecond(): int","insertText":"getSecond"},{"label":"hashCode","kind":"method","documentation":"hashCode(): int","insertText":"hashCode"},{"label":"isAfter","kind":"method","documentation":"isAfter(OffsetTime a): boolean","insertText":"isAfter"},{"label":"isBefore","kind":"method","documentation":"isBefore(OffsetTime a): boolean","insertText":"isBefore"},{"label":"isEqual","kind":"method","documentation":"isEqual(OffsetTime a): boolean","insertText":"isEqual"},{"label":"isSupported","kind":"method","documentation":"isSupported(TemporalField a): boolean","insertText":"isSupported"},{"label":"minus","kind":"method","documentation":"minus(long a, TemporalUnit b | TemporalAmount a): OffsetTime","insertText":"minus"},{"label":"minusHours","kind":"method","documentation":"minusHours(long a): OffsetTime","insertText":"minusHours"},{"label":"minusMinutes","kind":"method","documentation":"minusMinutes(long a): OffsetTime","insertText":"minusMinutes"},{"label":"minusNanos","kind":"method","documentation":"minusNanos(long a): OffsetTime","insertText":"minusNanos"},{"label":"minusSeconds","kind":"method","documentation":"minusSeconds(long a): OffsetTime","insertText":"minusSeconds"},{"label":"plus","kind":"method","documentation":"plus(long a, TemporalUnit b | TemporalAmount a): OffsetTime","insertText":"plus"},{"label":"plusHours","kind":"method","documentation":"plusHours(long a): OffsetTime","insertText":"plusHours"},{"label":"plusMinutes","kind":"method","documentation":"plusMinutes(long a): OffsetTime","insertText":"plusMinutes"},{"label":"plusNanos","kind":"method","documentation":"plusNanos(long a): OffsetTime","insertText":"plusNanos"},{"label":"plusSeconds","kind":"method","documentation":"plusSeconds(long a): OffsetTime","insertText":"plusSeconds"},{"label":"query","kind":"method","documentation":"query(TemporalQuery a): def","insertText":"query"},{"label":"range","kind":"method","documentation":"range(TemporalField a): ValueRange","insertText":"range"},{"label":"toEpochMilli","kind":"method","documentation":"toEpochMilli(): long","insertText":"toEpochMilli"},{"label":"toLocalTime","kind":"method","documentation":"toLocalTime(): LocalTime","insertText":"toLocalTime"},{"label":"toString","kind":"method","documentation":"toString(): String","insertText":"toString"},{"label":"truncatedTo","kind":"method","documentation":"truncatedTo(TemporalUnit a): OffsetTime","insertText":"truncatedTo"},{"label":"until","kind":"method","documentation":"until(Temporal a, TemporalUnit b): long","insertText":"until"},{"label":"with","kind":"method","documentation":"with(TemporalField a, long b | TemporalAdjuster a): OffsetTime","insertText":"with"},{"label":"withHour","kind":"method","documentation":"withHour(int a): OffsetTime","insertText":"withHour"},{"label":"withMinute","kind":"method","documentation":"withMinute(int a): OffsetTime","insertText":"withMinute"},{"label":"withNano","kind":"method","documentation":"withNano(int a): OffsetTime","insertText":"withNano"},{"label":"withOffsetSameInstant","kind":"method","documentation":"withOffsetSameInstant(ZoneOffset a): OffsetTime","insertText":"withOffsetSameInstant"},{"label":"withOffsetSameLocal","kind":"method","documentation":"withOffsetSameLocal(ZoneOffset a): OffsetTime","insertText":"withOffsetSameLocal"},{"label":"withSecond","kind":"method","documentation":"withSecond(int a): OffsetTime","insertText":"withSecond"}]},{"label":"Period","kind":"class","documentation":"Class: Period","insertText":"Period","properties":[{"label":"ZERO","kind":"property","documentation":"ZERO: Period","insertText":"ZERO"},{"label":"between","kind":"method","documentation":"between(LocalDate a, LocalDate b): Period","insertText":"between"},{"label":"from","kind":"method","documentation":"from(TemporalAmount a): Period","insertText":"from"},{"label":"of","kind":"method","documentation":"of(int a, int b, int c): Period","insertText":"of"},{"label":"ofDays","kind":"method","documentation":"ofDays(int a): Period","insertText":"ofDays"},{"label":"ofMonths","kind":"method","documentation":"ofMonths(int a): Period","insertText":"ofMonths"},{"label":"ofWeeks","kind":"method","documentation":"ofWeeks(int a): Period","insertText":"ofWeeks"},{"label":"ofYears","kind":"method","documentation":"ofYears(int a): Period","insertText":"ofYears"},{"label":"parse","kind":"method","documentation":"parse(CharSequence a): Period","insertText":"parse"},{"label":"addTo","kind":"method","documentation":"addTo(Temporal a): Temporal","insertText":"addTo"},{"label":"equals","kind":"method","documentation":"equals(Object a): boolean","insertText":"equals"},{"label":"get","kind":"method","documentation":"get(TemporalUnit a): long","insertText":"get"},{"label":"getChronology","kind":"method","documentation":"getChronology(): IsoChronology","insertText":"getChronology"},{"label":"getDays","kind":"method","documentation":"getDays(): int","insertText":"getDays"},{"label":"getMonths","kind":"method","documentation":"getMonths(): int","insertText":"getMonths"},{"label":"getUnits","kind":"method","documentation":"getUnits(): List","insertText":"getUnits"},{"label":"getYears","kind":"method","documentation":"getYears(): int","insertText":"getYears"},{"label":"hashCode","kind":"method","documentation":"hashCode(): int","insertText":"hashCode"},{"label":"isNegative","kind":"method","documentation":"isNegative(): boolean","insertText":"isNegative"},{"label":"isZero","kind":"method","documentation":"isZero(): boolean","insertText":"isZero"},{"label":"minus","kind":"method","documentation":"minus(TemporalAmount a): Period","insertText":"minus"},{"label":"minusDays","kind":"method","documentation":"minusDays(long a): Period","insertText":"minusDays"},{"label":"minusMonths","kind":"method","documentation":"minusMonths(long a): Period","insertText":"minusMonths"},{"label":"minusYears","kind":"method","documentation":"minusYears(long a): Period","insertText":"minusYears"},{"label":"multipliedBy","kind":"method","documentation":"multipliedBy(int a): Period","insertText":"multipliedBy"},{"label":"negated","kind":"method","documentation":"negated(): Period","insertText":"negated"},{"label":"normalized","kind":"method","documentation":"normalized(): Period","insertText":"normalized"},{"label":"plus","kind":"method","documentation":"plus(TemporalAmount a): Period","insertText":"plus"},{"label":"plusDays","kind":"method","documentation":"plusDays(long a): Period","insertText":"plusDays"},{"label":"plusMonths","kind":"method","documentation":"plusMonths(long a): Period","insertText":"plusMonths"},{"label":"plusYears","kind":"method","documentation":"plusYears(long a): Period","insertText":"plusYears"},{"label":"subtractFrom","kind":"method","documentation":"subtractFrom(Temporal a): Temporal","insertText":"subtractFrom"},{"label":"toString","kind":"method","documentation":"toString(): String","insertText":"toString"},{"label":"toTotalMonths","kind":"method","documentation":"toTotalMonths(): long","insertText":"toTotalMonths"},{"label":"withDays","kind":"method","documentation":"withDays(int a): Period","insertText":"withDays"},{"label":"withMonths","kind":"method","documentation":"withMonths(int a): Period","insertText":"withMonths"},{"label":"withYears","kind":"method","documentation":"withYears(int a): Period","insertText":"withYears"}]},{"label":"Year","kind":"class","documentation":"Class: Year","insertText":"Year","properties":[{"label":"MAX_VALUE","kind":"property","documentation":"MAX_VALUE: int","insertText":"MAX_VALUE"},{"label":"MIN_VALUE","kind":"property","documentation":"MIN_VALUE: int","insertText":"MIN_VALUE"},{"label":"from","kind":"method","documentation":"from(TemporalAccessor a): Year","insertText":"from"},{"label":"isLeap","kind":"method","documentation":"isLeap(long a): boolean","insertText":"isLeap"},{"label":"of","kind":"method","documentation":"of(int a): Year","insertText":"of"},{"label":"parse","kind":"method","documentation":"parse(CharSequence a, DateTimeFormatter b | CharSequence a): Year","insertText":"parse"},{"label":"adjustInto","kind":"method","documentation":"adjustInto(Temporal a): Temporal","insertText":"adjustInto"},{"label":"atDay","kind":"method","documentation":"atDay(int a): LocalDate","insertText":"atDay"},{"label":"atMonth","kind":"method","documentation":"atMonth(int a): YearMonth","insertText":"atMonth"},{"label":"atMonthDay","kind":"method","documentation":"atMonthDay(MonthDay a): LocalDate","insertText":"atMonthDay"},{"label":"compareTo","kind":"method","documentation":"compareTo(Year a): int","insertText":"compareTo"},{"label":"equals","kind":"method","documentation":"equals(Object a): boolean","insertText":"equals"},{"label":"format","kind":"method","documentation":"format(DateTimeFormatter a): String","insertText":"format"},{"label":"get","kind":"method","documentation":"get(TemporalField a): int","insertText":"get"},{"label":"getLong","kind":"method","documentation":"getLong(TemporalField a): long","insertText":"getLong"},{"label":"getValue","kind":"method","documentation":"getValue(): int","insertText":"getValue"},{"label":"hashCode","kind":"method","documentation":"hashCode(): int","insertText":"hashCode"},{"label":"isAfter","kind":"method","documentation":"isAfter(Year a): boolean","insertText":"isAfter"},{"label":"isLeap","kind":"method","documentation":"isLeap(): boolean","insertText":"isLeap"},{"label":"isSupported","kind":"method","documentation":"isSupported(TemporalField a): boolean","insertText":"isSupported"},{"label":"isValidMonthDay","kind":"method","documentation":"isValidMonthDay(MonthDay a): boolean","insertText":"isValidMonthDay"},{"label":"length","kind":"method","documentation":"length(): int","insertText":"length"},{"label":"minus","kind":"method","documentation":"minus(long a, TemporalUnit b | TemporalAmount a): Year","insertText":"minus"},{"label":"minusYears","kind":"method","documentation":"minusYears(long a): Year","insertText":"minusYears"},{"label":"plus","kind":"method","documentation":"plus(long a, TemporalUnit b | TemporalAmount a): Year","insertText":"plus"},{"label":"plusYears","kind":"method","documentation":"plusYears(long a): Year","insertText":"plusYears"},{"label":"query","kind":"method","documentation":"query(TemporalQuery a): def","insertText":"query"},{"label":"range","kind":"method","documentation":"range(TemporalField a): ValueRange","insertText":"range"},{"label":"toEpochMilli","kind":"method","documentation":"toEpochMilli(): long","insertText":"toEpochMilli"},{"label":"toString","kind":"method","documentation":"toString(): String","insertText":"toString"},{"label":"until","kind":"method","documentation":"until(Temporal a, TemporalUnit b): long","insertText":"until"},{"label":"with","kind":"method","documentation":"with(TemporalField a, long b | TemporalAdjuster a): Year","insertText":"with"}]},{"label":"YearMonth","kind":"class","documentation":"Class: YearMonth","insertText":"YearMonth","properties":[{"label":"from","kind":"method","documentation":"from(TemporalAccessor a): YearMonth","insertText":"from"},{"label":"of","kind":"method","documentation":"of(int a, int b): YearMonth","insertText":"of"},{"label":"parse","kind":"method","documentation":"parse(CharSequence a, DateTimeFormatter b | CharSequence a): YearMonth","insertText":"parse"},{"label":"adjustInto","kind":"method","documentation":"adjustInto(Temporal a): Temporal","insertText":"adjustInto"},{"label":"atDay","kind":"method","documentation":"atDay(int a): LocalDate","insertText":"atDay"},{"label":"atEndOfMonth","kind":"method","documentation":"atEndOfMonth(): LocalDate","insertText":"atEndOfMonth"},{"label":"compareTo","kind":"method","documentation":"compareTo(YearMonth a): int","insertText":"compareTo"},{"label":"equals","kind":"method","documentation":"equals(Object a): boolean","insertText":"equals"},{"label":"format","kind":"method","documentation":"format(DateTimeFormatter a): String","insertText":"format"},{"label":"get","kind":"method","documentation":"get(TemporalField a): int","insertText":"get"},{"label":"getLong","kind":"method","documentation":"getLong(TemporalField a): long","insertText":"getLong"},{"label":"getMonth","kind":"method","documentation":"getMonth(): Month","insertText":"getMonth"},{"label":"getMonthValue","kind":"method","documentation":"getMonthValue(): int","insertText":"getMonthValue"},{"label":"getYear","kind":"method","documentation":"getYear(): int","insertText":"getYear"},{"label":"hashCode","kind":"method","documentation":"hashCode(): int","insertText":"hashCode"},{"label":"isAfter","kind":"method","documentation":"isAfter(YearMonth a): boolean","insertText":"isAfter"},{"label":"isBefore","kind":"method","documentation":"isBefore(YearMonth a): boolean","insertText":"isBefore"},{"label":"isLeapYear","kind":"method","documentation":"isLeapYear(): boolean","insertText":"isLeapYear"},{"label":"isSupported","kind":"method","documentation":"isSupported(TemporalField a): boolean","insertText":"isSupported"},{"label":"isValidDay","kind":"method","documentation":"isValidDay(int a): boolean","insertText":"isValidDay"},{"label":"lengthOfMonth","kind":"method","documentation":"lengthOfMonth(): int","insertText":"lengthOfMonth"},{"label":"lengthOfYear","kind":"method","documentation":"lengthOfYear(): int","insertText":"lengthOfYear"},{"label":"minus","kind":"method","documentation":"minus(long a, TemporalUnit b | TemporalAmount a): YearMonth","insertText":"minus"},{"label":"minusMonths","kind":"method","documentation":"minusMonths(long a): YearMonth","insertText":"minusMonths"},{"label":"minusYears","kind":"method","documentation":"minusYears(long a): YearMonth","insertText":"minusYears"},{"label":"plus","kind":"method","documentation":"plus(long a, TemporalUnit b | TemporalAmount a): YearMonth","insertText":"plus"},{"label":"plusMonths","kind":"method","documentation":"plusMonths(long a): YearMonth","insertText":"plusMonths"},{"label":"plusYears","kind":"method","documentation":"plusYears(long a): YearMonth","insertText":"plusYears"},{"label":"query","kind":"method","documentation":"query(TemporalQuery a): def","insertText":"query"},{"label":"range","kind":"method","documentation":"range(TemporalField a): ValueRange","insertText":"range"},{"label":"toEpochMilli","kind":"method","documentation":"toEpochMilli(): long","insertText":"toEpochMilli"},{"label":"toString","kind":"method","documentation":"toString(): String","insertText":"toString"},{"label":"until","kind":"method","documentation":"until(Temporal a, TemporalUnit b): long","insertText":"until"},{"label":"with","kind":"method","documentation":"with(TemporalField a, long b | TemporalAdjuster a): YearMonth","insertText":"with"},{"label":"withMonth","kind":"method","documentation":"withMonth(int a): YearMonth","insertText":"withMonth"},{"label":"withYear","kind":"method","documentation":"withYear(int a): YearMonth","insertText":"withYear"}]},{"label":"ZoneId","kind":"class","documentation":"Class: ZoneId","insertText":"ZoneId","properties":[{"label":"SHORT_IDS","kind":"property","documentation":"SHORT_IDS: Map","insertText":"SHORT_IDS"},{"label":"from","kind":"method","documentation":"from(TemporalAccessor a): ZoneId","insertText":"from"},{"label":"getAvailableZoneIds","kind":"method","documentation":"getAvailableZoneIds(): Set","insertText":"getAvailableZoneIds"},{"label":"of","kind":"method","documentation":"of(String a, Map b | String a): ZoneId","insertText":"of"},{"label":"ofOffset","kind":"method","documentation":"ofOffset(String a, ZoneOffset b): ZoneId","insertText":"ofOffset"},{"label":"systemDefault","kind":"method","documentation":"systemDefault(): ZoneId","insertText":"systemDefault"},{"label":"equals","kind":"method","documentation":"equals(Object a): boolean","insertText":"equals"},{"label":"getDisplayName","kind":"method","documentation":"getDisplayName(TextStyle a, Locale b): String","insertText":"getDisplayName"},{"label":"getId","kind":"method","documentation":"getId(): String","insertText":"getId"},{"label":"getRules","kind":"method","documentation":"getRules(): ZoneRules","insertText":"getRules"},{"label":"hashCode","kind":"method","documentation":"hashCode(): int","insertText":"hashCode"},{"label":"normalized","kind":"method","documentation":"normalized(): ZoneId","insertText":"normalized"},{"label":"toString","kind":"method","documentation":"toString(): String","insertText":"toString"}]},{"label":"ZoneOffset","kind":"class","documentation":"Class: ZoneOffset","insertText":"ZoneOffset","properties":[{"label":"MAX","kind":"property","documentation":"MAX: ZoneOffset","insertText":"MAX"},{"label":"MIN","kind":"property","documentation":"MIN: ZoneOffset","insertText":"MIN"},{"label":"UTC","kind":"property","documentation":"UTC: ZoneOffset","insertText":"UTC"},{"label":"from","kind":"method","documentation":"from(TemporalAccessor a): ZoneOffset","insertText":"from"},{"label":"of","kind":"method","documentation":"of(String a): ZoneOffset","insertText":"of"},{"label":"ofHours","kind":"method","documentation":"ofHours(int a): ZoneOffset","insertText":"ofHours"},{"label":"ofHoursMinutes","kind":"method","documentation":"ofHoursMinutes(int a, int b): ZoneOffset","insertText":"ofHoursMinutes"},{"label":"ofHoursMinutesSeconds","kind":"method","documentation":"ofHoursMinutesSeconds(int a, int b, int c): ZoneOffset","insertText":"ofHoursMinutesSeconds"},{"label":"ofTotalSeconds","kind":"method","documentation":"ofTotalSeconds(int a): ZoneOffset","insertText":"ofTotalSeconds"},{"label":"adjustInto","kind":"method","documentation":"adjustInto(Temporal a): Temporal","insertText":"adjustInto"},{"label":"compareTo","kind":"method","documentation":"compareTo(def a): int","insertText":"compareTo"},{"label":"equals","kind":"method","documentation":"equals(Object a): boolean","insertText":"equals"},{"label":"get","kind":"method","documentation":"get(TemporalField a): int","insertText":"get"},{"label":"getDisplayName","kind":"method","documentation":"getDisplayName(TextStyle a, Locale b): String","insertText":"getDisplayName"},{"label":"getId","kind":"method","documentation":"getId(): String","insertText":"getId"},{"label":"getLong","kind":"method","documentation":"getLong(TemporalField a): long","insertText":"getLong"},{"label":"getRules","kind":"method","documentation":"getRules(): ZoneRules","insertText":"getRules"},{"label":"getTotalSeconds","kind":"method","documentation":"getTotalSeconds(): int","insertText":"getTotalSeconds"},{"label":"hashCode","kind":"method","documentation":"hashCode(): int","insertText":"hashCode"},{"label":"isSupported","kind":"method","documentation":"isSupported(TemporalField a): boolean","insertText":"isSupported"},{"label":"normalized","kind":"method","documentation":"normalized(): ZoneId","insertText":"normalized"},{"label":"query","kind":"method","documentation":"query(TemporalQuery a): def","insertText":"query"},{"label":"range","kind":"method","documentation":"range(TemporalField a): ValueRange","insertText":"range"},{"label":"toEpochMilli","kind":"method","documentation":"toEpochMilli(): long","insertText":"toEpochMilli"},{"label":"toString","kind":"method","documentation":"toString(): String","insertText":"toString"}]},{"label":"ZonedDateTime","kind":"class","documentation":"Class: ZonedDateTime","insertText":"ZonedDateTime","properties":[{"label":"from","kind":"method","documentation":"from(TemporalAccessor a): ZonedDateTime","insertText":"from"},{"label":"of","kind":"method","documentation":"of(int a, int b, int c, int d, int e, int f, int undefined, ZoneId undefined | LocalDate a, LocalTime b, ZoneId c | LocalDateTime a, ZoneId b): ZonedDateTime","insertText":"of"},{"label":"ofInstant","kind":"method","documentation":"ofInstant(LocalDateTime a, ZoneOffset b, ZoneId c | Instant a, ZoneId b): ZonedDateTime","insertText":"ofInstant"},{"label":"ofLocal","kind":"method","documentation":"ofLocal(LocalDateTime a, ZoneId b, ZoneOffset c): ZonedDateTime","insertText":"ofLocal"},{"label":"ofStrict","kind":"method","documentation":"ofStrict(LocalDateTime a, ZoneOffset b, ZoneId c): ZonedDateTime","insertText":"ofStrict"},{"label":"parse","kind":"method","documentation":"parse(CharSequence a, DateTimeFormatter b | CharSequence a): ZonedDateTime","insertText":"parse"},{"label":"compareTo","kind":"method","documentation":"compareTo(ChronoZonedDateTime a): int","insertText":"compareTo"},{"label":"equals","kind":"method","documentation":"equals(Object a): boolean","insertText":"equals"},{"label":"format","kind":"method","documentation":"format(DateTimeFormatter a): String","insertText":"format"},{"label":"get","kind":"method","documentation":"get(TemporalField a): int","insertText":"get"},{"label":"getChronology","kind":"method","documentation":"getChronology(): Chronology","insertText":"getChronology"},{"label":"getDayOfMonth","kind":"method","documentation":"getDayOfMonth(): int","insertText":"getDayOfMonth"},{"label":"getDayOfWeek","kind":"method","documentation":"getDayOfWeek(): DayOfWeek","insertText":"getDayOfWeek"},{"label":"getDayOfYear","kind":"method","documentation":"getDayOfYear(): int","insertText":"getDayOfYear"},{"label":"getHour","kind":"method","documentation":"getHour(): int","insertText":"getHour"},{"label":"getLong","kind":"method","documentation":"getLong(TemporalField a): long","insertText":"getLong"},{"label":"getMinute","kind":"method","documentation":"getMinute(): int","insertText":"getMinute"},{"label":"getMonth","kind":"method","documentation":"getMonth(): Month","insertText":"getMonth"},{"label":"getMonthValue","kind":"method","documentation":"getMonthValue(): int","insertText":"getMonthValue"},{"label":"getNano","kind":"method","documentation":"getNano(): int","insertText":"getNano"},{"label":"getOffset","kind":"method","documentation":"getOffset(): ZoneOffset","insertText":"getOffset"},{"label":"getSecond","kind":"method","documentation":"getSecond(): int","insertText":"getSecond"},{"label":"getYear","kind":"method","documentation":"getYear(): int","insertText":"getYear"},{"label":"getZone","kind":"method","documentation":"getZone(): ZoneId","insertText":"getZone"},{"label":"hashCode","kind":"method","documentation":"hashCode(): int","insertText":"hashCode"},{"label":"isAfter","kind":"method","documentation":"isAfter(ChronoZonedDateTime a): boolean","insertText":"isAfter"},{"label":"isBefore","kind":"method","documentation":"isBefore(ChronoZonedDateTime a): boolean","insertText":"isBefore"},{"label":"isEqual","kind":"method","documentation":"isEqual(ChronoZonedDateTime a): boolean","insertText":"isEqual"},{"label":"isSupported","kind":"method","documentation":"isSupported(TemporalField a): boolean","insertText":"isSupported"},{"label":"minus","kind":"method","documentation":"minus(long a, TemporalUnit b | TemporalAmount a): ZonedDateTime","insertText":"minus"},{"label":"minusDays","kind":"method","documentation":"minusDays(long a): ZonedDateTime","insertText":"minusDays"},{"label":"minusHours","kind":"method","documentation":"minusHours(long a): ZonedDateTime","insertText":"minusHours"},{"label":"minusMinutes","kind":"method","documentation":"minusMinutes(long a): ZonedDateTime","insertText":"minusMinutes"},{"label":"minusMonths","kind":"method","documentation":"minusMonths(long a): ZonedDateTime","insertText":"minusMonths"},{"label":"minusNanos","kind":"method","documentation":"minusNanos(long a): ZonedDateTime","insertText":"minusNanos"},{"label":"minusSeconds","kind":"method","documentation":"minusSeconds(long a): ZonedDateTime","insertText":"minusSeconds"},{"label":"minusWeeks","kind":"method","documentation":"minusWeeks(long a): ZonedDateTime","insertText":"minusWeeks"},{"label":"minusYears","kind":"method","documentation":"minusYears(long a): ZonedDateTime","insertText":"minusYears"},{"label":"plus","kind":"method","documentation":"plus(long a, TemporalUnit b | TemporalAmount a): ZonedDateTime","insertText":"plus"},{"label":"plusDays","kind":"method","documentation":"plusDays(long a): ZonedDateTime","insertText":"plusDays"},{"label":"plusHours","kind":"method","documentation":"plusHours(long a): ZonedDateTime","insertText":"plusHours"},{"label":"plusMinutes","kind":"method","documentation":"plusMinutes(long a): ZonedDateTime","insertText":"plusMinutes"},{"label":"plusMonths","kind":"method","documentation":"plusMonths(long a): ZonedDateTime","insertText":"plusMonths"},{"label":"plusNanos","kind":"method","documentation":"plusNanos(long a): ZonedDateTime","insertText":"plusNanos"},{"label":"plusSeconds","kind":"method","documentation":"plusSeconds(long a): ZonedDateTime","insertText":"plusSeconds"},{"label":"plusWeeks","kind":"method","documentation":"plusWeeks(long a): ZonedDateTime","insertText":"plusWeeks"},{"label":"plusYears","kind":"method","documentation":"plusYears(long a): ZonedDateTime","insertText":"plusYears"},{"label":"query","kind":"method","documentation":"query(TemporalQuery a): def","insertText":"query"},{"label":"range","kind":"method","documentation":"range(TemporalField a): ValueRange","insertText":"range"},{"label":"toEpochMilli","kind":"method","documentation":"toEpochMilli(): long","insertText":"toEpochMilli"},{"label":"toEpochSecond","kind":"method","documentation":"toEpochSecond(): long","insertText":"toEpochSecond"},{"label":"toInstant","kind":"method","documentation":"toInstant(): Instant","insertText":"toInstant"},{"label":"toLocalDate","kind":"method","documentation":"toLocalDate(): LocalDate","insertText":"toLocalDate"},{"label":"toLocalDateTime","kind":"method","documentation":"toLocalDateTime(): LocalDateTime","insertText":"toLocalDateTime"},{"label":"toLocalTime","kind":"method","documentation":"toLocalTime(): LocalTime","insertText":"toLocalTime"},{"label":"toOffsetDateTime","kind":"method","documentation":"toOffsetDateTime(): OffsetDateTime","insertText":"toOffsetDateTime"},{"label":"toString","kind":"method","documentation":"toString(): String","insertText":"toString"},{"label":"truncatedTo","kind":"method","documentation":"truncatedTo(TemporalUnit a): ZonedDateTime","insertText":"truncatedTo"},{"label":"until","kind":"method","documentation":"until(Temporal a, TemporalUnit b): long","insertText":"until"},{"label":"with","kind":"method","documentation":"with(TemporalField a, long b | TemporalAdjuster a): ZonedDateTime","insertText":"with"},{"label":"withDayOfMonth","kind":"method","documentation":"withDayOfMonth(int a): ZonedDateTime","insertText":"withDayOfMonth"},{"label":"withDayOfYear","kind":"method","documentation":"withDayOfYear(int a): ZonedDateTime","insertText":"withDayOfYear"},{"label":"withEarlierOffsetAtOverlap","kind":"method","documentation":"withEarlierOffsetAtOverlap(): ZonedDateTime","insertText":"withEarlierOffsetAtOverlap"},{"label":"withFixedOffsetZone","kind":"method","documentation":"withFixedOffsetZone(): ZonedDateTime","insertText":"withFixedOffsetZone"},{"label":"withHour","kind":"method","documentation":"withHour(int a): ZonedDateTime","insertText":"withHour"},{"label":"withLaterOffsetAtOverlap","kind":"method","documentation":"withLaterOffsetAtOverlap(): ZonedDateTime","insertText":"withLaterOffsetAtOverlap"},{"label":"withMinute","kind":"method","documentation":"withMinute(int a): ZonedDateTime","insertText":"withMinute"},{"label":"withMonth","kind":"method","documentation":"withMonth(int a): ZonedDateTime","insertText":"withMonth"},{"label":"withNano","kind":"method","documentation":"withNano(int a): ZonedDateTime","insertText":"withNano"},{"label":"withSecond","kind":"method","documentation":"withSecond(int a): ZonedDateTime","insertText":"withSecond"},{"label":"withYear","kind":"method","documentation":"withYear(int a): ZonedDateTime","insertText":"withYear"},{"label":"withZoneSameInstant","kind":"method","documentation":"withZoneSameInstant(ZoneId a): ZonedDateTime","insertText":"withZoneSameInstant"},{"label":"withZoneSameLocal","kind":"method","documentation":"withZoneSameLocal(ZoneId a): ZonedDateTime","insertText":"withZoneSameLocal"}]},{"label":"AbstractChronology","kind":"class","documentation":"Class: AbstractChronology","insertText":"AbstractChronology","properties":[{"label":"compareTo","kind":"method","documentation":"compareTo(Chronology a): int","insertText":"compareTo"},{"label":"date","kind":"method","documentation":"date(Era a, int b, int c, int d | int a, int b, int c | TemporalAccessor a): ChronoLocalDate","insertText":"date"},{"label":"dateEpochDay","kind":"method","documentation":"dateEpochDay(long a): ChronoLocalDate","insertText":"dateEpochDay"},{"label":"dateYearDay","kind":"method","documentation":"dateYearDay(Era a, int b, int c | int a, int b): ChronoLocalDate","insertText":"dateYearDay"},{"label":"equals","kind":"method","documentation":"equals(Object a): boolean","insertText":"equals"},{"label":"eraOf","kind":"method","documentation":"eraOf(int a): Era","insertText":"eraOf"},{"label":"eras","kind":"method","documentation":"eras(): List","insertText":"eras"},{"label":"getCalendarType","kind":"method","documentation":"getCalendarType(): String","insertText":"getCalendarType"},{"label":"getDisplayName","kind":"method","documentation":"getDisplayName(TextStyle a, Locale b): String","insertText":"getDisplayName"},{"label":"getId","kind":"method","documentation":"getId(): String","insertText":"getId"},{"label":"hashCode","kind":"method","documentation":"hashCode(): int","insertText":"hashCode"},{"label":"isLeapYear","kind":"method","documentation":"isLeapYear(long a): boolean","insertText":"isLeapYear"},{"label":"localDateTime","kind":"method","documentation":"localDateTime(TemporalAccessor a): ChronoLocalDateTime","insertText":"localDateTime"},{"label":"period","kind":"method","documentation":"period(int a, int b, int c): ChronoPeriod","insertText":"period"},{"label":"prolepticYear","kind":"method","documentation":"prolepticYear(Era a, int b): int","insertText":"prolepticYear"},{"label":"range","kind":"method","documentation":"range(ChronoField a): ValueRange","insertText":"range"},{"label":"resolveDate","kind":"method","documentation":"resolveDate(Map a, ResolverStyle b): ChronoLocalDate","insertText":"resolveDate"},{"label":"toString","kind":"method","documentation":"toString(): String","insertText":"toString"},{"label":"zonedDateTime","kind":"method","documentation":"zonedDateTime(Instant a, ZoneId b | TemporalAccessor a): ChronoZonedDateTime","insertText":"zonedDateTime"}]},{"label":"ChronoLocalDate","kind":"class","documentation":"Class: ChronoLocalDate","insertText":"ChronoLocalDate","properties":[{"label":"from","kind":"method","documentation":"from(TemporalAccessor a): ChronoLocalDate","insertText":"from"},{"label":"timeLineOrder","kind":"method","documentation":"timeLineOrder(): Comparator","insertText":"timeLineOrder"},{"label":"adjustInto","kind":"method","documentation":"adjustInto(Temporal a): Temporal","insertText":"adjustInto"},{"label":"atTime","kind":"method","documentation":"atTime(LocalTime a): ChronoLocalDateTime","insertText":"atTime"},{"label":"compareTo","kind":"method","documentation":"compareTo(ChronoLocalDate a): int","insertText":"compareTo"},{"label":"equals","kind":"method","documentation":"equals(Object a): boolean","insertText":"equals"},{"label":"format","kind":"method","documentation":"format(DateTimeFormatter a): String","insertText":"format"},{"label":"get","kind":"method","documentation":"get(TemporalField a): int","insertText":"get"},{"label":"getChronology","kind":"method","documentation":"getChronology(): Chronology","insertText":"getChronology"},{"label":"getEra","kind":"method","documentation":"getEra(): Era","insertText":"getEra"},{"label":"getLong","kind":"method","documentation":"getLong(TemporalField a): long","insertText":"getLong"},{"label":"hashCode","kind":"method","documentation":"hashCode(): int","insertText":"hashCode"},{"label":"isAfter","kind":"method","documentation":"isAfter(ChronoLocalDate a): boolean","insertText":"isAfter"},{"label":"isBefore","kind":"method","documentation":"isBefore(ChronoLocalDate a): boolean","insertText":"isBefore"},{"label":"isEqual","kind":"method","documentation":"isEqual(ChronoLocalDate a): boolean","insertText":"isEqual"},{"label":"isLeapYear","kind":"method","documentation":"isLeapYear(): boolean","insertText":"isLeapYear"},{"label":"isSupported","kind":"method","documentation":"isSupported(TemporalField a): boolean","insertText":"isSupported"},{"label":"lengthOfMonth","kind":"method","documentation":"lengthOfMonth(): int","insertText":"lengthOfMonth"},{"label":"lengthOfYear","kind":"method","documentation":"lengthOfYear(): int","insertText":"lengthOfYear"},{"label":"minus","kind":"method","documentation":"minus(long a, TemporalUnit b | TemporalAmount a): ChronoLocalDate","insertText":"minus"},{"label":"plus","kind":"method","documentation":"plus(long a, TemporalUnit b | TemporalAmount a): ChronoLocalDate","insertText":"plus"},{"label":"query","kind":"method","documentation":"query(TemporalQuery a): def","insertText":"query"},{"label":"range","kind":"method","documentation":"range(TemporalField a): ValueRange","insertText":"range"},{"label":"toEpochDay","kind":"method","documentation":"toEpochDay(): long","insertText":"toEpochDay"},{"label":"toEpochMilli","kind":"method","documentation":"toEpochMilli(): long","insertText":"toEpochMilli"},{"label":"toString","kind":"method","documentation":"toString(): String","insertText":"toString"},{"label":"until","kind":"method","documentation":"until(Temporal a, TemporalUnit b | ChronoLocalDate a): long | ChronoPeriod","insertText":"until"},{"label":"with","kind":"method","documentation":"with(TemporalField a, long b | TemporalAdjuster a): ChronoLocalDate","insertText":"with"}]},{"label":"ChronoLocalDateTime","kind":"class","documentation":"Class: ChronoLocalDateTime","insertText":"ChronoLocalDateTime","properties":[{"label":"from","kind":"method","documentation":"from(TemporalAccessor a): ChronoLocalDateTime","insertText":"from"},{"label":"timeLineOrder","kind":"method","documentation":"timeLineOrder(): Comparator","insertText":"timeLineOrder"},{"label":"adjustInto","kind":"method","documentation":"adjustInto(Temporal a): Temporal","insertText":"adjustInto"},{"label":"atZone","kind":"method","documentation":"atZone(ZoneId a): ChronoZonedDateTime","insertText":"atZone"},{"label":"compareTo","kind":"method","documentation":"compareTo(ChronoLocalDateTime a): int","insertText":"compareTo"},{"label":"equals","kind":"method","documentation":"equals(Object a): boolean","insertText":"equals"},{"label":"format","kind":"method","documentation":"format(DateTimeFormatter a): String","insertText":"format"},{"label":"get","kind":"method","documentation":"get(TemporalField a): int","insertText":"get"},{"label":"getChronology","kind":"method","documentation":"getChronology(): Chronology","insertText":"getChronology"},{"label":"getLong","kind":"method","documentation":"getLong(TemporalField a): long","insertText":"getLong"},{"label":"hashCode","kind":"method","documentation":"hashCode(): int","insertText":"hashCode"},{"label":"isAfter","kind":"method","documentation":"isAfter(ChronoLocalDateTime a): boolean","insertText":"isAfter"},{"label":"isBefore","kind":"method","documentation":"isBefore(ChronoLocalDateTime a): boolean","insertText":"isBefore"},{"label":"isEqual","kind":"method","documentation":"isEqual(ChronoLocalDateTime a): boolean","insertText":"isEqual"},{"label":"isSupported","kind":"method","documentation":"isSupported(TemporalField a): boolean","insertText":"isSupported"},{"label":"minus","kind":"method","documentation":"minus(long a, TemporalUnit b | TemporalAmount a): ChronoLocalDateTime","insertText":"minus"},{"label":"plus","kind":"method","documentation":"plus(long a, TemporalUnit b | TemporalAmount a): ChronoLocalDateTime","insertText":"plus"},{"label":"query","kind":"method","documentation":"query(TemporalQuery a): def","insertText":"query"},{"label":"range","kind":"method","documentation":"range(TemporalField a): ValueRange","insertText":"range"},{"label":"toEpochMilli","kind":"method","documentation":"toEpochMilli(): long","insertText":"toEpochMilli"},{"label":"toEpochSecond","kind":"method","documentation":"toEpochSecond(ZoneOffset a): long","insertText":"toEpochSecond"},{"label":"toInstant","kind":"method","documentation":"toInstant(ZoneOffset a): Instant","insertText":"toInstant"},{"label":"toLocalDate","kind":"method","documentation":"toLocalDate(): ChronoLocalDate","insertText":"toLocalDate"},{"label":"toLocalTime","kind":"method","documentation":"toLocalTime(): LocalTime","insertText":"toLocalTime"},{"label":"toString","kind":"method","documentation":"toString(): String","insertText":"toString"},{"label":"until","kind":"method","documentation":"until(Temporal a, TemporalUnit b): long","insertText":"until"},{"label":"with","kind":"method","documentation":"with(TemporalField a, long b | TemporalAdjuster a): ChronoLocalDateTime","insertText":"with"}]},{"label":"ChronoPeriod","kind":"class","documentation":"Class: ChronoPeriod","insertText":"ChronoPeriod","properties":[{"label":"between","kind":"method","documentation":"between(ChronoLocalDate a, ChronoLocalDate b): ChronoPeriod","insertText":"between"},{"label":"addTo","kind":"method","documentation":"addTo(Temporal a): Temporal","insertText":"addTo"},{"label":"equals","kind":"method","documentation":"equals(Object a): boolean","insertText":"equals"},{"label":"get","kind":"method","documentation":"get(TemporalUnit a): long","insertText":"get"},{"label":"getChronology","kind":"method","documentation":"getChronology(): Chronology","insertText":"getChronology"},{"label":"getUnits","kind":"method","documentation":"getUnits(): List","insertText":"getUnits"},{"label":"hashCode","kind":"method","documentation":"hashCode(): int","insertText":"hashCode"},{"label":"isNegative","kind":"method","documentation":"isNegative(): boolean","insertText":"isNegative"},{"label":"isZero","kind":"method","documentation":"isZero(): boolean","insertText":"isZero"},{"label":"minus","kind":"method","documentation":"minus(TemporalAmount a): ChronoPeriod","insertText":"minus"},{"label":"multipliedBy","kind":"method","documentation":"multipliedBy(int a): ChronoPeriod","insertText":"multipliedBy"},{"label":"negated","kind":"method","documentation":"negated(): ChronoPeriod","insertText":"negated"},{"label":"normalized","kind":"method","documentation":"normalized(): ChronoPeriod","insertText":"normalized"},{"label":"plus","kind":"method","documentation":"plus(TemporalAmount a): ChronoPeriod","insertText":"plus"},{"label":"subtractFrom","kind":"method","documentation":"subtractFrom(Temporal a): Temporal","insertText":"subtractFrom"},{"label":"toString","kind":"method","documentation":"toString(): String","insertText":"toString"}]},{"label":"ChronoZonedDateTime","kind":"class","documentation":"Class: ChronoZonedDateTime","insertText":"ChronoZonedDateTime","properties":[{"label":"from","kind":"method","documentation":"from(TemporalAccessor a): ChronoZonedDateTime","insertText":"from"},{"label":"timeLineOrder","kind":"method","documentation":"timeLineOrder(): Comparator","insertText":"timeLineOrder"},{"label":"compareTo","kind":"method","documentation":"compareTo(ChronoZonedDateTime a): int","insertText":"compareTo"},{"label":"equals","kind":"method","documentation":"equals(Object a): boolean","insertText":"equals"},{"label":"format","kind":"method","documentation":"format(DateTimeFormatter a): String","insertText":"format"},{"label":"get","kind":"method","documentation":"get(TemporalField a): int","insertText":"get"},{"label":"getChronology","kind":"method","documentation":"getChronology(): Chronology","insertText":"getChronology"},{"label":"getLong","kind":"method","documentation":"getLong(TemporalField a): long","insertText":"getLong"},{"label":"getOffset","kind":"method","documentation":"getOffset(): ZoneOffset","insertText":"getOffset"},{"label":"getZone","kind":"method","documentation":"getZone(): ZoneId","insertText":"getZone"},{"label":"hashCode","kind":"method","documentation":"hashCode(): int","insertText":"hashCode"},{"label":"isAfter","kind":"method","documentation":"isAfter(ChronoZonedDateTime a): boolean","insertText":"isAfter"},{"label":"isBefore","kind":"method","documentation":"isBefore(ChronoZonedDateTime a): boolean","insertText":"isBefore"},{"label":"isEqual","kind":"method","documentation":"isEqual(ChronoZonedDateTime a): boolean","insertText":"isEqual"},{"label":"isSupported","kind":"method","documentation":"isSupported(TemporalField a): boolean","insertText":"isSupported"},{"label":"minus","kind":"method","documentation":"minus(long a, TemporalUnit b | TemporalAmount a): ChronoZonedDateTime","insertText":"minus"},{"label":"plus","kind":"method","documentation":"plus(long a, TemporalUnit b | TemporalAmount a): ChronoZonedDateTime","insertText":"plus"},{"label":"query","kind":"method","documentation":"query(TemporalQuery a): def","insertText":"query"},{"label":"range","kind":"method","documentation":"range(TemporalField a): ValueRange","insertText":"range"},{"label":"toEpochMilli","kind":"method","documentation":"toEpochMilli(): long","insertText":"toEpochMilli"},{"label":"toEpochSecond","kind":"method","documentation":"toEpochSecond(): long","insertText":"toEpochSecond"},{"label":"toInstant","kind":"method","documentation":"toInstant(): Instant","insertText":"toInstant"},{"label":"toLocalDate","kind":"method","documentation":"toLocalDate(): ChronoLocalDate","insertText":"toLocalDate"},{"label":"toLocalDateTime","kind":"method","documentation":"toLocalDateTime(): ChronoLocalDateTime","insertText":"toLocalDateTime"},{"label":"toLocalTime","kind":"method","documentation":"toLocalTime(): LocalTime","insertText":"toLocalTime"},{"label":"toString","kind":"method","documentation":"toString(): String","insertText":"toString"},{"label":"until","kind":"method","documentation":"until(Temporal a, TemporalUnit b): long","insertText":"until"},{"label":"with","kind":"method","documentation":"with(TemporalField a, long b | TemporalAdjuster a): ChronoZonedDateTime","insertText":"with"},{"label":"withEarlierOffsetAtOverlap","kind":"method","documentation":"withEarlierOffsetAtOverlap(): ChronoZonedDateTime","insertText":"withEarlierOffsetAtOverlap"},{"label":"withLaterOffsetAtOverlap","kind":"method","documentation":"withLaterOffsetAtOverlap(): ChronoZonedDateTime","insertText":"withLaterOffsetAtOverlap"},{"label":"withZoneSameInstant","kind":"method","documentation":"withZoneSameInstant(ZoneId a): ChronoZonedDateTime","insertText":"withZoneSameInstant"},{"label":"withZoneSameLocal","kind":"method","documentation":"withZoneSameLocal(ZoneId a): ChronoZonedDateTime","insertText":"withZoneSameLocal"}]},{"label":"Chronology","kind":"class","documentation":"Class: Chronology","insertText":"Chronology","properties":[{"label":"from","kind":"method","documentation":"from(TemporalAccessor a): Chronology","insertText":"from"},{"label":"getAvailableChronologies","kind":"method","documentation":"getAvailableChronologies(): Set","insertText":"getAvailableChronologies"},{"label":"of","kind":"method","documentation":"of(String a): Chronology","insertText":"of"},{"label":"ofLocale","kind":"method","documentation":"ofLocale(Locale a): Chronology","insertText":"ofLocale"},{"label":"compareTo","kind":"method","documentation":"compareTo(Chronology a): int","insertText":"compareTo"},{"label":"date","kind":"method","documentation":"date(Era a, int b, int c, int d | int a, int b, int c | TemporalAccessor a): ChronoLocalDate","insertText":"date"},{"label":"dateEpochDay","kind":"method","documentation":"dateEpochDay(long a): ChronoLocalDate","insertText":"dateEpochDay"},{"label":"dateYearDay","kind":"method","documentation":"dateYearDay(Era a, int b, int c | int a, int b): ChronoLocalDate","insertText":"dateYearDay"},{"label":"equals","kind":"method","documentation":"equals(Object a): boolean","insertText":"equals"},{"label":"eraOf","kind":"method","documentation":"eraOf(int a): Era","insertText":"eraOf"},{"label":"eras","kind":"method","documentation":"eras(): List","insertText":"eras"},{"label":"getCalendarType","kind":"method","documentation":"getCalendarType(): String","insertText":"getCalendarType"},{"label":"getDisplayName","kind":"method","documentation":"getDisplayName(TextStyle a, Locale b): String","insertText":"getDisplayName"},{"label":"getId","kind":"method","documentation":"getId(): String","insertText":"getId"},{"label":"hashCode","kind":"method","documentation":"hashCode(): int","insertText":"hashCode"},{"label":"isLeapYear","kind":"method","documentation":"isLeapYear(long a): boolean","insertText":"isLeapYear"},{"label":"localDateTime","kind":"method","documentation":"localDateTime(TemporalAccessor a): ChronoLocalDateTime","insertText":"localDateTime"},{"label":"period","kind":"method","documentation":"period(int a, int b, int c): ChronoPeriod","insertText":"period"},{"label":"prolepticYear","kind":"method","documentation":"prolepticYear(Era a, int b): int","insertText":"prolepticYear"},{"label":"range","kind":"method","documentation":"range(ChronoField a): ValueRange","insertText":"range"},{"label":"resolveDate","kind":"method","documentation":"resolveDate(Map a, ResolverStyle b): ChronoLocalDate","insertText":"resolveDate"},{"label":"toString","kind":"method","documentation":"toString(): String","insertText":"toString"},{"label":"zonedDateTime","kind":"method","documentation":"zonedDateTime(Instant a, ZoneId b | TemporalAccessor a): ChronoZonedDateTime","insertText":"zonedDateTime"}]},{"label":"Era","kind":"class","documentation":"Class: Era","insertText":"Era","properties":[{"label":"adjustInto","kind":"method","documentation":"adjustInto(Temporal a): Temporal","insertText":"adjustInto"},{"label":"equals","kind":"method","documentation":"equals(Object a): boolean","insertText":"equals"},{"label":"get","kind":"method","documentation":"get(TemporalField a): int","insertText":"get"},{"label":"getDisplayName","kind":"method","documentation":"getDisplayName(TextStyle a, Locale b): String","insertText":"getDisplayName"},{"label":"getLong","kind":"method","documentation":"getLong(TemporalField a): long","insertText":"getLong"},{"label":"getValue","kind":"method","documentation":"getValue(): int","insertText":"getValue"},{"label":"hashCode","kind":"method","documentation":"hashCode(): int","insertText":"hashCode"},{"label":"isSupported","kind":"method","documentation":"isSupported(TemporalField a): boolean","insertText":"isSupported"},{"label":"query","kind":"method","documentation":"query(TemporalQuery a): def","insertText":"query"},{"label":"range","kind":"method","documentation":"range(TemporalField a): ValueRange","insertText":"range"},{"label":"toEpochMilli","kind":"method","documentation":"toEpochMilli(): long","insertText":"toEpochMilli"},{"label":"toString","kind":"method","documentation":"toString(): String","insertText":"toString"}]},{"label":"HijrahChronology","kind":"class","documentation":"Class: HijrahChronology","insertText":"HijrahChronology","properties":[{"label":"INSTANCE","kind":"property","documentation":"INSTANCE: HijrahChronology","insertText":"INSTANCE"},{"label":"compareTo","kind":"method","documentation":"compareTo(Chronology a): int","insertText":"compareTo"},{"label":"date","kind":"method","documentation":"date(Era a, int b, int c, int d | int a, int b, int c | TemporalAccessor a): HijrahDate","insertText":"date"},{"label":"dateEpochDay","kind":"method","documentation":"dateEpochDay(long a): HijrahDate","insertText":"dateEpochDay"},{"label":"dateYearDay","kind":"method","documentation":"dateYearDay(Era a, int b, int c | int a, int b): HijrahDate","insertText":"dateYearDay"},{"label":"equals","kind":"method","documentation":"equals(Object a): boolean","insertText":"equals"},{"label":"eraOf","kind":"method","documentation":"eraOf(int a): HijrahEra","insertText":"eraOf"},{"label":"eras","kind":"method","documentation":"eras(): List","insertText":"eras"},{"label":"getCalendarType","kind":"method","documentation":"getCalendarType(): String","insertText":"getCalendarType"},{"label":"getDisplayName","kind":"method","documentation":"getDisplayName(TextStyle a, Locale b): String","insertText":"getDisplayName"},{"label":"getId","kind":"method","documentation":"getId(): String","insertText":"getId"},{"label":"hashCode","kind":"method","documentation":"hashCode(): int","insertText":"hashCode"},{"label":"isLeapYear","kind":"method","documentation":"isLeapYear(long a): boolean","insertText":"isLeapYear"},{"label":"localDateTime","kind":"method","documentation":"localDateTime(TemporalAccessor a): ChronoLocalDateTime","insertText":"localDateTime"},{"label":"period","kind":"method","documentation":"period(int a, int b, int c): ChronoPeriod","insertText":"period"},{"label":"prolepticYear","kind":"method","documentation":"prolepticYear(Era a, int b): int","insertText":"prolepticYear"},{"label":"range","kind":"method","documentation":"range(ChronoField a): ValueRange","insertText":"range"},{"label":"resolveDate","kind":"method","documentation":"resolveDate(Map a, ResolverStyle b): HijrahDate","insertText":"resolveDate"},{"label":"toString","kind":"method","documentation":"toString(): String","insertText":"toString"},{"label":"zonedDateTime","kind":"method","documentation":"zonedDateTime(Instant a, ZoneId b | TemporalAccessor a): ChronoZonedDateTime","insertText":"zonedDateTime"}]},{"label":"HijrahDate","kind":"class","documentation":"Class: HijrahDate","insertText":"HijrahDate","properties":[{"label":"from","kind":"method","documentation":"from(TemporalAccessor a): HijrahDate","insertText":"from"},{"label":"of","kind":"method","documentation":"of(int a, int b, int c): HijrahDate","insertText":"of"},{"label":"adjustInto","kind":"method","documentation":"adjustInto(Temporal a): Temporal","insertText":"adjustInto"},{"label":"atTime","kind":"method","documentation":"atTime(LocalTime a): ChronoLocalDateTime","insertText":"atTime"},{"label":"compareTo","kind":"method","documentation":"compareTo(ChronoLocalDate a): int","insertText":"compareTo"},{"label":"equals","kind":"method","documentation":"equals(Object a): boolean","insertText":"equals"},{"label":"format","kind":"method","documentation":"format(DateTimeFormatter a): String","insertText":"format"},{"label":"get","kind":"method","documentation":"get(TemporalField a): int","insertText":"get"},{"label":"getChronology","kind":"method","documentation":"getChronology(): HijrahChronology","insertText":"getChronology"},{"label":"getEra","kind":"method","documentation":"getEra(): HijrahEra","insertText":"getEra"},{"label":"getLong","kind":"method","documentation":"getLong(TemporalField a): long","insertText":"getLong"},{"label":"hashCode","kind":"method","documentation":"hashCode(): int","insertText":"hashCode"},{"label":"isAfter","kind":"method","documentation":"isAfter(ChronoLocalDate a): boolean","insertText":"isAfter"},{"label":"isBefore","kind":"method","documentation":"isBefore(ChronoLocalDate a): boolean","insertText":"isBefore"},{"label":"isEqual","kind":"method","documentation":"isEqual(ChronoLocalDate a): boolean","insertText":"isEqual"},{"label":"isLeapYear","kind":"method","documentation":"isLeapYear(): boolean","insertText":"isLeapYear"},{"label":"isSupported","kind":"method","documentation":"isSupported(TemporalField a): boolean","insertText":"isSupported"},{"label":"lengthOfMonth","kind":"method","documentation":"lengthOfMonth(): int","insertText":"lengthOfMonth"},{"label":"lengthOfYear","kind":"method","documentation":"lengthOfYear(): int","insertText":"lengthOfYear"},{"label":"minus","kind":"method","documentation":"minus(long a, TemporalUnit b | TemporalAmount a): HijrahDate","insertText":"minus"},{"label":"plus","kind":"method","documentation":"plus(long a, TemporalUnit b | TemporalAmount a): HijrahDate","insertText":"plus"},{"label":"query","kind":"method","documentation":"query(TemporalQuery a): def","insertText":"query"},{"label":"range","kind":"method","documentation":"range(TemporalField a): ValueRange","insertText":"range"},{"label":"toEpochDay","kind":"method","documentation":"toEpochDay(): long","insertText":"toEpochDay"},{"label":"toEpochMilli","kind":"method","documentation":"toEpochMilli(): long","insertText":"toEpochMilli"},{"label":"toString","kind":"method","documentation":"toString(): String","insertText":"toString"},{"label":"until","kind":"method","documentation":"until(Temporal a, TemporalUnit b | ChronoLocalDate a): long | ChronoPeriod","insertText":"until"},{"label":"with","kind":"method","documentation":"with(TemporalField a, long b | TemporalAdjuster a): HijrahDate","insertText":"with"},{"label":"withVariant","kind":"method","documentation":"withVariant(HijrahChronology a): HijrahDate","insertText":"withVariant"}]},{"label":"HijrahEra","kind":"class","documentation":"Class: HijrahEra","insertText":"HijrahEra","properties":[{"label":"AH","kind":"property","documentation":"AH: HijrahEra","insertText":"AH"},{"label":"of","kind":"method","documentation":"of(int a): HijrahEra","insertText":"of"},{"label":"valueOf","kind":"method","documentation":"valueOf(String a): HijrahEra","insertText":"valueOf"},{"label":"values","kind":"method","documentation":"values(): HijrahEra[]","insertText":"values"},{"label":"adjustInto","kind":"method","documentation":"adjustInto(Temporal a): Temporal","insertText":"adjustInto"},{"label":"compareTo","kind":"method","documentation":"compareTo(Enum a): int","insertText":"compareTo"},{"label":"equals","kind":"method","documentation":"equals(Object a): boolean","insertText":"equals"},{"label":"get","kind":"method","documentation":"get(TemporalField a): int","insertText":"get"},{"label":"getDisplayName","kind":"method","documentation":"getDisplayName(TextStyle a, Locale b): String","insertText":"getDisplayName"},{"label":"getLong","kind":"method","documentation":"getLong(TemporalField a): long","insertText":"getLong"},{"label":"getValue","kind":"method","documentation":"getValue(): int","insertText":"getValue"},{"label":"hashCode","kind":"method","documentation":"hashCode(): int","insertText":"hashCode"},{"label":"isSupported","kind":"method","documentation":"isSupported(TemporalField a): boolean","insertText":"isSupported"},{"label":"name","kind":"method","documentation":"name(): String","insertText":"name"},{"label":"ordinal","kind":"method","documentation":"ordinal(): int","insertText":"ordinal"},{"label":"query","kind":"method","documentation":"query(TemporalQuery a): def","insertText":"query"},{"label":"range","kind":"method","documentation":"range(TemporalField a): ValueRange","insertText":"range"},{"label":"toEpochMilli","kind":"method","documentation":"toEpochMilli(): long","insertText":"toEpochMilli"},{"label":"toString","kind":"method","documentation":"toString(): String","insertText":"toString"}]},{"label":"IsoChronology","kind":"class","documentation":"Class: IsoChronology","insertText":"IsoChronology","properties":[{"label":"INSTANCE","kind":"property","documentation":"INSTANCE: IsoChronology","insertText":"INSTANCE"},{"label":"compareTo","kind":"method","documentation":"compareTo(Chronology a): int","insertText":"compareTo"},{"label":"date","kind":"method","documentation":"date(Era a, int b, int c, int d | int a, int b, int c | TemporalAccessor a): LocalDate","insertText":"date"},{"label":"dateEpochDay","kind":"method","documentation":"dateEpochDay(long a): LocalDate","insertText":"dateEpochDay"},{"label":"dateYearDay","kind":"method","documentation":"dateYearDay(Era a, int b, int c | int a, int b): LocalDate","insertText":"dateYearDay"},{"label":"equals","kind":"method","documentation":"equals(Object a): boolean","insertText":"equals"},{"label":"eraOf","kind":"method","documentation":"eraOf(int a): IsoEra","insertText":"eraOf"},{"label":"eras","kind":"method","documentation":"eras(): List","insertText":"eras"},{"label":"getCalendarType","kind":"method","documentation":"getCalendarType(): String","insertText":"getCalendarType"},{"label":"getDisplayName","kind":"method","documentation":"getDisplayName(TextStyle a, Locale b): String","insertText":"getDisplayName"},{"label":"getId","kind":"method","documentation":"getId(): String","insertText":"getId"},{"label":"hashCode","kind":"method","documentation":"hashCode(): int","insertText":"hashCode"},{"label":"isLeapYear","kind":"method","documentation":"isLeapYear(long a): boolean","insertText":"isLeapYear"},{"label":"localDateTime","kind":"method","documentation":"localDateTime(TemporalAccessor a): LocalDateTime","insertText":"localDateTime"},{"label":"period","kind":"method","documentation":"period(int a, int b, int c): Period","insertText":"period"},{"label":"prolepticYear","kind":"method","documentation":"prolepticYear(Era a, int b): int","insertText":"prolepticYear"},{"label":"range","kind":"method","documentation":"range(ChronoField a): ValueRange","insertText":"range"},{"label":"resolveDate","kind":"method","documentation":"resolveDate(Map a, ResolverStyle b): LocalDate","insertText":"resolveDate"},{"label":"toString","kind":"method","documentation":"toString(): String","insertText":"toString"},{"label":"zonedDateTime","kind":"method","documentation":"zonedDateTime(Instant a, ZoneId b | TemporalAccessor a): ZonedDateTime","insertText":"zonedDateTime"}]},{"label":"IsoEra","kind":"class","documentation":"Class: IsoEra","insertText":"IsoEra","properties":[{"label":"BCE","kind":"property","documentation":"BCE: IsoEra","insertText":"BCE"},{"label":"CE","kind":"property","documentation":"CE: IsoEra","insertText":"CE"},{"label":"of","kind":"method","documentation":"of(int a): IsoEra","insertText":"of"},{"label":"valueOf","kind":"method","documentation":"valueOf(String a): IsoEra","insertText":"valueOf"},{"label":"values","kind":"method","documentation":"values(): IsoEra[]","insertText":"values"},{"label":"adjustInto","kind":"method","documentation":"adjustInto(Temporal a): Temporal","insertText":"adjustInto"},{"label":"compareTo","kind":"method","documentation":"compareTo(Enum a): int","insertText":"compareTo"},{"label":"equals","kind":"method","documentation":"equals(Object a): boolean","insertText":"equals"},{"label":"get","kind":"method","documentation":"get(TemporalField a): int","insertText":"get"},{"label":"getDisplayName","kind":"method","documentation":"getDisplayName(TextStyle a, Locale b): String","insertText":"getDisplayName"},{"label":"getLong","kind":"method","documentation":"getLong(TemporalField a): long","insertText":"getLong"},{"label":"getValue","kind":"method","documentation":"getValue(): int","insertText":"getValue"},{"label":"hashCode","kind":"method","documentation":"hashCode(): int","insertText":"hashCode"},{"label":"isSupported","kind":"method","documentation":"isSupported(TemporalField a): boolean","insertText":"isSupported"},{"label":"name","kind":"method","documentation":"name(): String","insertText":"name"},{"label":"ordinal","kind":"method","documentation":"ordinal(): int","insertText":"ordinal"},{"label":"query","kind":"method","documentation":"query(TemporalQuery a): def","insertText":"query"},{"label":"range","kind":"method","documentation":"range(TemporalField a): ValueRange","insertText":"range"},{"label":"toEpochMilli","kind":"method","documentation":"toEpochMilli(): long","insertText":"toEpochMilli"},{"label":"toString","kind":"method","documentation":"toString(): String","insertText":"toString"}]},{"label":"JapaneseChronology","kind":"class","documentation":"Class: JapaneseChronology","insertText":"JapaneseChronology","properties":[{"label":"INSTANCE","kind":"property","documentation":"INSTANCE: JapaneseChronology","insertText":"INSTANCE"},{"label":"compareTo","kind":"method","documentation":"compareTo(Chronology a): int","insertText":"compareTo"},{"label":"date","kind":"method","documentation":"date(Era a, int b, int c, int d | int a, int b, int c | TemporalAccessor a): JapaneseDate","insertText":"date"},{"label":"dateEpochDay","kind":"method","documentation":"dateEpochDay(long a): JapaneseDate","insertText":"dateEpochDay"},{"label":"dateYearDay","kind":"method","documentation":"dateYearDay(Era a, int b, int c | int a, int b): JapaneseDate","insertText":"dateYearDay"},{"label":"equals","kind":"method","documentation":"equals(Object a): boolean","insertText":"equals"},{"label":"eraOf","kind":"method","documentation":"eraOf(int a): JapaneseEra","insertText":"eraOf"},{"label":"eras","kind":"method","documentation":"eras(): List","insertText":"eras"},{"label":"getCalendarType","kind":"method","documentation":"getCalendarType(): String","insertText":"getCalendarType"},{"label":"getDisplayName","kind":"method","documentation":"getDisplayName(TextStyle a, Locale b): String","insertText":"getDisplayName"},{"label":"getId","kind":"method","documentation":"getId(): String","insertText":"getId"},{"label":"hashCode","kind":"method","documentation":"hashCode(): int","insertText":"hashCode"},{"label":"isLeapYear","kind":"method","documentation":"isLeapYear(long a): boolean","insertText":"isLeapYear"},{"label":"localDateTime","kind":"method","documentation":"localDateTime(TemporalAccessor a): ChronoLocalDateTime","insertText":"localDateTime"},{"label":"period","kind":"method","documentation":"period(int a, int b, int c): ChronoPeriod","insertText":"period"},{"label":"prolepticYear","kind":"method","documentation":"prolepticYear(Era a, int b): int","insertText":"prolepticYear"},{"label":"range","kind":"method","documentation":"range(ChronoField a): ValueRange","insertText":"range"},{"label":"resolveDate","kind":"method","documentation":"resolveDate(Map a, ResolverStyle b): JapaneseDate","insertText":"resolveDate"},{"label":"toString","kind":"method","documentation":"toString(): String","insertText":"toString"},{"label":"zonedDateTime","kind":"method","documentation":"zonedDateTime(Instant a, ZoneId b | TemporalAccessor a): ChronoZonedDateTime","insertText":"zonedDateTime"}]},{"label":"JapaneseDate","kind":"class","documentation":"Class: JapaneseDate","insertText":"JapaneseDate","properties":[{"label":"from","kind":"method","documentation":"from(TemporalAccessor a): JapaneseDate","insertText":"from"},{"label":"of","kind":"method","documentation":"of(int a, int b, int c): JapaneseDate","insertText":"of"},{"label":"adjustInto","kind":"method","documentation":"adjustInto(Temporal a): Temporal","insertText":"adjustInto"},{"label":"atTime","kind":"method","documentation":"atTime(LocalTime a): ChronoLocalDateTime","insertText":"atTime"},{"label":"compareTo","kind":"method","documentation":"compareTo(ChronoLocalDate a): int","insertText":"compareTo"},{"label":"equals","kind":"method","documentation":"equals(Object a): boolean","insertText":"equals"},{"label":"format","kind":"method","documentation":"format(DateTimeFormatter a): String","insertText":"format"},{"label":"get","kind":"method","documentation":"get(TemporalField a): int","insertText":"get"},{"label":"getChronology","kind":"method","documentation":"getChronology(): JapaneseChronology","insertText":"getChronology"},{"label":"getEra","kind":"method","documentation":"getEra(): JapaneseEra","insertText":"getEra"},{"label":"getLong","kind":"method","documentation":"getLong(TemporalField a): long","insertText":"getLong"},{"label":"hashCode","kind":"method","documentation":"hashCode(): int","insertText":"hashCode"},{"label":"isAfter","kind":"method","documentation":"isAfter(ChronoLocalDate a): boolean","insertText":"isAfter"},{"label":"isBefore","kind":"method","documentation":"isBefore(ChronoLocalDate a): boolean","insertText":"isBefore"},{"label":"isEqual","kind":"method","documentation":"isEqual(ChronoLocalDate a): boolean","insertText":"isEqual"},{"label":"isLeapYear","kind":"method","documentation":"isLeapYear(): boolean","insertText":"isLeapYear"},{"label":"isSupported","kind":"method","documentation":"isSupported(TemporalField a): boolean","insertText":"isSupported"},{"label":"lengthOfMonth","kind":"method","documentation":"lengthOfMonth(): int","insertText":"lengthOfMonth"},{"label":"lengthOfYear","kind":"method","documentation":"lengthOfYear(): int","insertText":"lengthOfYear"},{"label":"minus","kind":"method","documentation":"minus(long a, TemporalUnit b | TemporalAmount a): JapaneseDate","insertText":"minus"},{"label":"plus","kind":"method","documentation":"plus(long a, TemporalUnit b | TemporalAmount a): JapaneseDate","insertText":"plus"},{"label":"query","kind":"method","documentation":"query(TemporalQuery a): def","insertText":"query"},{"label":"range","kind":"method","documentation":"range(TemporalField a): ValueRange","insertText":"range"},{"label":"toEpochDay","kind":"method","documentation":"toEpochDay(): long","insertText":"toEpochDay"},{"label":"toEpochMilli","kind":"method","documentation":"toEpochMilli(): long","insertText":"toEpochMilli"},{"label":"toString","kind":"method","documentation":"toString(): String","insertText":"toString"},{"label":"until","kind":"method","documentation":"until(Temporal a, TemporalUnit b | ChronoLocalDate a): long | ChronoPeriod","insertText":"until"},{"label":"with","kind":"method","documentation":"with(TemporalField a, long b | TemporalAdjuster a): JapaneseDate","insertText":"with"}]},{"label":"JapaneseEra","kind":"class","documentation":"Class: JapaneseEra","insertText":"JapaneseEra","properties":[{"label":"HEISEI","kind":"property","documentation":"HEISEI: JapaneseEra","insertText":"HEISEI"},{"label":"MEIJI","kind":"property","documentation":"MEIJI: JapaneseEra","insertText":"MEIJI"},{"label":"SHOWA","kind":"property","documentation":"SHOWA: JapaneseEra","insertText":"SHOWA"},{"label":"TAISHO","kind":"property","documentation":"TAISHO: JapaneseEra","insertText":"TAISHO"},{"label":"of","kind":"method","documentation":"of(int a): JapaneseEra","insertText":"of"},{"label":"valueOf","kind":"method","documentation":"valueOf(String a): JapaneseEra","insertText":"valueOf"},{"label":"values","kind":"method","documentation":"values(): JapaneseEra[]","insertText":"values"},{"label":"adjustInto","kind":"method","documentation":"adjustInto(Temporal a): Temporal","insertText":"adjustInto"},{"label":"equals","kind":"method","documentation":"equals(Object a): boolean","insertText":"equals"},{"label":"get","kind":"method","documentation":"get(TemporalField a): int","insertText":"get"},{"label":"getDisplayName","kind":"method","documentation":"getDisplayName(TextStyle a, Locale b): String","insertText":"getDisplayName"},{"label":"getLong","kind":"method","documentation":"getLong(TemporalField a): long","insertText":"getLong"},{"label":"getValue","kind":"method","documentation":"getValue(): int","insertText":"getValue"},{"label":"hashCode","kind":"method","documentation":"hashCode(): int","insertText":"hashCode"},{"label":"isSupported","kind":"method","documentation":"isSupported(TemporalField a): boolean","insertText":"isSupported"},{"label":"query","kind":"method","documentation":"query(TemporalQuery a): def","insertText":"query"},{"label":"range","kind":"method","documentation":"range(TemporalField a): ValueRange","insertText":"range"},{"label":"toEpochMilli","kind":"method","documentation":"toEpochMilli(): long","insertText":"toEpochMilli"},{"label":"toString","kind":"method","documentation":"toString(): String","insertText":"toString"}]},{"label":"MinguoChronology","kind":"class","documentation":"Class: MinguoChronology","insertText":"MinguoChronology","properties":[{"label":"INSTANCE","kind":"property","documentation":"INSTANCE: MinguoChronology","insertText":"INSTANCE"},{"label":"compareTo","kind":"method","documentation":"compareTo(Chronology a): int","insertText":"compareTo"},{"label":"date","kind":"method","documentation":"date(Era a, int b, int c, int d | int a, int b, int c | TemporalAccessor a): MinguoDate","insertText":"date"},{"label":"dateEpochDay","kind":"method","documentation":"dateEpochDay(long a): MinguoDate","insertText":"dateEpochDay"},{"label":"dateYearDay","kind":"method","documentation":"dateYearDay(Era a, int b, int c | int a, int b): MinguoDate","insertText":"dateYearDay"},{"label":"equals","kind":"method","documentation":"equals(Object a): boolean","insertText":"equals"},{"label":"eraOf","kind":"method","documentation":"eraOf(int a): MinguoEra","insertText":"eraOf"},{"label":"eras","kind":"method","documentation":"eras(): List","insertText":"eras"},{"label":"getCalendarType","kind":"method","documentation":"getCalendarType(): String","insertText":"getCalendarType"},{"label":"getDisplayName","kind":"method","documentation":"getDisplayName(TextStyle a, Locale b): String","insertText":"getDisplayName"},{"label":"getId","kind":"method","documentation":"getId(): String","insertText":"getId"},{"label":"hashCode","kind":"method","documentation":"hashCode(): int","insertText":"hashCode"},{"label":"isLeapYear","kind":"method","documentation":"isLeapYear(long a): boolean","insertText":"isLeapYear"},{"label":"localDateTime","kind":"method","documentation":"localDateTime(TemporalAccessor a): ChronoLocalDateTime","insertText":"localDateTime"},{"label":"period","kind":"method","documentation":"period(int a, int b, int c): ChronoPeriod","insertText":"period"},{"label":"prolepticYear","kind":"method","documentation":"prolepticYear(Era a, int b): int","insertText":"prolepticYear"},{"label":"range","kind":"method","documentation":"range(ChronoField a): ValueRange","insertText":"range"},{"label":"resolveDate","kind":"method","documentation":"resolveDate(Map a, ResolverStyle b): MinguoDate","insertText":"resolveDate"},{"label":"toString","kind":"method","documentation":"toString(): String","insertText":"toString"},{"label":"zonedDateTime","kind":"method","documentation":"zonedDateTime(Instant a, ZoneId b | TemporalAccessor a): ChronoZonedDateTime","insertText":"zonedDateTime"}]},{"label":"MinguoDate","kind":"class","documentation":"Class: MinguoDate","insertText":"MinguoDate","properties":[{"label":"from","kind":"method","documentation":"from(TemporalAccessor a): MinguoDate","insertText":"from"},{"label":"of","kind":"method","documentation":"of(int a, int b, int c): MinguoDate","insertText":"of"},{"label":"adjustInto","kind":"method","documentation":"adjustInto(Temporal a): Temporal","insertText":"adjustInto"},{"label":"atTime","kind":"method","documentation":"atTime(LocalTime a): ChronoLocalDateTime","insertText":"atTime"},{"label":"compareTo","kind":"method","documentation":"compareTo(ChronoLocalDate a): int","insertText":"compareTo"},{"label":"equals","kind":"method","documentation":"equals(Object a): boolean","insertText":"equals"},{"label":"format","kind":"method","documentation":"format(DateTimeFormatter a): String","insertText":"format"},{"label":"get","kind":"method","documentation":"get(TemporalField a): int","insertText":"get"},{"label":"getChronology","kind":"method","documentation":"getChronology(): MinguoChronology","insertText":"getChronology"},{"label":"getEra","kind":"method","documentation":"getEra(): MinguoEra","insertText":"getEra"},{"label":"getLong","kind":"method","documentation":"getLong(TemporalField a): long","insertText":"getLong"},{"label":"hashCode","kind":"method","documentation":"hashCode(): int","insertText":"hashCode"},{"label":"isAfter","kind":"method","documentation":"isAfter(ChronoLocalDate a): boolean","insertText":"isAfter"},{"label":"isBefore","kind":"method","documentation":"isBefore(ChronoLocalDate a): boolean","insertText":"isBefore"},{"label":"isEqual","kind":"method","documentation":"isEqual(ChronoLocalDate a): boolean","insertText":"isEqual"},{"label":"isLeapYear","kind":"method","documentation":"isLeapYear(): boolean","insertText":"isLeapYear"},{"label":"isSupported","kind":"method","documentation":"isSupported(TemporalField a): boolean","insertText":"isSupported"},{"label":"lengthOfMonth","kind":"method","documentation":"lengthOfMonth(): int","insertText":"lengthOfMonth"},{"label":"lengthOfYear","kind":"method","documentation":"lengthOfYear(): int","insertText":"lengthOfYear"},{"label":"minus","kind":"method","documentation":"minus(long a, TemporalUnit b | TemporalAmount a): MinguoDate","insertText":"minus"},{"label":"plus","kind":"method","documentation":"plus(long a, TemporalUnit b | TemporalAmount a): MinguoDate","insertText":"plus"},{"label":"query","kind":"method","documentation":"query(TemporalQuery a): def","insertText":"query"},{"label":"range","kind":"method","documentation":"range(TemporalField a): ValueRange","insertText":"range"},{"label":"toEpochDay","kind":"method","documentation":"toEpochDay(): long","insertText":"toEpochDay"},{"label":"toEpochMilli","kind":"method","documentation":"toEpochMilli(): long","insertText":"toEpochMilli"},{"label":"toString","kind":"method","documentation":"toString(): String","insertText":"toString"},{"label":"until","kind":"method","documentation":"until(Temporal a, TemporalUnit b | ChronoLocalDate a): long | ChronoPeriod","insertText":"until"},{"label":"with","kind":"method","documentation":"with(TemporalField a, long b | TemporalAdjuster a): MinguoDate","insertText":"with"}]},{"label":"MinguoEra","kind":"class","documentation":"Class: MinguoEra","insertText":"MinguoEra","properties":[{"label":"BEFORE_ROC","kind":"property","documentation":"BEFORE_ROC: MinguoEra","insertText":"BEFORE_ROC"},{"label":"ROC","kind":"property","documentation":"ROC: MinguoEra","insertText":"ROC"},{"label":"of","kind":"method","documentation":"of(int a): MinguoEra","insertText":"of"},{"label":"valueOf","kind":"method","documentation":"valueOf(String a): MinguoEra","insertText":"valueOf"},{"label":"values","kind":"method","documentation":"values(): MinguoEra[]","insertText":"values"},{"label":"adjustInto","kind":"method","documentation":"adjustInto(Temporal a): Temporal","insertText":"adjustInto"},{"label":"compareTo","kind":"method","documentation":"compareTo(Enum a): int","insertText":"compareTo"},{"label":"equals","kind":"method","documentation":"equals(Object a): boolean","insertText":"equals"},{"label":"get","kind":"method","documentation":"get(TemporalField a): int","insertText":"get"},{"label":"getDisplayName","kind":"method","documentation":"getDisplayName(TextStyle a, Locale b): String","insertText":"getDisplayName"},{"label":"getLong","kind":"method","documentation":"getLong(TemporalField a): long","insertText":"getLong"},{"label":"getValue","kind":"method","documentation":"getValue(): int","insertText":"getValue"},{"label":"hashCode","kind":"method","documentation":"hashCode(): int","insertText":"hashCode"},{"label":"isSupported","kind":"method","documentation":"isSupported(TemporalField a): boolean","insertText":"isSupported"},{"label":"name","kind":"method","documentation":"name(): String","insertText":"name"},{"label":"ordinal","kind":"method","documentation":"ordinal(): int","insertText":"ordinal"},{"label":"query","kind":"method","documentation":"query(TemporalQuery a): def","insertText":"query"},{"label":"range","kind":"method","documentation":"range(TemporalField a): ValueRange","insertText":"range"},{"label":"toEpochMilli","kind":"method","documentation":"toEpochMilli(): long","insertText":"toEpochMilli"},{"label":"toString","kind":"method","documentation":"toString(): String","insertText":"toString"}]},{"label":"ThaiBuddhistChronology","kind":"class","documentation":"Class: ThaiBuddhistChronology","insertText":"ThaiBuddhistChronology","properties":[{"label":"INSTANCE","kind":"property","documentation":"INSTANCE: ThaiBuddhistChronology","insertText":"INSTANCE"},{"label":"compareTo","kind":"method","documentation":"compareTo(Chronology a): int","insertText":"compareTo"},{"label":"date","kind":"method","documentation":"date(Era a, int b, int c, int d | int a, int b, int c | TemporalAccessor a): ThaiBuddhistDate","insertText":"date"},{"label":"dateEpochDay","kind":"method","documentation":"dateEpochDay(long a): ThaiBuddhistDate","insertText":"dateEpochDay"},{"label":"dateYearDay","kind":"method","documentation":"dateYearDay(Era a, int b, int c | int a, int b): ThaiBuddhistDate","insertText":"dateYearDay"},{"label":"equals","kind":"method","documentation":"equals(Object a): boolean","insertText":"equals"},{"label":"eraOf","kind":"method","documentation":"eraOf(int a): ThaiBuddhistEra","insertText":"eraOf"},{"label":"eras","kind":"method","documentation":"eras(): List","insertText":"eras"},{"label":"getCalendarType","kind":"method","documentation":"getCalendarType(): String","insertText":"getCalendarType"},{"label":"getDisplayName","kind":"method","documentation":"getDisplayName(TextStyle a, Locale b): String","insertText":"getDisplayName"},{"label":"getId","kind":"method","documentation":"getId(): String","insertText":"getId"},{"label":"hashCode","kind":"method","documentation":"hashCode(): int","insertText":"hashCode"},{"label":"isLeapYear","kind":"method","documentation":"isLeapYear(long a): boolean","insertText":"isLeapYear"},{"label":"localDateTime","kind":"method","documentation":"localDateTime(TemporalAccessor a): ChronoLocalDateTime","insertText":"localDateTime"},{"label":"period","kind":"method","documentation":"period(int a, int b, int c): ChronoPeriod","insertText":"period"},{"label":"prolepticYear","kind":"method","documentation":"prolepticYear(Era a, int b): int","insertText":"prolepticYear"},{"label":"range","kind":"method","documentation":"range(ChronoField a): ValueRange","insertText":"range"},{"label":"resolveDate","kind":"method","documentation":"resolveDate(Map a, ResolverStyle b): ThaiBuddhistDate","insertText":"resolveDate"},{"label":"toString","kind":"method","documentation":"toString(): String","insertText":"toString"},{"label":"zonedDateTime","kind":"method","documentation":"zonedDateTime(Instant a, ZoneId b | TemporalAccessor a): ChronoZonedDateTime","insertText":"zonedDateTime"}]},{"label":"ThaiBuddhistDate","kind":"class","documentation":"Class: ThaiBuddhistDate","insertText":"ThaiBuddhistDate","properties":[{"label":"from","kind":"method","documentation":"from(TemporalAccessor a): ThaiBuddhistDate","insertText":"from"},{"label":"of","kind":"method","documentation":"of(int a, int b, int c): ThaiBuddhistDate","insertText":"of"},{"label":"adjustInto","kind":"method","documentation":"adjustInto(Temporal a): Temporal","insertText":"adjustInto"},{"label":"atTime","kind":"method","documentation":"atTime(LocalTime a): ChronoLocalDateTime","insertText":"atTime"},{"label":"compareTo","kind":"method","documentation":"compareTo(ChronoLocalDate a): int","insertText":"compareTo"},{"label":"equals","kind":"method","documentation":"equals(Object a): boolean","insertText":"equals"},{"label":"format","kind":"method","documentation":"format(DateTimeFormatter a): String","insertText":"format"},{"label":"get","kind":"method","documentation":"get(TemporalField a): int","insertText":"get"},{"label":"getChronology","kind":"method","documentation":"getChronology(): ThaiBuddhistChronology","insertText":"getChronology"},{"label":"getEra","kind":"method","documentation":"getEra(): ThaiBuddhistEra","insertText":"getEra"},{"label":"getLong","kind":"method","documentation":"getLong(TemporalField a): long","insertText":"getLong"},{"label":"hashCode","kind":"method","documentation":"hashCode(): int","insertText":"hashCode"},{"label":"isAfter","kind":"method","documentation":"isAfter(ChronoLocalDate a): boolean","insertText":"isAfter"},{"label":"isBefore","kind":"method","documentation":"isBefore(ChronoLocalDate a): boolean","insertText":"isBefore"},{"label":"isEqual","kind":"method","documentation":"isEqual(ChronoLocalDate a): boolean","insertText":"isEqual"},{"label":"isLeapYear","kind":"method","documentation":"isLeapYear(): boolean","insertText":"isLeapYear"},{"label":"isSupported","kind":"method","documentation":"isSupported(TemporalField a): boolean","insertText":"isSupported"},{"label":"lengthOfMonth","kind":"method","documentation":"lengthOfMonth(): int","insertText":"lengthOfMonth"},{"label":"lengthOfYear","kind":"method","documentation":"lengthOfYear(): int","insertText":"lengthOfYear"},{"label":"minus","kind":"method","documentation":"minus(long a, TemporalUnit b | TemporalAmount a): ThaiBuddhistDate","insertText":"minus"},{"label":"plus","kind":"method","documentation":"plus(long a, TemporalUnit b | TemporalAmount a): ThaiBuddhistDate","insertText":"plus"},{"label":"query","kind":"method","documentation":"query(TemporalQuery a): def","insertText":"query"},{"label":"range","kind":"method","documentation":"range(TemporalField a): ValueRange","insertText":"range"},{"label":"toEpochDay","kind":"method","documentation":"toEpochDay(): long","insertText":"toEpochDay"},{"label":"toEpochMilli","kind":"method","documentation":"toEpochMilli(): long","insertText":"toEpochMilli"},{"label":"toString","kind":"method","documentation":"toString(): String","insertText":"toString"},{"label":"until","kind":"method","documentation":"until(Temporal a, TemporalUnit b | ChronoLocalDate a): long | ChronoPeriod","insertText":"until"},{"label":"with","kind":"method","documentation":"with(TemporalField a, long b | TemporalAdjuster a): ThaiBuddhistDate","insertText":"with"}]},{"label":"ThaiBuddhistEra","kind":"class","documentation":"Class: ThaiBuddhistEra","insertText":"ThaiBuddhistEra","properties":[{"label":"BE","kind":"property","documentation":"BE: ThaiBuddhistEra","insertText":"BE"},{"label":"BEFORE_BE","kind":"property","documentation":"BEFORE_BE: ThaiBuddhistEra","insertText":"BEFORE_BE"},{"label":"of","kind":"method","documentation":"of(int a): ThaiBuddhistEra","insertText":"of"},{"label":"valueOf","kind":"method","documentation":"valueOf(String a): ThaiBuddhistEra","insertText":"valueOf"},{"label":"values","kind":"method","documentation":"values(): ThaiBuddhistEra[]","insertText":"values"},{"label":"adjustInto","kind":"method","documentation":"adjustInto(Temporal a): Temporal","insertText":"adjustInto"},{"label":"compareTo","kind":"method","documentation":"compareTo(Enum a): int","insertText":"compareTo"},{"label":"equals","kind":"method","documentation":"equals(Object a): boolean","insertText":"equals"},{"label":"get","kind":"method","documentation":"get(TemporalField a): int","insertText":"get"},{"label":"getDisplayName","kind":"method","documentation":"getDisplayName(TextStyle a, Locale b): String","insertText":"getDisplayName"},{"label":"getLong","kind":"method","documentation":"getLong(TemporalField a): long","insertText":"getLong"},{"label":"getValue","kind":"method","documentation":"getValue(): int","insertText":"getValue"},{"label":"hashCode","kind":"method","documentation":"hashCode(): int","insertText":"hashCode"},{"label":"isSupported","kind":"method","documentation":"isSupported(TemporalField a): boolean","insertText":"isSupported"},{"label":"name","kind":"method","documentation":"name(): String","insertText":"name"},{"label":"ordinal","kind":"method","documentation":"ordinal(): int","insertText":"ordinal"},{"label":"query","kind":"method","documentation":"query(TemporalQuery a): def","insertText":"query"},{"label":"range","kind":"method","documentation":"range(TemporalField a): ValueRange","insertText":"range"},{"label":"toEpochMilli","kind":"method","documentation":"toEpochMilli(): long","insertText":"toEpochMilli"},{"label":"toString","kind":"method","documentation":"toString(): String","insertText":"toString"}]},{"label":"DateTimeFormatter","kind":"class","documentation":"Class: DateTimeFormatter","insertText":"DateTimeFormatter","properties":[{"label":"BASIC_ISO_DATE","kind":"property","documentation":"BASIC_ISO_DATE: DateTimeFormatter","insertText":"BASIC_ISO_DATE"},{"label":"ISO_DATE","kind":"property","documentation":"ISO_DATE: DateTimeFormatter","insertText":"ISO_DATE"},{"label":"ISO_DATE_TIME","kind":"property","documentation":"ISO_DATE_TIME: DateTimeFormatter","insertText":"ISO_DATE_TIME"},{"label":"ISO_INSTANT","kind":"property","documentation":"ISO_INSTANT: DateTimeFormatter","insertText":"ISO_INSTANT"},{"label":"ISO_LOCAL_DATE","kind":"property","documentation":"ISO_LOCAL_DATE: DateTimeFormatter","insertText":"ISO_LOCAL_DATE"},{"label":"ISO_LOCAL_DATE_TIME","kind":"property","documentation":"ISO_LOCAL_DATE_TIME: DateTimeFormatter","insertText":"ISO_LOCAL_DATE_TIME"},{"label":"ISO_LOCAL_TIME","kind":"property","documentation":"ISO_LOCAL_TIME: DateTimeFormatter","insertText":"ISO_LOCAL_TIME"},{"label":"ISO_OFFSET_DATE","kind":"property","documentation":"ISO_OFFSET_DATE: DateTimeFormatter","insertText":"ISO_OFFSET_DATE"},{"label":"ISO_OFFSET_DATE_TIME","kind":"property","documentation":"ISO_OFFSET_DATE_TIME: DateTimeFormatter","insertText":"ISO_OFFSET_DATE_TIME"},{"label":"ISO_OFFSET_TIME","kind":"property","documentation":"ISO_OFFSET_TIME: DateTimeFormatter","insertText":"ISO_OFFSET_TIME"},{"label":"ISO_ORDINAL_DATE","kind":"property","documentation":"ISO_ORDINAL_DATE: DateTimeFormatter","insertText":"ISO_ORDINAL_DATE"},{"label":"ISO_TIME","kind":"property","documentation":"ISO_TIME: DateTimeFormatter","insertText":"ISO_TIME"},{"label":"ISO_WEEK_DATE","kind":"property","documentation":"ISO_WEEK_DATE: DateTimeFormatter","insertText":"ISO_WEEK_DATE"},{"label":"ISO_ZONED_DATE_TIME","kind":"property","documentation":"ISO_ZONED_DATE_TIME: DateTimeFormatter","insertText":"ISO_ZONED_DATE_TIME"},{"label":"RFC_1123_DATE_TIME","kind":"property","documentation":"RFC_1123_DATE_TIME: DateTimeFormatter","insertText":"RFC_1123_DATE_TIME"},{"label":"ofLocalizedDate","kind":"method","documentation":"ofLocalizedDate(FormatStyle a): DateTimeFormatter","insertText":"ofLocalizedDate"},{"label":"ofLocalizedDateTime","kind":"method","documentation":"ofLocalizedDateTime(FormatStyle a, FormatStyle b | FormatStyle a): DateTimeFormatter","insertText":"ofLocalizedDateTime"},{"label":"ofLocalizedTime","kind":"method","documentation":"ofLocalizedTime(FormatStyle a): DateTimeFormatter","insertText":"ofLocalizedTime"},{"label":"ofPattern","kind":"method","documentation":"ofPattern(String a, Locale b | String a): DateTimeFormatter","insertText":"ofPattern"},{"label":"parsedExcessDays","kind":"method","documentation":"parsedExcessDays(): TemporalQuery","insertText":"parsedExcessDays"},{"label":"parsedLeapSecond","kind":"method","documentation":"parsedLeapSecond(): TemporalQuery","insertText":"parsedLeapSecond"},{"label":"equals","kind":"method","documentation":"equals(Object a): boolean","insertText":"equals"},{"label":"format","kind":"method","documentation":"format(TemporalAccessor a): String","insertText":"format"},{"label":"formatTo","kind":"method","documentation":"formatTo(TemporalAccessor a, Appendable b): void","insertText":"formatTo"},{"label":"getChronology","kind":"method","documentation":"getChronology(): Chronology","insertText":"getChronology"},{"label":"getDecimalStyle","kind":"method","documentation":"getDecimalStyle(): DecimalStyle","insertText":"getDecimalStyle"},{"label":"getLocale","kind":"method","documentation":"getLocale(): Locale","insertText":"getLocale"},{"label":"getResolverFields","kind":"method","documentation":"getResolverFields(): Set","insertText":"getResolverFields"},{"label":"getResolverStyle","kind":"method","documentation":"getResolverStyle(): ResolverStyle","insertText":"getResolverStyle"},{"label":"getZone","kind":"method","documentation":"getZone(): ZoneId","insertText":"getZone"},{"label":"hashCode","kind":"method","documentation":"hashCode(): int","insertText":"hashCode"},{"label":"parse","kind":"method","documentation":"parse(CharSequence a, TemporalQuery b | CharSequence a): def | TemporalAccessor","insertText":"parse"},{"label":"parseBest","kind":"method","documentation":"parseBest(CharSequence a, TemporalQuery[] b): TemporalAccessor","insertText":"parseBest"},{"label":"parseUnresolved","kind":"method","documentation":"parseUnresolved(CharSequence a, ParsePosition b): TemporalAccessor","insertText":"parseUnresolved"},{"label":"toFormat","kind":"method","documentation":"toFormat(TemporalQuery a): Format","insertText":"toFormat"},{"label":"toString","kind":"method","documentation":"toString(): String","insertText":"toString"},{"label":"withChronology","kind":"method","documentation":"withChronology(Chronology a): DateTimeFormatter","insertText":"withChronology"},{"label":"withDecimalStyle","kind":"method","documentation":"withDecimalStyle(DecimalStyle a): DateTimeFormatter","insertText":"withDecimalStyle"},{"label":"withLocale","kind":"method","documentation":"withLocale(Locale a): DateTimeFormatter","insertText":"withLocale"},{"label":"withResolverFields","kind":"method","documentation":"withResolverFields(Set a): DateTimeFormatter","insertText":"withResolverFields"},{"label":"withResolverStyle","kind":"method","documentation":"withResolverStyle(ResolverStyle a): DateTimeFormatter","insertText":"withResolverStyle"},{"label":"withZone","kind":"method","documentation":"withZone(ZoneId a): DateTimeFormatter","insertText":"withZone"}]},{"label":"DateTimeFormatterBuilder","kind":"class","documentation":"Class: DateTimeFormatterBuilder","insertText":"DateTimeFormatterBuilder","properties":[{"label":"getLocalizedDateTimePattern","kind":"method","documentation":"getLocalizedDateTimePattern(FormatStyle a, FormatStyle b, Chronology c, Locale d): String","insertText":"getLocalizedDateTimePattern"},{"label":"append","kind":"method","documentation":"append(DateTimeFormatter a): DateTimeFormatterBuilder","insertText":"append"},{"label":"appendChronologyId","kind":"method","documentation":"appendChronologyId(): DateTimeFormatterBuilder","insertText":"appendChronologyId"},{"label":"appendChronologyText","kind":"method","documentation":"appendChronologyText(TextStyle a): DateTimeFormatterBuilder","insertText":"appendChronologyText"},{"label":"appendFraction","kind":"method","documentation":"appendFraction(TemporalField a, int b, int c, boolean d): DateTimeFormatterBuilder","insertText":"appendFraction"},{"label":"appendInstant","kind":"method","documentation":"appendInstant(int a): DateTimeFormatterBuilder","insertText":"appendInstant"},{"label":"appendLiteral","kind":"method","documentation":"appendLiteral(String a): DateTimeFormatterBuilder","insertText":"appendLiteral"},{"label":"appendLocalized","kind":"method","documentation":"appendLocalized(FormatStyle a, FormatStyle b): DateTimeFormatterBuilder","insertText":"appendLocalized"},{"label":"appendLocalizedOffset","kind":"method","documentation":"appendLocalizedOffset(TextStyle a): DateTimeFormatterBuilder","insertText":"appendLocalizedOffset"},{"label":"appendOffset","kind":"method","documentation":"appendOffset(String a, String b): DateTimeFormatterBuilder","insertText":"appendOffset"},{"label":"appendOffsetId","kind":"method","documentation":"appendOffsetId(): DateTimeFormatterBuilder","insertText":"appendOffsetId"},{"label":"appendOptional","kind":"method","documentation":"appendOptional(DateTimeFormatter a): DateTimeFormatterBuilder","insertText":"appendOptional"},{"label":"appendPattern","kind":"method","documentation":"appendPattern(String a): DateTimeFormatterBuilder","insertText":"appendPattern"},{"label":"appendText","kind":"method","documentation":"appendText(TemporalField a, TextStyle b | TemporalField a): DateTimeFormatterBuilder","insertText":"appendText"},{"label":"appendValue","kind":"method","documentation":"appendValue(TemporalField a, int b, int c, SignStyle d | TemporalField a, int b | TemporalField a): DateTimeFormatterBuilder","insertText":"appendValue"},{"label":"appendValueReduced","kind":"method","documentation":"appendValueReduced(TemporalField a, int b, int c, int d): DateTimeFormatterBuilder","insertText":"appendValueReduced"},{"label":"appendZoneId","kind":"method","documentation":"appendZoneId(): DateTimeFormatterBuilder","insertText":"appendZoneId"},{"label":"appendZoneOrOffsetId","kind":"method","documentation":"appendZoneOrOffsetId(): DateTimeFormatterBuilder","insertText":"appendZoneOrOffsetId"},{"label":"appendZoneRegionId","kind":"method","documentation":"appendZoneRegionId(): DateTimeFormatterBuilder","insertText":"appendZoneRegionId"},{"label":"appendZoneText","kind":"method","documentation":"appendZoneText(TextStyle a, Set b | TextStyle a): DateTimeFormatterBuilder","insertText":"appendZoneText"},{"label":"equals","kind":"method","documentation":"equals(Object a): boolean","insertText":"equals"},{"label":"hashCode","kind":"method","documentation":"hashCode(): int","insertText":"hashCode"},{"label":"optionalEnd","kind":"method","documentation":"optionalEnd(): DateTimeFormatterBuilder","insertText":"optionalEnd"},{"label":"optionalStart","kind":"method","documentation":"optionalStart(): DateTimeFormatterBuilder","insertText":"optionalStart"},{"label":"padNext","kind":"method","documentation":"padNext(int a, char b | int a): DateTimeFormatterBuilder","insertText":"padNext"},{"label":"parseCaseInsensitive","kind":"method","documentation":"parseCaseInsensitive(): DateTimeFormatterBuilder","insertText":"parseCaseInsensitive"},{"label":"parseCaseSensitive","kind":"method","documentation":"parseCaseSensitive(): DateTimeFormatterBuilder","insertText":"parseCaseSensitive"},{"label":"parseDefaulting","kind":"method","documentation":"parseDefaulting(TemporalField a, long b): DateTimeFormatterBuilder","insertText":"parseDefaulting"},{"label":"parseLenient","kind":"method","documentation":"parseLenient(): DateTimeFormatterBuilder","insertText":"parseLenient"},{"label":"parseStrict","kind":"method","documentation":"parseStrict(): DateTimeFormatterBuilder","insertText":"parseStrict"},{"label":"toFormatter","kind":"method","documentation":"toFormatter(Locale a): DateTimeFormatter","insertText":"toFormatter"},{"label":"toString","kind":"method","documentation":"toString(): String","insertText":"toString"}],"constructorDefinition":{"label":"DateTimeFormatterBuilder","kind":"constructor","documentation":"Constructor: DateTimeFormatterBuilder","insertText":"DateTimeFormatterBuilder"}},{"label":"DateTimeParseException","kind":"class","documentation":"Class: DateTimeParseException","insertText":"DateTimeParseException","properties":[{"label":"equals","kind":"method","documentation":"equals(Object a): boolean","insertText":"equals"},{"label":"getErrorIndex","kind":"method","documentation":"getErrorIndex(): int","insertText":"getErrorIndex"},{"label":"getLocalizedMessage","kind":"method","documentation":"getLocalizedMessage(): String","insertText":"getLocalizedMessage"},{"label":"getMessage","kind":"method","documentation":"getMessage(): String","insertText":"getMessage"},{"label":"getParsedString","kind":"method","documentation":"getParsedString(): String","insertText":"getParsedString"},{"label":"getStackTrace","kind":"method","documentation":"getStackTrace(): StackTraceElement[]","insertText":"getStackTrace"},{"label":"hashCode","kind":"method","documentation":"hashCode(): int","insertText":"hashCode"},{"label":"toString","kind":"method","documentation":"toString(): String","insertText":"toString"}],"constructorDefinition":{"label":"DateTimeParseException","kind":"constructor","documentation":"Constructor: DateTimeParseException","insertText":"DateTimeParseException"}},{"label":"DecimalStyle","kind":"class","documentation":"Class: DecimalStyle","insertText":"DecimalStyle","properties":[{"label":"STANDARD","kind":"property","documentation":"STANDARD: DecimalStyle","insertText":"STANDARD"},{"label":"getAvailableLocales","kind":"method","documentation":"getAvailableLocales(): Set","insertText":"getAvailableLocales"},{"label":"of","kind":"method","documentation":"of(Locale a): DecimalStyle","insertText":"of"},{"label":"ofDefaultLocale","kind":"method","documentation":"ofDefaultLocale(): DecimalStyle","insertText":"ofDefaultLocale"},{"label":"equals","kind":"method","documentation":"equals(Object a): boolean","insertText":"equals"},{"label":"getDecimalSeparator","kind":"method","documentation":"getDecimalSeparator(): char","insertText":"getDecimalSeparator"},{"label":"getNegativeSign","kind":"method","documentation":"getNegativeSign(): char","insertText":"getNegativeSign"},{"label":"getPositiveSign","kind":"method","documentation":"getPositiveSign(): char","insertText":"getPositiveSign"},{"label":"getZeroDigit","kind":"method","documentation":"getZeroDigit(): char","insertText":"getZeroDigit"},{"label":"hashCode","kind":"method","documentation":"hashCode(): int","insertText":"hashCode"},{"label":"toString","kind":"method","documentation":"toString(): String","insertText":"toString"},{"label":"withDecimalSeparator","kind":"method","documentation":"withDecimalSeparator(char a): DecimalStyle","insertText":"withDecimalSeparator"},{"label":"withNegativeSign","kind":"method","documentation":"withNegativeSign(char a): DecimalStyle","insertText":"withNegativeSign"},{"label":"withPositiveSign","kind":"method","documentation":"withPositiveSign(char a): DecimalStyle","insertText":"withPositiveSign"},{"label":"withZeroDigit","kind":"method","documentation":"withZeroDigit(char a): DecimalStyle","insertText":"withZeroDigit"}]},{"label":"FormatStyle","kind":"class","documentation":"Class: FormatStyle","insertText":"FormatStyle","properties":[{"label":"FULL","kind":"property","documentation":"FULL: FormatStyle","insertText":"FULL"},{"label":"LONG","kind":"property","documentation":"LONG: FormatStyle","insertText":"LONG"},{"label":"MEDIUM","kind":"property","documentation":"MEDIUM: FormatStyle","insertText":"MEDIUM"},{"label":"SHORT","kind":"property","documentation":"SHORT: FormatStyle","insertText":"SHORT"},{"label":"valueOf","kind":"method","documentation":"valueOf(String a): FormatStyle","insertText":"valueOf"},{"label":"values","kind":"method","documentation":"values(): FormatStyle[]","insertText":"values"},{"label":"compareTo","kind":"method","documentation":"compareTo(Enum a): int","insertText":"compareTo"},{"label":"equals","kind":"method","documentation":"equals(Object a): boolean","insertText":"equals"},{"label":"hashCode","kind":"method","documentation":"hashCode(): int","insertText":"hashCode"},{"label":"name","kind":"method","documentation":"name(): String","insertText":"name"},{"label":"ordinal","kind":"method","documentation":"ordinal(): int","insertText":"ordinal"},{"label":"toString","kind":"method","documentation":"toString(): String","insertText":"toString"}]},{"label":"ResolverStyle","kind":"class","documentation":"Class: ResolverStyle","insertText":"ResolverStyle","properties":[{"label":"LENIENT","kind":"property","documentation":"LENIENT: ResolverStyle","insertText":"LENIENT"},{"label":"SMART","kind":"property","documentation":"SMART: ResolverStyle","insertText":"SMART"},{"label":"STRICT","kind":"property","documentation":"STRICT: ResolverStyle","insertText":"STRICT"},{"label":"valueOf","kind":"method","documentation":"valueOf(String a): ResolverStyle","insertText":"valueOf"},{"label":"values","kind":"method","documentation":"values(): ResolverStyle[]","insertText":"values"},{"label":"compareTo","kind":"method","documentation":"compareTo(Enum a): int","insertText":"compareTo"},{"label":"equals","kind":"method","documentation":"equals(Object a): boolean","insertText":"equals"},{"label":"hashCode","kind":"method","documentation":"hashCode(): int","insertText":"hashCode"},{"label":"name","kind":"method","documentation":"name(): String","insertText":"name"},{"label":"ordinal","kind":"method","documentation":"ordinal(): int","insertText":"ordinal"},{"label":"toString","kind":"method","documentation":"toString(): String","insertText":"toString"}]},{"label":"SignStyle","kind":"class","documentation":"Class: SignStyle","insertText":"SignStyle","properties":[{"label":"ALWAYS","kind":"property","documentation":"ALWAYS: SignStyle","insertText":"ALWAYS"},{"label":"EXCEEDS_PAD","kind":"property","documentation":"EXCEEDS_PAD: SignStyle","insertText":"EXCEEDS_PAD"},{"label":"NEVER","kind":"property","documentation":"NEVER: SignStyle","insertText":"NEVER"},{"label":"NORMAL","kind":"property","documentation":"NORMAL: SignStyle","insertText":"NORMAL"},{"label":"NOT_NEGATIVE","kind":"property","documentation":"NOT_NEGATIVE: SignStyle","insertText":"NOT_NEGATIVE"},{"label":"valueOf","kind":"method","documentation":"valueOf(String a): SignStyle","insertText":"valueOf"},{"label":"values","kind":"method","documentation":"values(): SignStyle[]","insertText":"values"},{"label":"compareTo","kind":"method","documentation":"compareTo(Enum a): int","insertText":"compareTo"},{"label":"equals","kind":"method","documentation":"equals(Object a): boolean","insertText":"equals"},{"label":"hashCode","kind":"method","documentation":"hashCode(): int","insertText":"hashCode"},{"label":"name","kind":"method","documentation":"name(): String","insertText":"name"},{"label":"ordinal","kind":"method","documentation":"ordinal(): int","insertText":"ordinal"},{"label":"toString","kind":"method","documentation":"toString(): String","insertText":"toString"}]},{"label":"TextStyle","kind":"class","documentation":"Class: TextStyle","insertText":"TextStyle","properties":[{"label":"FULL","kind":"property","documentation":"FULL: TextStyle","insertText":"FULL"},{"label":"FULL_STANDALONE","kind":"property","documentation":"FULL_STANDALONE: TextStyle","insertText":"FULL_STANDALONE"},{"label":"NARROW","kind":"property","documentation":"NARROW: TextStyle","insertText":"NARROW"},{"label":"NARROW_STANDALONE","kind":"property","documentation":"NARROW_STANDALONE: TextStyle","insertText":"NARROW_STANDALONE"},{"label":"SHORT","kind":"property","documentation":"SHORT: TextStyle","insertText":"SHORT"},{"label":"SHORT_STANDALONE","kind":"property","documentation":"SHORT_STANDALONE: TextStyle","insertText":"SHORT_STANDALONE"},{"label":"valueOf","kind":"method","documentation":"valueOf(String a): TextStyle","insertText":"valueOf"},{"label":"values","kind":"method","documentation":"values(): TextStyle[]","insertText":"values"},{"label":"asNormal","kind":"method","documentation":"asNormal(): TextStyle","insertText":"asNormal"},{"label":"asStandalone","kind":"method","documentation":"asStandalone(): TextStyle","insertText":"asStandalone"},{"label":"compareTo","kind":"method","documentation":"compareTo(Enum a): int","insertText":"compareTo"},{"label":"equals","kind":"method","documentation":"equals(Object a): boolean","insertText":"equals"},{"label":"hashCode","kind":"method","documentation":"hashCode(): int","insertText":"hashCode"},{"label":"isStandalone","kind":"method","documentation":"isStandalone(): boolean","insertText":"isStandalone"},{"label":"name","kind":"method","documentation":"name(): String","insertText":"name"},{"label":"ordinal","kind":"method","documentation":"ordinal(): int","insertText":"ordinal"},{"label":"toString","kind":"method","documentation":"toString(): String","insertText":"toString"}]},{"label":"ChronoField","kind":"class","documentation":"Class: ChronoField","insertText":"ChronoField","properties":[{"label":"ALIGNED_DAY_OF_WEEK_IN_MONTH","kind":"property","documentation":"ALIGNED_DAY_OF_WEEK_IN_MONTH: ChronoField","insertText":"ALIGNED_DAY_OF_WEEK_IN_MONTH"},{"label":"ALIGNED_DAY_OF_WEEK_IN_YEAR","kind":"property","documentation":"ALIGNED_DAY_OF_WEEK_IN_YEAR: ChronoField","insertText":"ALIGNED_DAY_OF_WEEK_IN_YEAR"},{"label":"ALIGNED_WEEK_OF_MONTH","kind":"property","documentation":"ALIGNED_WEEK_OF_MONTH: ChronoField","insertText":"ALIGNED_WEEK_OF_MONTH"},{"label":"ALIGNED_WEEK_OF_YEAR","kind":"property","documentation":"ALIGNED_WEEK_OF_YEAR: ChronoField","insertText":"ALIGNED_WEEK_OF_YEAR"},{"label":"AMPM_OF_DAY","kind":"property","documentation":"AMPM_OF_DAY: ChronoField","insertText":"AMPM_OF_DAY"},{"label":"CLOCK_HOUR_OF_AMPM","kind":"property","documentation":"CLOCK_HOUR_OF_AMPM: ChronoField","insertText":"CLOCK_HOUR_OF_AMPM"},{"label":"CLOCK_HOUR_OF_DAY","kind":"property","documentation":"CLOCK_HOUR_OF_DAY: ChronoField","insertText":"CLOCK_HOUR_OF_DAY"},{"label":"DAY_OF_MONTH","kind":"property","documentation":"DAY_OF_MONTH: ChronoField","insertText":"DAY_OF_MONTH"},{"label":"DAY_OF_WEEK","kind":"property","documentation":"DAY_OF_WEEK: ChronoField","insertText":"DAY_OF_WEEK"},{"label":"DAY_OF_YEAR","kind":"property","documentation":"DAY_OF_YEAR: ChronoField","insertText":"DAY_OF_YEAR"},{"label":"EPOCH_DAY","kind":"property","documentation":"EPOCH_DAY: ChronoField","insertText":"EPOCH_DAY"},{"label":"ERA","kind":"property","documentation":"ERA: ChronoField","insertText":"ERA"},{"label":"HOUR_OF_AMPM","kind":"property","documentation":"HOUR_OF_AMPM: ChronoField","insertText":"HOUR_OF_AMPM"},{"label":"HOUR_OF_DAY","kind":"property","documentation":"HOUR_OF_DAY: ChronoField","insertText":"HOUR_OF_DAY"},{"label":"INSTANT_SECONDS","kind":"property","documentation":"INSTANT_SECONDS: ChronoField","insertText":"INSTANT_SECONDS"},{"label":"MICRO_OF_DAY","kind":"property","documentation":"MICRO_OF_DAY: ChronoField","insertText":"MICRO_OF_DAY"},{"label":"MICRO_OF_SECOND","kind":"property","documentation":"MICRO_OF_SECOND: ChronoField","insertText":"MICRO_OF_SECOND"},{"label":"MILLI_OF_DAY","kind":"property","documentation":"MILLI_OF_DAY: ChronoField","insertText":"MILLI_OF_DAY"},{"label":"MILLI_OF_SECOND","kind":"property","documentation":"MILLI_OF_SECOND: ChronoField","insertText":"MILLI_OF_SECOND"},{"label":"MINUTE_OF_DAY","kind":"property","documentation":"MINUTE_OF_DAY: ChronoField","insertText":"MINUTE_OF_DAY"},{"label":"MINUTE_OF_HOUR","kind":"property","documentation":"MINUTE_OF_HOUR: ChronoField","insertText":"MINUTE_OF_HOUR"},{"label":"MONTH_OF_YEAR","kind":"property","documentation":"MONTH_OF_YEAR: ChronoField","insertText":"MONTH_OF_YEAR"},{"label":"NANO_OF_DAY","kind":"property","documentation":"NANO_OF_DAY: ChronoField","insertText":"NANO_OF_DAY"},{"label":"NANO_OF_SECOND","kind":"property","documentation":"NANO_OF_SECOND: ChronoField","insertText":"NANO_OF_SECOND"},{"label":"OFFSET_SECONDS","kind":"property","documentation":"OFFSET_SECONDS: ChronoField","insertText":"OFFSET_SECONDS"},{"label":"PROLEPTIC_MONTH","kind":"property","documentation":"PROLEPTIC_MONTH: ChronoField","insertText":"PROLEPTIC_MONTH"},{"label":"SECOND_OF_DAY","kind":"property","documentation":"SECOND_OF_DAY: ChronoField","insertText":"SECOND_OF_DAY"},{"label":"SECOND_OF_MINUTE","kind":"property","documentation":"SECOND_OF_MINUTE: ChronoField","insertText":"SECOND_OF_MINUTE"},{"label":"YEAR","kind":"property","documentation":"YEAR: ChronoField","insertText":"YEAR"},{"label":"YEAR_OF_ERA","kind":"property","documentation":"YEAR_OF_ERA: ChronoField","insertText":"YEAR_OF_ERA"},{"label":"valueOf","kind":"method","documentation":"valueOf(String a): ChronoField","insertText":"valueOf"},{"label":"values","kind":"method","documentation":"values(): ChronoField[]","insertText":"values"},{"label":"adjustInto","kind":"method","documentation":"adjustInto(Temporal a, long b): Temporal","insertText":"adjustInto"},{"label":"checkValidIntValue","kind":"method","documentation":"checkValidIntValue(long a): int","insertText":"checkValidIntValue"},{"label":"checkValidValue","kind":"method","documentation":"checkValidValue(long a): long","insertText":"checkValidValue"},{"label":"compareTo","kind":"method","documentation":"compareTo(Enum a): int","insertText":"compareTo"},{"label":"equals","kind":"method","documentation":"equals(Object a): boolean","insertText":"equals"},{"label":"getBaseUnit","kind":"method","documentation":"getBaseUnit(): TemporalUnit","insertText":"getBaseUnit"},{"label":"getDisplayName","kind":"method","documentation":"getDisplayName(Locale a): String","insertText":"getDisplayName"},{"label":"getFrom","kind":"method","documentation":"getFrom(TemporalAccessor a): long","insertText":"getFrom"},{"label":"getRangeUnit","kind":"method","documentation":"getRangeUnit(): TemporalUnit","insertText":"getRangeUnit"},{"label":"hashCode","kind":"method","documentation":"hashCode(): int","insertText":"hashCode"},{"label":"isDateBased","kind":"method","documentation":"isDateBased(): boolean","insertText":"isDateBased"},{"label":"isSupportedBy","kind":"method","documentation":"isSupportedBy(TemporalAccessor a): boolean","insertText":"isSupportedBy"},{"label":"isTimeBased","kind":"method","documentation":"isTimeBased(): boolean","insertText":"isTimeBased"},{"label":"name","kind":"method","documentation":"name(): String","insertText":"name"},{"label":"ordinal","kind":"method","documentation":"ordinal(): int","insertText":"ordinal"},{"label":"range","kind":"method","documentation":"range(): ValueRange","insertText":"range"},{"label":"rangeRefinedBy","kind":"method","documentation":"rangeRefinedBy(TemporalAccessor a): ValueRange","insertText":"rangeRefinedBy"},{"label":"resolve","kind":"method","documentation":"resolve(Map a, TemporalAccessor b, ResolverStyle c): TemporalAccessor","insertText":"resolve"},{"label":"toString","kind":"method","documentation":"toString(): String","insertText":"toString"}]},{"label":"ChronoUnit","kind":"class","documentation":"Class: ChronoUnit","insertText":"ChronoUnit","properties":[{"label":"CENTURIES","kind":"property","documentation":"CENTURIES: ChronoUnit","insertText":"CENTURIES"},{"label":"DAYS","kind":"property","documentation":"DAYS: ChronoUnit","insertText":"DAYS"},{"label":"DECADES","kind":"property","documentation":"DECADES: ChronoUnit","insertText":"DECADES"},{"label":"ERAS","kind":"property","documentation":"ERAS: ChronoUnit","insertText":"ERAS"},{"label":"FOREVER","kind":"property","documentation":"FOREVER: ChronoUnit","insertText":"FOREVER"},{"label":"HALF_DAYS","kind":"property","documentation":"HALF_DAYS: ChronoUnit","insertText":"HALF_DAYS"},{"label":"HOURS","kind":"property","documentation":"HOURS: ChronoUnit","insertText":"HOURS"},{"label":"MICROS","kind":"property","documentation":"MICROS: ChronoUnit","insertText":"MICROS"},{"label":"MILLENNIA","kind":"property","documentation":"MILLENNIA: ChronoUnit","insertText":"MILLENNIA"},{"label":"MILLIS","kind":"property","documentation":"MILLIS: ChronoUnit","insertText":"MILLIS"},{"label":"MINUTES","kind":"property","documentation":"MINUTES: ChronoUnit","insertText":"MINUTES"},{"label":"MONTHS","kind":"property","documentation":"MONTHS: ChronoUnit","insertText":"MONTHS"},{"label":"NANOS","kind":"property","documentation":"NANOS: ChronoUnit","insertText":"NANOS"},{"label":"SECONDS","kind":"property","documentation":"SECONDS: ChronoUnit","insertText":"SECONDS"},{"label":"WEEKS","kind":"property","documentation":"WEEKS: ChronoUnit","insertText":"WEEKS"},{"label":"YEARS","kind":"property","documentation":"YEARS: ChronoUnit","insertText":"YEARS"},{"label":"valueOf","kind":"method","documentation":"valueOf(String a): ChronoUnit","insertText":"valueOf"},{"label":"values","kind":"method","documentation":"values(): ChronoUnit[]","insertText":"values"},{"label":"addTo","kind":"method","documentation":"addTo(Temporal a, long b): Temporal","insertText":"addTo"},{"label":"between","kind":"method","documentation":"between(Temporal a, Temporal b): long","insertText":"between"},{"label":"compareTo","kind":"method","documentation":"compareTo(Enum a): int","insertText":"compareTo"},{"label":"equals","kind":"method","documentation":"equals(Object a): boolean","insertText":"equals"},{"label":"getDuration","kind":"method","documentation":"getDuration(): Duration","insertText":"getDuration"},{"label":"hashCode","kind":"method","documentation":"hashCode(): int","insertText":"hashCode"},{"label":"isDateBased","kind":"method","documentation":"isDateBased(): boolean","insertText":"isDateBased"},{"label":"isDurationEstimated","kind":"method","documentation":"isDurationEstimated(): boolean","insertText":"isDurationEstimated"},{"label":"isSupportedBy","kind":"method","documentation":"isSupportedBy(Temporal a): boolean","insertText":"isSupportedBy"},{"label":"isTimeBased","kind":"method","documentation":"isTimeBased(): boolean","insertText":"isTimeBased"},{"label":"name","kind":"method","documentation":"name(): String","insertText":"name"},{"label":"ordinal","kind":"method","documentation":"ordinal(): int","insertText":"ordinal"},{"label":"toString","kind":"method","documentation":"toString(): String","insertText":"toString"}]},{"label":"IsoFields","kind":"class","documentation":"Class: IsoFields","insertText":"IsoFields","properties":[{"label":"DAY_OF_QUARTER","kind":"property","documentation":"DAY_OF_QUARTER: TemporalField","insertText":"DAY_OF_QUARTER"},{"label":"QUARTER_OF_YEAR","kind":"property","documentation":"QUARTER_OF_YEAR: TemporalField","insertText":"QUARTER_OF_YEAR"},{"label":"QUARTER_YEARS","kind":"property","documentation":"QUARTER_YEARS: TemporalUnit","insertText":"QUARTER_YEARS"},{"label":"WEEK_BASED_YEAR","kind":"property","documentation":"WEEK_BASED_YEAR: TemporalField","insertText":"WEEK_BASED_YEAR"},{"label":"WEEK_BASED_YEARS","kind":"property","documentation":"WEEK_BASED_YEARS: TemporalUnit","insertText":"WEEK_BASED_YEARS"},{"label":"WEEK_OF_WEEK_BASED_YEAR","kind":"property","documentation":"WEEK_OF_WEEK_BASED_YEAR: TemporalField","insertText":"WEEK_OF_WEEK_BASED_YEAR"},{"label":"equals","kind":"method","documentation":"equals(Object a): boolean","insertText":"equals"},{"label":"hashCode","kind":"method","documentation":"hashCode(): int","insertText":"hashCode"},{"label":"toString","kind":"method","documentation":"toString(): String","insertText":"toString"}]},{"label":"JulianFields","kind":"class","documentation":"Class: JulianFields","insertText":"JulianFields","properties":[{"label":"JULIAN_DAY","kind":"property","documentation":"JULIAN_DAY: TemporalField","insertText":"JULIAN_DAY"},{"label":"MODIFIED_JULIAN_DAY","kind":"property","documentation":"MODIFIED_JULIAN_DAY: TemporalField","insertText":"MODIFIED_JULIAN_DAY"},{"label":"RATA_DIE","kind":"property","documentation":"RATA_DIE: TemporalField","insertText":"RATA_DIE"},{"label":"equals","kind":"method","documentation":"equals(Object a): boolean","insertText":"equals"},{"label":"hashCode","kind":"method","documentation":"hashCode(): int","insertText":"hashCode"},{"label":"toString","kind":"method","documentation":"toString(): String","insertText":"toString"}]},{"label":"Temporal","kind":"class","documentation":"Class: Temporal","insertText":"Temporal","properties":[{"label":"equals","kind":"method","documentation":"equals(Object a): boolean","insertText":"equals"},{"label":"get","kind":"method","documentation":"get(TemporalField a): int","insertText":"get"},{"label":"getLong","kind":"method","documentation":"getLong(TemporalField a): long","insertText":"getLong"},{"label":"hashCode","kind":"method","documentation":"hashCode(): int","insertText":"hashCode"},{"label":"isSupported","kind":"method","documentation":"isSupported(TemporalField a): boolean","insertText":"isSupported"},{"label":"minus","kind":"method","documentation":"minus(long a, TemporalUnit b | TemporalAmount a): Temporal","insertText":"minus"},{"label":"plus","kind":"method","documentation":"plus(long a, TemporalUnit b | TemporalAmount a): Temporal","insertText":"plus"},{"label":"query","kind":"method","documentation":"query(TemporalQuery a): def","insertText":"query"},{"label":"range","kind":"method","documentation":"range(TemporalField a): ValueRange","insertText":"range"},{"label":"toEpochMilli","kind":"method","documentation":"toEpochMilli(): long","insertText":"toEpochMilli"},{"label":"toString","kind":"method","documentation":"toString(): String","insertText":"toString"},{"label":"until","kind":"method","documentation":"until(Temporal a, TemporalUnit b): long","insertText":"until"},{"label":"with","kind":"method","documentation":"with(TemporalField a, long b | TemporalAdjuster a): Temporal","insertText":"with"}]},{"label":"TemporalAccessor","kind":"class","documentation":"Class: TemporalAccessor","insertText":"TemporalAccessor","properties":[{"label":"equals","kind":"method","documentation":"equals(Object a): boolean","insertText":"equals"},{"label":"get","kind":"method","documentation":"get(TemporalField a): int","insertText":"get"},{"label":"getLong","kind":"method","documentation":"getLong(TemporalField a): long","insertText":"getLong"},{"label":"hashCode","kind":"method","documentation":"hashCode(): int","insertText":"hashCode"},{"label":"isSupported","kind":"method","documentation":"isSupported(TemporalField a): boolean","insertText":"isSupported"},{"label":"query","kind":"method","documentation":"query(TemporalQuery a): def","insertText":"query"},{"label":"range","kind":"method","documentation":"range(TemporalField a): ValueRange","insertText":"range"},{"label":"toEpochMilli","kind":"method","documentation":"toEpochMilli(): long","insertText":"toEpochMilli"},{"label":"toString","kind":"method","documentation":"toString(): String","insertText":"toString"}]},{"label":"TemporalAdjuster","kind":"class","documentation":"Class: TemporalAdjuster","insertText":"TemporalAdjuster","properties":[{"label":"adjustInto","kind":"method","documentation":"adjustInto(Temporal a): Temporal","insertText":"adjustInto"},{"label":"equals","kind":"method","documentation":"equals(Object a): boolean","insertText":"equals"},{"label":"hashCode","kind":"method","documentation":"hashCode(): int","insertText":"hashCode"},{"label":"toString","kind":"method","documentation":"toString(): String","insertText":"toString"}]},{"label":"TemporalAdjusters","kind":"class","documentation":"Class: TemporalAdjusters","insertText":"TemporalAdjusters","properties":[{"label":"dayOfWeekInMonth","kind":"method","documentation":"dayOfWeekInMonth(int a, DayOfWeek b): TemporalAdjuster","insertText":"dayOfWeekInMonth"},{"label":"firstDayOfMonth","kind":"method","documentation":"firstDayOfMonth(): TemporalAdjuster","insertText":"firstDayOfMonth"},{"label":"firstDayOfNextMonth","kind":"method","documentation":"firstDayOfNextMonth(): TemporalAdjuster","insertText":"firstDayOfNextMonth"},{"label":"firstDayOfNextYear","kind":"method","documentation":"firstDayOfNextYear(): TemporalAdjuster","insertText":"firstDayOfNextYear"},{"label":"firstDayOfYear","kind":"method","documentation":"firstDayOfYear(): TemporalAdjuster","insertText":"firstDayOfYear"},{"label":"firstInMonth","kind":"method","documentation":"firstInMonth(DayOfWeek a): TemporalAdjuster","insertText":"firstInMonth"},{"label":"lastDayOfMonth","kind":"method","documentation":"lastDayOfMonth(): TemporalAdjuster","insertText":"lastDayOfMonth"},{"label":"lastDayOfYear","kind":"method","documentation":"lastDayOfYear(): TemporalAdjuster","insertText":"lastDayOfYear"},{"label":"lastInMonth","kind":"method","documentation":"lastInMonth(DayOfWeek a): TemporalAdjuster","insertText":"lastInMonth"},{"label":"next","kind":"method","documentation":"next(DayOfWeek a): TemporalAdjuster","insertText":"next"},{"label":"nextOrSame","kind":"method","documentation":"nextOrSame(DayOfWeek a): TemporalAdjuster","insertText":"nextOrSame"},{"label":"ofDateAdjuster","kind":"method","documentation":"ofDateAdjuster(UnaryOperator a): TemporalAdjuster","insertText":"ofDateAdjuster"},{"label":"previous","kind":"method","documentation":"previous(DayOfWeek a): TemporalAdjuster","insertText":"previous"},{"label":"previousOrSame","kind":"method","documentation":"previousOrSame(DayOfWeek a): TemporalAdjuster","insertText":"previousOrSame"},{"label":"equals","kind":"method","documentation":"equals(Object a): boolean","insertText":"equals"},{"label":"hashCode","kind":"method","documentation":"hashCode(): int","insertText":"hashCode"},{"label":"toString","kind":"method","documentation":"toString(): String","insertText":"toString"}]},{"label":"TemporalAmount","kind":"class","documentation":"Class: TemporalAmount","insertText":"TemporalAmount","properties":[{"label":"addTo","kind":"method","documentation":"addTo(Temporal a): Temporal","insertText":"addTo"},{"label":"equals","kind":"method","documentation":"equals(Object a): boolean","insertText":"equals"},{"label":"get","kind":"method","documentation":"get(TemporalUnit a): long","insertText":"get"},{"label":"getUnits","kind":"method","documentation":"getUnits(): List","insertText":"getUnits"},{"label":"hashCode","kind":"method","documentation":"hashCode(): int","insertText":"hashCode"},{"label":"subtractFrom","kind":"method","documentation":"subtractFrom(Temporal a): Temporal","insertText":"subtractFrom"},{"label":"toString","kind":"method","documentation":"toString(): String","insertText":"toString"}]},{"label":"TemporalField","kind":"class","documentation":"Class: TemporalField","insertText":"TemporalField","properties":[{"label":"adjustInto","kind":"method","documentation":"adjustInto(Temporal a, long b): Temporal","insertText":"adjustInto"},{"label":"equals","kind":"method","documentation":"equals(Object a): boolean","insertText":"equals"},{"label":"getBaseUnit","kind":"method","documentation":"getBaseUnit(): TemporalUnit","insertText":"getBaseUnit"},{"label":"getDisplayName","kind":"method","documentation":"getDisplayName(Locale a): String","insertText":"getDisplayName"},{"label":"getFrom","kind":"method","documentation":"getFrom(TemporalAccessor a): long","insertText":"getFrom"},{"label":"getRangeUnit","kind":"method","documentation":"getRangeUnit(): TemporalUnit","insertText":"getRangeUnit"},{"label":"hashCode","kind":"method","documentation":"hashCode(): int","insertText":"hashCode"},{"label":"isDateBased","kind":"method","documentation":"isDateBased(): boolean","insertText":"isDateBased"},{"label":"isSupportedBy","kind":"method","documentation":"isSupportedBy(TemporalAccessor a): boolean","insertText":"isSupportedBy"},{"label":"isTimeBased","kind":"method","documentation":"isTimeBased(): boolean","insertText":"isTimeBased"},{"label":"range","kind":"method","documentation":"range(): ValueRange","insertText":"range"},{"label":"rangeRefinedBy","kind":"method","documentation":"rangeRefinedBy(TemporalAccessor a): ValueRange","insertText":"rangeRefinedBy"},{"label":"resolve","kind":"method","documentation":"resolve(Map a, TemporalAccessor b, ResolverStyle c): TemporalAccessor","insertText":"resolve"},{"label":"toString","kind":"method","documentation":"toString(): String","insertText":"toString"}]},{"label":"TemporalQueries","kind":"class","documentation":"Class: TemporalQueries","insertText":"TemporalQueries","properties":[{"label":"chronology","kind":"method","documentation":"chronology(): TemporalQuery","insertText":"chronology"},{"label":"localDate","kind":"method","documentation":"localDate(): TemporalQuery","insertText":"localDate"},{"label":"localTime","kind":"method","documentation":"localTime(): TemporalQuery","insertText":"localTime"},{"label":"offset","kind":"method","documentation":"offset(): TemporalQuery","insertText":"offset"},{"label":"precision","kind":"method","documentation":"precision(): TemporalQuery","insertText":"precision"},{"label":"zone","kind":"method","documentation":"zone(): TemporalQuery","insertText":"zone"},{"label":"zoneId","kind":"method","documentation":"zoneId(): TemporalQuery","insertText":"zoneId"},{"label":"equals","kind":"method","documentation":"equals(Object a): boolean","insertText":"equals"},{"label":"hashCode","kind":"method","documentation":"hashCode(): int","insertText":"hashCode"},{"label":"toString","kind":"method","documentation":"toString(): String","insertText":"toString"}]},{"label":"TemporalQuery","kind":"class","documentation":"Class: TemporalQuery","insertText":"TemporalQuery","properties":[{"label":"equals","kind":"method","documentation":"equals(Object a): boolean","insertText":"equals"},{"label":"hashCode","kind":"method","documentation":"hashCode(): int","insertText":"hashCode"},{"label":"queryFrom","kind":"method","documentation":"queryFrom(TemporalAccessor a): def","insertText":"queryFrom"},{"label":"toString","kind":"method","documentation":"toString(): String","insertText":"toString"}]},{"label":"TemporalUnit","kind":"class","documentation":"Class: TemporalUnit","insertText":"TemporalUnit","properties":[{"label":"addTo","kind":"method","documentation":"addTo(Temporal a, long b): Temporal","insertText":"addTo"},{"label":"between","kind":"method","documentation":"between(Temporal a, Temporal b): long","insertText":"between"},{"label":"equals","kind":"method","documentation":"equals(Object a): boolean","insertText":"equals"},{"label":"getDuration","kind":"method","documentation":"getDuration(): Duration","insertText":"getDuration"},{"label":"hashCode","kind":"method","documentation":"hashCode(): int","insertText":"hashCode"},{"label":"isDateBased","kind":"method","documentation":"isDateBased(): boolean","insertText":"isDateBased"},{"label":"isDurationEstimated","kind":"method","documentation":"isDurationEstimated(): boolean","insertText":"isDurationEstimated"},{"label":"isSupportedBy","kind":"method","documentation":"isSupportedBy(Temporal a): boolean","insertText":"isSupportedBy"},{"label":"isTimeBased","kind":"method","documentation":"isTimeBased(): boolean","insertText":"isTimeBased"},{"label":"toString","kind":"method","documentation":"toString(): String","insertText":"toString"}]},{"label":"UnsupportedTemporalTypeException","kind":"class","documentation":"Class: UnsupportedTemporalTypeException","insertText":"UnsupportedTemporalTypeException","properties":[{"label":"equals","kind":"method","documentation":"equals(Object a): boolean","insertText":"equals"},{"label":"getLocalizedMessage","kind":"method","documentation":"getLocalizedMessage(): String","insertText":"getLocalizedMessage"},{"label":"getMessage","kind":"method","documentation":"getMessage(): String","insertText":"getMessage"},{"label":"getStackTrace","kind":"method","documentation":"getStackTrace(): StackTraceElement[]","insertText":"getStackTrace"},{"label":"hashCode","kind":"method","documentation":"hashCode(): int","insertText":"hashCode"},{"label":"toString","kind":"method","documentation":"toString(): String","insertText":"toString"}],"constructorDefinition":{"label":"UnsupportedTemporalTypeException","kind":"constructor","documentation":"Constructor: UnsupportedTemporalTypeException","insertText":"UnsupportedTemporalTypeException"}},{"label":"ValueRange","kind":"class","documentation":"Class: ValueRange","insertText":"ValueRange","properties":[{"label":"of","kind":"method","documentation":"of(long a, long b, long c, long d | long a, long b, long c | long a, long b): ValueRange","insertText":"of"},{"label":"checkValidIntValue","kind":"method","documentation":"checkValidIntValue(long a, TemporalField b): int","insertText":"checkValidIntValue"},{"label":"checkValidValue","kind":"method","documentation":"checkValidValue(long a, TemporalField b): long","insertText":"checkValidValue"},{"label":"equals","kind":"method","documentation":"equals(Object a): boolean","insertText":"equals"},{"label":"getLargestMinimum","kind":"method","documentation":"getLargestMinimum(): long","insertText":"getLargestMinimum"},{"label":"getMaximum","kind":"method","documentation":"getMaximum(): long","insertText":"getMaximum"},{"label":"getMinimum","kind":"method","documentation":"getMinimum(): long","insertText":"getMinimum"},{"label":"getSmallestMaximum","kind":"method","documentation":"getSmallestMaximum(): long","insertText":"getSmallestMaximum"},{"label":"hashCode","kind":"method","documentation":"hashCode(): int","insertText":"hashCode"},{"label":"isFixed","kind":"method","documentation":"isFixed(): boolean","insertText":"isFixed"},{"label":"isIntValue","kind":"method","documentation":"isIntValue(): boolean","insertText":"isIntValue"},{"label":"isValidIntValue","kind":"method","documentation":"isValidIntValue(long a): boolean","insertText":"isValidIntValue"},{"label":"isValidValue","kind":"method","documentation":"isValidValue(long a): boolean","insertText":"isValidValue"},{"label":"toString","kind":"method","documentation":"toString(): String","insertText":"toString"}]},{"label":"WeekFields","kind":"class","documentation":"Class: WeekFields","insertText":"WeekFields","properties":[{"label":"ISO","kind":"property","documentation":"ISO: WeekFields","insertText":"ISO"},{"label":"SUNDAY_START","kind":"property","documentation":"SUNDAY_START: WeekFields","insertText":"SUNDAY_START"},{"label":"WEEK_BASED_YEARS","kind":"property","documentation":"WEEK_BASED_YEARS: TemporalUnit","insertText":"WEEK_BASED_YEARS"},{"label":"of","kind":"method","documentation":"of(DayOfWeek a, int b | Locale a): WeekFields","insertText":"of"},{"label":"dayOfWeek","kind":"method","documentation":"dayOfWeek(): TemporalField","insertText":"dayOfWeek"},{"label":"equals","kind":"method","documentation":"equals(Object a): boolean","insertText":"equals"},{"label":"getFirstDayOfWeek","kind":"method","documentation":"getFirstDayOfWeek(): DayOfWeek","insertText":"getFirstDayOfWeek"},{"label":"getMinimalDaysInFirstWeek","kind":"method","documentation":"getMinimalDaysInFirstWeek(): int","insertText":"getMinimalDaysInFirstWeek"},{"label":"hashCode","kind":"method","documentation":"hashCode(): int","insertText":"hashCode"},{"label":"toString","kind":"method","documentation":"toString(): String","insertText":"toString"},{"label":"weekBasedYear","kind":"method","documentation":"weekBasedYear(): TemporalField","insertText":"weekBasedYear"},{"label":"weekOfMonth","kind":"method","documentation":"weekOfMonth(): TemporalField","insertText":"weekOfMonth"},{"label":"weekOfWeekBasedYear","kind":"method","documentation":"weekOfWeekBasedYear(): TemporalField","insertText":"weekOfWeekBasedYear"},{"label":"weekOfYear","kind":"method","documentation":"weekOfYear(): TemporalField","insertText":"weekOfYear"}]},{"label":"ZoneOffsetTransition","kind":"class","documentation":"Class: ZoneOffsetTransition","insertText":"ZoneOffsetTransition","properties":[{"label":"of","kind":"method","documentation":"of(LocalDateTime a, ZoneOffset b, ZoneOffset c): ZoneOffsetTransition","insertText":"of"},{"label":"compareTo","kind":"method","documentation":"compareTo(ZoneOffsetTransition a): int","insertText":"compareTo"},{"label":"equals","kind":"method","documentation":"equals(Object a): boolean","insertText":"equals"},{"label":"getDateTimeAfter","kind":"method","documentation":"getDateTimeAfter(): LocalDateTime","insertText":"getDateTimeAfter"},{"label":"getDateTimeBefore","kind":"method","documentation":"getDateTimeBefore(): LocalDateTime","insertText":"getDateTimeBefore"},{"label":"getDuration","kind":"method","documentation":"getDuration(): Duration","insertText":"getDuration"},{"label":"getInstant","kind":"method","documentation":"getInstant(): Instant","insertText":"getInstant"},{"label":"getOffsetAfter","kind":"method","documentation":"getOffsetAfter(): ZoneOffset","insertText":"getOffsetAfter"},{"label":"getOffsetBefore","kind":"method","documentation":"getOffsetBefore(): ZoneOffset","insertText":"getOffsetBefore"},{"label":"hashCode","kind":"method","documentation":"hashCode(): int","insertText":"hashCode"},{"label":"isGap","kind":"method","documentation":"isGap(): boolean","insertText":"isGap"},{"label":"isOverlap","kind":"method","documentation":"isOverlap(): boolean","insertText":"isOverlap"},{"label":"isValidOffset","kind":"method","documentation":"isValidOffset(ZoneOffset a): boolean","insertText":"isValidOffset"},{"label":"toEpochSecond","kind":"method","documentation":"toEpochSecond(): long","insertText":"toEpochSecond"},{"label":"toString","kind":"method","documentation":"toString(): String","insertText":"toString"}]},{"label":"ZoneOffsetTransitionRule","kind":"class","documentation":"Class: ZoneOffsetTransitionRule","insertText":"ZoneOffsetTransitionRule","properties":[{"label":"of","kind":"method","documentation":"of(Month a, int b, DayOfWeek c, LocalTime d, boolean e, ZoneOffsetTransitionRule.TimeDefinition f, ZoneOffset undefined, ZoneOffset undefined, ZoneOffset undefined): ZoneOffsetTransitionRule","insertText":"of"},{"label":"createTransition","kind":"method","documentation":"createTransition(int a): ZoneOffsetTransition","insertText":"createTransition"},{"label":"equals","kind":"method","documentation":"equals(Object a): boolean","insertText":"equals"},{"label":"getDayOfMonthIndicator","kind":"method","documentation":"getDayOfMonthIndicator(): int","insertText":"getDayOfMonthIndicator"},{"label":"getDayOfWeek","kind":"method","documentation":"getDayOfWeek(): DayOfWeek","insertText":"getDayOfWeek"},{"label":"getLocalTime","kind":"method","documentation":"getLocalTime(): LocalTime","insertText":"getLocalTime"},{"label":"getMonth","kind":"method","documentation":"getMonth(): Month","insertText":"getMonth"},{"label":"getOffsetAfter","kind":"method","documentation":"getOffsetAfter(): ZoneOffset","insertText":"getOffsetAfter"},{"label":"getOffsetBefore","kind":"method","documentation":"getOffsetBefore(): ZoneOffset","insertText":"getOffsetBefore"},{"label":"getStandardOffset","kind":"method","documentation":"getStandardOffset(): ZoneOffset","insertText":"getStandardOffset"},{"label":"getTimeDefinition","kind":"method","documentation":"getTimeDefinition(): ZoneOffsetTransitionRule.TimeDefinition","insertText":"getTimeDefinition"},{"label":"hashCode","kind":"method","documentation":"hashCode(): int","insertText":"hashCode"},{"label":"isMidnightEndOfDay","kind":"method","documentation":"isMidnightEndOfDay(): boolean","insertText":"isMidnightEndOfDay"},{"label":"toString","kind":"method","documentation":"toString(): String","insertText":"toString"}]},{"label":"TimeDefinition","kind":"class","documentation":"Class: TimeDefinition","insertText":"TimeDefinition","properties":[{"label":"STANDARD","kind":"property","documentation":"STANDARD: ZoneOffsetTransitionRule.TimeDefinition","insertText":"STANDARD"},{"label":"UTC","kind":"property","documentation":"UTC: ZoneOffsetTransitionRule.TimeDefinition","insertText":"UTC"},{"label":"WALL","kind":"property","documentation":"WALL: ZoneOffsetTransitionRule.TimeDefinition","insertText":"WALL"},{"label":"valueOf","kind":"method","documentation":"valueOf(String a): ZoneOffsetTransitionRule.TimeDefinition","insertText":"valueOf"},{"label":"values","kind":"method","documentation":"values(): ZoneOffsetTransitionRule.TimeDefinition[]","insertText":"values"},{"label":"compareTo","kind":"method","documentation":"compareTo(Enum a): int","insertText":"compareTo"},{"label":"createDateTime","kind":"method","documentation":"createDateTime(LocalDateTime a, ZoneOffset b, ZoneOffset c): LocalDateTime","insertText":"createDateTime"},{"label":"equals","kind":"method","documentation":"equals(Object a): boolean","insertText":"equals"},{"label":"hashCode","kind":"method","documentation":"hashCode(): int","insertText":"hashCode"},{"label":"name","kind":"method","documentation":"name(): String","insertText":"name"},{"label":"ordinal","kind":"method","documentation":"ordinal(): int","insertText":"ordinal"},{"label":"toString","kind":"method","documentation":"toString(): String","insertText":"toString"}]},{"label":"ZoneRules","kind":"class","documentation":"Class: ZoneRules","insertText":"ZoneRules","properties":[{"label":"of","kind":"method","documentation":"of(ZoneOffset a, ZoneOffset b, List c, List d, List e | ZoneOffset a): ZoneRules","insertText":"of"},{"label":"equals","kind":"method","documentation":"equals(Object a): boolean","insertText":"equals"},{"label":"getDaylightSavings","kind":"method","documentation":"getDaylightSavings(Instant a): Duration","insertText":"getDaylightSavings"},{"label":"getOffset","kind":"method","documentation":"getOffset(Instant a): ZoneOffset","insertText":"getOffset"},{"label":"getStandardOffset","kind":"method","documentation":"getStandardOffset(Instant a): ZoneOffset","insertText":"getStandardOffset"},{"label":"getTransition","kind":"method","documentation":"getTransition(LocalDateTime a): ZoneOffsetTransition","insertText":"getTransition"},{"label":"getTransitionRules","kind":"method","documentation":"getTransitionRules(): List","insertText":"getTransitionRules"},{"label":"getTransitions","kind":"method","documentation":"getTransitions(): List","insertText":"getTransitions"},{"label":"getValidOffsets","kind":"method","documentation":"getValidOffsets(LocalDateTime a): List","insertText":"getValidOffsets"},{"label":"hashCode","kind":"method","documentation":"hashCode(): int","insertText":"hashCode"},{"label":"isDaylightSavings","kind":"method","documentation":"isDaylightSavings(Instant a): boolean","insertText":"isDaylightSavings"},{"label":"isFixedOffset","kind":"method","documentation":"isFixedOffset(): boolean","insertText":"isFixedOffset"},{"label":"isValidOffset","kind":"method","documentation":"isValidOffset(LocalDateTime a, ZoneOffset b): boolean","insertText":"isValidOffset"},{"label":"nextTransition","kind":"method","documentation":"nextTransition(Instant a): ZoneOffsetTransition","insertText":"nextTransition"},{"label":"previousTransition","kind":"method","documentation":"previousTransition(Instant a): ZoneOffsetTransition","insertText":"previousTransition"},{"label":"toString","kind":"method","documentation":"toString(): String","insertText":"toString"}]},{"label":"ZoneRulesException","kind":"class","documentation":"Class: ZoneRulesException","insertText":"ZoneRulesException","properties":[{"label":"equals","kind":"method","documentation":"equals(Object a): boolean","insertText":"equals"},{"label":"getLocalizedMessage","kind":"method","documentation":"getLocalizedMessage(): String","insertText":"getLocalizedMessage"},{"label":"getMessage","kind":"method","documentation":"getMessage(): String","insertText":"getMessage"},{"label":"getStackTrace","kind":"method","documentation":"getStackTrace(): StackTraceElement[]","insertText":"getStackTrace"},{"label":"hashCode","kind":"method","documentation":"hashCode(): int","insertText":"hashCode"},{"label":"toString","kind":"method","documentation":"toString(): String","insertText":"toString"}],"constructorDefinition":{"label":"ZoneRulesException","kind":"constructor","documentation":"Constructor: ZoneRulesException","insertText":"ZoneRulesException"}},{"label":"ZoneRulesProvider","kind":"class","documentation":"Class: ZoneRulesProvider","insertText":"ZoneRulesProvider","properties":[{"label":"getAvailableZoneIds","kind":"method","documentation":"getAvailableZoneIds(): Set","insertText":"getAvailableZoneIds"},{"label":"getRules","kind":"method","documentation":"getRules(String a, boolean b): ZoneRules","insertText":"getRules"},{"label":"getVersions","kind":"method","documentation":"getVersions(String a): NavigableMap","insertText":"getVersions"},{"label":"equals","kind":"method","documentation":"equals(Object a): boolean","insertText":"equals"},{"label":"hashCode","kind":"method","documentation":"hashCode(): int","insertText":"hashCode"},{"label":"toString","kind":"method","documentation":"toString(): String","insertText":"toString"}]},{"label":"AbstractCollection","kind":"class","documentation":"Class: AbstractCollection","insertText":"AbstractCollection","properties":[{"label":"add","kind":"method","documentation":"add(def a): boolean","insertText":"add"},{"label":"addAll","kind":"method","documentation":"addAll(Collection a): boolean","insertText":"addAll"},{"label":"any","kind":"method","documentation":"any(Predicate a): boolean","insertText":"any"},{"label":"asCollection","kind":"method","documentation":"asCollection(): Collection","insertText":"asCollection"},{"label":"asList","kind":"method","documentation":"asList(): List","insertText":"asList"},{"label":"clear","kind":"method","documentation":"clear(): void","insertText":"clear"},{"label":"collect","kind":"method","documentation":"collect(Collection a, Function b | Function a): def | List","insertText":"collect"},{"label":"contains","kind":"method","documentation":"contains(def a): boolean","insertText":"contains"},{"label":"containsAll","kind":"method","documentation":"containsAll(Collection a): boolean","insertText":"containsAll"},{"label":"each","kind":"method","documentation":"each(Consumer a): def","insertText":"each"},{"label":"eachWithIndex","kind":"method","documentation":"eachWithIndex(ObjIntConsumer a): def","insertText":"eachWithIndex"},{"label":"equals","kind":"method","documentation":"equals(Object a): boolean","insertText":"equals"},{"label":"every","kind":"method","documentation":"every(Predicate a): boolean","insertText":"every"},{"label":"find","kind":"method","documentation":"find(Predicate a): def","insertText":"find"},{"label":"findAll","kind":"method","documentation":"findAll(Predicate a): List","insertText":"findAll"},{"label":"findResult","kind":"method","documentation":"findResult(def a, Function b | Function a): def","insertText":"findResult"},{"label":"findResults","kind":"method","documentation":"findResults(Function a): List","insertText":"findResults"},{"label":"forEach","kind":"method","documentation":"forEach(Consumer a): void","insertText":"forEach"},{"label":"groupBy","kind":"method","documentation":"groupBy(Function a): Map","insertText":"groupBy"},{"label":"hashCode","kind":"method","documentation":"hashCode(): int","insertText":"hashCode"},{"label":"isEmpty","kind":"method","documentation":"isEmpty(): boolean","insertText":"isEmpty"},{"label":"iterator","kind":"method","documentation":"iterator(): Iterator","insertText":"iterator"},{"label":"join","kind":"method","documentation":"join(String a): String","insertText":"join"},{"label":"removeAll","kind":"method","documentation":"removeAll(Collection a): boolean","insertText":"removeAll"},{"label":"removeIf","kind":"method","documentation":"removeIf(Predicate a): boolean","insertText":"removeIf"},{"label":"retainAll","kind":"method","documentation":"retainAll(Collection a): boolean","insertText":"retainAll"},{"label":"size","kind":"method","documentation":"size(): int","insertText":"size"},{"label":"split","kind":"method","documentation":"split(Predicate a): List","insertText":"split"},{"label":"spliterator","kind":"method","documentation":"spliterator(): Spliterator","insertText":"spliterator"},{"label":"stream","kind":"method","documentation":"stream(): Stream","insertText":"stream"},{"label":"sum","kind":"method","documentation":"sum(ToDoubleFunction a): double","insertText":"sum"},{"label":"toArray","kind":"method","documentation":"toArray(def[] a): def[]","insertText":"toArray"},{"label":"toString","kind":"method","documentation":"toString(): String","insertText":"toString"}]},{"label":"AbstractList","kind":"class","documentation":"Class: AbstractList","insertText":"AbstractList","properties":[{"label":"add","kind":"method","documentation":"add(int a, def b | def a): void | boolean","insertText":"add"},{"label":"addAll","kind":"method","documentation":"addAll(int a, Collection b | Collection a): boolean","insertText":"addAll"},{"label":"any","kind":"method","documentation":"any(Predicate a): boolean","insertText":"any"},{"label":"asCollection","kind":"method","documentation":"asCollection(): Collection","insertText":"asCollection"},{"label":"asList","kind":"method","documentation":"asList(): List","insertText":"asList"},{"label":"clear","kind":"method","documentation":"clear(): void","insertText":"clear"},{"label":"collect","kind":"method","documentation":"collect(Collection a, Function b | Function a): def | List","insertText":"collect"},{"label":"contains","kind":"method","documentation":"contains(def a): boolean","insertText":"contains"},{"label":"containsAll","kind":"method","documentation":"containsAll(Collection a): boolean","insertText":"containsAll"},{"label":"each","kind":"method","documentation":"each(Consumer a): def","insertText":"each"},{"label":"eachWithIndex","kind":"method","documentation":"eachWithIndex(ObjIntConsumer a): def","insertText":"eachWithIndex"},{"label":"equals","kind":"method","documentation":"equals(Object a): boolean","insertText":"equals"},{"label":"every","kind":"method","documentation":"every(Predicate a): boolean","insertText":"every"},{"label":"find","kind":"method","documentation":"find(Predicate a): def","insertText":"find"},{"label":"findAll","kind":"method","documentation":"findAll(Predicate a): List","insertText":"findAll"},{"label":"findResult","kind":"method","documentation":"findResult(def a, Function b | Function a): def","insertText":"findResult"},{"label":"findResults","kind":"method","documentation":"findResults(Function a): List","insertText":"findResults"},{"label":"forEach","kind":"method","documentation":"forEach(Consumer a): void","insertText":"forEach"},{"label":"get","kind":"method","documentation":"get(int a): def","insertText":"get"},{"label":"getByPath","kind":"method","documentation":"getByPath(String a, Object b | String a): Object","insertText":"getByPath"},{"label":"getLength","kind":"method","documentation":"getLength(): int","insertText":"getLength"},{"label":"groupBy","kind":"method","documentation":"groupBy(Function a): Map","insertText":"groupBy"},{"label":"hashCode","kind":"method","documentation":"hashCode(): int","insertText":"hashCode"},{"label":"indexOf","kind":"method","documentation":"indexOf(def a): int","insertText":"indexOf"},{"label":"isEmpty","kind":"method","documentation":"isEmpty(): boolean","insertText":"isEmpty"},{"label":"iterator","kind":"method","documentation":"iterator(): Iterator","insertText":"iterator"},{"label":"join","kind":"method","documentation":"join(String a): String","insertText":"join"},{"label":"lastIndexOf","kind":"method","documentation":"lastIndexOf(def a): int","insertText":"lastIndexOf"},{"label":"listIterator","kind":"method","documentation":"listIterator(int a): ListIterator","insertText":"listIterator"},{"label":"remove","kind":"method","documentation":"remove(int a): def","insertText":"remove"},{"label":"removeAll","kind":"method","documentation":"removeAll(Collection a): boolean","insertText":"removeAll"},{"label":"removeIf","kind":"method","documentation":"removeIf(Predicate a): boolean","insertText":"removeIf"},{"label":"replaceAll","kind":"method","documentation":"replaceAll(UnaryOperator a): void","insertText":"replaceAll"},{"label":"retainAll","kind":"method","documentation":"retainAll(Collection a): boolean","insertText":"retainAll"},{"label":"set","kind":"method","documentation":"set(int a, def b): def","insertText":"set"},{"label":"size","kind":"method","documentation":"size(): int","insertText":"size"},{"label":"sort","kind":"method","documentation":"sort(Comparator a): void","insertText":"sort"},{"label":"split","kind":"method","documentation":"split(Predicate a): List","insertText":"split"},{"label":"spliterator","kind":"method","documentation":"spliterator(): Spliterator","insertText":"spliterator"},{"label":"stream","kind":"method","documentation":"stream(): Stream","insertText":"stream"},{"label":"subList","kind":"method","documentation":"subList(int a, int b): List","insertText":"subList"},{"label":"sum","kind":"method","documentation":"sum(ToDoubleFunction a): double","insertText":"sum"},{"label":"toArray","kind":"method","documentation":"toArray(def[] a): def[]","insertText":"toArray"},{"label":"toString","kind":"method","documentation":"toString(): String","insertText":"toString"}]},{"label":"AbstractMap","kind":"class","documentation":"Class: AbstractMap","insertText":"AbstractMap","properties":[{"label":"clear","kind":"method","documentation":"clear(): void","insertText":"clear"},{"label":"collect","kind":"method","documentation":"collect(Collection a, BiFunction b | BiFunction a): def | List","insertText":"collect"},{"label":"compute","kind":"method","documentation":"compute(def a, BiFunction b): def","insertText":"compute"},{"label":"computeIfAbsent","kind":"method","documentation":"computeIfAbsent(def a, Function b): def","insertText":"computeIfAbsent"},{"label":"computeIfPresent","kind":"method","documentation":"computeIfPresent(def a, BiFunction b): def","insertText":"computeIfPresent"},{"label":"containsKey","kind":"method","documentation":"containsKey(def a): boolean","insertText":"containsKey"},{"label":"containsValue","kind":"method","documentation":"containsValue(def a): boolean","insertText":"containsValue"},{"label":"count","kind":"method","documentation":"count(BiPredicate a): int","insertText":"count"},{"label":"each","kind":"method","documentation":"each(BiConsumer a): def","insertText":"each"},{"label":"entrySet","kind":"method","documentation":"entrySet(): Set","insertText":"entrySet"},{"label":"equals","kind":"method","documentation":"equals(Object a): boolean","insertText":"equals"},{"label":"every","kind":"method","documentation":"every(BiPredicate a): boolean","insertText":"every"},{"label":"find","kind":"method","documentation":"find(BiPredicate a): Map.Entry","insertText":"find"},{"label":"findAll","kind":"method","documentation":"findAll(BiPredicate a): Map","insertText":"findAll"},{"label":"findResult","kind":"method","documentation":"findResult(def a, BiFunction b | BiFunction a): def","insertText":"findResult"},{"label":"findResults","kind":"method","documentation":"findResults(BiFunction a): List","insertText":"findResults"},{"label":"forEach","kind":"method","documentation":"forEach(BiConsumer a): void","insertText":"forEach"},{"label":"get","kind":"method","documentation":"get(def a): def","insertText":"get"},{"label":"getByPath","kind":"method","documentation":"getByPath(String a, Object b | String a): Object","insertText":"getByPath"},{"label":"getOrDefault","kind":"method","documentation":"getOrDefault(def a, def b): def","insertText":"getOrDefault"},{"label":"groupBy","kind":"method","documentation":"groupBy(BiFunction a): Map","insertText":"groupBy"},{"label":"hashCode","kind":"method","documentation":"hashCode(): int","insertText":"hashCode"},{"label":"isEmpty","kind":"method","documentation":"isEmpty(): boolean","insertText":"isEmpty"},{"label":"keySet","kind":"method","documentation":"keySet(): Set","insertText":"keySet"},{"label":"merge","kind":"method","documentation":"merge(def a, def b, BiFunction c): def","insertText":"merge"},{"label":"put","kind":"method","documentation":"put(def a, def b): def","insertText":"put"},{"label":"putAll","kind":"method","documentation":"putAll(Map a): void","insertText":"putAll"},{"label":"putIfAbsent","kind":"method","documentation":"putIfAbsent(def a, def b): def","insertText":"putIfAbsent"},{"label":"remove","kind":"method","documentation":"remove(def a, def b | def a): boolean | def","insertText":"remove"},{"label":"replace","kind":"method","documentation":"replace(def a, def b, def c | def a, def b): boolean | def","insertText":"replace"},{"label":"replaceAll","kind":"method","documentation":"replaceAll(BiFunction a): void","insertText":"replaceAll"},{"label":"size","kind":"method","documentation":"size(): int","insertText":"size"},{"label":"toString","kind":"method","documentation":"toString(): String","insertText":"toString"},{"label":"values","kind":"method","documentation":"values(): Collection","insertText":"values"}]},{"label":"SimpleEntry","kind":"class","documentation":"Class: SimpleEntry","insertText":"SimpleEntry","properties":[{"label":"equals","kind":"method","documentation":"equals(Object a): boolean","insertText":"equals"},{"label":"getKey","kind":"method","documentation":"getKey(): def","insertText":"getKey"},{"label":"getValue","kind":"method","documentation":"getValue(): def","insertText":"getValue"},{"label":"hashCode","kind":"method","documentation":"hashCode(): int","insertText":"hashCode"},{"label":"setValue","kind":"method","documentation":"setValue(def a): def","insertText":"setValue"},{"label":"toString","kind":"method","documentation":"toString(): String","insertText":"toString"}],"constructorDefinition":{"label":"SimpleEntry","kind":"constructor","documentation":"Constructor: SimpleEntry","insertText":"SimpleEntry"}},{"label":"SimpleImmutableEntry","kind":"class","documentation":"Class: SimpleImmutableEntry","insertText":"SimpleImmutableEntry","properties":[{"label":"equals","kind":"method","documentation":"equals(Object a): boolean","insertText":"equals"},{"label":"getKey","kind":"method","documentation":"getKey(): def","insertText":"getKey"},{"label":"getValue","kind":"method","documentation":"getValue(): def","insertText":"getValue"},{"label":"hashCode","kind":"method","documentation":"hashCode(): int","insertText":"hashCode"},{"label":"setValue","kind":"method","documentation":"setValue(def a): def","insertText":"setValue"},{"label":"toString","kind":"method","documentation":"toString(): String","insertText":"toString"}],"constructorDefinition":{"label":"SimpleImmutableEntry","kind":"constructor","documentation":"Constructor: SimpleImmutableEntry","insertText":"SimpleImmutableEntry"}},{"label":"AbstractQueue","kind":"class","documentation":"Class: AbstractQueue","insertText":"AbstractQueue","properties":[{"label":"add","kind":"method","documentation":"add(def a): boolean","insertText":"add"},{"label":"addAll","kind":"method","documentation":"addAll(Collection a): boolean","insertText":"addAll"},{"label":"any","kind":"method","documentation":"any(Predicate a): boolean","insertText":"any"},{"label":"asCollection","kind":"method","documentation":"asCollection(): Collection","insertText":"asCollection"},{"label":"asList","kind":"method","documentation":"asList(): List","insertText":"asList"},{"label":"clear","kind":"method","documentation":"clear(): void","insertText":"clear"},{"label":"collect","kind":"method","documentation":"collect(Collection a, Function b | Function a): def | List","insertText":"collect"},{"label":"contains","kind":"method","documentation":"contains(def a): boolean","insertText":"contains"},{"label":"containsAll","kind":"method","documentation":"containsAll(Collection a): boolean","insertText":"containsAll"},{"label":"each","kind":"method","documentation":"each(Consumer a): def","insertText":"each"},{"label":"eachWithIndex","kind":"method","documentation":"eachWithIndex(ObjIntConsumer a): def","insertText":"eachWithIndex"},{"label":"element","kind":"method","documentation":"element(): def","insertText":"element"},{"label":"equals","kind":"method","documentation":"equals(Object a): boolean","insertText":"equals"},{"label":"every","kind":"method","documentation":"every(Predicate a): boolean","insertText":"every"},{"label":"find","kind":"method","documentation":"find(Predicate a): def","insertText":"find"},{"label":"findAll","kind":"method","documentation":"findAll(Predicate a): List","insertText":"findAll"},{"label":"findResult","kind":"method","documentation":"findResult(def a, Function b | Function a): def","insertText":"findResult"},{"label":"findResults","kind":"method","documentation":"findResults(Function a): List","insertText":"findResults"},{"label":"forEach","kind":"method","documentation":"forEach(Consumer a): void","insertText":"forEach"},{"label":"groupBy","kind":"method","documentation":"groupBy(Function a): Map","insertText":"groupBy"},{"label":"hashCode","kind":"method","documentation":"hashCode(): int","insertText":"hashCode"},{"label":"isEmpty","kind":"method","documentation":"isEmpty(): boolean","insertText":"isEmpty"},{"label":"iterator","kind":"method","documentation":"iterator(): Iterator","insertText":"iterator"},{"label":"join","kind":"method","documentation":"join(String a): String","insertText":"join"},{"label":"offer","kind":"method","documentation":"offer(def a): boolean","insertText":"offer"},{"label":"peek","kind":"method","documentation":"peek(): def","insertText":"peek"},{"label":"poll","kind":"method","documentation":"poll(): def","insertText":"poll"},{"label":"remove","kind":"method","documentation":"remove(): def","insertText":"remove"},{"label":"removeAll","kind":"method","documentation":"removeAll(Collection a): boolean","insertText":"removeAll"},{"label":"removeIf","kind":"method","documentation":"removeIf(Predicate a): boolean","insertText":"removeIf"},{"label":"retainAll","kind":"method","documentation":"retainAll(Collection a): boolean","insertText":"retainAll"},{"label":"size","kind":"method","documentation":"size(): int","insertText":"size"},{"label":"split","kind":"method","documentation":"split(Predicate a): List","insertText":"split"},{"label":"spliterator","kind":"method","documentation":"spliterator(): Spliterator","insertText":"spliterator"},{"label":"stream","kind":"method","documentation":"stream(): Stream","insertText":"stream"},{"label":"sum","kind":"method","documentation":"sum(ToDoubleFunction a): double","insertText":"sum"},{"label":"toArray","kind":"method","documentation":"toArray(def[] a): def[]","insertText":"toArray"},{"label":"toString","kind":"method","documentation":"toString(): String","insertText":"toString"}]},{"label":"AbstractSequentialList","kind":"class","documentation":"Class: AbstractSequentialList","insertText":"AbstractSequentialList","properties":[{"label":"add","kind":"method","documentation":"add(int a, def b | def a): void | boolean","insertText":"add"},{"label":"addAll","kind":"method","documentation":"addAll(int a, Collection b | Collection a): boolean","insertText":"addAll"},{"label":"any","kind":"method","documentation":"any(Predicate a): boolean","insertText":"any"},{"label":"asCollection","kind":"method","documentation":"asCollection(): Collection","insertText":"asCollection"},{"label":"asList","kind":"method","documentation":"asList(): List","insertText":"asList"},{"label":"clear","kind":"method","documentation":"clear(): void","insertText":"clear"},{"label":"collect","kind":"method","documentation":"collect(Collection a, Function b | Function a): def | List","insertText":"collect"},{"label":"contains","kind":"method","documentation":"contains(def a): boolean","insertText":"contains"},{"label":"containsAll","kind":"method","documentation":"containsAll(Collection a): boolean","insertText":"containsAll"},{"label":"each","kind":"method","documentation":"each(Consumer a): def","insertText":"each"},{"label":"eachWithIndex","kind":"method","documentation":"eachWithIndex(ObjIntConsumer a): def","insertText":"eachWithIndex"},{"label":"equals","kind":"method","documentation":"equals(Object a): boolean","insertText":"equals"},{"label":"every","kind":"method","documentation":"every(Predicate a): boolean","insertText":"every"},{"label":"find","kind":"method","documentation":"find(Predicate a): def","insertText":"find"},{"label":"findAll","kind":"method","documentation":"findAll(Predicate a): List","insertText":"findAll"},{"label":"findResult","kind":"method","documentation":"findResult(def a, Function b | Function a): def","insertText":"findResult"},{"label":"findResults","kind":"method","documentation":"findResults(Function a): List","insertText":"findResults"},{"label":"forEach","kind":"method","documentation":"forEach(Consumer a): void","insertText":"forEach"},{"label":"get","kind":"method","documentation":"get(int a): def","insertText":"get"},{"label":"getByPath","kind":"method","documentation":"getByPath(String a, Object b | String a): Object","insertText":"getByPath"},{"label":"getLength","kind":"method","documentation":"getLength(): int","insertText":"getLength"},{"label":"groupBy","kind":"method","documentation":"groupBy(Function a): Map","insertText":"groupBy"},{"label":"hashCode","kind":"method","documentation":"hashCode(): int","insertText":"hashCode"},{"label":"indexOf","kind":"method","documentation":"indexOf(def a): int","insertText":"indexOf"},{"label":"isEmpty","kind":"method","documentation":"isEmpty(): boolean","insertText":"isEmpty"},{"label":"iterator","kind":"method","documentation":"iterator(): Iterator","insertText":"iterator"},{"label":"join","kind":"method","documentation":"join(String a): String","insertText":"join"},{"label":"lastIndexOf","kind":"method","documentation":"lastIndexOf(def a): int","insertText":"lastIndexOf"},{"label":"listIterator","kind":"method","documentation":"listIterator(int a): ListIterator","insertText":"listIterator"},{"label":"remove","kind":"method","documentation":"remove(int a): def","insertText":"remove"},{"label":"removeAll","kind":"method","documentation":"removeAll(Collection a): boolean","insertText":"removeAll"},{"label":"removeIf","kind":"method","documentation":"removeIf(Predicate a): boolean","insertText":"removeIf"},{"label":"replaceAll","kind":"method","documentation":"replaceAll(UnaryOperator a): void","insertText":"replaceAll"},{"label":"retainAll","kind":"method","documentation":"retainAll(Collection a): boolean","insertText":"retainAll"},{"label":"set","kind":"method","documentation":"set(int a, def b): def","insertText":"set"},{"label":"size","kind":"method","documentation":"size(): int","insertText":"size"},{"label":"sort","kind":"method","documentation":"sort(Comparator a): void","insertText":"sort"},{"label":"split","kind":"method","documentation":"split(Predicate a): List","insertText":"split"},{"label":"spliterator","kind":"method","documentation":"spliterator(): Spliterator","insertText":"spliterator"},{"label":"stream","kind":"method","documentation":"stream(): Stream","insertText":"stream"},{"label":"subList","kind":"method","documentation":"subList(int a, int b): List","insertText":"subList"},{"label":"sum","kind":"method","documentation":"sum(ToDoubleFunction a): double","insertText":"sum"},{"label":"toArray","kind":"method","documentation":"toArray(def[] a): def[]","insertText":"toArray"},{"label":"toString","kind":"method","documentation":"toString(): String","insertText":"toString"}]},{"label":"AbstractSet","kind":"class","documentation":"Class: AbstractSet","insertText":"AbstractSet","properties":[{"label":"add","kind":"method","documentation":"add(def a): boolean","insertText":"add"},{"label":"addAll","kind":"method","documentation":"addAll(Collection a): boolean","insertText":"addAll"},{"label":"any","kind":"method","documentation":"any(Predicate a): boolean","insertText":"any"},{"label":"asCollection","kind":"method","documentation":"asCollection(): Collection","insertText":"asCollection"},{"label":"asList","kind":"method","documentation":"asList(): List","insertText":"asList"},{"label":"clear","kind":"method","documentation":"clear(): void","insertText":"clear"},{"label":"collect","kind":"method","documentation":"collect(Collection a, Function b | Function a): def | List","insertText":"collect"},{"label":"contains","kind":"method","documentation":"contains(def a): boolean","insertText":"contains"},{"label":"containsAll","kind":"method","documentation":"containsAll(Collection a): boolean","insertText":"containsAll"},{"label":"each","kind":"method","documentation":"each(Consumer a): def","insertText":"each"},{"label":"eachWithIndex","kind":"method","documentation":"eachWithIndex(ObjIntConsumer a): def","insertText":"eachWithIndex"},{"label":"equals","kind":"method","documentation":"equals(Object a): boolean","insertText":"equals"},{"label":"every","kind":"method","documentation":"every(Predicate a): boolean","insertText":"every"},{"label":"find","kind":"method","documentation":"find(Predicate a): def","insertText":"find"},{"label":"findAll","kind":"method","documentation":"findAll(Predicate a): List","insertText":"findAll"},{"label":"findResult","kind":"method","documentation":"findResult(def a, Function b | Function a): def","insertText":"findResult"},{"label":"findResults","kind":"method","documentation":"findResults(Function a): List","insertText":"findResults"},{"label":"forEach","kind":"method","documentation":"forEach(Consumer a): void","insertText":"forEach"},{"label":"groupBy","kind":"method","documentation":"groupBy(Function a): Map","insertText":"groupBy"},{"label":"hashCode","kind":"method","documentation":"hashCode(): int","insertText":"hashCode"},{"label":"isEmpty","kind":"method","documentation":"isEmpty(): boolean","insertText":"isEmpty"},{"label":"iterator","kind":"method","documentation":"iterator(): Iterator","insertText":"iterator"},{"label":"join","kind":"method","documentation":"join(String a): String","insertText":"join"},{"label":"remove","kind":"method","documentation":"remove(def a): boolean","insertText":"remove"},{"label":"removeAll","kind":"method","documentation":"removeAll(Collection a): boolean","insertText":"removeAll"},{"label":"removeIf","kind":"method","documentation":"removeIf(Predicate a): boolean","insertText":"removeIf"},{"label":"retainAll","kind":"method","documentation":"retainAll(Collection a): boolean","insertText":"retainAll"},{"label":"size","kind":"method","documentation":"size(): int","insertText":"size"},{"label":"split","kind":"method","documentation":"split(Predicate a): List","insertText":"split"},{"label":"spliterator","kind":"method","documentation":"spliterator(): Spliterator","insertText":"spliterator"},{"label":"stream","kind":"method","documentation":"stream(): Stream","insertText":"stream"},{"label":"sum","kind":"method","documentation":"sum(ToDoubleFunction a): double","insertText":"sum"},{"label":"toArray","kind":"method","documentation":"toArray(def[] a): def[]","insertText":"toArray"},{"label":"toString","kind":"method","documentation":"toString(): String","insertText":"toString"}]},{"label":"ArrayDeque","kind":"class","documentation":"Class: ArrayDeque","insertText":"ArrayDeque","properties":[{"label":"add","kind":"method","documentation":"add(def a): boolean","insertText":"add"},{"label":"addAll","kind":"method","documentation":"addAll(Collection a): boolean","insertText":"addAll"},{"label":"addFirst","kind":"method","documentation":"addFirst(def a): void","insertText":"addFirst"},{"label":"addLast","kind":"method","documentation":"addLast(def a): void","insertText":"addLast"},{"label":"any","kind":"method","documentation":"any(Predicate a): boolean","insertText":"any"},{"label":"asCollection","kind":"method","documentation":"asCollection(): Collection","insertText":"asCollection"},{"label":"asList","kind":"method","documentation":"asList(): List","insertText":"asList"},{"label":"clear","kind":"method","documentation":"clear(): void","insertText":"clear"},{"label":"clone","kind":"method","documentation":"clone(): ArrayDeque","insertText":"clone"},{"label":"collect","kind":"method","documentation":"collect(Collection a, Function b | Function a): def | List","insertText":"collect"},{"label":"contains","kind":"method","documentation":"contains(def a): boolean","insertText":"contains"},{"label":"containsAll","kind":"method","documentation":"containsAll(Collection a): boolean","insertText":"containsAll"},{"label":"descendingIterator","kind":"method","documentation":"descendingIterator(): Iterator","insertText":"descendingIterator"},{"label":"each","kind":"method","documentation":"each(Consumer a): def","insertText":"each"},{"label":"eachWithIndex","kind":"method","documentation":"eachWithIndex(ObjIntConsumer a): def","insertText":"eachWithIndex"},{"label":"element","kind":"method","documentation":"element(): def","insertText":"element"},{"label":"equals","kind":"method","documentation":"equals(Object a): boolean","insertText":"equals"},{"label":"every","kind":"method","documentation":"every(Predicate a): boolean","insertText":"every"},{"label":"find","kind":"method","documentation":"find(Predicate a): def","insertText":"find"},{"label":"findAll","kind":"method","documentation":"findAll(Predicate a): List","insertText":"findAll"},{"label":"findResult","kind":"method","documentation":"findResult(def a, Function b | Function a): def","insertText":"findResult"},{"label":"findResults","kind":"method","documentation":"findResults(Function a): List","insertText":"findResults"},{"label":"forEach","kind":"method","documentation":"forEach(Consumer a): void","insertText":"forEach"},{"label":"getFirst","kind":"method","documentation":"getFirst(): def","insertText":"getFirst"},{"label":"getLast","kind":"method","documentation":"getLast(): def","insertText":"getLast"},{"label":"groupBy","kind":"method","documentation":"groupBy(Function a): Map","insertText":"groupBy"},{"label":"hashCode","kind":"method","documentation":"hashCode(): int","insertText":"hashCode"},{"label":"isEmpty","kind":"method","documentation":"isEmpty(): boolean","insertText":"isEmpty"},{"label":"iterator","kind":"method","documentation":"iterator(): Iterator","insertText":"iterator"},{"label":"join","kind":"method","documentation":"join(String a): String","insertText":"join"},{"label":"offer","kind":"method","documentation":"offer(def a): boolean","insertText":"offer"},{"label":"offerFirst","kind":"method","documentation":"offerFirst(def a): boolean","insertText":"offerFirst"},{"label":"offerLast","kind":"method","documentation":"offerLast(def a): boolean","insertText":"offerLast"},{"label":"peek","kind":"method","documentation":"peek(): def","insertText":"peek"},{"label":"peekFirst","kind":"method","documentation":"peekFirst(): def","insertText":"peekFirst"},{"label":"peekLast","kind":"method","documentation":"peekLast(): def","insertText":"peekLast"},{"label":"poll","kind":"method","documentation":"poll(): def","insertText":"poll"},{"label":"pollFirst","kind":"method","documentation":"pollFirst(): def","insertText":"pollFirst"},{"label":"pollLast","kind":"method","documentation":"pollLast(): def","insertText":"pollLast"},{"label":"pop","kind":"method","documentation":"pop(): def","insertText":"pop"},{"label":"push","kind":"method","documentation":"push(def a): void","insertText":"push"},{"label":"remove","kind":"method","documentation":"remove(def a): boolean | def","insertText":"remove"},{"label":"removeAll","kind":"method","documentation":"removeAll(Collection a): boolean","insertText":"removeAll"},{"label":"removeFirst","kind":"method","documentation":"removeFirst(): def","insertText":"removeFirst"},{"label":"removeFirstOccurrence","kind":"method","documentation":"removeFirstOccurrence(def a): boolean","insertText":"removeFirstOccurrence"},{"label":"removeIf","kind":"method","documentation":"removeIf(Predicate a): boolean","insertText":"removeIf"},{"label":"removeLast","kind":"method","documentation":"removeLast(): def","insertText":"removeLast"},{"label":"removeLastOccurrence","kind":"method","documentation":"removeLastOccurrence(def a): boolean","insertText":"removeLastOccurrence"},{"label":"retainAll","kind":"method","documentation":"retainAll(Collection a): boolean","insertText":"retainAll"},{"label":"size","kind":"method","documentation":"size(): int","insertText":"size"},{"label":"split","kind":"method","documentation":"split(Predicate a): List","insertText":"split"},{"label":"spliterator","kind":"method","documentation":"spliterator(): Spliterator","insertText":"spliterator"},{"label":"stream","kind":"method","documentation":"stream(): Stream","insertText":"stream"},{"label":"sum","kind":"method","documentation":"sum(ToDoubleFunction a): double","insertText":"sum"},{"label":"toArray","kind":"method","documentation":"toArray(def[] a): def[]","insertText":"toArray"},{"label":"toString","kind":"method","documentation":"toString(): String","insertText":"toString"}],"constructorDefinition":{"label":"ArrayDeque","kind":"constructor","documentation":"Constructor: ArrayDeque","insertText":"ArrayDeque"}},{"label":"ArrayList","kind":"class","documentation":"Class: ArrayList","insertText":"ArrayList","properties":[{"label":"add","kind":"method","documentation":"add(int a, def b | def a): void | boolean","insertText":"add"},{"label":"addAll","kind":"method","documentation":"addAll(int a, Collection b | Collection a): boolean","insertText":"addAll"},{"label":"any","kind":"method","documentation":"any(Predicate a): boolean","insertText":"any"},{"label":"asCollection","kind":"method","documentation":"asCollection(): Collection","insertText":"asCollection"},{"label":"asList","kind":"method","documentation":"asList(): List","insertText":"asList"},{"label":"clear","kind":"method","documentation":"clear(): void","insertText":"clear"},{"label":"clone","kind":"method","documentation":"clone(): def","insertText":"clone"},{"label":"collect","kind":"method","documentation":"collect(Collection a, Function b | Function a): def | List","insertText":"collect"},{"label":"contains","kind":"method","documentation":"contains(def a): boolean","insertText":"contains"},{"label":"containsAll","kind":"method","documentation":"containsAll(Collection a): boolean","insertText":"containsAll"},{"label":"each","kind":"method","documentation":"each(Consumer a): def","insertText":"each"},{"label":"eachWithIndex","kind":"method","documentation":"eachWithIndex(ObjIntConsumer a): def","insertText":"eachWithIndex"},{"label":"equals","kind":"method","documentation":"equals(Object a): boolean","insertText":"equals"},{"label":"every","kind":"method","documentation":"every(Predicate a): boolean","insertText":"every"},{"label":"find","kind":"method","documentation":"find(Predicate a): def","insertText":"find"},{"label":"findAll","kind":"method","documentation":"findAll(Predicate a): List","insertText":"findAll"},{"label":"findResult","kind":"method","documentation":"findResult(def a, Function b | Function a): def","insertText":"findResult"},{"label":"findResults","kind":"method","documentation":"findResults(Function a): List","insertText":"findResults"},{"label":"forEach","kind":"method","documentation":"forEach(Consumer a): void","insertText":"forEach"},{"label":"get","kind":"method","documentation":"get(int a): def","insertText":"get"},{"label":"getByPath","kind":"method","documentation":"getByPath(String a, Object b | String a): Object","insertText":"getByPath"},{"label":"getLength","kind":"method","documentation":"getLength(): int","insertText":"getLength"},{"label":"groupBy","kind":"method","documentation":"groupBy(Function a): Map","insertText":"groupBy"},{"label":"hashCode","kind":"method","documentation":"hashCode(): int","insertText":"hashCode"},{"label":"indexOf","kind":"method","documentation":"indexOf(def a): int","insertText":"indexOf"},{"label":"isEmpty","kind":"method","documentation":"isEmpty(): boolean","insertText":"isEmpty"},{"label":"iterator","kind":"method","documentation":"iterator(): Iterator","insertText":"iterator"},{"label":"join","kind":"method","documentation":"join(String a): String","insertText":"join"},{"label":"lastIndexOf","kind":"method","documentation":"lastIndexOf(def a): int","insertText":"lastIndexOf"},{"label":"listIterator","kind":"method","documentation":"listIterator(int a): ListIterator","insertText":"listIterator"},{"label":"remove","kind":"method","documentation":"remove(int a): def","insertText":"remove"},{"label":"removeAll","kind":"method","documentation":"removeAll(Collection a): boolean","insertText":"removeAll"},{"label":"removeIf","kind":"method","documentation":"removeIf(Predicate a): boolean","insertText":"removeIf"},{"label":"replaceAll","kind":"method","documentation":"replaceAll(UnaryOperator a): void","insertText":"replaceAll"},{"label":"retainAll","kind":"method","documentation":"retainAll(Collection a): boolean","insertText":"retainAll"},{"label":"set","kind":"method","documentation":"set(int a, def b): def","insertText":"set"},{"label":"size","kind":"method","documentation":"size(): int","insertText":"size"},{"label":"sort","kind":"method","documentation":"sort(Comparator a): void","insertText":"sort"},{"label":"split","kind":"method","documentation":"split(Predicate a): List","insertText":"split"},{"label":"spliterator","kind":"method","documentation":"spliterator(): Spliterator","insertText":"spliterator"},{"label":"stream","kind":"method","documentation":"stream(): Stream","insertText":"stream"},{"label":"subList","kind":"method","documentation":"subList(int a, int b): List","insertText":"subList"},{"label":"sum","kind":"method","documentation":"sum(ToDoubleFunction a): double","insertText":"sum"},{"label":"toArray","kind":"method","documentation":"toArray(def[] a): def[]","insertText":"toArray"},{"label":"toString","kind":"method","documentation":"toString(): String","insertText":"toString"},{"label":"trimToSize","kind":"method","documentation":"trimToSize(): void","insertText":"trimToSize"}],"constructorDefinition":{"label":"ArrayList","kind":"constructor","documentation":"Constructor: ArrayList","insertText":"ArrayList"}},{"label":"Arrays","kind":"class","documentation":"Class: Arrays","insertText":"Arrays","properties":[{"label":"asList","kind":"method","documentation":"asList(Object[] a): List","insertText":"asList"},{"label":"deepEquals","kind":"method","documentation":"deepEquals(Object[] a, Object[] b): boolean","insertText":"deepEquals"},{"label":"deepHashCode","kind":"method","documentation":"deepHashCode(Object[] a): int","insertText":"deepHashCode"},{"label":"deepToString","kind":"method","documentation":"deepToString(Object[] a): String","insertText":"deepToString"},{"label":"equals","kind":"method","documentation":"equals(Object a): boolean","insertText":"equals"},{"label":"hashCode","kind":"method","documentation":"hashCode(): int","insertText":"hashCode"},{"label":"toString","kind":"method","documentation":"toString(): String","insertText":"toString"}]},{"label":"Base64","kind":"class","documentation":"Class: Base64","insertText":"Base64","properties":[{"label":"getDecoder","kind":"method","documentation":"getDecoder(): Base64.Decoder","insertText":"getDecoder"},{"label":"getEncoder","kind":"method","documentation":"getEncoder(): Base64.Encoder","insertText":"getEncoder"},{"label":"getMimeDecoder","kind":"method","documentation":"getMimeDecoder(): Base64.Decoder","insertText":"getMimeDecoder"},{"label":"getMimeEncoder","kind":"method","documentation":"getMimeEncoder(int a, byte[] b): Base64.Encoder","insertText":"getMimeEncoder"},{"label":"getUrlDecoder","kind":"method","documentation":"getUrlDecoder(): Base64.Decoder","insertText":"getUrlDecoder"},{"label":"getUrlEncoder","kind":"method","documentation":"getUrlEncoder(): Base64.Encoder","insertText":"getUrlEncoder"},{"label":"equals","kind":"method","documentation":"equals(Object a): boolean","insertText":"equals"},{"label":"hashCode","kind":"method","documentation":"hashCode(): int","insertText":"hashCode"},{"label":"toString","kind":"method","documentation":"toString(): String","insertText":"toString"}]},{"label":"Decoder","kind":"class","documentation":"Class: Decoder","insertText":"Decoder","properties":[{"label":"decode","kind":"method","documentation":"decode(byte[] a, byte[] b | String a): int | byte[]","insertText":"decode"},{"label":"equals","kind":"method","documentation":"equals(Object a): boolean","insertText":"equals"},{"label":"hashCode","kind":"method","documentation":"hashCode(): int","insertText":"hashCode"},{"label":"toString","kind":"method","documentation":"toString(): String","insertText":"toString"}]},{"label":"Encoder","kind":"class","documentation":"Class: Encoder","insertText":"Encoder","properties":[{"label":"encode","kind":"method","documentation":"encode(byte[] a, byte[] b): int","insertText":"encode"},{"label":"encodeToString","kind":"method","documentation":"encodeToString(byte[] a): String","insertText":"encodeToString"},{"label":"equals","kind":"method","documentation":"equals(Object a): boolean","insertText":"equals"},{"label":"hashCode","kind":"method","documentation":"hashCode(): int","insertText":"hashCode"},{"label":"toString","kind":"method","documentation":"toString(): String","insertText":"toString"},{"label":"withoutPadding","kind":"method","documentation":"withoutPadding(): Base64.Encoder","insertText":"withoutPadding"}]},{"label":"BitSet","kind":"class","documentation":"Class: BitSet","insertText":"BitSet","properties":[{"label":"valueOf","kind":"method","documentation":"valueOf(long[] a): BitSet","insertText":"valueOf"},{"label":"and","kind":"method","documentation":"and(BitSet a): void","insertText":"and"},{"label":"andNot","kind":"method","documentation":"andNot(BitSet a): void","insertText":"andNot"},{"label":"cardinality","kind":"method","documentation":"cardinality(): int","insertText":"cardinality"},{"label":"clear","kind":"method","documentation":"clear(int a, int b | int a): void","insertText":"clear"},{"label":"clone","kind":"method","documentation":"clone(): def","insertText":"clone"},{"label":"equals","kind":"method","documentation":"equals(Object a): boolean","insertText":"equals"},{"label":"flip","kind":"method","documentation":"flip(int a, int b | int a): void","insertText":"flip"},{"label":"hashCode","kind":"method","documentation":"hashCode(): int","insertText":"hashCode"},{"label":"intersects","kind":"method","documentation":"intersects(BitSet a): boolean","insertText":"intersects"},{"label":"isEmpty","kind":"method","documentation":"isEmpty(): boolean","insertText":"isEmpty"},{"label":"length","kind":"method","documentation":"length(): int","insertText":"length"},{"label":"nextClearBit","kind":"method","documentation":"nextClearBit(int a): int","insertText":"nextClearBit"},{"label":"nextSetBit","kind":"method","documentation":"nextSetBit(int a): int","insertText":"nextSetBit"},{"label":"or","kind":"method","documentation":"or(BitSet a): void","insertText":"or"},{"label":"previousClearBit","kind":"method","documentation":"previousClearBit(int a): int","insertText":"previousClearBit"},{"label":"previousSetBit","kind":"method","documentation":"previousSetBit(int a): int","insertText":"previousSetBit"},{"label":"set","kind":"method","documentation":"set(int a, int b, boolean c | int a, int b | int a): void","insertText":"set"},{"label":"size","kind":"method","documentation":"size(): int","insertText":"size"},{"label":"toByteArray","kind":"method","documentation":"toByteArray(): byte[]","insertText":"toByteArray"},{"label":"toLongArray","kind":"method","documentation":"toLongArray(): long[]","insertText":"toLongArray"},{"label":"toString","kind":"method","documentation":"toString(): String","insertText":"toString"},{"label":"xor","kind":"method","documentation":"xor(BitSet a): void","insertText":"xor"}],"constructorDefinition":{"label":"BitSet","kind":"constructor","documentation":"Constructor: BitSet","insertText":"BitSet"}},{"label":"Calendar","kind":"class","documentation":"Class: Calendar","insertText":"Calendar","properties":[{"label":"ALL_STYLES","kind":"property","documentation":"ALL_STYLES: int","insertText":"ALL_STYLES"},{"label":"AM","kind":"property","documentation":"AM: int","insertText":"AM"},{"label":"AM_PM","kind":"property","documentation":"AM_PM: int","insertText":"AM_PM"},{"label":"APRIL","kind":"property","documentation":"APRIL: int","insertText":"APRIL"},{"label":"AUGUST","kind":"property","documentation":"AUGUST: int","insertText":"AUGUST"},{"label":"DATE","kind":"property","documentation":"DATE: int","insertText":"DATE"},{"label":"DAY_OF_MONTH","kind":"property","documentation":"DAY_OF_MONTH: int","insertText":"DAY_OF_MONTH"},{"label":"DAY_OF_WEEK","kind":"property","documentation":"DAY_OF_WEEK: int","insertText":"DAY_OF_WEEK"},{"label":"DAY_OF_WEEK_IN_MONTH","kind":"property","documentation":"DAY_OF_WEEK_IN_MONTH: int","insertText":"DAY_OF_WEEK_IN_MONTH"},{"label":"DAY_OF_YEAR","kind":"property","documentation":"DAY_OF_YEAR: int","insertText":"DAY_OF_YEAR"},{"label":"DECEMBER","kind":"property","documentation":"DECEMBER: int","insertText":"DECEMBER"},{"label":"DST_OFFSET","kind":"property","documentation":"DST_OFFSET: int","insertText":"DST_OFFSET"},{"label":"ERA","kind":"property","documentation":"ERA: int","insertText":"ERA"},{"label":"FEBRUARY","kind":"property","documentation":"FEBRUARY: int","insertText":"FEBRUARY"},{"label":"FIELD_COUNT","kind":"property","documentation":"FIELD_COUNT: int","insertText":"FIELD_COUNT"},{"label":"FRIDAY","kind":"property","documentation":"FRIDAY: int","insertText":"FRIDAY"},{"label":"HOUR","kind":"property","documentation":"HOUR: int","insertText":"HOUR"},{"label":"HOUR_OF_DAY","kind":"property","documentation":"HOUR_OF_DAY: int","insertText":"HOUR_OF_DAY"},{"label":"JANUARY","kind":"property","documentation":"JANUARY: int","insertText":"JANUARY"},{"label":"JULY","kind":"property","documentation":"JULY: int","insertText":"JULY"},{"label":"JUNE","kind":"property","documentation":"JUNE: int","insertText":"JUNE"},{"label":"LONG","kind":"property","documentation":"LONG: int","insertText":"LONG"},{"label":"LONG_FORMAT","kind":"property","documentation":"LONG_FORMAT: int","insertText":"LONG_FORMAT"},{"label":"LONG_STANDALONE","kind":"property","documentation":"LONG_STANDALONE: int","insertText":"LONG_STANDALONE"},{"label":"MARCH","kind":"property","documentation":"MARCH: int","insertText":"MARCH"},{"label":"MAY","kind":"property","documentation":"MAY: int","insertText":"MAY"},{"label":"MILLISECOND","kind":"property","documentation":"MILLISECOND: int","insertText":"MILLISECOND"},{"label":"MINUTE","kind":"property","documentation":"MINUTE: int","insertText":"MINUTE"},{"label":"MONDAY","kind":"property","documentation":"MONDAY: int","insertText":"MONDAY"},{"label":"MONTH","kind":"property","documentation":"MONTH: int","insertText":"MONTH"},{"label":"NARROW_FORMAT","kind":"property","documentation":"NARROW_FORMAT: int","insertText":"NARROW_FORMAT"},{"label":"NARROW_STANDALONE","kind":"property","documentation":"NARROW_STANDALONE: int","insertText":"NARROW_STANDALONE"},{"label":"NOVEMBER","kind":"property","documentation":"NOVEMBER: int","insertText":"NOVEMBER"},{"label":"OCTOBER","kind":"property","documentation":"OCTOBER: int","insertText":"OCTOBER"},{"label":"PM","kind":"property","documentation":"PM: int","insertText":"PM"},{"label":"SATURDAY","kind":"property","documentation":"SATURDAY: int","insertText":"SATURDAY"},{"label":"SECOND","kind":"property","documentation":"SECOND: int","insertText":"SECOND"},{"label":"SEPTEMBER","kind":"property","documentation":"SEPTEMBER: int","insertText":"SEPTEMBER"},{"label":"SHORT","kind":"property","documentation":"SHORT: int","insertText":"SHORT"},{"label":"SHORT_FORMAT","kind":"property","documentation":"SHORT_FORMAT: int","insertText":"SHORT_FORMAT"},{"label":"SHORT_STANDALONE","kind":"property","documentation":"SHORT_STANDALONE: int","insertText":"SHORT_STANDALONE"},{"label":"SUNDAY","kind":"property","documentation":"SUNDAY: int","insertText":"SUNDAY"},{"label":"THURSDAY","kind":"property","documentation":"THURSDAY: int","insertText":"THURSDAY"},{"label":"TUESDAY","kind":"property","documentation":"TUESDAY: int","insertText":"TUESDAY"},{"label":"UNDECIMBER","kind":"property","documentation":"UNDECIMBER: int","insertText":"UNDECIMBER"},{"label":"WEDNESDAY","kind":"property","documentation":"WEDNESDAY: int","insertText":"WEDNESDAY"},{"label":"WEEK_OF_MONTH","kind":"property","documentation":"WEEK_OF_MONTH: int","insertText":"WEEK_OF_MONTH"},{"label":"WEEK_OF_YEAR","kind":"property","documentation":"WEEK_OF_YEAR: int","insertText":"WEEK_OF_YEAR"},{"label":"YEAR","kind":"property","documentation":"YEAR: int","insertText":"YEAR"},{"label":"ZONE_OFFSET","kind":"property","documentation":"ZONE_OFFSET: int","insertText":"ZONE_OFFSET"},{"label":"getAvailableCalendarTypes","kind":"method","documentation":"getAvailableCalendarTypes(): Set","insertText":"getAvailableCalendarTypes"},{"label":"getAvailableLocales","kind":"method","documentation":"getAvailableLocales(): Locale[]","insertText":"getAvailableLocales"},{"label":"getInstance","kind":"method","documentation":"getInstance(TimeZone a, Locale b | TimeZone a): Calendar","insertText":"getInstance"},{"label":"add","kind":"method","documentation":"add(int a, int b): void","insertText":"add"},{"label":"after","kind":"method","documentation":"after(Object a): boolean","insertText":"after"},{"label":"before","kind":"method","documentation":"before(Object a): boolean","insertText":"before"},{"label":"clear","kind":"method","documentation":"clear(int a): void","insertText":"clear"},{"label":"clone","kind":"method","documentation":"clone(): def","insertText":"clone"},{"label":"compareTo","kind":"method","documentation":"compareTo(Calendar a): int","insertText":"compareTo"},{"label":"equals","kind":"method","documentation":"equals(Object a): boolean","insertText":"equals"},{"label":"get","kind":"method","documentation":"get(int a): int","insertText":"get"},{"label":"getActualMaximum","kind":"method","documentation":"getActualMaximum(int a): int","insertText":"getActualMaximum"},{"label":"getActualMinimum","kind":"method","documentation":"getActualMinimum(int a): int","insertText":"getActualMinimum"},{"label":"getCalendarType","kind":"method","documentation":"getCalendarType(): String","insertText":"getCalendarType"},{"label":"getDisplayName","kind":"method","documentation":"getDisplayName(int a, int b, Locale c): String","insertText":"getDisplayName"},{"label":"getDisplayNames","kind":"method","documentation":"getDisplayNames(int a, int b, Locale c): Map","insertText":"getDisplayNames"},{"label":"getFirstDayOfWeek","kind":"method","documentation":"getFirstDayOfWeek(): int","insertText":"getFirstDayOfWeek"},{"label":"getGreatestMinimum","kind":"method","documentation":"getGreatestMinimum(int a): int","insertText":"getGreatestMinimum"},{"label":"getLeastMaximum","kind":"method","documentation":"getLeastMaximum(int a): int","insertText":"getLeastMaximum"},{"label":"getMaximum","kind":"method","documentation":"getMaximum(int a): int","insertText":"getMaximum"},{"label":"getMinimalDaysInFirstWeek","kind":"method","documentation":"getMinimalDaysInFirstWeek(): int","insertText":"getMinimalDaysInFirstWeek"},{"label":"getMinimum","kind":"method","documentation":"getMinimum(int a): int","insertText":"getMinimum"},{"label":"getTime","kind":"method","documentation":"getTime(): Date","insertText":"getTime"},{"label":"getTimeInMillis","kind":"method","documentation":"getTimeInMillis(): long","insertText":"getTimeInMillis"},{"label":"getTimeZone","kind":"method","documentation":"getTimeZone(): TimeZone","insertText":"getTimeZone"},{"label":"getWeekYear","kind":"method","documentation":"getWeekYear(): int","insertText":"getWeekYear"},{"label":"getWeeksInWeekYear","kind":"method","documentation":"getWeeksInWeekYear(): int","insertText":"getWeeksInWeekYear"},{"label":"hashCode","kind":"method","documentation":"hashCode(): int","insertText":"hashCode"},{"label":"isLenient","kind":"method","documentation":"isLenient(): boolean","insertText":"isLenient"},{"label":"isSet","kind":"method","documentation":"isSet(int a): boolean","insertText":"isSet"},{"label":"isWeekDateSupported","kind":"method","documentation":"isWeekDateSupported(): boolean","insertText":"isWeekDateSupported"},{"label":"roll","kind":"method","documentation":"roll(int a, int b): void","insertText":"roll"},{"label":"set","kind":"method","documentation":"set(int a, int b, int c, int d, int e, int f | int a, int b, int c, int d, int e | int a, int b, int c | int a, int b): void","insertText":"set"},{"label":"setFirstDayOfWeek","kind":"method","documentation":"setFirstDayOfWeek(int a): void","insertText":"setFirstDayOfWeek"},{"label":"setLenient","kind":"method","documentation":"setLenient(boolean a): void","insertText":"setLenient"},{"label":"setMinimalDaysInFirstWeek","kind":"method","documentation":"setMinimalDaysInFirstWeek(int a): void","insertText":"setMinimalDaysInFirstWeek"},{"label":"setTime","kind":"method","documentation":"setTime(Date a): void","insertText":"setTime"},{"label":"setTimeInMillis","kind":"method","documentation":"setTimeInMillis(long a): void","insertText":"setTimeInMillis"},{"label":"setTimeZone","kind":"method","documentation":"setTimeZone(TimeZone a): void","insertText":"setTimeZone"},{"label":"setWeekDate","kind":"method","documentation":"setWeekDate(int a, int b, int c): void","insertText":"setWeekDate"},{"label":"toInstant","kind":"method","documentation":"toInstant(): Instant","insertText":"toInstant"},{"label":"toString","kind":"method","documentation":"toString(): String","insertText":"toString"}]},{"label":"Builder","kind":"class","documentation":"Class: Builder","insertText":"Builder","properties":[{"label":"build","kind":"method","documentation":"build(): Calendar","insertText":"build"},{"label":"equals","kind":"method","documentation":"equals(Object a): boolean","insertText":"equals"},{"label":"hashCode","kind":"method","documentation":"hashCode(): int","insertText":"hashCode"},{"label":"set","kind":"method","documentation":"set(int a, int b): Calendar.Builder","insertText":"set"},{"label":"setCalendarType","kind":"method","documentation":"setCalendarType(String a): Calendar.Builder","insertText":"setCalendarType"},{"label":"setDate","kind":"method","documentation":"setDate(int a, int b, int c): Calendar.Builder","insertText":"setDate"},{"label":"setFields","kind":"method","documentation":"setFields(int[] a): Calendar.Builder","insertText":"setFields"},{"label":"setInstant","kind":"method","documentation":"setInstant(long a): Calendar.Builder","insertText":"setInstant"},{"label":"setLenient","kind":"method","documentation":"setLenient(boolean a): Calendar.Builder","insertText":"setLenient"},{"label":"setLocale","kind":"method","documentation":"setLocale(Locale a): Calendar.Builder","insertText":"setLocale"},{"label":"setTimeOfDay","kind":"method","documentation":"setTimeOfDay(int a, int b, int c, int d | int a, int b, int c): Calendar.Builder","insertText":"setTimeOfDay"},{"label":"setTimeZone","kind":"method","documentation":"setTimeZone(TimeZone a): Calendar.Builder","insertText":"setTimeZone"},{"label":"setWeekDate","kind":"method","documentation":"setWeekDate(int a, int b, int c): Calendar.Builder","insertText":"setWeekDate"},{"label":"setWeekDefinition","kind":"method","documentation":"setWeekDefinition(int a, int b): Calendar.Builder","insertText":"setWeekDefinition"},{"label":"toString","kind":"method","documentation":"toString(): String","insertText":"toString"}],"constructorDefinition":{"label":"Builder","kind":"constructor","documentation":"Constructor: Builder","insertText":"Builder"}},{"label":"Collection","kind":"class","documentation":"Class: Collection","insertText":"Collection","properties":[{"label":"add","kind":"method","documentation":"add(def a): boolean","insertText":"add"},{"label":"addAll","kind":"method","documentation":"addAll(Collection a): boolean","insertText":"addAll"},{"label":"any","kind":"method","documentation":"any(Predicate a): boolean","insertText":"any"},{"label":"asCollection","kind":"method","documentation":"asCollection(): Collection","insertText":"asCollection"},{"label":"asList","kind":"method","documentation":"asList(): List","insertText":"asList"},{"label":"clear","kind":"method","documentation":"clear(): void","insertText":"clear"},{"label":"collect","kind":"method","documentation":"collect(Collection a, Function b | Function a): def | List","insertText":"collect"},{"label":"contains","kind":"method","documentation":"contains(def a): boolean","insertText":"contains"},{"label":"containsAll","kind":"method","documentation":"containsAll(Collection a): boolean","insertText":"containsAll"},{"label":"each","kind":"method","documentation":"each(Consumer a): def","insertText":"each"},{"label":"eachWithIndex","kind":"method","documentation":"eachWithIndex(ObjIntConsumer a): def","insertText":"eachWithIndex"},{"label":"equals","kind":"method","documentation":"equals(Object a): boolean","insertText":"equals"},{"label":"every","kind":"method","documentation":"every(Predicate a): boolean","insertText":"every"},{"label":"find","kind":"method","documentation":"find(Predicate a): def","insertText":"find"},{"label":"findAll","kind":"method","documentation":"findAll(Predicate a): List","insertText":"findAll"},{"label":"findResult","kind":"method","documentation":"findResult(def a, Function b | Function a): def","insertText":"findResult"},{"label":"findResults","kind":"method","documentation":"findResults(Function a): List","insertText":"findResults"},{"label":"forEach","kind":"method","documentation":"forEach(Consumer a): void","insertText":"forEach"},{"label":"groupBy","kind":"method","documentation":"groupBy(Function a): Map","insertText":"groupBy"},{"label":"hashCode","kind":"method","documentation":"hashCode(): int","insertText":"hashCode"},{"label":"isEmpty","kind":"method","documentation":"isEmpty(): boolean","insertText":"isEmpty"},{"label":"iterator","kind":"method","documentation":"iterator(): Iterator","insertText":"iterator"},{"label":"join","kind":"method","documentation":"join(String a): String","insertText":"join"},{"label":"removeAll","kind":"method","documentation":"removeAll(Collection a): boolean","insertText":"removeAll"},{"label":"removeIf","kind":"method","documentation":"removeIf(Predicate a): boolean","insertText":"removeIf"},{"label":"retainAll","kind":"method","documentation":"retainAll(Collection a): boolean","insertText":"retainAll"},{"label":"size","kind":"method","documentation":"size(): int","insertText":"size"},{"label":"split","kind":"method","documentation":"split(Predicate a): List","insertText":"split"},{"label":"spliterator","kind":"method","documentation":"spliterator(): Spliterator","insertText":"spliterator"},{"label":"stream","kind":"method","documentation":"stream(): Stream","insertText":"stream"},{"label":"sum","kind":"method","documentation":"sum(ToDoubleFunction a): double","insertText":"sum"},{"label":"toArray","kind":"method","documentation":"toArray(def[] a): def[]","insertText":"toArray"},{"label":"toString","kind":"method","documentation":"toString(): String","insertText":"toString"}]},{"label":"Collections","kind":"class","documentation":"Class: Collections","insertText":"Collections","properties":[{"label":"EMPTY_LIST","kind":"property","documentation":"EMPTY_LIST: List","insertText":"EMPTY_LIST"},{"label":"EMPTY_MAP","kind":"property","documentation":"EMPTY_MAP: Map","insertText":"EMPTY_MAP"},{"label":"EMPTY_SET","kind":"property","documentation":"EMPTY_SET: Set","insertText":"EMPTY_SET"},{"label":"addAll","kind":"method","documentation":"addAll(Collection a, def[] b): boolean","insertText":"addAll"},{"label":"asLifoQueue","kind":"method","documentation":"asLifoQueue(Deque a): Queue","insertText":"asLifoQueue"},{"label":"binarySearch","kind":"method","documentation":"binarySearch(List a, def b, Comparator c | List a, def b): int","insertText":"binarySearch"},{"label":"copy","kind":"method","documentation":"copy(List a, List b): void","insertText":"copy"},{"label":"disjoint","kind":"method","documentation":"disjoint(Collection a, Collection b): boolean","insertText":"disjoint"},{"label":"emptyEnumeration","kind":"method","documentation":"emptyEnumeration(): Enumeration","insertText":"emptyEnumeration"},{"label":"emptyIterator","kind":"method","documentation":"emptyIterator(): Iterator","insertText":"emptyIterator"},{"label":"emptyList","kind":"method","documentation":"emptyList(): List","insertText":"emptyList"},{"label":"emptyListIterator","kind":"method","documentation":"emptyListIterator(): ListIterator","insertText":"emptyListIterator"},{"label":"emptyMap","kind":"method","documentation":"emptyMap(): Map","insertText":"emptyMap"},{"label":"emptyNavigableMap","kind":"method","documentation":"emptyNavigableMap(): NavigableMap","insertText":"emptyNavigableMap"},{"label":"emptyNavigableSet","kind":"method","documentation":"emptyNavigableSet(): NavigableSet","insertText":"emptyNavigableSet"},{"label":"emptySet","kind":"method","documentation":"emptySet(): Set","insertText":"emptySet"},{"label":"emptySortedMap","kind":"method","documentation":"emptySortedMap(): SortedMap","insertText":"emptySortedMap"},{"label":"emptySortedSet","kind":"method","documentation":"emptySortedSet(): SortedSet","insertText":"emptySortedSet"},{"label":"enumeration","kind":"method","documentation":"enumeration(Collection a): Enumeration","insertText":"enumeration"},{"label":"fill","kind":"method","documentation":"fill(List a, def b): void","insertText":"fill"},{"label":"frequency","kind":"method","documentation":"frequency(Collection a, def b): int","insertText":"frequency"},{"label":"indexOfSubList","kind":"method","documentation":"indexOfSubList(List a, List b): int","insertText":"indexOfSubList"},{"label":"lastIndexOfSubList","kind":"method","documentation":"lastIndexOfSubList(List a, List b): int","insertText":"lastIndexOfSubList"},{"label":"list","kind":"method","documentation":"list(Enumeration a): ArrayList","insertText":"list"},{"label":"max","kind":"method","documentation":"max(Collection a, Comparator b | Collection a): def","insertText":"max"},{"label":"min","kind":"method","documentation":"min(Collection a, Comparator b | Collection a): def","insertText":"min"},{"label":"nCopies","kind":"method","documentation":"nCopies(int a, def b): List","insertText":"nCopies"},{"label":"newSetFromMap","kind":"method","documentation":"newSetFromMap(Map a): Set","insertText":"newSetFromMap"},{"label":"replaceAll","kind":"method","documentation":"replaceAll(List a, def b, def c): boolean","insertText":"replaceAll"},{"label":"reverse","kind":"method","documentation":"reverse(List a): void","insertText":"reverse"},{"label":"reverseOrder","kind":"method","documentation":"reverseOrder(Comparator a): Comparator","insertText":"reverseOrder"},{"label":"rotate","kind":"method","documentation":"rotate(List a, int b): void","insertText":"rotate"},{"label":"shuffle","kind":"method","documentation":"shuffle(List a, Random b | List a): void","insertText":"shuffle"},{"label":"singleton","kind":"method","documentation":"singleton(def a): Set","insertText":"singleton"},{"label":"singletonList","kind":"method","documentation":"singletonList(def a): List","insertText":"singletonList"},{"label":"singletonMap","kind":"method","documentation":"singletonMap(def a, def b): Map","insertText":"singletonMap"},{"label":"sort","kind":"method","documentation":"sort(List a, Comparator b | List a): void","insertText":"sort"},{"label":"swap","kind":"method","documentation":"swap(List a, int b, int c): void","insertText":"swap"},{"label":"unmodifiableCollection","kind":"method","documentation":"unmodifiableCollection(Collection a): Collection","insertText":"unmodifiableCollection"},{"label":"unmodifiableList","kind":"method","documentation":"unmodifiableList(List a): List","insertText":"unmodifiableList"},{"label":"unmodifiableMap","kind":"method","documentation":"unmodifiableMap(Map a): Map","insertText":"unmodifiableMap"},{"label":"unmodifiableNavigableMap","kind":"method","documentation":"unmodifiableNavigableMap(NavigableMap a): NavigableMap","insertText":"unmodifiableNavigableMap"},{"label":"unmodifiableNavigableSet","kind":"method","documentation":"unmodifiableNavigableSet(NavigableSet a): NavigableSet","insertText":"unmodifiableNavigableSet"},{"label":"unmodifiableSet","kind":"method","documentation":"unmodifiableSet(Set a): Set","insertText":"unmodifiableSet"},{"label":"unmodifiableSortedMap","kind":"method","documentation":"unmodifiableSortedMap(SortedMap a): SortedMap","insertText":"unmodifiableSortedMap"},{"label":"unmodifiableSortedSet","kind":"method","documentation":"unmodifiableSortedSet(SortedSet a): SortedSet","insertText":"unmodifiableSortedSet"},{"label":"equals","kind":"method","documentation":"equals(Object a): boolean","insertText":"equals"},{"label":"hashCode","kind":"method","documentation":"hashCode(): int","insertText":"hashCode"},{"label":"toString","kind":"method","documentation":"toString(): String","insertText":"toString"}]},{"label":"Comparator","kind":"class","documentation":"Class: Comparator","insertText":"Comparator","properties":[{"label":"comparing","kind":"method","documentation":"comparing(Function a, Comparator b | Function a): Comparator","insertText":"comparing"},{"label":"comparingDouble","kind":"method","documentation":"comparingDouble(ToDoubleFunction a): Comparator","insertText":"comparingDouble"},{"label":"comparingInt","kind":"method","documentation":"comparingInt(ToIntFunction a): Comparator","insertText":"comparingInt"},{"label":"comparingLong","kind":"method","documentation":"comparingLong(ToLongFunction a): Comparator","insertText":"comparingLong"},{"label":"naturalOrder","kind":"method","documentation":"naturalOrder(): Comparator","insertText":"naturalOrder"},{"label":"nullsFirst","kind":"method","documentation":"nullsFirst(Comparator a): Comparator","insertText":"nullsFirst"},{"label":"nullsLast","kind":"method","documentation":"nullsLast(Comparator a): Comparator","insertText":"nullsLast"},{"label":"reverseOrder","kind":"method","documentation":"reverseOrder(): Comparator","insertText":"reverseOrder"},{"label":"compare","kind":"method","documentation":"compare(def a, def b): int","insertText":"compare"},{"label":"equals","kind":"method","documentation":"equals(Object a): boolean","insertText":"equals"},{"label":"hashCode","kind":"method","documentation":"hashCode(): int","insertText":"hashCode"},{"label":"reversed","kind":"method","documentation":"reversed(): Comparator","insertText":"reversed"},{"label":"thenComparing","kind":"method","documentation":"thenComparing(Function a, Comparator b | Comparator a): Comparator","insertText":"thenComparing"},{"label":"thenComparingDouble","kind":"method","documentation":"thenComparingDouble(ToDoubleFunction a): Comparator","insertText":"thenComparingDouble"},{"label":"thenComparingInt","kind":"method","documentation":"thenComparingInt(ToIntFunction a): Comparator","insertText":"thenComparingInt"},{"label":"thenComparingLong","kind":"method","documentation":"thenComparingLong(ToLongFunction a): Comparator","insertText":"thenComparingLong"},{"label":"toString","kind":"method","documentation":"toString(): String","insertText":"toString"}]},{"label":"ConcurrentModificationException","kind":"class","documentation":"Class: ConcurrentModificationException","insertText":"ConcurrentModificationException","properties":[{"label":"equals","kind":"method","documentation":"equals(Object a): boolean","insertText":"equals"},{"label":"getLocalizedMessage","kind":"method","documentation":"getLocalizedMessage(): String","insertText":"getLocalizedMessage"},{"label":"getMessage","kind":"method","documentation":"getMessage(): String","insertText":"getMessage"},{"label":"getStackTrace","kind":"method","documentation":"getStackTrace(): StackTraceElement[]","insertText":"getStackTrace"},{"label":"hashCode","kind":"method","documentation":"hashCode(): int","insertText":"hashCode"},{"label":"toString","kind":"method","documentation":"toString(): String","insertText":"toString"}],"constructorDefinition":{"label":"ConcurrentModificationException","kind":"constructor","documentation":"Constructor: ConcurrentModificationException","insertText":"ConcurrentModificationException"}},{"label":"Currency","kind":"class","documentation":"Class: Currency","insertText":"Currency","properties":[{"label":"getAvailableCurrencies","kind":"method","documentation":"getAvailableCurrencies(): Set","insertText":"getAvailableCurrencies"},{"label":"getInstance","kind":"method","documentation":"getInstance(String a): Currency","insertText":"getInstance"},{"label":"equals","kind":"method","documentation":"equals(Object a): boolean","insertText":"equals"},{"label":"getCurrencyCode","kind":"method","documentation":"getCurrencyCode(): String","insertText":"getCurrencyCode"},{"label":"getDefaultFractionDigits","kind":"method","documentation":"getDefaultFractionDigits(): int","insertText":"getDefaultFractionDigits"},{"label":"getDisplayName","kind":"method","documentation":"getDisplayName(Locale a): String","insertText":"getDisplayName"},{"label":"getNumericCode","kind":"method","documentation":"getNumericCode(): int","insertText":"getNumericCode"},{"label":"getSymbol","kind":"method","documentation":"getSymbol(Locale a): String","insertText":"getSymbol"},{"label":"hashCode","kind":"method","documentation":"hashCode(): int","insertText":"hashCode"},{"label":"toString","kind":"method","documentation":"toString(): String","insertText":"toString"}]},{"label":"Date","kind":"class","documentation":"Class: Date","insertText":"Date","properties":[{"label":"from","kind":"method","documentation":"from(Instant a): Date","insertText":"from"},{"label":"after","kind":"method","documentation":"after(Date a): boolean","insertText":"after"},{"label":"before","kind":"method","documentation":"before(Date a): boolean","insertText":"before"},{"label":"clone","kind":"method","documentation":"clone(): def","insertText":"clone"},{"label":"compareTo","kind":"method","documentation":"compareTo(Date a): int","insertText":"compareTo"},{"label":"equals","kind":"method","documentation":"equals(Object a): boolean","insertText":"equals"},{"label":"getTime","kind":"method","documentation":"getTime(): long","insertText":"getTime"},{"label":"hashCode","kind":"method","documentation":"hashCode(): int","insertText":"hashCode"},{"label":"setTime","kind":"method","documentation":"setTime(long a): void","insertText":"setTime"},{"label":"toString","kind":"method","documentation":"toString(): String","insertText":"toString"}],"constructorDefinition":{"label":"Date","kind":"constructor","documentation":"Constructor: Date","insertText":"Date"}},{"label":"Deque","kind":"class","documentation":"Class: Deque","insertText":"Deque","properties":[{"label":"add","kind":"method","documentation":"add(def a): boolean","insertText":"add"},{"label":"addAll","kind":"method","documentation":"addAll(Collection a): boolean","insertText":"addAll"},{"label":"addFirst","kind":"method","documentation":"addFirst(def a): void","insertText":"addFirst"},{"label":"addLast","kind":"method","documentation":"addLast(def a): void","insertText":"addLast"},{"label":"any","kind":"method","documentation":"any(Predicate a): boolean","insertText":"any"},{"label":"asCollection","kind":"method","documentation":"asCollection(): Collection","insertText":"asCollection"},{"label":"asList","kind":"method","documentation":"asList(): List","insertText":"asList"},{"label":"clear","kind":"method","documentation":"clear(): void","insertText":"clear"},{"label":"collect","kind":"method","documentation":"collect(Collection a, Function b | Function a): def | List","insertText":"collect"},{"label":"contains","kind":"method","documentation":"contains(def a): boolean","insertText":"contains"},{"label":"containsAll","kind":"method","documentation":"containsAll(Collection a): boolean","insertText":"containsAll"},{"label":"descendingIterator","kind":"method","documentation":"descendingIterator(): Iterator","insertText":"descendingIterator"},{"label":"each","kind":"method","documentation":"each(Consumer a): def","insertText":"each"},{"label":"eachWithIndex","kind":"method","documentation":"eachWithIndex(ObjIntConsumer a): def","insertText":"eachWithIndex"},{"label":"element","kind":"method","documentation":"element(): def","insertText":"element"},{"label":"equals","kind":"method","documentation":"equals(Object a): boolean","insertText":"equals"},{"label":"every","kind":"method","documentation":"every(Predicate a): boolean","insertText":"every"},{"label":"find","kind":"method","documentation":"find(Predicate a): def","insertText":"find"},{"label":"findAll","kind":"method","documentation":"findAll(Predicate a): List","insertText":"findAll"},{"label":"findResult","kind":"method","documentation":"findResult(def a, Function b | Function a): def","insertText":"findResult"},{"label":"findResults","kind":"method","documentation":"findResults(Function a): List","insertText":"findResults"},{"label":"forEach","kind":"method","documentation":"forEach(Consumer a): void","insertText":"forEach"},{"label":"getFirst","kind":"method","documentation":"getFirst(): def","insertText":"getFirst"},{"label":"getLast","kind":"method","documentation":"getLast(): def","insertText":"getLast"},{"label":"groupBy","kind":"method","documentation":"groupBy(Function a): Map","insertText":"groupBy"},{"label":"hashCode","kind":"method","documentation":"hashCode(): int","insertText":"hashCode"},{"label":"isEmpty","kind":"method","documentation":"isEmpty(): boolean","insertText":"isEmpty"},{"label":"iterator","kind":"method","documentation":"iterator(): Iterator","insertText":"iterator"},{"label":"join","kind":"method","documentation":"join(String a): String","insertText":"join"},{"label":"offer","kind":"method","documentation":"offer(def a): boolean","insertText":"offer"},{"label":"offerFirst","kind":"method","documentation":"offerFirst(def a): boolean","insertText":"offerFirst"},{"label":"offerLast","kind":"method","documentation":"offerLast(def a): boolean","insertText":"offerLast"},{"label":"peek","kind":"method","documentation":"peek(): def","insertText":"peek"},{"label":"peekFirst","kind":"method","documentation":"peekFirst(): def","insertText":"peekFirst"},{"label":"peekLast","kind":"method","documentation":"peekLast(): def","insertText":"peekLast"},{"label":"poll","kind":"method","documentation":"poll(): def","insertText":"poll"},{"label":"pollFirst","kind":"method","documentation":"pollFirst(): def","insertText":"pollFirst"},{"label":"pollLast","kind":"method","documentation":"pollLast(): def","insertText":"pollLast"},{"label":"pop","kind":"method","documentation":"pop(): def","insertText":"pop"},{"label":"push","kind":"method","documentation":"push(def a): void","insertText":"push"},{"label":"remove","kind":"method","documentation":"remove(def a): boolean | def","insertText":"remove"},{"label":"removeAll","kind":"method","documentation":"removeAll(Collection a): boolean","insertText":"removeAll"},{"label":"removeFirst","kind":"method","documentation":"removeFirst(): def","insertText":"removeFirst"},{"label":"removeFirstOccurrence","kind":"method","documentation":"removeFirstOccurrence(def a): boolean","insertText":"removeFirstOccurrence"},{"label":"removeIf","kind":"method","documentation":"removeIf(Predicate a): boolean","insertText":"removeIf"},{"label":"removeLast","kind":"method","documentation":"removeLast(): def","insertText":"removeLast"},{"label":"removeLastOccurrence","kind":"method","documentation":"removeLastOccurrence(def a): boolean","insertText":"removeLastOccurrence"},{"label":"retainAll","kind":"method","documentation":"retainAll(Collection a): boolean","insertText":"retainAll"},{"label":"size","kind":"method","documentation":"size(): int","insertText":"size"},{"label":"split","kind":"method","documentation":"split(Predicate a): List","insertText":"split"},{"label":"spliterator","kind":"method","documentation":"spliterator(): Spliterator","insertText":"spliterator"},{"label":"stream","kind":"method","documentation":"stream(): Stream","insertText":"stream"},{"label":"sum","kind":"method","documentation":"sum(ToDoubleFunction a): double","insertText":"sum"},{"label":"toArray","kind":"method","documentation":"toArray(def[] a): def[]","insertText":"toArray"},{"label":"toString","kind":"method","documentation":"toString(): String","insertText":"toString"}]},{"label":"Dictionary","kind":"class","documentation":"Class: Dictionary","insertText":"Dictionary","properties":[{"label":"elements","kind":"method","documentation":"elements(): Enumeration","insertText":"elements"},{"label":"equals","kind":"method","documentation":"equals(Object a): boolean","insertText":"equals"},{"label":"get","kind":"method","documentation":"get(def a): def","insertText":"get"},{"label":"hashCode","kind":"method","documentation":"hashCode(): int","insertText":"hashCode"},{"label":"isEmpty","kind":"method","documentation":"isEmpty(): boolean","insertText":"isEmpty"},{"label":"keys","kind":"method","documentation":"keys(): Enumeration","insertText":"keys"},{"label":"put","kind":"method","documentation":"put(def a, def b): def","insertText":"put"},{"label":"remove","kind":"method","documentation":"remove(def a): def","insertText":"remove"},{"label":"size","kind":"method","documentation":"size(): int","insertText":"size"},{"label":"toString","kind":"method","documentation":"toString(): String","insertText":"toString"}]},{"label":"DoubleSummaryStatistics","kind":"class","documentation":"Class: DoubleSummaryStatistics","insertText":"DoubleSummaryStatistics","properties":[{"label":"accept","kind":"method","documentation":"accept(double a): void","insertText":"accept"},{"label":"andThen","kind":"method","documentation":"andThen(DoubleConsumer a): DoubleConsumer","insertText":"andThen"},{"label":"combine","kind":"method","documentation":"combine(DoubleSummaryStatistics a): void","insertText":"combine"},{"label":"equals","kind":"method","documentation":"equals(Object a): boolean","insertText":"equals"},{"label":"getAverage","kind":"method","documentation":"getAverage(): double","insertText":"getAverage"},{"label":"getCount","kind":"method","documentation":"getCount(): long","insertText":"getCount"},{"label":"getMax","kind":"method","documentation":"getMax(): double","insertText":"getMax"},{"label":"getMin","kind":"method","documentation":"getMin(): double","insertText":"getMin"},{"label":"getSum","kind":"method","documentation":"getSum(): double","insertText":"getSum"},{"label":"hashCode","kind":"method","documentation":"hashCode(): int","insertText":"hashCode"},{"label":"toString","kind":"method","documentation":"toString(): String","insertText":"toString"}],"constructorDefinition":{"label":"DoubleSummaryStatistics","kind":"constructor","documentation":"Constructor: DoubleSummaryStatistics","insertText":"DoubleSummaryStatistics"}},{"label":"DuplicateFormatFlagsException","kind":"class","documentation":"Class: DuplicateFormatFlagsException","insertText":"DuplicateFormatFlagsException","properties":[{"label":"equals","kind":"method","documentation":"equals(Object a): boolean","insertText":"equals"},{"label":"getFlags","kind":"method","documentation":"getFlags(): String","insertText":"getFlags"},{"label":"getLocalizedMessage","kind":"method","documentation":"getLocalizedMessage(): String","insertText":"getLocalizedMessage"},{"label":"getMessage","kind":"method","documentation":"getMessage(): String","insertText":"getMessage"},{"label":"getStackTrace","kind":"method","documentation":"getStackTrace(): StackTraceElement[]","insertText":"getStackTrace"},{"label":"hashCode","kind":"method","documentation":"hashCode(): int","insertText":"hashCode"},{"label":"toString","kind":"method","documentation":"toString(): String","insertText":"toString"}],"constructorDefinition":{"label":"DuplicateFormatFlagsException","kind":"constructor","documentation":"Constructor: DuplicateFormatFlagsException","insertText":"DuplicateFormatFlagsException"}},{"label":"EmptyStackException","kind":"class","documentation":"Class: EmptyStackException","insertText":"EmptyStackException","properties":[{"label":"equals","kind":"method","documentation":"equals(Object a): boolean","insertText":"equals"},{"label":"getLocalizedMessage","kind":"method","documentation":"getLocalizedMessage(): String","insertText":"getLocalizedMessage"},{"label":"getMessage","kind":"method","documentation":"getMessage(): String","insertText":"getMessage"},{"label":"getStackTrace","kind":"method","documentation":"getStackTrace(): StackTraceElement[]","insertText":"getStackTrace"},{"label":"hashCode","kind":"method","documentation":"hashCode(): int","insertText":"hashCode"},{"label":"toString","kind":"method","documentation":"toString(): String","insertText":"toString"}],"constructorDefinition":{"label":"EmptyStackException","kind":"constructor","documentation":"Constructor: EmptyStackException","insertText":"EmptyStackException"}},{"label":"Enumeration","kind":"class","documentation":"Class: Enumeration","insertText":"Enumeration","properties":[{"label":"equals","kind":"method","documentation":"equals(Object a): boolean","insertText":"equals"},{"label":"hasMoreElements","kind":"method","documentation":"hasMoreElements(): boolean","insertText":"hasMoreElements"},{"label":"hashCode","kind":"method","documentation":"hashCode(): int","insertText":"hashCode"},{"label":"nextElement","kind":"method","documentation":"nextElement(): def","insertText":"nextElement"},{"label":"toString","kind":"method","documentation":"toString(): String","insertText":"toString"}]},{"label":"EventListener","kind":"class","documentation":"Class: EventListener","insertText":"EventListener","properties":[{"label":"equals","kind":"method","documentation":"equals(Object a): boolean","insertText":"equals"},{"label":"hashCode","kind":"method","documentation":"hashCode(): int","insertText":"hashCode"},{"label":"toString","kind":"method","documentation":"toString(): String","insertText":"toString"}]},{"label":"EventListenerProxy","kind":"class","documentation":"Class: EventListenerProxy","insertText":"EventListenerProxy","properties":[{"label":"equals","kind":"method","documentation":"equals(Object a): boolean","insertText":"equals"},{"label":"getListener","kind":"method","documentation":"getListener(): EventListener","insertText":"getListener"},{"label":"hashCode","kind":"method","documentation":"hashCode(): int","insertText":"hashCode"},{"label":"toString","kind":"method","documentation":"toString(): String","insertText":"toString"}]},{"label":"EventObject","kind":"class","documentation":"Class: EventObject","insertText":"EventObject","properties":[{"label":"equals","kind":"method","documentation":"equals(Object a): boolean","insertText":"equals"},{"label":"getSource","kind":"method","documentation":"getSource(): Object","insertText":"getSource"},{"label":"hashCode","kind":"method","documentation":"hashCode(): int","insertText":"hashCode"},{"label":"toString","kind":"method","documentation":"toString(): String","insertText":"toString"}],"constructorDefinition":{"label":"EventObject","kind":"constructor","documentation":"Constructor: EventObject","insertText":"EventObject"}},{"label":"FormatFlagsConversionMismatchException","kind":"class","documentation":"Class: FormatFlagsConversionMismatchException","insertText":"FormatFlagsConversionMismatchException","properties":[{"label":"equals","kind":"method","documentation":"equals(Object a): boolean","insertText":"equals"},{"label":"getConversion","kind":"method","documentation":"getConversion(): char","insertText":"getConversion"},{"label":"getFlags","kind":"method","documentation":"getFlags(): String","insertText":"getFlags"},{"label":"getLocalizedMessage","kind":"method","documentation":"getLocalizedMessage(): String","insertText":"getLocalizedMessage"},{"label":"getMessage","kind":"method","documentation":"getMessage(): String","insertText":"getMessage"},{"label":"getStackTrace","kind":"method","documentation":"getStackTrace(): StackTraceElement[]","insertText":"getStackTrace"},{"label":"hashCode","kind":"method","documentation":"hashCode(): int","insertText":"hashCode"},{"label":"toString","kind":"method","documentation":"toString(): String","insertText":"toString"}],"constructorDefinition":{"label":"FormatFlagsConversionMismatchException","kind":"constructor","documentation":"Constructor: FormatFlagsConversionMismatchException","insertText":"FormatFlagsConversionMismatchException"}},{"label":"Formattable","kind":"class","documentation":"Class: Formattable","insertText":"Formattable","properties":[{"label":"equals","kind":"method","documentation":"equals(Object a): boolean","insertText":"equals"},{"label":"formatTo","kind":"method","documentation":"formatTo(Formatter a, int b, int c, int d): void","insertText":"formatTo"},{"label":"hashCode","kind":"method","documentation":"hashCode(): int","insertText":"hashCode"},{"label":"toString","kind":"method","documentation":"toString(): String","insertText":"toString"}]},{"label":"FormattableFlags","kind":"class","documentation":"Class: FormattableFlags","insertText":"FormattableFlags","properties":[{"label":"ALTERNATE","kind":"property","documentation":"ALTERNATE: int","insertText":"ALTERNATE"},{"label":"LEFT_JUSTIFY","kind":"property","documentation":"LEFT_JUSTIFY: int","insertText":"LEFT_JUSTIFY"},{"label":"UPPERCASE","kind":"property","documentation":"UPPERCASE: int","insertText":"UPPERCASE"},{"label":"equals","kind":"method","documentation":"equals(Object a): boolean","insertText":"equals"},{"label":"hashCode","kind":"method","documentation":"hashCode(): int","insertText":"hashCode"},{"label":"toString","kind":"method","documentation":"toString(): String","insertText":"toString"}]},{"label":"Formatter","kind":"class","documentation":"Class: Formatter","insertText":"Formatter","properties":[{"label":"equals","kind":"method","documentation":"equals(Object a): boolean","insertText":"equals"},{"label":"format","kind":"method","documentation":"format(Locale a, String b, def[] c | String a, def[] b): Formatter","insertText":"format"},{"label":"hashCode","kind":"method","documentation":"hashCode(): int","insertText":"hashCode"},{"label":"locale","kind":"method","documentation":"locale(): Locale","insertText":"locale"},{"label":"out","kind":"method","documentation":"out(): Appendable","insertText":"out"},{"label":"toString","kind":"method","documentation":"toString(): String","insertText":"toString"}],"constructorDefinition":{"label":"Formatter","kind":"constructor","documentation":"Constructor: Formatter","insertText":"Formatter"}},{"label":"BigDecimalLayoutForm","kind":"class","documentation":"Class: BigDecimalLayoutForm","insertText":"BigDecimalLayoutForm","properties":[{"label":"DECIMAL_FLOAT","kind":"property","documentation":"DECIMAL_FLOAT: Formatter.BigDecimalLayoutForm","insertText":"DECIMAL_FLOAT"},{"label":"SCIENTIFIC","kind":"property","documentation":"SCIENTIFIC: Formatter.BigDecimalLayoutForm","insertText":"SCIENTIFIC"},{"label":"compareTo","kind":"method","documentation":"compareTo(Enum a): int","insertText":"compareTo"},{"label":"equals","kind":"method","documentation":"equals(Object a): boolean","insertText":"equals"},{"label":"hashCode","kind":"method","documentation":"hashCode(): int","insertText":"hashCode"},{"label":"name","kind":"method","documentation":"name(): String","insertText":"name"},{"label":"ordinal","kind":"method","documentation":"ordinal(): int","insertText":"ordinal"},{"label":"toString","kind":"method","documentation":"toString(): String","insertText":"toString"}]},{"label":"FormatterClosedException","kind":"class","documentation":"Class: FormatterClosedException","insertText":"FormatterClosedException","properties":[{"label":"equals","kind":"method","documentation":"equals(Object a): boolean","insertText":"equals"},{"label":"getLocalizedMessage","kind":"method","documentation":"getLocalizedMessage(): String","insertText":"getLocalizedMessage"},{"label":"getMessage","kind":"method","documentation":"getMessage(): String","insertText":"getMessage"},{"label":"getStackTrace","kind":"method","documentation":"getStackTrace(): StackTraceElement[]","insertText":"getStackTrace"},{"label":"hashCode","kind":"method","documentation":"hashCode(): int","insertText":"hashCode"},{"label":"toString","kind":"method","documentation":"toString(): String","insertText":"toString"}],"constructorDefinition":{"label":"FormatterClosedException","kind":"constructor","documentation":"Constructor: FormatterClosedException","insertText":"FormatterClosedException"}},{"label":"GregorianCalendar","kind":"class","documentation":"Class: GregorianCalendar","insertText":"GregorianCalendar","properties":[{"label":"AD","kind":"property","documentation":"AD: int","insertText":"AD"},{"label":"BC","kind":"property","documentation":"BC: int","insertText":"BC"},{"label":"from","kind":"method","documentation":"from(ZonedDateTime a): GregorianCalendar","insertText":"from"},{"label":"add","kind":"method","documentation":"add(int a, int b): void","insertText":"add"},{"label":"after","kind":"method","documentation":"after(Object a): boolean","insertText":"after"},{"label":"before","kind":"method","documentation":"before(Object a): boolean","insertText":"before"},{"label":"clear","kind":"method","documentation":"clear(int a): void","insertText":"clear"},{"label":"clone","kind":"method","documentation":"clone(): def","insertText":"clone"},{"label":"compareTo","kind":"method","documentation":"compareTo(Calendar a): int","insertText":"compareTo"},{"label":"equals","kind":"method","documentation":"equals(Object a): boolean","insertText":"equals"},{"label":"get","kind":"method","documentation":"get(int a): int","insertText":"get"},{"label":"getActualMaximum","kind":"method","documentation":"getActualMaximum(int a): int","insertText":"getActualMaximum"},{"label":"getActualMinimum","kind":"method","documentation":"getActualMinimum(int a): int","insertText":"getActualMinimum"},{"label":"getCalendarType","kind":"method","documentation":"getCalendarType(): String","insertText":"getCalendarType"},{"label":"getDisplayName","kind":"method","documentation":"getDisplayName(int a, int b, Locale c): String","insertText":"getDisplayName"},{"label":"getDisplayNames","kind":"method","documentation":"getDisplayNames(int a, int b, Locale c): Map","insertText":"getDisplayNames"},{"label":"getFirstDayOfWeek","kind":"method","documentation":"getFirstDayOfWeek(): int","insertText":"getFirstDayOfWeek"},{"label":"getGreatestMinimum","kind":"method","documentation":"getGreatestMinimum(int a): int","insertText":"getGreatestMinimum"},{"label":"getGregorianChange","kind":"method","documentation":"getGregorianChange(): Date","insertText":"getGregorianChange"},{"label":"getLeastMaximum","kind":"method","documentation":"getLeastMaximum(int a): int","insertText":"getLeastMaximum"},{"label":"getMaximum","kind":"method","documentation":"getMaximum(int a): int","insertText":"getMaximum"},{"label":"getMinimalDaysInFirstWeek","kind":"method","documentation":"getMinimalDaysInFirstWeek(): int","insertText":"getMinimalDaysInFirstWeek"},{"label":"getMinimum","kind":"method","documentation":"getMinimum(int a): int","insertText":"getMinimum"},{"label":"getTime","kind":"method","documentation":"getTime(): Date","insertText":"getTime"},{"label":"getTimeInMillis","kind":"method","documentation":"getTimeInMillis(): long","insertText":"getTimeInMillis"},{"label":"getTimeZone","kind":"method","documentation":"getTimeZone(): TimeZone","insertText":"getTimeZone"},{"label":"getWeekYear","kind":"method","documentation":"getWeekYear(): int","insertText":"getWeekYear"},{"label":"getWeeksInWeekYear","kind":"method","documentation":"getWeeksInWeekYear(): int","insertText":"getWeeksInWeekYear"},{"label":"hashCode","kind":"method","documentation":"hashCode(): int","insertText":"hashCode"},{"label":"isLeapYear","kind":"method","documentation":"isLeapYear(int a): boolean","insertText":"isLeapYear"},{"label":"isLenient","kind":"method","documentation":"isLenient(): boolean","insertText":"isLenient"},{"label":"isSet","kind":"method","documentation":"isSet(int a): boolean","insertText":"isSet"},{"label":"isWeekDateSupported","kind":"method","documentation":"isWeekDateSupported(): boolean","insertText":"isWeekDateSupported"},{"label":"roll","kind":"method","documentation":"roll(int a, int b): void","insertText":"roll"},{"label":"set","kind":"method","documentation":"set(int a, int b, int c, int d, int e, int f | int a, int b, int c, int d, int e | int a, int b, int c | int a, int b): void","insertText":"set"},{"label":"setFirstDayOfWeek","kind":"method","documentation":"setFirstDayOfWeek(int a): void","insertText":"setFirstDayOfWeek"},{"label":"setGregorianChange","kind":"method","documentation":"setGregorianChange(Date a): void","insertText":"setGregorianChange"},{"label":"setLenient","kind":"method","documentation":"setLenient(boolean a): void","insertText":"setLenient"},{"label":"setMinimalDaysInFirstWeek","kind":"method","documentation":"setMinimalDaysInFirstWeek(int a): void","insertText":"setMinimalDaysInFirstWeek"},{"label":"setTime","kind":"method","documentation":"setTime(Date a): void","insertText":"setTime"},{"label":"setTimeInMillis","kind":"method","documentation":"setTimeInMillis(long a): void","insertText":"setTimeInMillis"},{"label":"setTimeZone","kind":"method","documentation":"setTimeZone(TimeZone a): void","insertText":"setTimeZone"},{"label":"setWeekDate","kind":"method","documentation":"setWeekDate(int a, int b, int c): void","insertText":"setWeekDate"},{"label":"toInstant","kind":"method","documentation":"toInstant(): Instant","insertText":"toInstant"},{"label":"toString","kind":"method","documentation":"toString(): String","insertText":"toString"},{"label":"toZonedDateTime","kind":"method","documentation":"toZonedDateTime(): ZonedDateTime","insertText":"toZonedDateTime"}],"constructorDefinition":{"label":"GregorianCalendar","kind":"constructor","documentation":"Constructor: GregorianCalendar","insertText":"GregorianCalendar"}},{"label":"HashMap","kind":"class","documentation":"Class: HashMap","insertText":"HashMap","properties":[{"label":"clear","kind":"method","documentation":"clear(): void","insertText":"clear"},{"label":"clone","kind":"method","documentation":"clone(): def","insertText":"clone"},{"label":"collect","kind":"method","documentation":"collect(Collection a, BiFunction b | BiFunction a): def | List","insertText":"collect"},{"label":"compute","kind":"method","documentation":"compute(def a, BiFunction b): def","insertText":"compute"},{"label":"computeIfAbsent","kind":"method","documentation":"computeIfAbsent(def a, Function b): def","insertText":"computeIfAbsent"},{"label":"computeIfPresent","kind":"method","documentation":"computeIfPresent(def a, BiFunction b): def","insertText":"computeIfPresent"},{"label":"containsKey","kind":"method","documentation":"containsKey(def a): boolean","insertText":"containsKey"},{"label":"containsValue","kind":"method","documentation":"containsValue(def a): boolean","insertText":"containsValue"},{"label":"count","kind":"method","documentation":"count(BiPredicate a): int","insertText":"count"},{"label":"each","kind":"method","documentation":"each(BiConsumer a): def","insertText":"each"},{"label":"entrySet","kind":"method","documentation":"entrySet(): Set","insertText":"entrySet"},{"label":"equals","kind":"method","documentation":"equals(Object a): boolean","insertText":"equals"},{"label":"every","kind":"method","documentation":"every(BiPredicate a): boolean","insertText":"every"},{"label":"find","kind":"method","documentation":"find(BiPredicate a): Map.Entry","insertText":"find"},{"label":"findAll","kind":"method","documentation":"findAll(BiPredicate a): Map","insertText":"findAll"},{"label":"findResult","kind":"method","documentation":"findResult(def a, BiFunction b | BiFunction a): def","insertText":"findResult"},{"label":"findResults","kind":"method","documentation":"findResults(BiFunction a): List","insertText":"findResults"},{"label":"forEach","kind":"method","documentation":"forEach(BiConsumer a): void","insertText":"forEach"},{"label":"get","kind":"method","documentation":"get(def a): def","insertText":"get"},{"label":"getByPath","kind":"method","documentation":"getByPath(String a, Object b | String a): Object","insertText":"getByPath"},{"label":"getOrDefault","kind":"method","documentation":"getOrDefault(def a, def b): def","insertText":"getOrDefault"},{"label":"groupBy","kind":"method","documentation":"groupBy(BiFunction a): Map","insertText":"groupBy"},{"label":"hashCode","kind":"method","documentation":"hashCode(): int","insertText":"hashCode"},{"label":"isEmpty","kind":"method","documentation":"isEmpty(): boolean","insertText":"isEmpty"},{"label":"keySet","kind":"method","documentation":"keySet(): Set","insertText":"keySet"},{"label":"merge","kind":"method","documentation":"merge(def a, def b, BiFunction c): def","insertText":"merge"},{"label":"put","kind":"method","documentation":"put(def a, def b): def","insertText":"put"},{"label":"putAll","kind":"method","documentation":"putAll(Map a): void","insertText":"putAll"},{"label":"putIfAbsent","kind":"method","documentation":"putIfAbsent(def a, def b): def","insertText":"putIfAbsent"},{"label":"remove","kind":"method","documentation":"remove(def a, def b | def a): boolean | def","insertText":"remove"},{"label":"replace","kind":"method","documentation":"replace(def a, def b, def c | def a, def b): boolean | def","insertText":"replace"},{"label":"replaceAll","kind":"method","documentation":"replaceAll(BiFunction a): void","insertText":"replaceAll"},{"label":"size","kind":"method","documentation":"size(): int","insertText":"size"},{"label":"toString","kind":"method","documentation":"toString(): String","insertText":"toString"},{"label":"values","kind":"method","documentation":"values(): Collection","insertText":"values"}],"constructorDefinition":{"label":"HashMap","kind":"constructor","documentation":"Constructor: HashMap","insertText":"HashMap"}},{"label":"HashSet","kind":"class","documentation":"Class: HashSet","insertText":"HashSet","properties":[{"label":"add","kind":"method","documentation":"add(def a): boolean","insertText":"add"},{"label":"addAll","kind":"method","documentation":"addAll(Collection a): boolean","insertText":"addAll"},{"label":"any","kind":"method","documentation":"any(Predicate a): boolean","insertText":"any"},{"label":"asCollection","kind":"method","documentation":"asCollection(): Collection","insertText":"asCollection"},{"label":"asList","kind":"method","documentation":"asList(): List","insertText":"asList"},{"label":"clear","kind":"method","documentation":"clear(): void","insertText":"clear"},{"label":"clone","kind":"method","documentation":"clone(): def","insertText":"clone"},{"label":"collect","kind":"method","documentation":"collect(Collection a, Function b | Function a): def | List","insertText":"collect"},{"label":"contains","kind":"method","documentation":"contains(def a): boolean","insertText":"contains"},{"label":"containsAll","kind":"method","documentation":"containsAll(Collection a): boolean","insertText":"containsAll"},{"label":"each","kind":"method","documentation":"each(Consumer a): def","insertText":"each"},{"label":"eachWithIndex","kind":"method","documentation":"eachWithIndex(ObjIntConsumer a): def","insertText":"eachWithIndex"},{"label":"equals","kind":"method","documentation":"equals(Object a): boolean","insertText":"equals"},{"label":"every","kind":"method","documentation":"every(Predicate a): boolean","insertText":"every"},{"label":"find","kind":"method","documentation":"find(Predicate a): def","insertText":"find"},{"label":"findAll","kind":"method","documentation":"findAll(Predicate a): List","insertText":"findAll"},{"label":"findResult","kind":"method","documentation":"findResult(def a, Function b | Function a): def","insertText":"findResult"},{"label":"findResults","kind":"method","documentation":"findResults(Function a): List","insertText":"findResults"},{"label":"forEach","kind":"method","documentation":"forEach(Consumer a): void","insertText":"forEach"},{"label":"groupBy","kind":"method","documentation":"groupBy(Function a): Map","insertText":"groupBy"},{"label":"hashCode","kind":"method","documentation":"hashCode(): int","insertText":"hashCode"},{"label":"isEmpty","kind":"method","documentation":"isEmpty(): boolean","insertText":"isEmpty"},{"label":"iterator","kind":"method","documentation":"iterator(): Iterator","insertText":"iterator"},{"label":"join","kind":"method","documentation":"join(String a): String","insertText":"join"},{"label":"remove","kind":"method","documentation":"remove(def a): boolean","insertText":"remove"},{"label":"removeAll","kind":"method","documentation":"removeAll(Collection a): boolean","insertText":"removeAll"},{"label":"removeIf","kind":"method","documentation":"removeIf(Predicate a): boolean","insertText":"removeIf"},{"label":"retainAll","kind":"method","documentation":"retainAll(Collection a): boolean","insertText":"retainAll"},{"label":"size","kind":"method","documentation":"size(): int","insertText":"size"},{"label":"split","kind":"method","documentation":"split(Predicate a): List","insertText":"split"},{"label":"spliterator","kind":"method","documentation":"spliterator(): Spliterator","insertText":"spliterator"},{"label":"stream","kind":"method","documentation":"stream(): Stream","insertText":"stream"},{"label":"sum","kind":"method","documentation":"sum(ToDoubleFunction a): double","insertText":"sum"},{"label":"toArray","kind":"method","documentation":"toArray(def[] a): def[]","insertText":"toArray"},{"label":"toString","kind":"method","documentation":"toString(): String","insertText":"toString"}],"constructorDefinition":{"label":"HashSet","kind":"constructor","documentation":"Constructor: HashSet","insertText":"HashSet"}},{"label":"Hashtable","kind":"class","documentation":"Class: Hashtable","insertText":"Hashtable","properties":[{"label":"clear","kind":"method","documentation":"clear(): void","insertText":"clear"},{"label":"clone","kind":"method","documentation":"clone(): def","insertText":"clone"},{"label":"collect","kind":"method","documentation":"collect(Collection a, BiFunction b | BiFunction a): def | List","insertText":"collect"},{"label":"compute","kind":"method","documentation":"compute(def a, BiFunction b): def","insertText":"compute"},{"label":"computeIfAbsent","kind":"method","documentation":"computeIfAbsent(def a, Function b): def","insertText":"computeIfAbsent"},{"label":"computeIfPresent","kind":"method","documentation":"computeIfPresent(def a, BiFunction b): def","insertText":"computeIfPresent"},{"label":"containsKey","kind":"method","documentation":"containsKey(def a): boolean","insertText":"containsKey"},{"label":"containsValue","kind":"method","documentation":"containsValue(def a): boolean","insertText":"containsValue"},{"label":"count","kind":"method","documentation":"count(BiPredicate a): int","insertText":"count"},{"label":"each","kind":"method","documentation":"each(BiConsumer a): def","insertText":"each"},{"label":"elements","kind":"method","documentation":"elements(): Enumeration","insertText":"elements"},{"label":"entrySet","kind":"method","documentation":"entrySet(): Set","insertText":"entrySet"},{"label":"equals","kind":"method","documentation":"equals(Object a): boolean","insertText":"equals"},{"label":"every","kind":"method","documentation":"every(BiPredicate a): boolean","insertText":"every"},{"label":"find","kind":"method","documentation":"find(BiPredicate a): Map.Entry","insertText":"find"},{"label":"findAll","kind":"method","documentation":"findAll(BiPredicate a): Map","insertText":"findAll"},{"label":"findResult","kind":"method","documentation":"findResult(def a, BiFunction b | BiFunction a): def","insertText":"findResult"},{"label":"findResults","kind":"method","documentation":"findResults(BiFunction a): List","insertText":"findResults"},{"label":"forEach","kind":"method","documentation":"forEach(BiConsumer a): void","insertText":"forEach"},{"label":"get","kind":"method","documentation":"get(def a): def","insertText":"get"},{"label":"getByPath","kind":"method","documentation":"getByPath(String a, Object b | String a): Object","insertText":"getByPath"},{"label":"getOrDefault","kind":"method","documentation":"getOrDefault(def a, def b): def","insertText":"getOrDefault"},{"label":"groupBy","kind":"method","documentation":"groupBy(BiFunction a): Map","insertText":"groupBy"},{"label":"hashCode","kind":"method","documentation":"hashCode(): int","insertText":"hashCode"},{"label":"isEmpty","kind":"method","documentation":"isEmpty(): boolean","insertText":"isEmpty"},{"label":"keySet","kind":"method","documentation":"keySet(): Set","insertText":"keySet"},{"label":"keys","kind":"method","documentation":"keys(): Enumeration","insertText":"keys"},{"label":"merge","kind":"method","documentation":"merge(def a, def b, BiFunction c): def","insertText":"merge"},{"label":"put","kind":"method","documentation":"put(def a, def b): def","insertText":"put"},{"label":"putAll","kind":"method","documentation":"putAll(Map a): void","insertText":"putAll"},{"label":"putIfAbsent","kind":"method","documentation":"putIfAbsent(def a, def b): def","insertText":"putIfAbsent"},{"label":"remove","kind":"method","documentation":"remove(def a, def b | def a): boolean | def","insertText":"remove"},{"label":"replace","kind":"method","documentation":"replace(def a, def b, def c | def a, def b): boolean | def","insertText":"replace"},{"label":"replaceAll","kind":"method","documentation":"replaceAll(BiFunction a): void","insertText":"replaceAll"},{"label":"size","kind":"method","documentation":"size(): int","insertText":"size"},{"label":"toString","kind":"method","documentation":"toString(): String","insertText":"toString"},{"label":"values","kind":"method","documentation":"values(): Collection","insertText":"values"}],"constructorDefinition":{"label":"Hashtable","kind":"constructor","documentation":"Constructor: Hashtable","insertText":"Hashtable"}},{"label":"IdentityHashMap","kind":"class","documentation":"Class: IdentityHashMap","insertText":"IdentityHashMap","properties":[{"label":"clear","kind":"method","documentation":"clear(): void","insertText":"clear"},{"label":"clone","kind":"method","documentation":"clone(): def","insertText":"clone"},{"label":"collect","kind":"method","documentation":"collect(Collection a, BiFunction b | BiFunction a): def | List","insertText":"collect"},{"label":"compute","kind":"method","documentation":"compute(def a, BiFunction b): def","insertText":"compute"},{"label":"computeIfAbsent","kind":"method","documentation":"computeIfAbsent(def a, Function b): def","insertText":"computeIfAbsent"},{"label":"computeIfPresent","kind":"method","documentation":"computeIfPresent(def a, BiFunction b): def","insertText":"computeIfPresent"},{"label":"containsKey","kind":"method","documentation":"containsKey(def a): boolean","insertText":"containsKey"},{"label":"containsValue","kind":"method","documentation":"containsValue(def a): boolean","insertText":"containsValue"},{"label":"count","kind":"method","documentation":"count(BiPredicate a): int","insertText":"count"},{"label":"each","kind":"method","documentation":"each(BiConsumer a): def","insertText":"each"},{"label":"entrySet","kind":"method","documentation":"entrySet(): Set","insertText":"entrySet"},{"label":"equals","kind":"method","documentation":"equals(Object a): boolean","insertText":"equals"},{"label":"every","kind":"method","documentation":"every(BiPredicate a): boolean","insertText":"every"},{"label":"find","kind":"method","documentation":"find(BiPredicate a): Map.Entry","insertText":"find"},{"label":"findAll","kind":"method","documentation":"findAll(BiPredicate a): Map","insertText":"findAll"},{"label":"findResult","kind":"method","documentation":"findResult(def a, BiFunction b | BiFunction a): def","insertText":"findResult"},{"label":"findResults","kind":"method","documentation":"findResults(BiFunction a): List","insertText":"findResults"},{"label":"forEach","kind":"method","documentation":"forEach(BiConsumer a): void","insertText":"forEach"},{"label":"get","kind":"method","documentation":"get(def a): def","insertText":"get"},{"label":"getByPath","kind":"method","documentation":"getByPath(String a, Object b | String a): Object","insertText":"getByPath"},{"label":"getOrDefault","kind":"method","documentation":"getOrDefault(def a, def b): def","insertText":"getOrDefault"},{"label":"groupBy","kind":"method","documentation":"groupBy(BiFunction a): Map","insertText":"groupBy"},{"label":"hashCode","kind":"method","documentation":"hashCode(): int","insertText":"hashCode"},{"label":"isEmpty","kind":"method","documentation":"isEmpty(): boolean","insertText":"isEmpty"},{"label":"keySet","kind":"method","documentation":"keySet(): Set","insertText":"keySet"},{"label":"merge","kind":"method","documentation":"merge(def a, def b, BiFunction c): def","insertText":"merge"},{"label":"put","kind":"method","documentation":"put(def a, def b): def","insertText":"put"},{"label":"putAll","kind":"method","documentation":"putAll(Map a): void","insertText":"putAll"},{"label":"putIfAbsent","kind":"method","documentation":"putIfAbsent(def a, def b): def","insertText":"putIfAbsent"},{"label":"remove","kind":"method","documentation":"remove(def a, def b | def a): boolean | def","insertText":"remove"},{"label":"replace","kind":"method","documentation":"replace(def a, def b, def c | def a, def b): boolean | def","insertText":"replace"},{"label":"replaceAll","kind":"method","documentation":"replaceAll(BiFunction a): void","insertText":"replaceAll"},{"label":"size","kind":"method","documentation":"size(): int","insertText":"size"},{"label":"toString","kind":"method","documentation":"toString(): String","insertText":"toString"},{"label":"values","kind":"method","documentation":"values(): Collection","insertText":"values"}],"constructorDefinition":{"label":"IdentityHashMap","kind":"constructor","documentation":"Constructor: IdentityHashMap","insertText":"IdentityHashMap"}},{"label":"IllegalFormatCodePointException","kind":"class","documentation":"Class: IllegalFormatCodePointException","insertText":"IllegalFormatCodePointException","properties":[{"label":"equals","kind":"method","documentation":"equals(Object a): boolean","insertText":"equals"},{"label":"getCodePoint","kind":"method","documentation":"getCodePoint(): int","insertText":"getCodePoint"},{"label":"getLocalizedMessage","kind":"method","documentation":"getLocalizedMessage(): String","insertText":"getLocalizedMessage"},{"label":"getMessage","kind":"method","documentation":"getMessage(): String","insertText":"getMessage"},{"label":"getStackTrace","kind":"method","documentation":"getStackTrace(): StackTraceElement[]","insertText":"getStackTrace"},{"label":"hashCode","kind":"method","documentation":"hashCode(): int","insertText":"hashCode"},{"label":"toString","kind":"method","documentation":"toString(): String","insertText":"toString"}],"constructorDefinition":{"label":"IllegalFormatCodePointException","kind":"constructor","documentation":"Constructor: IllegalFormatCodePointException","insertText":"IllegalFormatCodePointException"}},{"label":"IllegalFormatConversionException","kind":"class","documentation":"Class: IllegalFormatConversionException","insertText":"IllegalFormatConversionException","properties":[{"label":"equals","kind":"method","documentation":"equals(Object a): boolean","insertText":"equals"},{"label":"getConversion","kind":"method","documentation":"getConversion(): char","insertText":"getConversion"},{"label":"getLocalizedMessage","kind":"method","documentation":"getLocalizedMessage(): String","insertText":"getLocalizedMessage"},{"label":"getMessage","kind":"method","documentation":"getMessage(): String","insertText":"getMessage"},{"label":"getStackTrace","kind":"method","documentation":"getStackTrace(): StackTraceElement[]","insertText":"getStackTrace"},{"label":"hashCode","kind":"method","documentation":"hashCode(): int","insertText":"hashCode"},{"label":"toString","kind":"method","documentation":"toString(): String","insertText":"toString"}]},{"label":"IllegalFormatException","kind":"class","documentation":"Class: IllegalFormatException","insertText":"IllegalFormatException","properties":[{"label":"equals","kind":"method","documentation":"equals(Object a): boolean","insertText":"equals"},{"label":"getLocalizedMessage","kind":"method","documentation":"getLocalizedMessage(): String","insertText":"getLocalizedMessage"},{"label":"getMessage","kind":"method","documentation":"getMessage(): String","insertText":"getMessage"},{"label":"getStackTrace","kind":"method","documentation":"getStackTrace(): StackTraceElement[]","insertText":"getStackTrace"},{"label":"hashCode","kind":"method","documentation":"hashCode(): int","insertText":"hashCode"},{"label":"toString","kind":"method","documentation":"toString(): String","insertText":"toString"}]},{"label":"IllegalFormatFlagsException","kind":"class","documentation":"Class: IllegalFormatFlagsException","insertText":"IllegalFormatFlagsException","properties":[{"label":"equals","kind":"method","documentation":"equals(Object a): boolean","insertText":"equals"},{"label":"getFlags","kind":"method","documentation":"getFlags(): String","insertText":"getFlags"},{"label":"getLocalizedMessage","kind":"method","documentation":"getLocalizedMessage(): String","insertText":"getLocalizedMessage"},{"label":"getMessage","kind":"method","documentation":"getMessage(): String","insertText":"getMessage"},{"label":"getStackTrace","kind":"method","documentation":"getStackTrace(): StackTraceElement[]","insertText":"getStackTrace"},{"label":"hashCode","kind":"method","documentation":"hashCode(): int","insertText":"hashCode"},{"label":"toString","kind":"method","documentation":"toString(): String","insertText":"toString"}],"constructorDefinition":{"label":"IllegalFormatFlagsException","kind":"constructor","documentation":"Constructor: IllegalFormatFlagsException","insertText":"IllegalFormatFlagsException"}},{"label":"IllegalFormatPrecisionException","kind":"class","documentation":"Class: IllegalFormatPrecisionException","insertText":"IllegalFormatPrecisionException","properties":[{"label":"equals","kind":"method","documentation":"equals(Object a): boolean","insertText":"equals"},{"label":"getLocalizedMessage","kind":"method","documentation":"getLocalizedMessage(): String","insertText":"getLocalizedMessage"},{"label":"getMessage","kind":"method","documentation":"getMessage(): String","insertText":"getMessage"},{"label":"getPrecision","kind":"method","documentation":"getPrecision(): int","insertText":"getPrecision"},{"label":"getStackTrace","kind":"method","documentation":"getStackTrace(): StackTraceElement[]","insertText":"getStackTrace"},{"label":"hashCode","kind":"method","documentation":"hashCode(): int","insertText":"hashCode"},{"label":"toString","kind":"method","documentation":"toString(): String","insertText":"toString"}],"constructorDefinition":{"label":"IllegalFormatPrecisionException","kind":"constructor","documentation":"Constructor: IllegalFormatPrecisionException","insertText":"IllegalFormatPrecisionException"}},{"label":"IllegalFormatWidthException","kind":"class","documentation":"Class: IllegalFormatWidthException","insertText":"IllegalFormatWidthException","properties":[{"label":"equals","kind":"method","documentation":"equals(Object a): boolean","insertText":"equals"},{"label":"getLocalizedMessage","kind":"method","documentation":"getLocalizedMessage(): String","insertText":"getLocalizedMessage"},{"label":"getMessage","kind":"method","documentation":"getMessage(): String","insertText":"getMessage"},{"label":"getStackTrace","kind":"method","documentation":"getStackTrace(): StackTraceElement[]","insertText":"getStackTrace"},{"label":"getWidth","kind":"method","documentation":"getWidth(): int","insertText":"getWidth"},{"label":"hashCode","kind":"method","documentation":"hashCode(): int","insertText":"hashCode"},{"label":"toString","kind":"method","documentation":"toString(): String","insertText":"toString"}],"constructorDefinition":{"label":"IllegalFormatWidthException","kind":"constructor","documentation":"Constructor: IllegalFormatWidthException","insertText":"IllegalFormatWidthException"}},{"label":"IllformedLocaleException","kind":"class","documentation":"Class: IllformedLocaleException","insertText":"IllformedLocaleException","properties":[{"label":"equals","kind":"method","documentation":"equals(Object a): boolean","insertText":"equals"},{"label":"getErrorIndex","kind":"method","documentation":"getErrorIndex(): int","insertText":"getErrorIndex"},{"label":"getLocalizedMessage","kind":"method","documentation":"getLocalizedMessage(): String","insertText":"getLocalizedMessage"},{"label":"getMessage","kind":"method","documentation":"getMessage(): String","insertText":"getMessage"},{"label":"getStackTrace","kind":"method","documentation":"getStackTrace(): StackTraceElement[]","insertText":"getStackTrace"},{"label":"hashCode","kind":"method","documentation":"hashCode(): int","insertText":"hashCode"},{"label":"toString","kind":"method","documentation":"toString(): String","insertText":"toString"}],"constructorDefinition":{"label":"IllformedLocaleException","kind":"constructor","documentation":"Constructor: IllformedLocaleException","insertText":"IllformedLocaleException"}},{"label":"InputMismatchException","kind":"class","documentation":"Class: InputMismatchException","insertText":"InputMismatchException","properties":[{"label":"equals","kind":"method","documentation":"equals(Object a): boolean","insertText":"equals"},{"label":"getLocalizedMessage","kind":"method","documentation":"getLocalizedMessage(): String","insertText":"getLocalizedMessage"},{"label":"getMessage","kind":"method","documentation":"getMessage(): String","insertText":"getMessage"},{"label":"getStackTrace","kind":"method","documentation":"getStackTrace(): StackTraceElement[]","insertText":"getStackTrace"},{"label":"hashCode","kind":"method","documentation":"hashCode(): int","insertText":"hashCode"},{"label":"toString","kind":"method","documentation":"toString(): String","insertText":"toString"}],"constructorDefinition":{"label":"InputMismatchException","kind":"constructor","documentation":"Constructor: InputMismatchException","insertText":"InputMismatchException"}},{"label":"IntSummaryStatistics","kind":"class","documentation":"Class: IntSummaryStatistics","insertText":"IntSummaryStatistics","properties":[{"label":"accept","kind":"method","documentation":"accept(int a): void","insertText":"accept"},{"label":"andThen","kind":"method","documentation":"andThen(IntConsumer a): IntConsumer","insertText":"andThen"},{"label":"combine","kind":"method","documentation":"combine(IntSummaryStatistics a): void","insertText":"combine"},{"label":"equals","kind":"method","documentation":"equals(Object a): boolean","insertText":"equals"},{"label":"getAverage","kind":"method","documentation":"getAverage(): double","insertText":"getAverage"},{"label":"getCount","kind":"method","documentation":"getCount(): long","insertText":"getCount"},{"label":"getMax","kind":"method","documentation":"getMax(): int","insertText":"getMax"},{"label":"getMin","kind":"method","documentation":"getMin(): int","insertText":"getMin"},{"label":"getSum","kind":"method","documentation":"getSum(): long","insertText":"getSum"},{"label":"hashCode","kind":"method","documentation":"hashCode(): int","insertText":"hashCode"},{"label":"toString","kind":"method","documentation":"toString(): String","insertText":"toString"}],"constructorDefinition":{"label":"IntSummaryStatistics","kind":"constructor","documentation":"Constructor: IntSummaryStatistics","insertText":"IntSummaryStatistics"}},{"label":"Iterator","kind":"class","documentation":"Class: Iterator","insertText":"Iterator","properties":[{"label":"equals","kind":"method","documentation":"equals(Object a): boolean","insertText":"equals"},{"label":"forEachRemaining","kind":"method","documentation":"forEachRemaining(Consumer a): void","insertText":"forEachRemaining"},{"label":"hasNext","kind":"method","documentation":"hasNext(): boolean","insertText":"hasNext"},{"label":"hashCode","kind":"method","documentation":"hashCode(): int","insertText":"hashCode"},{"label":"next","kind":"method","documentation":"next(): def","insertText":"next"},{"label":"remove","kind":"method","documentation":"remove(): void","insertText":"remove"},{"label":"toString","kind":"method","documentation":"toString(): String","insertText":"toString"}]},{"label":"LinkedHashMap","kind":"class","documentation":"Class: LinkedHashMap","insertText":"LinkedHashMap","properties":[{"label":"clear","kind":"method","documentation":"clear(): void","insertText":"clear"},{"label":"clone","kind":"method","documentation":"clone(): def","insertText":"clone"},{"label":"collect","kind":"method","documentation":"collect(Collection a, BiFunction b | BiFunction a): def | List","insertText":"collect"},{"label":"compute","kind":"method","documentation":"compute(def a, BiFunction b): def","insertText":"compute"},{"label":"computeIfAbsent","kind":"method","documentation":"computeIfAbsent(def a, Function b): def","insertText":"computeIfAbsent"},{"label":"computeIfPresent","kind":"method","documentation":"computeIfPresent(def a, BiFunction b): def","insertText":"computeIfPresent"},{"label":"containsKey","kind":"method","documentation":"containsKey(def a): boolean","insertText":"containsKey"},{"label":"containsValue","kind":"method","documentation":"containsValue(def a): boolean","insertText":"containsValue"},{"label":"count","kind":"method","documentation":"count(BiPredicate a): int","insertText":"count"},{"label":"each","kind":"method","documentation":"each(BiConsumer a): def","insertText":"each"},{"label":"entrySet","kind":"method","documentation":"entrySet(): Set","insertText":"entrySet"},{"label":"equals","kind":"method","documentation":"equals(Object a): boolean","insertText":"equals"},{"label":"every","kind":"method","documentation":"every(BiPredicate a): boolean","insertText":"every"},{"label":"find","kind":"method","documentation":"find(BiPredicate a): Map.Entry","insertText":"find"},{"label":"findAll","kind":"method","documentation":"findAll(BiPredicate a): Map","insertText":"findAll"},{"label":"findResult","kind":"method","documentation":"findResult(def a, BiFunction b | BiFunction a): def","insertText":"findResult"},{"label":"findResults","kind":"method","documentation":"findResults(BiFunction a): List","insertText":"findResults"},{"label":"forEach","kind":"method","documentation":"forEach(BiConsumer a): void","insertText":"forEach"},{"label":"get","kind":"method","documentation":"get(def a): def","insertText":"get"},{"label":"getByPath","kind":"method","documentation":"getByPath(String a, Object b | String a): Object","insertText":"getByPath"},{"label":"getOrDefault","kind":"method","documentation":"getOrDefault(def a, def b): def","insertText":"getOrDefault"},{"label":"groupBy","kind":"method","documentation":"groupBy(BiFunction a): Map","insertText":"groupBy"},{"label":"hashCode","kind":"method","documentation":"hashCode(): int","insertText":"hashCode"},{"label":"isEmpty","kind":"method","documentation":"isEmpty(): boolean","insertText":"isEmpty"},{"label":"keySet","kind":"method","documentation":"keySet(): Set","insertText":"keySet"},{"label":"merge","kind":"method","documentation":"merge(def a, def b, BiFunction c): def","insertText":"merge"},{"label":"put","kind":"method","documentation":"put(def a, def b): def","insertText":"put"},{"label":"putAll","kind":"method","documentation":"putAll(Map a): void","insertText":"putAll"},{"label":"putIfAbsent","kind":"method","documentation":"putIfAbsent(def a, def b): def","insertText":"putIfAbsent"},{"label":"remove","kind":"method","documentation":"remove(def a, def b | def a): boolean | def","insertText":"remove"},{"label":"replace","kind":"method","documentation":"replace(def a, def b, def c | def a, def b): boolean | def","insertText":"replace"},{"label":"replaceAll","kind":"method","documentation":"replaceAll(BiFunction a): void","insertText":"replaceAll"},{"label":"size","kind":"method","documentation":"size(): int","insertText":"size"},{"label":"toString","kind":"method","documentation":"toString(): String","insertText":"toString"},{"label":"values","kind":"method","documentation":"values(): Collection","insertText":"values"}],"constructorDefinition":{"label":"LinkedHashMap","kind":"constructor","documentation":"Constructor: LinkedHashMap","insertText":"LinkedHashMap"}},{"label":"LinkedHashSet","kind":"class","documentation":"Class: LinkedHashSet","insertText":"LinkedHashSet","properties":[{"label":"add","kind":"method","documentation":"add(def a): boolean","insertText":"add"},{"label":"addAll","kind":"method","documentation":"addAll(Collection a): boolean","insertText":"addAll"},{"label":"any","kind":"method","documentation":"any(Predicate a): boolean","insertText":"any"},{"label":"asCollection","kind":"method","documentation":"asCollection(): Collection","insertText":"asCollection"},{"label":"asList","kind":"method","documentation":"asList(): List","insertText":"asList"},{"label":"clear","kind":"method","documentation":"clear(): void","insertText":"clear"},{"label":"clone","kind":"method","documentation":"clone(): def","insertText":"clone"},{"label":"collect","kind":"method","documentation":"collect(Collection a, Function b | Function a): def | List","insertText":"collect"},{"label":"contains","kind":"method","documentation":"contains(def a): boolean","insertText":"contains"},{"label":"containsAll","kind":"method","documentation":"containsAll(Collection a): boolean","insertText":"containsAll"},{"label":"each","kind":"method","documentation":"each(Consumer a): def","insertText":"each"},{"label":"eachWithIndex","kind":"method","documentation":"eachWithIndex(ObjIntConsumer a): def","insertText":"eachWithIndex"},{"label":"equals","kind":"method","documentation":"equals(Object a): boolean","insertText":"equals"},{"label":"every","kind":"method","documentation":"every(Predicate a): boolean","insertText":"every"},{"label":"find","kind":"method","documentation":"find(Predicate a): def","insertText":"find"},{"label":"findAll","kind":"method","documentation":"findAll(Predicate a): List","insertText":"findAll"},{"label":"findResult","kind":"method","documentation":"findResult(def a, Function b | Function a): def","insertText":"findResult"},{"label":"findResults","kind":"method","documentation":"findResults(Function a): List","insertText":"findResults"},{"label":"forEach","kind":"method","documentation":"forEach(Consumer a): void","insertText":"forEach"},{"label":"groupBy","kind":"method","documentation":"groupBy(Function a): Map","insertText":"groupBy"},{"label":"hashCode","kind":"method","documentation":"hashCode(): int","insertText":"hashCode"},{"label":"isEmpty","kind":"method","documentation":"isEmpty(): boolean","insertText":"isEmpty"},{"label":"iterator","kind":"method","documentation":"iterator(): Iterator","insertText":"iterator"},{"label":"join","kind":"method","documentation":"join(String a): String","insertText":"join"},{"label":"remove","kind":"method","documentation":"remove(def a): boolean","insertText":"remove"},{"label":"removeAll","kind":"method","documentation":"removeAll(Collection a): boolean","insertText":"removeAll"},{"label":"removeIf","kind":"method","documentation":"removeIf(Predicate a): boolean","insertText":"removeIf"},{"label":"retainAll","kind":"method","documentation":"retainAll(Collection a): boolean","insertText":"retainAll"},{"label":"size","kind":"method","documentation":"size(): int","insertText":"size"},{"label":"split","kind":"method","documentation":"split(Predicate a): List","insertText":"split"},{"label":"spliterator","kind":"method","documentation":"spliterator(): Spliterator","insertText":"spliterator"},{"label":"stream","kind":"method","documentation":"stream(): Stream","insertText":"stream"},{"label":"sum","kind":"method","documentation":"sum(ToDoubleFunction a): double","insertText":"sum"},{"label":"toArray","kind":"method","documentation":"toArray(def[] a): def[]","insertText":"toArray"},{"label":"toString","kind":"method","documentation":"toString(): String","insertText":"toString"}],"constructorDefinition":{"label":"LinkedHashSet","kind":"constructor","documentation":"Constructor: LinkedHashSet","insertText":"LinkedHashSet"}},{"label":"LinkedList","kind":"class","documentation":"Class: LinkedList","insertText":"LinkedList","properties":[{"label":"add","kind":"method","documentation":"add(int a, def b | def a): void | boolean","insertText":"add"},{"label":"addAll","kind":"method","documentation":"addAll(int a, Collection b | Collection a): boolean","insertText":"addAll"},{"label":"addFirst","kind":"method","documentation":"addFirst(def a): void","insertText":"addFirst"},{"label":"addLast","kind":"method","documentation":"addLast(def a): void","insertText":"addLast"},{"label":"any","kind":"method","documentation":"any(Predicate a): boolean","insertText":"any"},{"label":"asCollection","kind":"method","documentation":"asCollection(): Collection","insertText":"asCollection"},{"label":"asList","kind":"method","documentation":"asList(): List","insertText":"asList"},{"label":"clear","kind":"method","documentation":"clear(): void","insertText":"clear"},{"label":"clone","kind":"method","documentation":"clone(): def","insertText":"clone"},{"label":"collect","kind":"method","documentation":"collect(Collection a, Function b | Function a): def | List","insertText":"collect"},{"label":"contains","kind":"method","documentation":"contains(def a): boolean","insertText":"contains"},{"label":"containsAll","kind":"method","documentation":"containsAll(Collection a): boolean","insertText":"containsAll"},{"label":"descendingIterator","kind":"method","documentation":"descendingIterator(): Iterator","insertText":"descendingIterator"},{"label":"each","kind":"method","documentation":"each(Consumer a): def","insertText":"each"},{"label":"eachWithIndex","kind":"method","documentation":"eachWithIndex(ObjIntConsumer a): def","insertText":"eachWithIndex"},{"label":"element","kind":"method","documentation":"element(): def","insertText":"element"},{"label":"equals","kind":"method","documentation":"equals(Object a): boolean","insertText":"equals"},{"label":"every","kind":"method","documentation":"every(Predicate a): boolean","insertText":"every"},{"label":"find","kind":"method","documentation":"find(Predicate a): def","insertText":"find"},{"label":"findAll","kind":"method","documentation":"findAll(Predicate a): List","insertText":"findAll"},{"label":"findResult","kind":"method","documentation":"findResult(def a, Function b | Function a): def","insertText":"findResult"},{"label":"findResults","kind":"method","documentation":"findResults(Function a): List","insertText":"findResults"},{"label":"forEach","kind":"method","documentation":"forEach(Consumer a): void","insertText":"forEach"},{"label":"get","kind":"method","documentation":"get(int a): def","insertText":"get"},{"label":"getByPath","kind":"method","documentation":"getByPath(String a, Object b | String a): Object","insertText":"getByPath"},{"label":"getFirst","kind":"method","documentation":"getFirst(): def","insertText":"getFirst"},{"label":"getLast","kind":"method","documentation":"getLast(): def","insertText":"getLast"},{"label":"getLength","kind":"method","documentation":"getLength(): int","insertText":"getLength"},{"label":"groupBy","kind":"method","documentation":"groupBy(Function a): Map","insertText":"groupBy"},{"label":"hashCode","kind":"method","documentation":"hashCode(): int","insertText":"hashCode"},{"label":"indexOf","kind":"method","documentation":"indexOf(def a): int","insertText":"indexOf"},{"label":"isEmpty","kind":"method","documentation":"isEmpty(): boolean","insertText":"isEmpty"},{"label":"iterator","kind":"method","documentation":"iterator(): Iterator","insertText":"iterator"},{"label":"join","kind":"method","documentation":"join(String a): String","insertText":"join"},{"label":"lastIndexOf","kind":"method","documentation":"lastIndexOf(def a): int","insertText":"lastIndexOf"},{"label":"listIterator","kind":"method","documentation":"listIterator(int a): ListIterator","insertText":"listIterator"},{"label":"offer","kind":"method","documentation":"offer(def a): boolean","insertText":"offer"},{"label":"offerFirst","kind":"method","documentation":"offerFirst(def a): boolean","insertText":"offerFirst"},{"label":"offerLast","kind":"method","documentation":"offerLast(def a): boolean","insertText":"offerLast"},{"label":"peek","kind":"method","documentation":"peek(): def","insertText":"peek"},{"label":"peekFirst","kind":"method","documentation":"peekFirst(): def","insertText":"peekFirst"},{"label":"peekLast","kind":"method","documentation":"peekLast(): def","insertText":"peekLast"},{"label":"poll","kind":"method","documentation":"poll(): def","insertText":"poll"},{"label":"pollFirst","kind":"method","documentation":"pollFirst(): def","insertText":"pollFirst"},{"label":"pollLast","kind":"method","documentation":"pollLast(): def","insertText":"pollLast"},{"label":"pop","kind":"method","documentation":"pop(): def","insertText":"pop"},{"label":"push","kind":"method","documentation":"push(def a): void","insertText":"push"},{"label":"remove","kind":"method","documentation":"remove(int a): def","insertText":"remove"},{"label":"removeAll","kind":"method","documentation":"removeAll(Collection a): boolean","insertText":"removeAll"},{"label":"removeFirst","kind":"method","documentation":"removeFirst(): def","insertText":"removeFirst"},{"label":"removeFirstOccurrence","kind":"method","documentation":"removeFirstOccurrence(def a): boolean","insertText":"removeFirstOccurrence"},{"label":"removeIf","kind":"method","documentation":"removeIf(Predicate a): boolean","insertText":"removeIf"},{"label":"removeLast","kind":"method","documentation":"removeLast(): def","insertText":"removeLast"},{"label":"removeLastOccurrence","kind":"method","documentation":"removeLastOccurrence(def a): boolean","insertText":"removeLastOccurrence"},{"label":"replaceAll","kind":"method","documentation":"replaceAll(UnaryOperator a): void","insertText":"replaceAll"},{"label":"retainAll","kind":"method","documentation":"retainAll(Collection a): boolean","insertText":"retainAll"},{"label":"set","kind":"method","documentation":"set(int a, def b): def","insertText":"set"},{"label":"size","kind":"method","documentation":"size(): int","insertText":"size"},{"label":"sort","kind":"method","documentation":"sort(Comparator a): void","insertText":"sort"},{"label":"split","kind":"method","documentation":"split(Predicate a): List","insertText":"split"},{"label":"spliterator","kind":"method","documentation":"spliterator(): Spliterator","insertText":"spliterator"},{"label":"stream","kind":"method","documentation":"stream(): Stream","insertText":"stream"},{"label":"subList","kind":"method","documentation":"subList(int a, int b): List","insertText":"subList"},{"label":"sum","kind":"method","documentation":"sum(ToDoubleFunction a): double","insertText":"sum"},{"label":"toArray","kind":"method","documentation":"toArray(def[] a): def[]","insertText":"toArray"},{"label":"toString","kind":"method","documentation":"toString(): String","insertText":"toString"}],"constructorDefinition":{"label":"LinkedList","kind":"constructor","documentation":"Constructor: LinkedList","insertText":"LinkedList"}},{"label":"List","kind":"class","documentation":"Class: List","insertText":"List","properties":[{"label":"add","kind":"method","documentation":"add(int a, def b | def a): void | boolean","insertText":"add"},{"label":"addAll","kind":"method","documentation":"addAll(int a, Collection b | Collection a): boolean","insertText":"addAll"},{"label":"any","kind":"method","documentation":"any(Predicate a): boolean","insertText":"any"},{"label":"asCollection","kind":"method","documentation":"asCollection(): Collection","insertText":"asCollection"},{"label":"asList","kind":"method","documentation":"asList(): List","insertText":"asList"},{"label":"clear","kind":"method","documentation":"clear(): void","insertText":"clear"},{"label":"collect","kind":"method","documentation":"collect(Collection a, Function b | Function a): def | List","insertText":"collect"},{"label":"contains","kind":"method","documentation":"contains(def a): boolean","insertText":"contains"},{"label":"containsAll","kind":"method","documentation":"containsAll(Collection a): boolean","insertText":"containsAll"},{"label":"each","kind":"method","documentation":"each(Consumer a): def","insertText":"each"},{"label":"eachWithIndex","kind":"method","documentation":"eachWithIndex(ObjIntConsumer a): def","insertText":"eachWithIndex"},{"label":"equals","kind":"method","documentation":"equals(Object a): boolean","insertText":"equals"},{"label":"every","kind":"method","documentation":"every(Predicate a): boolean","insertText":"every"},{"label":"find","kind":"method","documentation":"find(Predicate a): def","insertText":"find"},{"label":"findAll","kind":"method","documentation":"findAll(Predicate a): List","insertText":"findAll"},{"label":"findResult","kind":"method","documentation":"findResult(def a, Function b | Function a): def","insertText":"findResult"},{"label":"findResults","kind":"method","documentation":"findResults(Function a): List","insertText":"findResults"},{"label":"forEach","kind":"method","documentation":"forEach(Consumer a): void","insertText":"forEach"},{"label":"get","kind":"method","documentation":"get(int a): def","insertText":"get"},{"label":"getByPath","kind":"method","documentation":"getByPath(String a, Object b | String a): Object","insertText":"getByPath"},{"label":"getLength","kind":"method","documentation":"getLength(): int","insertText":"getLength"},{"label":"groupBy","kind":"method","documentation":"groupBy(Function a): Map","insertText":"groupBy"},{"label":"hashCode","kind":"method","documentation":"hashCode(): int","insertText":"hashCode"},{"label":"indexOf","kind":"method","documentation":"indexOf(def a): int","insertText":"indexOf"},{"label":"isEmpty","kind":"method","documentation":"isEmpty(): boolean","insertText":"isEmpty"},{"label":"iterator","kind":"method","documentation":"iterator(): Iterator","insertText":"iterator"},{"label":"join","kind":"method","documentation":"join(String a): String","insertText":"join"},{"label":"lastIndexOf","kind":"method","documentation":"lastIndexOf(def a): int","insertText":"lastIndexOf"},{"label":"listIterator","kind":"method","documentation":"listIterator(int a): ListIterator","insertText":"listIterator"},{"label":"remove","kind":"method","documentation":"remove(int a): def","insertText":"remove"},{"label":"removeAll","kind":"method","documentation":"removeAll(Collection a): boolean","insertText":"removeAll"},{"label":"removeIf","kind":"method","documentation":"removeIf(Predicate a): boolean","insertText":"removeIf"},{"label":"replaceAll","kind":"method","documentation":"replaceAll(UnaryOperator a): void","insertText":"replaceAll"},{"label":"retainAll","kind":"method","documentation":"retainAll(Collection a): boolean","insertText":"retainAll"},{"label":"set","kind":"method","documentation":"set(int a, def b): def","insertText":"set"},{"label":"size","kind":"method","documentation":"size(): int","insertText":"size"},{"label":"sort","kind":"method","documentation":"sort(Comparator a): void","insertText":"sort"},{"label":"split","kind":"method","documentation":"split(Predicate a): List","insertText":"split"},{"label":"spliterator","kind":"method","documentation":"spliterator(): Spliterator","insertText":"spliterator"},{"label":"stream","kind":"method","documentation":"stream(): Stream","insertText":"stream"},{"label":"subList","kind":"method","documentation":"subList(int a, int b): List","insertText":"subList"},{"label":"sum","kind":"method","documentation":"sum(ToDoubleFunction a): double","insertText":"sum"},{"label":"toArray","kind":"method","documentation":"toArray(def[] a): def[]","insertText":"toArray"},{"label":"toString","kind":"method","documentation":"toString(): String","insertText":"toString"}]},{"label":"ListIterator","kind":"class","documentation":"Class: ListIterator","insertText":"ListIterator","properties":[{"label":"add","kind":"method","documentation":"add(def a): void","insertText":"add"},{"label":"equals","kind":"method","documentation":"equals(Object a): boolean","insertText":"equals"},{"label":"forEachRemaining","kind":"method","documentation":"forEachRemaining(Consumer a): void","insertText":"forEachRemaining"},{"label":"hasNext","kind":"method","documentation":"hasNext(): boolean","insertText":"hasNext"},{"label":"hasPrevious","kind":"method","documentation":"hasPrevious(): boolean","insertText":"hasPrevious"},{"label":"hashCode","kind":"method","documentation":"hashCode(): int","insertText":"hashCode"},{"label":"next","kind":"method","documentation":"next(): def","insertText":"next"},{"label":"nextIndex","kind":"method","documentation":"nextIndex(): int","insertText":"nextIndex"},{"label":"previousIndex","kind":"method","documentation":"previousIndex(): int","insertText":"previousIndex"},{"label":"remove","kind":"method","documentation":"remove(): void","insertText":"remove"},{"label":"set","kind":"method","documentation":"set(def a): void","insertText":"set"},{"label":"toString","kind":"method","documentation":"toString(): String","insertText":"toString"}]},{"label":"Locale","kind":"class","documentation":"Class: Locale","insertText":"Locale","properties":[{"label":"CANADA","kind":"property","documentation":"CANADA: Locale","insertText":"CANADA"},{"label":"CANADA_FRENCH","kind":"property","documentation":"CANADA_FRENCH: Locale","insertText":"CANADA_FRENCH"},{"label":"CHINA","kind":"property","documentation":"CHINA: Locale","insertText":"CHINA"},{"label":"CHINESE","kind":"property","documentation":"CHINESE: Locale","insertText":"CHINESE"},{"label":"ENGLISH","kind":"property","documentation":"ENGLISH: Locale","insertText":"ENGLISH"},{"label":"FRANCE","kind":"property","documentation":"FRANCE: Locale","insertText":"FRANCE"},{"label":"FRENCH","kind":"property","documentation":"FRENCH: Locale","insertText":"FRENCH"},{"label":"GERMAN","kind":"property","documentation":"GERMAN: Locale","insertText":"GERMAN"},{"label":"GERMANY","kind":"property","documentation":"GERMANY: Locale","insertText":"GERMANY"},{"label":"ITALIAN","kind":"property","documentation":"ITALIAN: Locale","insertText":"ITALIAN"},{"label":"ITALY","kind":"property","documentation":"ITALY: Locale","insertText":"ITALY"},{"label":"JAPAN","kind":"property","documentation":"JAPAN: Locale","insertText":"JAPAN"},{"label":"JAPANESE","kind":"property","documentation":"JAPANESE: Locale","insertText":"JAPANESE"},{"label":"KOREA","kind":"property","documentation":"KOREA: Locale","insertText":"KOREA"},{"label":"KOREAN","kind":"property","documentation":"KOREAN: Locale","insertText":"KOREAN"},{"label":"PRC","kind":"property","documentation":"PRC: Locale","insertText":"PRC"},{"label":"PRIVATE_USE_EXTENSION","kind":"property","documentation":"PRIVATE_USE_EXTENSION: char","insertText":"PRIVATE_USE_EXTENSION"},{"label":"ROOT","kind":"property","documentation":"ROOT: Locale","insertText":"ROOT"},{"label":"SIMPLIFIED_CHINESE","kind":"property","documentation":"SIMPLIFIED_CHINESE: Locale","insertText":"SIMPLIFIED_CHINESE"},{"label":"TAIWAN","kind":"property","documentation":"TAIWAN: Locale","insertText":"TAIWAN"},{"label":"TRADITIONAL_CHINESE","kind":"property","documentation":"TRADITIONAL_CHINESE: Locale","insertText":"TRADITIONAL_CHINESE"},{"label":"UK","kind":"property","documentation":"UK: Locale","insertText":"UK"},{"label":"UNICODE_LOCALE_EXTENSION","kind":"property","documentation":"UNICODE_LOCALE_EXTENSION: char","insertText":"UNICODE_LOCALE_EXTENSION"},{"label":"US","kind":"property","documentation":"US: Locale","insertText":"US"},{"label":"filter","kind":"method","documentation":"filter(List a, Collection b): List","insertText":"filter"},{"label":"filterTags","kind":"method","documentation":"filterTags(List a, Collection b): List","insertText":"filterTags"},{"label":"forLanguageTag","kind":"method","documentation":"forLanguageTag(String a): Locale","insertText":"forLanguageTag"},{"label":"getAvailableLocales","kind":"method","documentation":"getAvailableLocales(): Locale[]","insertText":"getAvailableLocales"},{"label":"getDefault","kind":"method","documentation":"getDefault(Locale.Category a): Locale","insertText":"getDefault"},{"label":"getISOCountries","kind":"method","documentation":"getISOCountries(): String[]","insertText":"getISOCountries"},{"label":"getISOLanguages","kind":"method","documentation":"getISOLanguages(): String[]","insertText":"getISOLanguages"},{"label":"lookup","kind":"method","documentation":"lookup(List a, Collection b): Locale","insertText":"lookup"},{"label":"lookupTag","kind":"method","documentation":"lookupTag(List a, Collection b): String","insertText":"lookupTag"},{"label":"clone","kind":"method","documentation":"clone(): def","insertText":"clone"},{"label":"equals","kind":"method","documentation":"equals(Object a): boolean","insertText":"equals"},{"label":"getCountry","kind":"method","documentation":"getCountry(): String","insertText":"getCountry"},{"label":"getDisplayCountry","kind":"method","documentation":"getDisplayCountry(Locale a): String","insertText":"getDisplayCountry"},{"label":"getDisplayLanguage","kind":"method","documentation":"getDisplayLanguage(Locale a): String","insertText":"getDisplayLanguage"},{"label":"getDisplayName","kind":"method","documentation":"getDisplayName(Locale a): String","insertText":"getDisplayName"},{"label":"getDisplayScript","kind":"method","documentation":"getDisplayScript(Locale a): String","insertText":"getDisplayScript"},{"label":"getDisplayVariant","kind":"method","documentation":"getDisplayVariant(Locale a): String","insertText":"getDisplayVariant"},{"label":"getExtension","kind":"method","documentation":"getExtension(char a): String","insertText":"getExtension"},{"label":"getExtensionKeys","kind":"method","documentation":"getExtensionKeys(): Set","insertText":"getExtensionKeys"},{"label":"getISO3Country","kind":"method","documentation":"getISO3Country(): String","insertText":"getISO3Country"},{"label":"getISO3Language","kind":"method","documentation":"getISO3Language(): String","insertText":"getISO3Language"},{"label":"getLanguage","kind":"method","documentation":"getLanguage(): String","insertText":"getLanguage"},{"label":"getScript","kind":"method","documentation":"getScript(): String","insertText":"getScript"},{"label":"getUnicodeLocaleAttributes","kind":"method","documentation":"getUnicodeLocaleAttributes(): Set","insertText":"getUnicodeLocaleAttributes"},{"label":"getUnicodeLocaleKeys","kind":"method","documentation":"getUnicodeLocaleKeys(): Set","insertText":"getUnicodeLocaleKeys"},{"label":"getUnicodeLocaleType","kind":"method","documentation":"getUnicodeLocaleType(String a): String","insertText":"getUnicodeLocaleType"},{"label":"getVariant","kind":"method","documentation":"getVariant(): String","insertText":"getVariant"},{"label":"hasExtensions","kind":"method","documentation":"hasExtensions(): boolean","insertText":"hasExtensions"},{"label":"hashCode","kind":"method","documentation":"hashCode(): int","insertText":"hashCode"},{"label":"stripExtensions","kind":"method","documentation":"stripExtensions(): Locale","insertText":"stripExtensions"},{"label":"toLanguageTag","kind":"method","documentation":"toLanguageTag(): String","insertText":"toLanguageTag"},{"label":"toString","kind":"method","documentation":"toString(): String","insertText":"toString"}],"constructorDefinition":{"label":"Locale","kind":"constructor","documentation":"Constructor: Locale","insertText":"Locale"}},{"label":"Builder","kind":"class","documentation":"Class: Builder","insertText":"Builder","properties":[{"label":"addUnicodeLocaleAttribute","kind":"method","documentation":"addUnicodeLocaleAttribute(String a): Locale.Builder","insertText":"addUnicodeLocaleAttribute"},{"label":"build","kind":"method","documentation":"build(): Locale","insertText":"build"},{"label":"clear","kind":"method","documentation":"clear(): Locale.Builder","insertText":"clear"},{"label":"clearExtensions","kind":"method","documentation":"clearExtensions(): Locale.Builder","insertText":"clearExtensions"},{"label":"equals","kind":"method","documentation":"equals(Object a): boolean","insertText":"equals"},{"label":"hashCode","kind":"method","documentation":"hashCode(): int","insertText":"hashCode"},{"label":"removeUnicodeLocaleAttribute","kind":"method","documentation":"removeUnicodeLocaleAttribute(String a): Locale.Builder","insertText":"removeUnicodeLocaleAttribute"},{"label":"setExtension","kind":"method","documentation":"setExtension(char a, String b): Locale.Builder","insertText":"setExtension"},{"label":"setLanguage","kind":"method","documentation":"setLanguage(String a): Locale.Builder","insertText":"setLanguage"},{"label":"setLanguageTag","kind":"method","documentation":"setLanguageTag(String a): Locale.Builder","insertText":"setLanguageTag"},{"label":"setLocale","kind":"method","documentation":"setLocale(Locale a): Locale.Builder","insertText":"setLocale"},{"label":"setRegion","kind":"method","documentation":"setRegion(String a): Locale.Builder","insertText":"setRegion"},{"label":"setScript","kind":"method","documentation":"setScript(String a): Locale.Builder","insertText":"setScript"},{"label":"setUnicodeLocaleKeyword","kind":"method","documentation":"setUnicodeLocaleKeyword(String a, String b): Locale.Builder","insertText":"setUnicodeLocaleKeyword"},{"label":"setVariant","kind":"method","documentation":"setVariant(String a): Locale.Builder","insertText":"setVariant"},{"label":"toString","kind":"method","documentation":"toString(): String","insertText":"toString"}],"constructorDefinition":{"label":"Builder","kind":"constructor","documentation":"Constructor: Builder","insertText":"Builder"}},{"label":"Category","kind":"class","documentation":"Class: Category","insertText":"Category","properties":[{"label":"DISPLAY","kind":"property","documentation":"DISPLAY: Locale.Category","insertText":"DISPLAY"},{"label":"FORMAT","kind":"property","documentation":"FORMAT: Locale.Category","insertText":"FORMAT"},{"label":"valueOf","kind":"method","documentation":"valueOf(String a): Locale.Category","insertText":"valueOf"},{"label":"values","kind":"method","documentation":"values(): Locale.Category[]","insertText":"values"},{"label":"compareTo","kind":"method","documentation":"compareTo(Enum a): int","insertText":"compareTo"},{"label":"equals","kind":"method","documentation":"equals(Object a): boolean","insertText":"equals"},{"label":"hashCode","kind":"method","documentation":"hashCode(): int","insertText":"hashCode"},{"label":"name","kind":"method","documentation":"name(): String","insertText":"name"},{"label":"ordinal","kind":"method","documentation":"ordinal(): int","insertText":"ordinal"},{"label":"toString","kind":"method","documentation":"toString(): String","insertText":"toString"}]},{"label":"FilteringMode","kind":"class","documentation":"Class: FilteringMode","insertText":"FilteringMode","properties":[{"label":"AUTOSELECT_FILTERING","kind":"property","documentation":"AUTOSELECT_FILTERING: Locale.FilteringMode","insertText":"AUTOSELECT_FILTERING"},{"label":"EXTENDED_FILTERING","kind":"property","documentation":"EXTENDED_FILTERING: Locale.FilteringMode","insertText":"EXTENDED_FILTERING"},{"label":"IGNORE_EXTENDED_RANGES","kind":"property","documentation":"IGNORE_EXTENDED_RANGES: Locale.FilteringMode","insertText":"IGNORE_EXTENDED_RANGES"},{"label":"MAP_EXTENDED_RANGES","kind":"property","documentation":"MAP_EXTENDED_RANGES: Locale.FilteringMode","insertText":"MAP_EXTENDED_RANGES"},{"label":"REJECT_EXTENDED_RANGES","kind":"property","documentation":"REJECT_EXTENDED_RANGES: Locale.FilteringMode","insertText":"REJECT_EXTENDED_RANGES"},{"label":"valueOf","kind":"method","documentation":"valueOf(String a): Locale.FilteringMode","insertText":"valueOf"},{"label":"values","kind":"method","documentation":"values(): Locale.FilteringMode[]","insertText":"values"},{"label":"compareTo","kind":"method","documentation":"compareTo(Enum a): int","insertText":"compareTo"},{"label":"equals","kind":"method","documentation":"equals(Object a): boolean","insertText":"equals"},{"label":"hashCode","kind":"method","documentation":"hashCode(): int","insertText":"hashCode"},{"label":"name","kind":"method","documentation":"name(): String","insertText":"name"},{"label":"ordinal","kind":"method","documentation":"ordinal(): int","insertText":"ordinal"},{"label":"toString","kind":"method","documentation":"toString(): String","insertText":"toString"}]},{"label":"LanguageRange","kind":"class","documentation":"Class: LanguageRange","insertText":"LanguageRange","properties":[{"label":"MAX_WEIGHT","kind":"property","documentation":"MAX_WEIGHT: double","insertText":"MAX_WEIGHT"},{"label":"MIN_WEIGHT","kind":"property","documentation":"MIN_WEIGHT: double","insertText":"MIN_WEIGHT"},{"label":"mapEquivalents","kind":"method","documentation":"mapEquivalents(List a, Map b): List","insertText":"mapEquivalents"},{"label":"parse","kind":"method","documentation":"parse(String a, Map b | String a): List","insertText":"parse"},{"label":"equals","kind":"method","documentation":"equals(Object a): boolean","insertText":"equals"},{"label":"getRange","kind":"method","documentation":"getRange(): String","insertText":"getRange"},{"label":"getWeight","kind":"method","documentation":"getWeight(): double","insertText":"getWeight"},{"label":"hashCode","kind":"method","documentation":"hashCode(): int","insertText":"hashCode"},{"label":"toString","kind":"method","documentation":"toString(): String","insertText":"toString"}],"constructorDefinition":{"label":"LanguageRange","kind":"constructor","documentation":"Constructor: LanguageRange","insertText":"LanguageRange"}},{"label":"LongSummaryStatistics","kind":"class","documentation":"Class: LongSummaryStatistics","insertText":"LongSummaryStatistics","properties":[{"label":"accept","kind":"method","documentation":"accept(long a): void","insertText":"accept"},{"label":"andThen","kind":"method","documentation":"andThen(LongConsumer a): LongConsumer","insertText":"andThen"},{"label":"combine","kind":"method","documentation":"combine(LongSummaryStatistics a): void","insertText":"combine"},{"label":"equals","kind":"method","documentation":"equals(Object a): boolean","insertText":"equals"},{"label":"getAverage","kind":"method","documentation":"getAverage(): double","insertText":"getAverage"},{"label":"getCount","kind":"method","documentation":"getCount(): long","insertText":"getCount"},{"label":"getMax","kind":"method","documentation":"getMax(): long","insertText":"getMax"},{"label":"getMin","kind":"method","documentation":"getMin(): long","insertText":"getMin"},{"label":"getSum","kind":"method","documentation":"getSum(): long","insertText":"getSum"},{"label":"hashCode","kind":"method","documentation":"hashCode(): int","insertText":"hashCode"},{"label":"toString","kind":"method","documentation":"toString(): String","insertText":"toString"}],"constructorDefinition":{"label":"LongSummaryStatistics","kind":"constructor","documentation":"Constructor: LongSummaryStatistics","insertText":"LongSummaryStatistics"}},{"label":"Map","kind":"class","documentation":"Class: Map","insertText":"Map","properties":[{"label":"clear","kind":"method","documentation":"clear(): void","insertText":"clear"},{"label":"collect","kind":"method","documentation":"collect(Collection a, BiFunction b | BiFunction a): def | List","insertText":"collect"},{"label":"compute","kind":"method","documentation":"compute(def a, BiFunction b): def","insertText":"compute"},{"label":"computeIfAbsent","kind":"method","documentation":"computeIfAbsent(def a, Function b): def","insertText":"computeIfAbsent"},{"label":"computeIfPresent","kind":"method","documentation":"computeIfPresent(def a, BiFunction b): def","insertText":"computeIfPresent"},{"label":"containsKey","kind":"method","documentation":"containsKey(def a): boolean","insertText":"containsKey"},{"label":"containsValue","kind":"method","documentation":"containsValue(def a): boolean","insertText":"containsValue"},{"label":"count","kind":"method","documentation":"count(BiPredicate a): int","insertText":"count"},{"label":"each","kind":"method","documentation":"each(BiConsumer a): def","insertText":"each"},{"label":"entrySet","kind":"method","documentation":"entrySet(): Set","insertText":"entrySet"},{"label":"equals","kind":"method","documentation":"equals(Object a): boolean","insertText":"equals"},{"label":"every","kind":"method","documentation":"every(BiPredicate a): boolean","insertText":"every"},{"label":"find","kind":"method","documentation":"find(BiPredicate a): Map.Entry","insertText":"find"},{"label":"findAll","kind":"method","documentation":"findAll(BiPredicate a): Map","insertText":"findAll"},{"label":"findResult","kind":"method","documentation":"findResult(def a, BiFunction b | BiFunction a): def","insertText":"findResult"},{"label":"findResults","kind":"method","documentation":"findResults(BiFunction a): List","insertText":"findResults"},{"label":"forEach","kind":"method","documentation":"forEach(BiConsumer a): void","insertText":"forEach"},{"label":"get","kind":"method","documentation":"get(def a): def","insertText":"get"},{"label":"getByPath","kind":"method","documentation":"getByPath(String a, Object b | String a): Object","insertText":"getByPath"},{"label":"getOrDefault","kind":"method","documentation":"getOrDefault(def a, def b): def","insertText":"getOrDefault"},{"label":"groupBy","kind":"method","documentation":"groupBy(BiFunction a): Map","insertText":"groupBy"},{"label":"hashCode","kind":"method","documentation":"hashCode(): int","insertText":"hashCode"},{"label":"isEmpty","kind":"method","documentation":"isEmpty(): boolean","insertText":"isEmpty"},{"label":"keySet","kind":"method","documentation":"keySet(): Set","insertText":"keySet"},{"label":"merge","kind":"method","documentation":"merge(def a, def b, BiFunction c): def","insertText":"merge"},{"label":"put","kind":"method","documentation":"put(def a, def b): def","insertText":"put"},{"label":"putAll","kind":"method","documentation":"putAll(Map a): void","insertText":"putAll"},{"label":"putIfAbsent","kind":"method","documentation":"putIfAbsent(def a, def b): def","insertText":"putIfAbsent"},{"label":"remove","kind":"method","documentation":"remove(def a, def b | def a): boolean | def","insertText":"remove"},{"label":"replace","kind":"method","documentation":"replace(def a, def b, def c | def a, def b): boolean | def","insertText":"replace"},{"label":"replaceAll","kind":"method","documentation":"replaceAll(BiFunction a): void","insertText":"replaceAll"},{"label":"size","kind":"method","documentation":"size(): int","insertText":"size"},{"label":"toString","kind":"method","documentation":"toString(): String","insertText":"toString"},{"label":"values","kind":"method","documentation":"values(): Collection","insertText":"values"}]},{"label":"Entry","kind":"class","documentation":"Class: Entry","insertText":"Entry","properties":[{"label":"comparingByKey","kind":"method","documentation":"comparingByKey(Comparator a): Comparator","insertText":"comparingByKey"},{"label":"comparingByValue","kind":"method","documentation":"comparingByValue(Comparator a): Comparator","insertText":"comparingByValue"},{"label":"equals","kind":"method","documentation":"equals(Object a): boolean","insertText":"equals"},{"label":"getKey","kind":"method","documentation":"getKey(): def","insertText":"getKey"},{"label":"getValue","kind":"method","documentation":"getValue(): def","insertText":"getValue"},{"label":"hashCode","kind":"method","documentation":"hashCode(): int","insertText":"hashCode"},{"label":"setValue","kind":"method","documentation":"setValue(def a): def","insertText":"setValue"},{"label":"toString","kind":"method","documentation":"toString(): String","insertText":"toString"}]},{"label":"MissingFormatArgumentException","kind":"class","documentation":"Class: MissingFormatArgumentException","insertText":"MissingFormatArgumentException","properties":[{"label":"equals","kind":"method","documentation":"equals(Object a): boolean","insertText":"equals"},{"label":"getFormatSpecifier","kind":"method","documentation":"getFormatSpecifier(): String","insertText":"getFormatSpecifier"},{"label":"getLocalizedMessage","kind":"method","documentation":"getLocalizedMessage(): String","insertText":"getLocalizedMessage"},{"label":"getMessage","kind":"method","documentation":"getMessage(): String","insertText":"getMessage"},{"label":"getStackTrace","kind":"method","documentation":"getStackTrace(): StackTraceElement[]","insertText":"getStackTrace"},{"label":"hashCode","kind":"method","documentation":"hashCode(): int","insertText":"hashCode"},{"label":"toString","kind":"method","documentation":"toString(): String","insertText":"toString"}],"constructorDefinition":{"label":"MissingFormatArgumentException","kind":"constructor","documentation":"Constructor: MissingFormatArgumentException","insertText":"MissingFormatArgumentException"}},{"label":"MissingFormatWidthException","kind":"class","documentation":"Class: MissingFormatWidthException","insertText":"MissingFormatWidthException","properties":[{"label":"equals","kind":"method","documentation":"equals(Object a): boolean","insertText":"equals"},{"label":"getFormatSpecifier","kind":"method","documentation":"getFormatSpecifier(): String","insertText":"getFormatSpecifier"},{"label":"getLocalizedMessage","kind":"method","documentation":"getLocalizedMessage(): String","insertText":"getLocalizedMessage"},{"label":"getMessage","kind":"method","documentation":"getMessage(): String","insertText":"getMessage"},{"label":"getStackTrace","kind":"method","documentation":"getStackTrace(): StackTraceElement[]","insertText":"getStackTrace"},{"label":"hashCode","kind":"method","documentation":"hashCode(): int","insertText":"hashCode"},{"label":"toString","kind":"method","documentation":"toString(): String","insertText":"toString"}],"constructorDefinition":{"label":"MissingFormatWidthException","kind":"constructor","documentation":"Constructor: MissingFormatWidthException","insertText":"MissingFormatWidthException"}},{"label":"MissingResourceException","kind":"class","documentation":"Class: MissingResourceException","insertText":"MissingResourceException","properties":[{"label":"equals","kind":"method","documentation":"equals(Object a): boolean","insertText":"equals"},{"label":"getClassName","kind":"method","documentation":"getClassName(): String","insertText":"getClassName"},{"label":"getKey","kind":"method","documentation":"getKey(): String","insertText":"getKey"},{"label":"getLocalizedMessage","kind":"method","documentation":"getLocalizedMessage(): String","insertText":"getLocalizedMessage"},{"label":"getMessage","kind":"method","documentation":"getMessage(): String","insertText":"getMessage"},{"label":"getStackTrace","kind":"method","documentation":"getStackTrace(): StackTraceElement[]","insertText":"getStackTrace"},{"label":"hashCode","kind":"method","documentation":"hashCode(): int","insertText":"hashCode"},{"label":"toString","kind":"method","documentation":"toString(): String","insertText":"toString"}],"constructorDefinition":{"label":"MissingResourceException","kind":"constructor","documentation":"Constructor: MissingResourceException","insertText":"MissingResourceException"}},{"label":"NavigableMap","kind":"class","documentation":"Class: NavigableMap","insertText":"NavigableMap","properties":[{"label":"ceilingEntry","kind":"method","documentation":"ceilingEntry(def a): Map.Entry","insertText":"ceilingEntry"},{"label":"ceilingKey","kind":"method","documentation":"ceilingKey(def a): def","insertText":"ceilingKey"},{"label":"clear","kind":"method","documentation":"clear(): void","insertText":"clear"},{"label":"collect","kind":"method","documentation":"collect(Collection a, BiFunction b | BiFunction a): def | List","insertText":"collect"},{"label":"comparator","kind":"method","documentation":"comparator(): Comparator","insertText":"comparator"},{"label":"compute","kind":"method","documentation":"compute(def a, BiFunction b): def","insertText":"compute"},{"label":"computeIfAbsent","kind":"method","documentation":"computeIfAbsent(def a, Function b): def","insertText":"computeIfAbsent"},{"label":"computeIfPresent","kind":"method","documentation":"computeIfPresent(def a, BiFunction b): def","insertText":"computeIfPresent"},{"label":"containsKey","kind":"method","documentation":"containsKey(def a): boolean","insertText":"containsKey"},{"label":"containsValue","kind":"method","documentation":"containsValue(def a): boolean","insertText":"containsValue"},{"label":"count","kind":"method","documentation":"count(BiPredicate a): int","insertText":"count"},{"label":"descendingKeySet","kind":"method","documentation":"descendingKeySet(): NavigableSet","insertText":"descendingKeySet"},{"label":"descendingMap","kind":"method","documentation":"descendingMap(): NavigableMap","insertText":"descendingMap"},{"label":"each","kind":"method","documentation":"each(BiConsumer a): def","insertText":"each"},{"label":"entrySet","kind":"method","documentation":"entrySet(): Set","insertText":"entrySet"},{"label":"equals","kind":"method","documentation":"equals(Object a): boolean","insertText":"equals"},{"label":"every","kind":"method","documentation":"every(BiPredicate a): boolean","insertText":"every"},{"label":"find","kind":"method","documentation":"find(BiPredicate a): Map.Entry","insertText":"find"},{"label":"findAll","kind":"method","documentation":"findAll(BiPredicate a): Map","insertText":"findAll"},{"label":"findResult","kind":"method","documentation":"findResult(def a, BiFunction b | BiFunction a): def","insertText":"findResult"},{"label":"findResults","kind":"method","documentation":"findResults(BiFunction a): List","insertText":"findResults"},{"label":"firstEntry","kind":"method","documentation":"firstEntry(): Map.Entry","insertText":"firstEntry"},{"label":"firstKey","kind":"method","documentation":"firstKey(): def","insertText":"firstKey"},{"label":"floorEntry","kind":"method","documentation":"floorEntry(def a): Map.Entry","insertText":"floorEntry"},{"label":"floorKey","kind":"method","documentation":"floorKey(def a): def","insertText":"floorKey"},{"label":"forEach","kind":"method","documentation":"forEach(BiConsumer a): void","insertText":"forEach"},{"label":"get","kind":"method","documentation":"get(def a): def","insertText":"get"},{"label":"getByPath","kind":"method","documentation":"getByPath(String a, Object b | String a): Object","insertText":"getByPath"},{"label":"getOrDefault","kind":"method","documentation":"getOrDefault(def a, def b): def","insertText":"getOrDefault"},{"label":"groupBy","kind":"method","documentation":"groupBy(BiFunction a): Map","insertText":"groupBy"},{"label":"hashCode","kind":"method","documentation":"hashCode(): int","insertText":"hashCode"},{"label":"headMap","kind":"method","documentation":"headMap(def a, boolean b | def a): NavigableMap | SortedMap","insertText":"headMap"},{"label":"higherEntry","kind":"method","documentation":"higherEntry(def a): Map.Entry","insertText":"higherEntry"},{"label":"higherKey","kind":"method","documentation":"higherKey(def a): def","insertText":"higherKey"},{"label":"isEmpty","kind":"method","documentation":"isEmpty(): boolean","insertText":"isEmpty"},{"label":"keySet","kind":"method","documentation":"keySet(): Set","insertText":"keySet"},{"label":"lastEntry","kind":"method","documentation":"lastEntry(): Map.Entry","insertText":"lastEntry"},{"label":"lastKey","kind":"method","documentation":"lastKey(): def","insertText":"lastKey"},{"label":"lowerEntry","kind":"method","documentation":"lowerEntry(def a): Map.Entry","insertText":"lowerEntry"},{"label":"merge","kind":"method","documentation":"merge(def a, def b, BiFunction c): def","insertText":"merge"},{"label":"navigableKeySet","kind":"method","documentation":"navigableKeySet(): NavigableSet","insertText":"navigableKeySet"},{"label":"pollFirstEntry","kind":"method","documentation":"pollFirstEntry(): Map.Entry","insertText":"pollFirstEntry"},{"label":"pollLastEntry","kind":"method","documentation":"pollLastEntry(): Map.Entry","insertText":"pollLastEntry"},{"label":"put","kind":"method","documentation":"put(def a, def b): def","insertText":"put"},{"label":"putAll","kind":"method","documentation":"putAll(Map a): void","insertText":"putAll"},{"label":"putIfAbsent","kind":"method","documentation":"putIfAbsent(def a, def b): def","insertText":"putIfAbsent"},{"label":"remove","kind":"method","documentation":"remove(def a, def b | def a): boolean | def","insertText":"remove"},{"label":"replace","kind":"method","documentation":"replace(def a, def b, def c | def a, def b): boolean | def","insertText":"replace"},{"label":"replaceAll","kind":"method","documentation":"replaceAll(BiFunction a): void","insertText":"replaceAll"},{"label":"size","kind":"method","documentation":"size(): int","insertText":"size"},{"label":"subMap","kind":"method","documentation":"subMap(def a, boolean b, def c, boolean d | def a, def b): NavigableMap | SortedMap","insertText":"subMap"},{"label":"tailMap","kind":"method","documentation":"tailMap(def a, boolean b | def a): NavigableMap | SortedMap","insertText":"tailMap"},{"label":"toString","kind":"method","documentation":"toString(): String","insertText":"toString"},{"label":"values","kind":"method","documentation":"values(): Collection","insertText":"values"}]},{"label":"NavigableSet","kind":"class","documentation":"Class: NavigableSet","insertText":"NavigableSet","properties":[{"label":"add","kind":"method","documentation":"add(def a): boolean","insertText":"add"},{"label":"addAll","kind":"method","documentation":"addAll(Collection a): boolean","insertText":"addAll"},{"label":"any","kind":"method","documentation":"any(Predicate a): boolean","insertText":"any"},{"label":"asCollection","kind":"method","documentation":"asCollection(): Collection","insertText":"asCollection"},{"label":"asList","kind":"method","documentation":"asList(): List","insertText":"asList"},{"label":"ceiling","kind":"method","documentation":"ceiling(def a): def","insertText":"ceiling"},{"label":"clear","kind":"method","documentation":"clear(): void","insertText":"clear"},{"label":"collect","kind":"method","documentation":"collect(Collection a, Function b | Function a): def | List","insertText":"collect"},{"label":"comparator","kind":"method","documentation":"comparator(): Comparator","insertText":"comparator"},{"label":"contains","kind":"method","documentation":"contains(def a): boolean","insertText":"contains"},{"label":"containsAll","kind":"method","documentation":"containsAll(Collection a): boolean","insertText":"containsAll"},{"label":"descendingIterator","kind":"method","documentation":"descendingIterator(): Iterator","insertText":"descendingIterator"},{"label":"descendingSet","kind":"method","documentation":"descendingSet(): NavigableSet","insertText":"descendingSet"},{"label":"each","kind":"method","documentation":"each(Consumer a): def","insertText":"each"},{"label":"eachWithIndex","kind":"method","documentation":"eachWithIndex(ObjIntConsumer a): def","insertText":"eachWithIndex"},{"label":"equals","kind":"method","documentation":"equals(Object a): boolean","insertText":"equals"},{"label":"every","kind":"method","documentation":"every(Predicate a): boolean","insertText":"every"},{"label":"find","kind":"method","documentation":"find(Predicate a): def","insertText":"find"},{"label":"findAll","kind":"method","documentation":"findAll(Predicate a): List","insertText":"findAll"},{"label":"findResult","kind":"method","documentation":"findResult(def a, Function b | Function a): def","insertText":"findResult"},{"label":"findResults","kind":"method","documentation":"findResults(Function a): List","insertText":"findResults"},{"label":"first","kind":"method","documentation":"first(): def","insertText":"first"},{"label":"floor","kind":"method","documentation":"floor(def a): def","insertText":"floor"},{"label":"forEach","kind":"method","documentation":"forEach(Consumer a): void","insertText":"forEach"},{"label":"groupBy","kind":"method","documentation":"groupBy(Function a): Map","insertText":"groupBy"},{"label":"hashCode","kind":"method","documentation":"hashCode(): int","insertText":"hashCode"},{"label":"headSet","kind":"method","documentation":"headSet(def a, boolean b | def a): NavigableSet | SortedSet","insertText":"headSet"},{"label":"higher","kind":"method","documentation":"higher(def a): def","insertText":"higher"},{"label":"isEmpty","kind":"method","documentation":"isEmpty(): boolean","insertText":"isEmpty"},{"label":"iterator","kind":"method","documentation":"iterator(): Iterator","insertText":"iterator"},{"label":"join","kind":"method","documentation":"join(String a): String","insertText":"join"},{"label":"last","kind":"method","documentation":"last(): def","insertText":"last"},{"label":"lower","kind":"method","documentation":"lower(def a): def","insertText":"lower"},{"label":"pollFirst","kind":"method","documentation":"pollFirst(): def","insertText":"pollFirst"},{"label":"pollLast","kind":"method","documentation":"pollLast(): def","insertText":"pollLast"},{"label":"remove","kind":"method","documentation":"remove(def a): boolean","insertText":"remove"},{"label":"removeAll","kind":"method","documentation":"removeAll(Collection a): boolean","insertText":"removeAll"},{"label":"removeIf","kind":"method","documentation":"removeIf(Predicate a): boolean","insertText":"removeIf"},{"label":"retainAll","kind":"method","documentation":"retainAll(Collection a): boolean","insertText":"retainAll"},{"label":"size","kind":"method","documentation":"size(): int","insertText":"size"},{"label":"split","kind":"method","documentation":"split(Predicate a): List","insertText":"split"},{"label":"spliterator","kind":"method","documentation":"spliterator(): Spliterator","insertText":"spliterator"},{"label":"stream","kind":"method","documentation":"stream(): Stream","insertText":"stream"},{"label":"subSet","kind":"method","documentation":"subSet(def a, boolean b, def c, boolean d | def a, def b): NavigableSet | SortedSet","insertText":"subSet"},{"label":"sum","kind":"method","documentation":"sum(ToDoubleFunction a): double","insertText":"sum"},{"label":"tailSet","kind":"method","documentation":"tailSet(def a, boolean b | def a): NavigableSet | SortedSet","insertText":"tailSet"},{"label":"toArray","kind":"method","documentation":"toArray(def[] a): def[]","insertText":"toArray"},{"label":"toString","kind":"method","documentation":"toString(): String","insertText":"toString"}]},{"label":"NoSuchElementException","kind":"class","documentation":"Class: NoSuchElementException","insertText":"NoSuchElementException","properties":[{"label":"equals","kind":"method","documentation":"equals(Object a): boolean","insertText":"equals"},{"label":"getLocalizedMessage","kind":"method","documentation":"getLocalizedMessage(): String","insertText":"getLocalizedMessage"},{"label":"getMessage","kind":"method","documentation":"getMessage(): String","insertText":"getMessage"},{"label":"getStackTrace","kind":"method","documentation":"getStackTrace(): StackTraceElement[]","insertText":"getStackTrace"},{"label":"hashCode","kind":"method","documentation":"hashCode(): int","insertText":"hashCode"},{"label":"toString","kind":"method","documentation":"toString(): String","insertText":"toString"}],"constructorDefinition":{"label":"NoSuchElementException","kind":"constructor","documentation":"Constructor: NoSuchElementException","insertText":"NoSuchElementException"}},{"label":"Objects","kind":"class","documentation":"Class: Objects","insertText":"Objects","properties":[{"label":"compare","kind":"method","documentation":"compare(def a, def b, Comparator c): int","insertText":"compare"},{"label":"deepEquals","kind":"method","documentation":"deepEquals(Object a, Object b): boolean","insertText":"deepEquals"},{"label":"equals","kind":"method","documentation":"equals(Object a, Object b): boolean","insertText":"equals"},{"label":"hash","kind":"method","documentation":"hash(Object[] a): int","insertText":"hash"},{"label":"hashCode","kind":"method","documentation":"hashCode(Object a): int","insertText":"hashCode"},{"label":"isNull","kind":"method","documentation":"isNull(Object a): boolean","insertText":"isNull"},{"label":"nonNull","kind":"method","documentation":"nonNull(Object a): boolean","insertText":"nonNull"},{"label":"requireNonNull","kind":"method","documentation":"requireNonNull(def a, String b | def a): def","insertText":"requireNonNull"},{"label":"toString","kind":"method","documentation":"toString(Object a, String b | Object a): String","insertText":"toString"},{"label":"equals","kind":"method","documentation":"equals(Object a): boolean","insertText":"equals"},{"label":"hashCode","kind":"method","documentation":"hashCode(): int","insertText":"hashCode"},{"label":"toString","kind":"method","documentation":"toString(): String","insertText":"toString"}]},{"label":"Observable","kind":"class","documentation":"Class: Observable","insertText":"Observable","properties":[{"label":"addObserver","kind":"method","documentation":"addObserver(Observer a): void","insertText":"addObserver"},{"label":"countObservers","kind":"method","documentation":"countObservers(): int","insertText":"countObservers"},{"label":"deleteObserver","kind":"method","documentation":"deleteObserver(Observer a): void","insertText":"deleteObserver"},{"label":"deleteObservers","kind":"method","documentation":"deleteObservers(): void","insertText":"deleteObservers"},{"label":"equals","kind":"method","documentation":"equals(Object a): boolean","insertText":"equals"},{"label":"hasChanged","kind":"method","documentation":"hasChanged(): boolean","insertText":"hasChanged"},{"label":"hashCode","kind":"method","documentation":"hashCode(): int","insertText":"hashCode"},{"label":"notifyObservers","kind":"method","documentation":"notifyObservers(Object a): void","insertText":"notifyObservers"},{"label":"toString","kind":"method","documentation":"toString(): String","insertText":"toString"}],"constructorDefinition":{"label":"Observable","kind":"constructor","documentation":"Constructor: Observable","insertText":"Observable"}},{"label":"Observer","kind":"class","documentation":"Class: Observer","insertText":"Observer","properties":[{"label":"equals","kind":"method","documentation":"equals(Object a): boolean","insertText":"equals"},{"label":"hashCode","kind":"method","documentation":"hashCode(): int","insertText":"hashCode"},{"label":"toString","kind":"method","documentation":"toString(): String","insertText":"toString"},{"label":"update","kind":"method","documentation":"update(Observable a, Object b): void","insertText":"update"}]},{"label":"Optional","kind":"class","documentation":"Class: Optional","insertText":"Optional","properties":[{"label":"empty","kind":"method","documentation":"empty(): Optional","insertText":"empty"},{"label":"of","kind":"method","documentation":"of(def a): Optional","insertText":"of"},{"label":"ofNullable","kind":"method","documentation":"ofNullable(def a): Optional","insertText":"ofNullable"},{"label":"equals","kind":"method","documentation":"equals(Object a): boolean","insertText":"equals"},{"label":"filter","kind":"method","documentation":"filter(Predicate a): Optional","insertText":"filter"},{"label":"flatMap","kind":"method","documentation":"flatMap(Function a): Optional","insertText":"flatMap"},{"label":"get","kind":"method","documentation":"get(): def","insertText":"get"},{"label":"hashCode","kind":"method","documentation":"hashCode(): int","insertText":"hashCode"},{"label":"ifPresent","kind":"method","documentation":"ifPresent(Consumer a): void","insertText":"ifPresent"},{"label":"isPresent","kind":"method","documentation":"isPresent(): boolean","insertText":"isPresent"},{"label":"map","kind":"method","documentation":"map(Function a): Optional","insertText":"map"},{"label":"orElse","kind":"method","documentation":"orElse(def a): def","insertText":"orElse"},{"label":"orElseGet","kind":"method","documentation":"orElseGet(Supplier a): def","insertText":"orElseGet"},{"label":"orElseThrow","kind":"method","documentation":"orElseThrow(Supplier a): def","insertText":"orElseThrow"},{"label":"toString","kind":"method","documentation":"toString(): String","insertText":"toString"}]},{"label":"OptionalDouble","kind":"class","documentation":"Class: OptionalDouble","insertText":"OptionalDouble","properties":[{"label":"empty","kind":"method","documentation":"empty(): OptionalDouble","insertText":"empty"},{"label":"of","kind":"method","documentation":"of(double a): OptionalDouble","insertText":"of"},{"label":"equals","kind":"method","documentation":"equals(Object a): boolean","insertText":"equals"},{"label":"getAsDouble","kind":"method","documentation":"getAsDouble(): double","insertText":"getAsDouble"},{"label":"hashCode","kind":"method","documentation":"hashCode(): int","insertText":"hashCode"},{"label":"ifPresent","kind":"method","documentation":"ifPresent(DoubleConsumer a): void","insertText":"ifPresent"},{"label":"isPresent","kind":"method","documentation":"isPresent(): boolean","insertText":"isPresent"},{"label":"orElse","kind":"method","documentation":"orElse(double a): double","insertText":"orElse"},{"label":"orElseGet","kind":"method","documentation":"orElseGet(DoubleSupplier a): double","insertText":"orElseGet"},{"label":"orElseThrow","kind":"method","documentation":"orElseThrow(Supplier a): double","insertText":"orElseThrow"},{"label":"toString","kind":"method","documentation":"toString(): String","insertText":"toString"}]},{"label":"OptionalInt","kind":"class","documentation":"Class: OptionalInt","insertText":"OptionalInt","properties":[{"label":"empty","kind":"method","documentation":"empty(): OptionalInt","insertText":"empty"},{"label":"of","kind":"method","documentation":"of(int a): OptionalInt","insertText":"of"},{"label":"equals","kind":"method","documentation":"equals(Object a): boolean","insertText":"equals"},{"label":"getAsInt","kind":"method","documentation":"getAsInt(): int","insertText":"getAsInt"},{"label":"hashCode","kind":"method","documentation":"hashCode(): int","insertText":"hashCode"},{"label":"ifPresent","kind":"method","documentation":"ifPresent(IntConsumer a): void","insertText":"ifPresent"},{"label":"isPresent","kind":"method","documentation":"isPresent(): boolean","insertText":"isPresent"},{"label":"orElse","kind":"method","documentation":"orElse(int a): int","insertText":"orElse"},{"label":"orElseGet","kind":"method","documentation":"orElseGet(IntSupplier a): int","insertText":"orElseGet"},{"label":"orElseThrow","kind":"method","documentation":"orElseThrow(Supplier a): int","insertText":"orElseThrow"},{"label":"toString","kind":"method","documentation":"toString(): String","insertText":"toString"}]},{"label":"OptionalLong","kind":"class","documentation":"Class: OptionalLong","insertText":"OptionalLong","properties":[{"label":"empty","kind":"method","documentation":"empty(): OptionalLong","insertText":"empty"},{"label":"of","kind":"method","documentation":"of(long a): OptionalLong","insertText":"of"},{"label":"equals","kind":"method","documentation":"equals(Object a): boolean","insertText":"equals"},{"label":"getAsLong","kind":"method","documentation":"getAsLong(): long","insertText":"getAsLong"},{"label":"hashCode","kind":"method","documentation":"hashCode(): int","insertText":"hashCode"},{"label":"ifPresent","kind":"method","documentation":"ifPresent(LongConsumer a): void","insertText":"ifPresent"},{"label":"isPresent","kind":"method","documentation":"isPresent(): boolean","insertText":"isPresent"},{"label":"orElse","kind":"method","documentation":"orElse(long a): long","insertText":"orElse"},{"label":"orElseGet","kind":"method","documentation":"orElseGet(LongSupplier a): long","insertText":"orElseGet"},{"label":"orElseThrow","kind":"method","documentation":"orElseThrow(Supplier a): long","insertText":"orElseThrow"},{"label":"toString","kind":"method","documentation":"toString(): String","insertText":"toString"}]},{"label":"PrimitiveIterator","kind":"class","documentation":"Class: PrimitiveIterator","insertText":"PrimitiveIterator","properties":[{"label":"equals","kind":"method","documentation":"equals(Object a): boolean","insertText":"equals"},{"label":"forEachRemaining","kind":"method","documentation":"forEachRemaining(def a): void","insertText":"forEachRemaining"},{"label":"hasNext","kind":"method","documentation":"hasNext(): boolean","insertText":"hasNext"},{"label":"hashCode","kind":"method","documentation":"hashCode(): int","insertText":"hashCode"},{"label":"next","kind":"method","documentation":"next(): def","insertText":"next"},{"label":"remove","kind":"method","documentation":"remove(): void","insertText":"remove"},{"label":"toString","kind":"method","documentation":"toString(): String","insertText":"toString"}]},{"label":"OfDouble","kind":"class","documentation":"Class: OfDouble","insertText":"OfDouble","properties":[{"label":"equals","kind":"method","documentation":"equals(Object a): boolean","insertText":"equals"},{"label":"forEachRemaining","kind":"method","documentation":"forEachRemaining(def a): void","insertText":"forEachRemaining"},{"label":"hasNext","kind":"method","documentation":"hasNext(): boolean","insertText":"hasNext"},{"label":"hashCode","kind":"method","documentation":"hashCode(): int","insertText":"hashCode"},{"label":"next","kind":"method","documentation":"next(): Double","insertText":"next"},{"label":"nextDouble","kind":"method","documentation":"nextDouble(): double","insertText":"nextDouble"},{"label":"remove","kind":"method","documentation":"remove(): void","insertText":"remove"},{"label":"toString","kind":"method","documentation":"toString(): String","insertText":"toString"}]},{"label":"OfInt","kind":"class","documentation":"Class: OfInt","insertText":"OfInt","properties":[{"label":"equals","kind":"method","documentation":"equals(Object a): boolean","insertText":"equals"},{"label":"forEachRemaining","kind":"method","documentation":"forEachRemaining(def a): void","insertText":"forEachRemaining"},{"label":"hasNext","kind":"method","documentation":"hasNext(): boolean","insertText":"hasNext"},{"label":"hashCode","kind":"method","documentation":"hashCode(): int","insertText":"hashCode"},{"label":"next","kind":"method","documentation":"next(): Integer","insertText":"next"},{"label":"nextInt","kind":"method","documentation":"nextInt(): int","insertText":"nextInt"},{"label":"remove","kind":"method","documentation":"remove(): void","insertText":"remove"},{"label":"toString","kind":"method","documentation":"toString(): String","insertText":"toString"}]},{"label":"OfLong","kind":"class","documentation":"Class: OfLong","insertText":"OfLong","properties":[{"label":"equals","kind":"method","documentation":"equals(Object a): boolean","insertText":"equals"},{"label":"forEachRemaining","kind":"method","documentation":"forEachRemaining(def a): void","insertText":"forEachRemaining"},{"label":"hasNext","kind":"method","documentation":"hasNext(): boolean","insertText":"hasNext"},{"label":"hashCode","kind":"method","documentation":"hashCode(): int","insertText":"hashCode"},{"label":"next","kind":"method","documentation":"next(): Long","insertText":"next"},{"label":"nextLong","kind":"method","documentation":"nextLong(): long","insertText":"nextLong"},{"label":"remove","kind":"method","documentation":"remove(): void","insertText":"remove"},{"label":"toString","kind":"method","documentation":"toString(): String","insertText":"toString"}]},{"label":"PriorityQueue","kind":"class","documentation":"Class: PriorityQueue","insertText":"PriorityQueue","properties":[{"label":"add","kind":"method","documentation":"add(def a): boolean","insertText":"add"},{"label":"addAll","kind":"method","documentation":"addAll(Collection a): boolean","insertText":"addAll"},{"label":"any","kind":"method","documentation":"any(Predicate a): boolean","insertText":"any"},{"label":"asCollection","kind":"method","documentation":"asCollection(): Collection","insertText":"asCollection"},{"label":"asList","kind":"method","documentation":"asList(): List","insertText":"asList"},{"label":"clear","kind":"method","documentation":"clear(): void","insertText":"clear"},{"label":"collect","kind":"method","documentation":"collect(Collection a, Function b | Function a): def | List","insertText":"collect"},{"label":"contains","kind":"method","documentation":"contains(def a): boolean","insertText":"contains"},{"label":"containsAll","kind":"method","documentation":"containsAll(Collection a): boolean","insertText":"containsAll"},{"label":"each","kind":"method","documentation":"each(Consumer a): def","insertText":"each"},{"label":"eachWithIndex","kind":"method","documentation":"eachWithIndex(ObjIntConsumer a): def","insertText":"eachWithIndex"},{"label":"element","kind":"method","documentation":"element(): def","insertText":"element"},{"label":"equals","kind":"method","documentation":"equals(Object a): boolean","insertText":"equals"},{"label":"every","kind":"method","documentation":"every(Predicate a): boolean","insertText":"every"},{"label":"find","kind":"method","documentation":"find(Predicate a): def","insertText":"find"},{"label":"findAll","kind":"method","documentation":"findAll(Predicate a): List","insertText":"findAll"},{"label":"findResult","kind":"method","documentation":"findResult(def a, Function b | Function a): def","insertText":"findResult"},{"label":"findResults","kind":"method","documentation":"findResults(Function a): List","insertText":"findResults"},{"label":"forEach","kind":"method","documentation":"forEach(Consumer a): void","insertText":"forEach"},{"label":"groupBy","kind":"method","documentation":"groupBy(Function a): Map","insertText":"groupBy"},{"label":"hashCode","kind":"method","documentation":"hashCode(): int","insertText":"hashCode"},{"label":"isEmpty","kind":"method","documentation":"isEmpty(): boolean","insertText":"isEmpty"},{"label":"iterator","kind":"method","documentation":"iterator(): Iterator","insertText":"iterator"},{"label":"join","kind":"method","documentation":"join(String a): String","insertText":"join"},{"label":"offer","kind":"method","documentation":"offer(def a): boolean","insertText":"offer"},{"label":"peek","kind":"method","documentation":"peek(): def","insertText":"peek"},{"label":"poll","kind":"method","documentation":"poll(): def","insertText":"poll"},{"label":"remove","kind":"method","documentation":"remove(): def","insertText":"remove"},{"label":"removeAll","kind":"method","documentation":"removeAll(Collection a): boolean","insertText":"removeAll"},{"label":"removeIf","kind":"method","documentation":"removeIf(Predicate a): boolean","insertText":"removeIf"},{"label":"retainAll","kind":"method","documentation":"retainAll(Collection a): boolean","insertText":"retainAll"},{"label":"size","kind":"method","documentation":"size(): int","insertText":"size"},{"label":"split","kind":"method","documentation":"split(Predicate a): List","insertText":"split"},{"label":"spliterator","kind":"method","documentation":"spliterator(): Spliterator","insertText":"spliterator"},{"label":"stream","kind":"method","documentation":"stream(): Stream","insertText":"stream"},{"label":"sum","kind":"method","documentation":"sum(ToDoubleFunction a): double","insertText":"sum"},{"label":"toArray","kind":"method","documentation":"toArray(def[] a): def[]","insertText":"toArray"},{"label":"toString","kind":"method","documentation":"toString(): String","insertText":"toString"}],"constructorDefinition":{"label":"PriorityQueue","kind":"constructor","documentation":"Constructor: PriorityQueue","insertText":"PriorityQueue"}},{"label":"Queue","kind":"class","documentation":"Class: Queue","insertText":"Queue","properties":[{"label":"add","kind":"method","documentation":"add(def a): boolean","insertText":"add"},{"label":"addAll","kind":"method","documentation":"addAll(Collection a): boolean","insertText":"addAll"},{"label":"any","kind":"method","documentation":"any(Predicate a): boolean","insertText":"any"},{"label":"asCollection","kind":"method","documentation":"asCollection(): Collection","insertText":"asCollection"},{"label":"asList","kind":"method","documentation":"asList(): List","insertText":"asList"},{"label":"clear","kind":"method","documentation":"clear(): void","insertText":"clear"},{"label":"collect","kind":"method","documentation":"collect(Collection a, Function b | Function a): def | List","insertText":"collect"},{"label":"contains","kind":"method","documentation":"contains(def a): boolean","insertText":"contains"},{"label":"containsAll","kind":"method","documentation":"containsAll(Collection a): boolean","insertText":"containsAll"},{"label":"each","kind":"method","documentation":"each(Consumer a): def","insertText":"each"},{"label":"eachWithIndex","kind":"method","documentation":"eachWithIndex(ObjIntConsumer a): def","insertText":"eachWithIndex"},{"label":"element","kind":"method","documentation":"element(): def","insertText":"element"},{"label":"equals","kind":"method","documentation":"equals(Object a): boolean","insertText":"equals"},{"label":"every","kind":"method","documentation":"every(Predicate a): boolean","insertText":"every"},{"label":"find","kind":"method","documentation":"find(Predicate a): def","insertText":"find"},{"label":"findAll","kind":"method","documentation":"findAll(Predicate a): List","insertText":"findAll"},{"label":"findResult","kind":"method","documentation":"findResult(def a, Function b | Function a): def","insertText":"findResult"},{"label":"findResults","kind":"method","documentation":"findResults(Function a): List","insertText":"findResults"},{"label":"forEach","kind":"method","documentation":"forEach(Consumer a): void","insertText":"forEach"},{"label":"groupBy","kind":"method","documentation":"groupBy(Function a): Map","insertText":"groupBy"},{"label":"hashCode","kind":"method","documentation":"hashCode(): int","insertText":"hashCode"},{"label":"isEmpty","kind":"method","documentation":"isEmpty(): boolean","insertText":"isEmpty"},{"label":"iterator","kind":"method","documentation":"iterator(): Iterator","insertText":"iterator"},{"label":"join","kind":"method","documentation":"join(String a): String","insertText":"join"},{"label":"offer","kind":"method","documentation":"offer(def a): boolean","insertText":"offer"},{"label":"peek","kind":"method","documentation":"peek(): def","insertText":"peek"},{"label":"poll","kind":"method","documentation":"poll(): def","insertText":"poll"},{"label":"remove","kind":"method","documentation":"remove(): def","insertText":"remove"},{"label":"removeAll","kind":"method","documentation":"removeAll(Collection a): boolean","insertText":"removeAll"},{"label":"removeIf","kind":"method","documentation":"removeIf(Predicate a): boolean","insertText":"removeIf"},{"label":"retainAll","kind":"method","documentation":"retainAll(Collection a): boolean","insertText":"retainAll"},{"label":"size","kind":"method","documentation":"size(): int","insertText":"size"},{"label":"split","kind":"method","documentation":"split(Predicate a): List","insertText":"split"},{"label":"spliterator","kind":"method","documentation":"spliterator(): Spliterator","insertText":"spliterator"},{"label":"stream","kind":"method","documentation":"stream(): Stream","insertText":"stream"},{"label":"sum","kind":"method","documentation":"sum(ToDoubleFunction a): double","insertText":"sum"},{"label":"toArray","kind":"method","documentation":"toArray(def[] a): def[]","insertText":"toArray"},{"label":"toString","kind":"method","documentation":"toString(): String","insertText":"toString"}]},{"label":"Random","kind":"class","documentation":"Class: Random","insertText":"Random","properties":[{"label":"doubles","kind":"method","documentation":"doubles(long a, double b, double c | long a): DoubleStream","insertText":"doubles"},{"label":"equals","kind":"method","documentation":"equals(Object a): boolean","insertText":"equals"},{"label":"hashCode","kind":"method","documentation":"hashCode(): int","insertText":"hashCode"},{"label":"ints","kind":"method","documentation":"ints(long a, int b, int c | long a): IntStream","insertText":"ints"},{"label":"longs","kind":"method","documentation":"longs(long a, long b, long c | long a): LongStream","insertText":"longs"},{"label":"nextBoolean","kind":"method","documentation":"nextBoolean(): boolean","insertText":"nextBoolean"},{"label":"nextBytes","kind":"method","documentation":"nextBytes(byte[] a): void","insertText":"nextBytes"},{"label":"nextDouble","kind":"method","documentation":"nextDouble(): double","insertText":"nextDouble"},{"label":"nextFloat","kind":"method","documentation":"nextFloat(): float","insertText":"nextFloat"},{"label":"nextGaussian","kind":"method","documentation":"nextGaussian(): double","insertText":"nextGaussian"},{"label":"nextInt","kind":"method","documentation":"nextInt(int a): int","insertText":"nextInt"},{"label":"nextLong","kind":"method","documentation":"nextLong(): long","insertText":"nextLong"},{"label":"setSeed","kind":"method","documentation":"setSeed(long a): void","insertText":"setSeed"},{"label":"toString","kind":"method","documentation":"toString(): String","insertText":"toString"}],"constructorDefinition":{"label":"Random","kind":"constructor","documentation":"Constructor: Random","insertText":"Random"}},{"label":"RandomAccess","kind":"class","documentation":"Class: RandomAccess","insertText":"RandomAccess","properties":[{"label":"equals","kind":"method","documentation":"equals(Object a): boolean","insertText":"equals"},{"label":"hashCode","kind":"method","documentation":"hashCode(): int","insertText":"hashCode"},{"label":"toString","kind":"method","documentation":"toString(): String","insertText":"toString"}]},{"label":"Set","kind":"class","documentation":"Class: Set","insertText":"Set","properties":[{"label":"add","kind":"method","documentation":"add(def a): boolean","insertText":"add"},{"label":"addAll","kind":"method","documentation":"addAll(Collection a): boolean","insertText":"addAll"},{"label":"any","kind":"method","documentation":"any(Predicate a): boolean","insertText":"any"},{"label":"asCollection","kind":"method","documentation":"asCollection(): Collection","insertText":"asCollection"},{"label":"asList","kind":"method","documentation":"asList(): List","insertText":"asList"},{"label":"clear","kind":"method","documentation":"clear(): void","insertText":"clear"},{"label":"collect","kind":"method","documentation":"collect(Collection a, Function b | Function a): def | List","insertText":"collect"},{"label":"contains","kind":"method","documentation":"contains(def a): boolean","insertText":"contains"},{"label":"containsAll","kind":"method","documentation":"containsAll(Collection a): boolean","insertText":"containsAll"},{"label":"each","kind":"method","documentation":"each(Consumer a): def","insertText":"each"},{"label":"eachWithIndex","kind":"method","documentation":"eachWithIndex(ObjIntConsumer a): def","insertText":"eachWithIndex"},{"label":"equals","kind":"method","documentation":"equals(Object a): boolean","insertText":"equals"},{"label":"every","kind":"method","documentation":"every(Predicate a): boolean","insertText":"every"},{"label":"find","kind":"method","documentation":"find(Predicate a): def","insertText":"find"},{"label":"findAll","kind":"method","documentation":"findAll(Predicate a): List","insertText":"findAll"},{"label":"findResult","kind":"method","documentation":"findResult(def a, Function b | Function a): def","insertText":"findResult"},{"label":"findResults","kind":"method","documentation":"findResults(Function a): List","insertText":"findResults"},{"label":"forEach","kind":"method","documentation":"forEach(Consumer a): void","insertText":"forEach"},{"label":"groupBy","kind":"method","documentation":"groupBy(Function a): Map","insertText":"groupBy"},{"label":"hashCode","kind":"method","documentation":"hashCode(): int","insertText":"hashCode"},{"label":"isEmpty","kind":"method","documentation":"isEmpty(): boolean","insertText":"isEmpty"},{"label":"iterator","kind":"method","documentation":"iterator(): Iterator","insertText":"iterator"},{"label":"join","kind":"method","documentation":"join(String a): String","insertText":"join"},{"label":"remove","kind":"method","documentation":"remove(def a): boolean","insertText":"remove"},{"label":"removeAll","kind":"method","documentation":"removeAll(Collection a): boolean","insertText":"removeAll"},{"label":"removeIf","kind":"method","documentation":"removeIf(Predicate a): boolean","insertText":"removeIf"},{"label":"retainAll","kind":"method","documentation":"retainAll(Collection a): boolean","insertText":"retainAll"},{"label":"size","kind":"method","documentation":"size(): int","insertText":"size"},{"label":"split","kind":"method","documentation":"split(Predicate a): List","insertText":"split"},{"label":"spliterator","kind":"method","documentation":"spliterator(): Spliterator","insertText":"spliterator"},{"label":"stream","kind":"method","documentation":"stream(): Stream","insertText":"stream"},{"label":"sum","kind":"method","documentation":"sum(ToDoubleFunction a): double","insertText":"sum"},{"label":"toArray","kind":"method","documentation":"toArray(def[] a): def[]","insertText":"toArray"},{"label":"toString","kind":"method","documentation":"toString(): String","insertText":"toString"}]},{"label":"SimpleTimeZone","kind":"class","documentation":"Class: SimpleTimeZone","insertText":"SimpleTimeZone","properties":[{"label":"STANDARD_TIME","kind":"property","documentation":"STANDARD_TIME: int","insertText":"STANDARD_TIME"},{"label":"UTC_TIME","kind":"property","documentation":"UTC_TIME: int","insertText":"UTC_TIME"},{"label":"WALL_TIME","kind":"property","documentation":"WALL_TIME: int","insertText":"WALL_TIME"},{"label":"clone","kind":"method","documentation":"clone(): def","insertText":"clone"},{"label":"equals","kind":"method","documentation":"equals(Object a): boolean","insertText":"equals"},{"label":"getDSTSavings","kind":"method","documentation":"getDSTSavings(): int","insertText":"getDSTSavings"},{"label":"getDisplayName","kind":"method","documentation":"getDisplayName(boolean a, int b, Locale c | boolean a, int b | Locale a): String","insertText":"getDisplayName"},{"label":"getID","kind":"method","documentation":"getID(): String","insertText":"getID"},{"label":"getOffset","kind":"method","documentation":"getOffset(int a, int b, int c, int d, int e, int f | long a): int","insertText":"getOffset"},{"label":"getRawOffset","kind":"method","documentation":"getRawOffset(): int","insertText":"getRawOffset"},{"label":"hasSameRules","kind":"method","documentation":"hasSameRules(TimeZone a): boolean","insertText":"hasSameRules"},{"label":"hashCode","kind":"method","documentation":"hashCode(): int","insertText":"hashCode"},{"label":"inDaylightTime","kind":"method","documentation":"inDaylightTime(Date a): boolean","insertText":"inDaylightTime"},{"label":"observesDaylightTime","kind":"method","documentation":"observesDaylightTime(): boolean","insertText":"observesDaylightTime"},{"label":"setDSTSavings","kind":"method","documentation":"setDSTSavings(int a): void","insertText":"setDSTSavings"},{"label":"setEndRule","kind":"method","documentation":"setEndRule(int a, int b, int c, int d, boolean e | int a, int b, int c, int d | int a, int b, int c): void","insertText":"setEndRule"},{"label":"setRawOffset","kind":"method","documentation":"setRawOffset(int a): void","insertText":"setRawOffset"},{"label":"setStartRule","kind":"method","documentation":"setStartRule(int a, int b, int c, int d, boolean e | int a, int b, int c, int d | int a, int b, int c): void","insertText":"setStartRule"},{"label":"setStartYear","kind":"method","documentation":"setStartYear(int a): void","insertText":"setStartYear"},{"label":"toString","kind":"method","documentation":"toString(): String","insertText":"toString"},{"label":"toZoneId","kind":"method","documentation":"toZoneId(): ZoneId","insertText":"toZoneId"},{"label":"useDaylightTime","kind":"method","documentation":"useDaylightTime(): boolean","insertText":"useDaylightTime"}],"constructorDefinition":{"label":"SimpleTimeZone","kind":"constructor","documentation":"Constructor: SimpleTimeZone","insertText":"SimpleTimeZone"}},{"label":"SortedMap","kind":"class","documentation":"Class: SortedMap","insertText":"SortedMap","properties":[{"label":"clear","kind":"method","documentation":"clear(): void","insertText":"clear"},{"label":"collect","kind":"method","documentation":"collect(Collection a, BiFunction b | BiFunction a): def | List","insertText":"collect"},{"label":"comparator","kind":"method","documentation":"comparator(): Comparator","insertText":"comparator"},{"label":"compute","kind":"method","documentation":"compute(def a, BiFunction b): def","insertText":"compute"},{"label":"computeIfAbsent","kind":"method","documentation":"computeIfAbsent(def a, Function b): def","insertText":"computeIfAbsent"},{"label":"computeIfPresent","kind":"method","documentation":"computeIfPresent(def a, BiFunction b): def","insertText":"computeIfPresent"},{"label":"containsKey","kind":"method","documentation":"containsKey(def a): boolean","insertText":"containsKey"},{"label":"containsValue","kind":"method","documentation":"containsValue(def a): boolean","insertText":"containsValue"},{"label":"count","kind":"method","documentation":"count(BiPredicate a): int","insertText":"count"},{"label":"each","kind":"method","documentation":"each(BiConsumer a): def","insertText":"each"},{"label":"entrySet","kind":"method","documentation":"entrySet(): Set","insertText":"entrySet"},{"label":"equals","kind":"method","documentation":"equals(Object a): boolean","insertText":"equals"},{"label":"every","kind":"method","documentation":"every(BiPredicate a): boolean","insertText":"every"},{"label":"find","kind":"method","documentation":"find(BiPredicate a): Map.Entry","insertText":"find"},{"label":"findAll","kind":"method","documentation":"findAll(BiPredicate a): Map","insertText":"findAll"},{"label":"findResult","kind":"method","documentation":"findResult(def a, BiFunction b | BiFunction a): def","insertText":"findResult"},{"label":"findResults","kind":"method","documentation":"findResults(BiFunction a): List","insertText":"findResults"},{"label":"firstKey","kind":"method","documentation":"firstKey(): def","insertText":"firstKey"},{"label":"forEach","kind":"method","documentation":"forEach(BiConsumer a): void","insertText":"forEach"},{"label":"get","kind":"method","documentation":"get(def a): def","insertText":"get"},{"label":"getByPath","kind":"method","documentation":"getByPath(String a, Object b | String a): Object","insertText":"getByPath"},{"label":"getOrDefault","kind":"method","documentation":"getOrDefault(def a, def b): def","insertText":"getOrDefault"},{"label":"groupBy","kind":"method","documentation":"groupBy(BiFunction a): Map","insertText":"groupBy"},{"label":"hashCode","kind":"method","documentation":"hashCode(): int","insertText":"hashCode"},{"label":"headMap","kind":"method","documentation":"headMap(def a): SortedMap","insertText":"headMap"},{"label":"isEmpty","kind":"method","documentation":"isEmpty(): boolean","insertText":"isEmpty"},{"label":"keySet","kind":"method","documentation":"keySet(): Set","insertText":"keySet"},{"label":"lastKey","kind":"method","documentation":"lastKey(): def","insertText":"lastKey"},{"label":"merge","kind":"method","documentation":"merge(def a, def b, BiFunction c): def","insertText":"merge"},{"label":"put","kind":"method","documentation":"put(def a, def b): def","insertText":"put"},{"label":"putAll","kind":"method","documentation":"putAll(Map a): void","insertText":"putAll"},{"label":"putIfAbsent","kind":"method","documentation":"putIfAbsent(def a, def b): def","insertText":"putIfAbsent"},{"label":"remove","kind":"method","documentation":"remove(def a, def b | def a): boolean | def","insertText":"remove"},{"label":"replace","kind":"method","documentation":"replace(def a, def b, def c | def a, def b): boolean | def","insertText":"replace"},{"label":"replaceAll","kind":"method","documentation":"replaceAll(BiFunction a): void","insertText":"replaceAll"},{"label":"size","kind":"method","documentation":"size(): int","insertText":"size"},{"label":"subMap","kind":"method","documentation":"subMap(def a, def b): SortedMap","insertText":"subMap"},{"label":"tailMap","kind":"method","documentation":"tailMap(def a): SortedMap","insertText":"tailMap"},{"label":"toString","kind":"method","documentation":"toString(): String","insertText":"toString"},{"label":"values","kind":"method","documentation":"values(): Collection","insertText":"values"}]},{"label":"SortedSet","kind":"class","documentation":"Class: SortedSet","insertText":"SortedSet","properties":[{"label":"add","kind":"method","documentation":"add(def a): boolean","insertText":"add"},{"label":"addAll","kind":"method","documentation":"addAll(Collection a): boolean","insertText":"addAll"},{"label":"any","kind":"method","documentation":"any(Predicate a): boolean","insertText":"any"},{"label":"asCollection","kind":"method","documentation":"asCollection(): Collection","insertText":"asCollection"},{"label":"asList","kind":"method","documentation":"asList(): List","insertText":"asList"},{"label":"clear","kind":"method","documentation":"clear(): void","insertText":"clear"},{"label":"collect","kind":"method","documentation":"collect(Collection a, Function b | Function a): def | List","insertText":"collect"},{"label":"comparator","kind":"method","documentation":"comparator(): Comparator","insertText":"comparator"},{"label":"contains","kind":"method","documentation":"contains(def a): boolean","insertText":"contains"},{"label":"containsAll","kind":"method","documentation":"containsAll(Collection a): boolean","insertText":"containsAll"},{"label":"each","kind":"method","documentation":"each(Consumer a): def","insertText":"each"},{"label":"eachWithIndex","kind":"method","documentation":"eachWithIndex(ObjIntConsumer a): def","insertText":"eachWithIndex"},{"label":"equals","kind":"method","documentation":"equals(Object a): boolean","insertText":"equals"},{"label":"every","kind":"method","documentation":"every(Predicate a): boolean","insertText":"every"},{"label":"find","kind":"method","documentation":"find(Predicate a): def","insertText":"find"},{"label":"findAll","kind":"method","documentation":"findAll(Predicate a): List","insertText":"findAll"},{"label":"findResult","kind":"method","documentation":"findResult(def a, Function b | Function a): def","insertText":"findResult"},{"label":"findResults","kind":"method","documentation":"findResults(Function a): List","insertText":"findResults"},{"label":"first","kind":"method","documentation":"first(): def","insertText":"first"},{"label":"forEach","kind":"method","documentation":"forEach(Consumer a): void","insertText":"forEach"},{"label":"groupBy","kind":"method","documentation":"groupBy(Function a): Map","insertText":"groupBy"},{"label":"hashCode","kind":"method","documentation":"hashCode(): int","insertText":"hashCode"},{"label":"headSet","kind":"method","documentation":"headSet(def a): SortedSet","insertText":"headSet"},{"label":"isEmpty","kind":"method","documentation":"isEmpty(): boolean","insertText":"isEmpty"},{"label":"iterator","kind":"method","documentation":"iterator(): Iterator","insertText":"iterator"},{"label":"join","kind":"method","documentation":"join(String a): String","insertText":"join"},{"label":"last","kind":"method","documentation":"last(): def","insertText":"last"},{"label":"remove","kind":"method","documentation":"remove(def a): boolean","insertText":"remove"},{"label":"removeAll","kind":"method","documentation":"removeAll(Collection a): boolean","insertText":"removeAll"},{"label":"removeIf","kind":"method","documentation":"removeIf(Predicate a): boolean","insertText":"removeIf"},{"label":"retainAll","kind":"method","documentation":"retainAll(Collection a): boolean","insertText":"retainAll"},{"label":"size","kind":"method","documentation":"size(): int","insertText":"size"},{"label":"split","kind":"method","documentation":"split(Predicate a): List","insertText":"split"},{"label":"spliterator","kind":"method","documentation":"spliterator(): Spliterator","insertText":"spliterator"},{"label":"stream","kind":"method","documentation":"stream(): Stream","insertText":"stream"},{"label":"subSet","kind":"method","documentation":"subSet(def a, def b): SortedSet","insertText":"subSet"},{"label":"sum","kind":"method","documentation":"sum(ToDoubleFunction a): double","insertText":"sum"},{"label":"tailSet","kind":"method","documentation":"tailSet(def a): SortedSet","insertText":"tailSet"},{"label":"toArray","kind":"method","documentation":"toArray(def[] a): def[]","insertText":"toArray"},{"label":"toString","kind":"method","documentation":"toString(): String","insertText":"toString"}]},{"label":"Spliterator","kind":"class","documentation":"Class: Spliterator","insertText":"Spliterator","properties":[{"label":"CONCURRENT","kind":"property","documentation":"CONCURRENT: int","insertText":"CONCURRENT"},{"label":"DISTINCT","kind":"property","documentation":"DISTINCT: int","insertText":"DISTINCT"},{"label":"IMMUTABLE","kind":"property","documentation":"IMMUTABLE: int","insertText":"IMMUTABLE"},{"label":"NONNULL","kind":"property","documentation":"NONNULL: int","insertText":"NONNULL"},{"label":"ORDERED","kind":"property","documentation":"ORDERED: int","insertText":"ORDERED"},{"label":"SIZED","kind":"property","documentation":"SIZED: int","insertText":"SIZED"},{"label":"SORTED","kind":"property","documentation":"SORTED: int","insertText":"SORTED"},{"label":"SUBSIZED","kind":"property","documentation":"SUBSIZED: int","insertText":"SUBSIZED"},{"label":"characteristics","kind":"method","documentation":"characteristics(): int","insertText":"characteristics"},{"label":"equals","kind":"method","documentation":"equals(Object a): boolean","insertText":"equals"},{"label":"estimateSize","kind":"method","documentation":"estimateSize(): long","insertText":"estimateSize"},{"label":"forEachRemaining","kind":"method","documentation":"forEachRemaining(Consumer a): void","insertText":"forEachRemaining"},{"label":"getComparator","kind":"method","documentation":"getComparator(): Comparator","insertText":"getComparator"},{"label":"getExactSizeIfKnown","kind":"method","documentation":"getExactSizeIfKnown(): long","insertText":"getExactSizeIfKnown"},{"label":"hasCharacteristics","kind":"method","documentation":"hasCharacteristics(int a): boolean","insertText":"hasCharacteristics"},{"label":"hashCode","kind":"method","documentation":"hashCode(): int","insertText":"hashCode"},{"label":"toString","kind":"method","documentation":"toString(): String","insertText":"toString"},{"label":"tryAdvance","kind":"method","documentation":"tryAdvance(Consumer a): boolean","insertText":"tryAdvance"},{"label":"trySplit","kind":"method","documentation":"trySplit(): Spliterator","insertText":"trySplit"}]},{"label":"OfDouble","kind":"class","documentation":"Class: OfDouble","insertText":"OfDouble","properties":[{"label":"characteristics","kind":"method","documentation":"characteristics(): int","insertText":"characteristics"},{"label":"equals","kind":"method","documentation":"equals(Object a): boolean","insertText":"equals"},{"label":"estimateSize","kind":"method","documentation":"estimateSize(): long","insertText":"estimateSize"},{"label":"forEachRemaining","kind":"method","documentation":"forEachRemaining(def a): void","insertText":"forEachRemaining"},{"label":"getComparator","kind":"method","documentation":"getComparator(): Comparator","insertText":"getComparator"},{"label":"getExactSizeIfKnown","kind":"method","documentation":"getExactSizeIfKnown(): long","insertText":"getExactSizeIfKnown"},{"label":"hasCharacteristics","kind":"method","documentation":"hasCharacteristics(int a): boolean","insertText":"hasCharacteristics"},{"label":"hashCode","kind":"method","documentation":"hashCode(): int","insertText":"hashCode"},{"label":"toString","kind":"method","documentation":"toString(): String","insertText":"toString"},{"label":"tryAdvance","kind":"method","documentation":"tryAdvance(def a): boolean","insertText":"tryAdvance"},{"label":"trySplit","kind":"method","documentation":"trySplit(): Spliterator.OfDouble","insertText":"trySplit"}]},{"label":"OfInt","kind":"class","documentation":"Class: OfInt","insertText":"OfInt","properties":[{"label":"characteristics","kind":"method","documentation":"characteristics(): int","insertText":"characteristics"},{"label":"equals","kind":"method","documentation":"equals(Object a): boolean","insertText":"equals"},{"label":"estimateSize","kind":"method","documentation":"estimateSize(): long","insertText":"estimateSize"},{"label":"forEachRemaining","kind":"method","documentation":"forEachRemaining(def a): void","insertText":"forEachRemaining"},{"label":"getComparator","kind":"method","documentation":"getComparator(): Comparator","insertText":"getComparator"},{"label":"getExactSizeIfKnown","kind":"method","documentation":"getExactSizeIfKnown(): long","insertText":"getExactSizeIfKnown"},{"label":"hasCharacteristics","kind":"method","documentation":"hasCharacteristics(int a): boolean","insertText":"hasCharacteristics"},{"label":"hashCode","kind":"method","documentation":"hashCode(): int","insertText":"hashCode"},{"label":"toString","kind":"method","documentation":"toString(): String","insertText":"toString"},{"label":"tryAdvance","kind":"method","documentation":"tryAdvance(def a): boolean","insertText":"tryAdvance"},{"label":"trySplit","kind":"method","documentation":"trySplit(): Spliterator.OfInt","insertText":"trySplit"}]},{"label":"OfLong","kind":"class","documentation":"Class: OfLong","insertText":"OfLong","properties":[{"label":"characteristics","kind":"method","documentation":"characteristics(): int","insertText":"characteristics"},{"label":"equals","kind":"method","documentation":"equals(Object a): boolean","insertText":"equals"},{"label":"estimateSize","kind":"method","documentation":"estimateSize(): long","insertText":"estimateSize"},{"label":"forEachRemaining","kind":"method","documentation":"forEachRemaining(def a): void","insertText":"forEachRemaining"},{"label":"getComparator","kind":"method","documentation":"getComparator(): Comparator","insertText":"getComparator"},{"label":"getExactSizeIfKnown","kind":"method","documentation":"getExactSizeIfKnown(): long","insertText":"getExactSizeIfKnown"},{"label":"hasCharacteristics","kind":"method","documentation":"hasCharacteristics(int a): boolean","insertText":"hasCharacteristics"},{"label":"hashCode","kind":"method","documentation":"hashCode(): int","insertText":"hashCode"},{"label":"toString","kind":"method","documentation":"toString(): String","insertText":"toString"},{"label":"tryAdvance","kind":"method","documentation":"tryAdvance(def a): boolean","insertText":"tryAdvance"},{"label":"trySplit","kind":"method","documentation":"trySplit(): Spliterator.OfLong","insertText":"trySplit"}]},{"label":"OfPrimitive","kind":"class","documentation":"Class: OfPrimitive","insertText":"OfPrimitive","properties":[{"label":"characteristics","kind":"method","documentation":"characteristics(): int","insertText":"characteristics"},{"label":"equals","kind":"method","documentation":"equals(Object a): boolean","insertText":"equals"},{"label":"estimateSize","kind":"method","documentation":"estimateSize(): long","insertText":"estimateSize"},{"label":"forEachRemaining","kind":"method","documentation":"forEachRemaining(def a): void","insertText":"forEachRemaining"},{"label":"getComparator","kind":"method","documentation":"getComparator(): Comparator","insertText":"getComparator"},{"label":"getExactSizeIfKnown","kind":"method","documentation":"getExactSizeIfKnown(): long","insertText":"getExactSizeIfKnown"},{"label":"hasCharacteristics","kind":"method","documentation":"hasCharacteristics(int a): boolean","insertText":"hasCharacteristics"},{"label":"hashCode","kind":"method","documentation":"hashCode(): int","insertText":"hashCode"},{"label":"toString","kind":"method","documentation":"toString(): String","insertText":"toString"},{"label":"tryAdvance","kind":"method","documentation":"tryAdvance(def a): boolean","insertText":"tryAdvance"},{"label":"trySplit","kind":"method","documentation":"trySplit(): Spliterator.OfPrimitive","insertText":"trySplit"}]},{"label":"Spliterators","kind":"class","documentation":"Class: Spliterators","insertText":"Spliterators","properties":[{"label":"emptyDoubleSpliterator","kind":"method","documentation":"emptyDoubleSpliterator(): Spliterator.OfDouble","insertText":"emptyDoubleSpliterator"},{"label":"emptyIntSpliterator","kind":"method","documentation":"emptyIntSpliterator(): Spliterator.OfInt","insertText":"emptyIntSpliterator"},{"label":"emptyLongSpliterator","kind":"method","documentation":"emptyLongSpliterator(): Spliterator.OfLong","insertText":"emptyLongSpliterator"},{"label":"emptySpliterator","kind":"method","documentation":"emptySpliterator(): Spliterator","insertText":"emptySpliterator"},{"label":"iterator","kind":"method","documentation":"iterator(Spliterator a): Iterator","insertText":"iterator"},{"label":"spliterator","kind":"method","documentation":"spliterator(Iterator a, long b, int c | Collection a, int b): Spliterator","insertText":"spliterator"},{"label":"spliteratorUnknownSize","kind":"method","documentation":"spliteratorUnknownSize(Iterator a, int b): Spliterator","insertText":"spliteratorUnknownSize"},{"label":"equals","kind":"method","documentation":"equals(Object a): boolean","insertText":"equals"},{"label":"hashCode","kind":"method","documentation":"hashCode(): int","insertText":"hashCode"},{"label":"toString","kind":"method","documentation":"toString(): String","insertText":"toString"}]},{"label":"Stack","kind":"class","documentation":"Class: Stack","insertText":"Stack","properties":[{"label":"add","kind":"method","documentation":"add(int a, def b | def a): void | boolean","insertText":"add"},{"label":"addAll","kind":"method","documentation":"addAll(int a, Collection b | Collection a): boolean","insertText":"addAll"},{"label":"addElement","kind":"method","documentation":"addElement(def a): void","insertText":"addElement"},{"label":"any","kind":"method","documentation":"any(Predicate a): boolean","insertText":"any"},{"label":"asCollection","kind":"method","documentation":"asCollection(): Collection","insertText":"asCollection"},{"label":"asList","kind":"method","documentation":"asList(): List","insertText":"asList"},{"label":"clear","kind":"method","documentation":"clear(): void","insertText":"clear"},{"label":"clone","kind":"method","documentation":"clone(): def","insertText":"clone"},{"label":"collect","kind":"method","documentation":"collect(Collection a, Function b | Function a): def | List","insertText":"collect"},{"label":"contains","kind":"method","documentation":"contains(def a): boolean","insertText":"contains"},{"label":"containsAll","kind":"method","documentation":"containsAll(Collection a): boolean","insertText":"containsAll"},{"label":"copyInto","kind":"method","documentation":"copyInto(Object[] a): void","insertText":"copyInto"},{"label":"each","kind":"method","documentation":"each(Consumer a): def","insertText":"each"},{"label":"eachWithIndex","kind":"method","documentation":"eachWithIndex(ObjIntConsumer a): def","insertText":"eachWithIndex"},{"label":"elementAt","kind":"method","documentation":"elementAt(int a): def","insertText":"elementAt"},{"label":"elements","kind":"method","documentation":"elements(): Enumeration","insertText":"elements"},{"label":"empty","kind":"method","documentation":"empty(): boolean","insertText":"empty"},{"label":"equals","kind":"method","documentation":"equals(Object a): boolean","insertText":"equals"},{"label":"every","kind":"method","documentation":"every(Predicate a): boolean","insertText":"every"},{"label":"find","kind":"method","documentation":"find(Predicate a): def","insertText":"find"},{"label":"findAll","kind":"method","documentation":"findAll(Predicate a): List","insertText":"findAll"},{"label":"findResult","kind":"method","documentation":"findResult(def a, Function b | Function a): def","insertText":"findResult"},{"label":"findResults","kind":"method","documentation":"findResults(Function a): List","insertText":"findResults"},{"label":"firstElement","kind":"method","documentation":"firstElement(): def","insertText":"firstElement"},{"label":"forEach","kind":"method","documentation":"forEach(Consumer a): void","insertText":"forEach"},{"label":"get","kind":"method","documentation":"get(int a): def","insertText":"get"},{"label":"getByPath","kind":"method","documentation":"getByPath(String a, Object b | String a): Object","insertText":"getByPath"},{"label":"getLength","kind":"method","documentation":"getLength(): int","insertText":"getLength"},{"label":"groupBy","kind":"method","documentation":"groupBy(Function a): Map","insertText":"groupBy"},{"label":"hashCode","kind":"method","documentation":"hashCode(): int","insertText":"hashCode"},{"label":"indexOf","kind":"method","documentation":"indexOf(def a): int","insertText":"indexOf"},{"label":"insertElementAt","kind":"method","documentation":"insertElementAt(def a, int b): void","insertText":"insertElementAt"},{"label":"isEmpty","kind":"method","documentation":"isEmpty(): boolean","insertText":"isEmpty"},{"label":"iterator","kind":"method","documentation":"iterator(): Iterator","insertText":"iterator"},{"label":"join","kind":"method","documentation":"join(String a): String","insertText":"join"},{"label":"lastElement","kind":"method","documentation":"lastElement(): def","insertText":"lastElement"},{"label":"lastIndexOf","kind":"method","documentation":"lastIndexOf(def a, int b | def a): int","insertText":"lastIndexOf"},{"label":"listIterator","kind":"method","documentation":"listIterator(int a): ListIterator","insertText":"listIterator"},{"label":"peek","kind":"method","documentation":"peek(): def","insertText":"peek"},{"label":"pop","kind":"method","documentation":"pop(): def","insertText":"pop"},{"label":"push","kind":"method","documentation":"push(def a): def","insertText":"push"},{"label":"remove","kind":"method","documentation":"remove(int a): def","insertText":"remove"},{"label":"removeAll","kind":"method","documentation":"removeAll(Collection a): boolean","insertText":"removeAll"},{"label":"removeAllElements","kind":"method","documentation":"removeAllElements(): void","insertText":"removeAllElements"},{"label":"removeElement","kind":"method","documentation":"removeElement(def a): boolean","insertText":"removeElement"},{"label":"removeElementAt","kind":"method","documentation":"removeElementAt(int a): void","insertText":"removeElementAt"},{"label":"removeIf","kind":"method","documentation":"removeIf(Predicate a): boolean","insertText":"removeIf"},{"label":"replaceAll","kind":"method","documentation":"replaceAll(UnaryOperator a): void","insertText":"replaceAll"},{"label":"retainAll","kind":"method","documentation":"retainAll(Collection a): boolean","insertText":"retainAll"},{"label":"search","kind":"method","documentation":"search(def a): int","insertText":"search"},{"label":"set","kind":"method","documentation":"set(int a, def b): def","insertText":"set"},{"label":"setElementAt","kind":"method","documentation":"setElementAt(def a, int b): void","insertText":"setElementAt"},{"label":"size","kind":"method","documentation":"size(): int","insertText":"size"},{"label":"sort","kind":"method","documentation":"sort(Comparator a): void","insertText":"sort"},{"label":"split","kind":"method","documentation":"split(Predicate a): List","insertText":"split"},{"label":"spliterator","kind":"method","documentation":"spliterator(): Spliterator","insertText":"spliterator"},{"label":"stream","kind":"method","documentation":"stream(): Stream","insertText":"stream"},{"label":"subList","kind":"method","documentation":"subList(int a, int b): List","insertText":"subList"},{"label":"sum","kind":"method","documentation":"sum(ToDoubleFunction a): double","insertText":"sum"},{"label":"toArray","kind":"method","documentation":"toArray(def[] a): def[]","insertText":"toArray"},{"label":"toString","kind":"method","documentation":"toString(): String","insertText":"toString"}],"constructorDefinition":{"label":"Stack","kind":"constructor","documentation":"Constructor: Stack","insertText":"Stack"}},{"label":"StringJoiner","kind":"class","documentation":"Class: StringJoiner","insertText":"StringJoiner","properties":[{"label":"add","kind":"method","documentation":"add(CharSequence a): StringJoiner","insertText":"add"},{"label":"equals","kind":"method","documentation":"equals(Object a): boolean","insertText":"equals"},{"label":"hashCode","kind":"method","documentation":"hashCode(): int","insertText":"hashCode"},{"label":"length","kind":"method","documentation":"length(): int","insertText":"length"},{"label":"merge","kind":"method","documentation":"merge(StringJoiner a): StringJoiner","insertText":"merge"},{"label":"setEmptyValue","kind":"method","documentation":"setEmptyValue(CharSequence a): StringJoiner","insertText":"setEmptyValue"},{"label":"toString","kind":"method","documentation":"toString(): String","insertText":"toString"}],"constructorDefinition":{"label":"StringJoiner","kind":"constructor","documentation":"Constructor: StringJoiner","insertText":"StringJoiner"}},{"label":"StringTokenizer","kind":"class","documentation":"Class: StringTokenizer","insertText":"StringTokenizer","properties":[{"label":"countTokens","kind":"method","documentation":"countTokens(): int","insertText":"countTokens"},{"label":"equals","kind":"method","documentation":"equals(Object a): boolean","insertText":"equals"},{"label":"hasMoreElements","kind":"method","documentation":"hasMoreElements(): boolean","insertText":"hasMoreElements"},{"label":"hasMoreTokens","kind":"method","documentation":"hasMoreTokens(): boolean","insertText":"hasMoreTokens"},{"label":"hashCode","kind":"method","documentation":"hashCode(): int","insertText":"hashCode"},{"label":"nextElement","kind":"method","documentation":"nextElement(): def","insertText":"nextElement"},{"label":"nextToken","kind":"method","documentation":"nextToken(String a): String","insertText":"nextToken"},{"label":"toString","kind":"method","documentation":"toString(): String","insertText":"toString"}],"constructorDefinition":{"label":"StringTokenizer","kind":"constructor","documentation":"Constructor: StringTokenizer","insertText":"StringTokenizer"}},{"label":"TimeZone","kind":"class","documentation":"Class: TimeZone","insertText":"TimeZone","properties":[{"label":"LONG","kind":"property","documentation":"LONG: int","insertText":"LONG"},{"label":"SHORT","kind":"property","documentation":"SHORT: int","insertText":"SHORT"},{"label":"getAvailableIDs","kind":"method","documentation":"getAvailableIDs(int a): String[]","insertText":"getAvailableIDs"},{"label":"getDefault","kind":"method","documentation":"getDefault(): TimeZone","insertText":"getDefault"},{"label":"getTimeZone","kind":"method","documentation":"getTimeZone(String a): TimeZone","insertText":"getTimeZone"},{"label":"clone","kind":"method","documentation":"clone(): def","insertText":"clone"},{"label":"equals","kind":"method","documentation":"equals(Object a): boolean","insertText":"equals"},{"label":"getDSTSavings","kind":"method","documentation":"getDSTSavings(): int","insertText":"getDSTSavings"},{"label":"getDisplayName","kind":"method","documentation":"getDisplayName(boolean a, int b, Locale c | boolean a, int b | Locale a): String","insertText":"getDisplayName"},{"label":"getID","kind":"method","documentation":"getID(): String","insertText":"getID"},{"label":"getOffset","kind":"method","documentation":"getOffset(int a, int b, int c, int d, int e, int f | long a): int","insertText":"getOffset"},{"label":"getRawOffset","kind":"method","documentation":"getRawOffset(): int","insertText":"getRawOffset"},{"label":"hasSameRules","kind":"method","documentation":"hasSameRules(TimeZone a): boolean","insertText":"hasSameRules"},{"label":"hashCode","kind":"method","documentation":"hashCode(): int","insertText":"hashCode"},{"label":"inDaylightTime","kind":"method","documentation":"inDaylightTime(Date a): boolean","insertText":"inDaylightTime"},{"label":"observesDaylightTime","kind":"method","documentation":"observesDaylightTime(): boolean","insertText":"observesDaylightTime"},{"label":"setRawOffset","kind":"method","documentation":"setRawOffset(int a): void","insertText":"setRawOffset"},{"label":"toString","kind":"method","documentation":"toString(): String","insertText":"toString"},{"label":"toZoneId","kind":"method","documentation":"toZoneId(): ZoneId","insertText":"toZoneId"},{"label":"useDaylightTime","kind":"method","documentation":"useDaylightTime(): boolean","insertText":"useDaylightTime"}]},{"label":"TooManyListenersException","kind":"class","documentation":"Class: TooManyListenersException","insertText":"TooManyListenersException","properties":[{"label":"equals","kind":"method","documentation":"equals(Object a): boolean","insertText":"equals"},{"label":"getLocalizedMessage","kind":"method","documentation":"getLocalizedMessage(): String","insertText":"getLocalizedMessage"},{"label":"getMessage","kind":"method","documentation":"getMessage(): String","insertText":"getMessage"},{"label":"getStackTrace","kind":"method","documentation":"getStackTrace(): StackTraceElement[]","insertText":"getStackTrace"},{"label":"hashCode","kind":"method","documentation":"hashCode(): int","insertText":"hashCode"},{"label":"toString","kind":"method","documentation":"toString(): String","insertText":"toString"}],"constructorDefinition":{"label":"TooManyListenersException","kind":"constructor","documentation":"Constructor: TooManyListenersException","insertText":"TooManyListenersException"}},{"label":"TreeMap","kind":"class","documentation":"Class: TreeMap","insertText":"TreeMap","properties":[{"label":"ceilingEntry","kind":"method","documentation":"ceilingEntry(def a): Map.Entry","insertText":"ceilingEntry"},{"label":"ceilingKey","kind":"method","documentation":"ceilingKey(def a): def","insertText":"ceilingKey"},{"label":"clear","kind":"method","documentation":"clear(): void","insertText":"clear"},{"label":"clone","kind":"method","documentation":"clone(): def","insertText":"clone"},{"label":"collect","kind":"method","documentation":"collect(Collection a, BiFunction b | BiFunction a): def | List","insertText":"collect"},{"label":"comparator","kind":"method","documentation":"comparator(): Comparator","insertText":"comparator"},{"label":"compute","kind":"method","documentation":"compute(def a, BiFunction b): def","insertText":"compute"},{"label":"computeIfAbsent","kind":"method","documentation":"computeIfAbsent(def a, Function b): def","insertText":"computeIfAbsent"},{"label":"computeIfPresent","kind":"method","documentation":"computeIfPresent(def a, BiFunction b): def","insertText":"computeIfPresent"},{"label":"containsKey","kind":"method","documentation":"containsKey(def a): boolean","insertText":"containsKey"},{"label":"containsValue","kind":"method","documentation":"containsValue(def a): boolean","insertText":"containsValue"},{"label":"count","kind":"method","documentation":"count(BiPredicate a): int","insertText":"count"},{"label":"descendingKeySet","kind":"method","documentation":"descendingKeySet(): NavigableSet","insertText":"descendingKeySet"},{"label":"descendingMap","kind":"method","documentation":"descendingMap(): NavigableMap","insertText":"descendingMap"},{"label":"each","kind":"method","documentation":"each(BiConsumer a): def","insertText":"each"},{"label":"entrySet","kind":"method","documentation":"entrySet(): Set","insertText":"entrySet"},{"label":"equals","kind":"method","documentation":"equals(Object a): boolean","insertText":"equals"},{"label":"every","kind":"method","documentation":"every(BiPredicate a): boolean","insertText":"every"},{"label":"find","kind":"method","documentation":"find(BiPredicate a): Map.Entry","insertText":"find"},{"label":"findAll","kind":"method","documentation":"findAll(BiPredicate a): Map","insertText":"findAll"},{"label":"findResult","kind":"method","documentation":"findResult(def a, BiFunction b | BiFunction a): def","insertText":"findResult"},{"label":"findResults","kind":"method","documentation":"findResults(BiFunction a): List","insertText":"findResults"},{"label":"firstEntry","kind":"method","documentation":"firstEntry(): Map.Entry","insertText":"firstEntry"},{"label":"firstKey","kind":"method","documentation":"firstKey(): def","insertText":"firstKey"},{"label":"floorEntry","kind":"method","documentation":"floorEntry(def a): Map.Entry","insertText":"floorEntry"},{"label":"floorKey","kind":"method","documentation":"floorKey(def a): def","insertText":"floorKey"},{"label":"forEach","kind":"method","documentation":"forEach(BiConsumer a): void","insertText":"forEach"},{"label":"get","kind":"method","documentation":"get(def a): def","insertText":"get"},{"label":"getByPath","kind":"method","documentation":"getByPath(String a, Object b | String a): Object","insertText":"getByPath"},{"label":"getOrDefault","kind":"method","documentation":"getOrDefault(def a, def b): def","insertText":"getOrDefault"},{"label":"groupBy","kind":"method","documentation":"groupBy(BiFunction a): Map","insertText":"groupBy"},{"label":"hashCode","kind":"method","documentation":"hashCode(): int","insertText":"hashCode"},{"label":"headMap","kind":"method","documentation":"headMap(def a, boolean b | def a): NavigableMap | SortedMap","insertText":"headMap"},{"label":"higherEntry","kind":"method","documentation":"higherEntry(def a): Map.Entry","insertText":"higherEntry"},{"label":"higherKey","kind":"method","documentation":"higherKey(def a): def","insertText":"higherKey"},{"label":"isEmpty","kind":"method","documentation":"isEmpty(): boolean","insertText":"isEmpty"},{"label":"keySet","kind":"method","documentation":"keySet(): Set","insertText":"keySet"},{"label":"lastEntry","kind":"method","documentation":"lastEntry(): Map.Entry","insertText":"lastEntry"},{"label":"lastKey","kind":"method","documentation":"lastKey(): def","insertText":"lastKey"},{"label":"lowerEntry","kind":"method","documentation":"lowerEntry(def a): Map.Entry","insertText":"lowerEntry"},{"label":"merge","kind":"method","documentation":"merge(def a, def b, BiFunction c): def","insertText":"merge"},{"label":"navigableKeySet","kind":"method","documentation":"navigableKeySet(): NavigableSet","insertText":"navigableKeySet"},{"label":"pollFirstEntry","kind":"method","documentation":"pollFirstEntry(): Map.Entry","insertText":"pollFirstEntry"},{"label":"pollLastEntry","kind":"method","documentation":"pollLastEntry(): Map.Entry","insertText":"pollLastEntry"},{"label":"put","kind":"method","documentation":"put(def a, def b): def","insertText":"put"},{"label":"putAll","kind":"method","documentation":"putAll(Map a): void","insertText":"putAll"},{"label":"putIfAbsent","kind":"method","documentation":"putIfAbsent(def a, def b): def","insertText":"putIfAbsent"},{"label":"remove","kind":"method","documentation":"remove(def a, def b | def a): boolean | def","insertText":"remove"},{"label":"replace","kind":"method","documentation":"replace(def a, def b, def c | def a, def b): boolean | def","insertText":"replace"},{"label":"replaceAll","kind":"method","documentation":"replaceAll(BiFunction a): void","insertText":"replaceAll"},{"label":"size","kind":"method","documentation":"size(): int","insertText":"size"},{"label":"subMap","kind":"method","documentation":"subMap(def a, boolean b, def c, boolean d | def a, def b): NavigableMap | SortedMap","insertText":"subMap"},{"label":"tailMap","kind":"method","documentation":"tailMap(def a, boolean b | def a): NavigableMap | SortedMap","insertText":"tailMap"},{"label":"toString","kind":"method","documentation":"toString(): String","insertText":"toString"},{"label":"values","kind":"method","documentation":"values(): Collection","insertText":"values"}],"constructorDefinition":{"label":"TreeMap","kind":"constructor","documentation":"Constructor: TreeMap","insertText":"TreeMap"}},{"label":"TreeSet","kind":"class","documentation":"Class: TreeSet","insertText":"TreeSet","properties":[{"label":"add","kind":"method","documentation":"add(def a): boolean","insertText":"add"},{"label":"addAll","kind":"method","documentation":"addAll(Collection a): boolean","insertText":"addAll"},{"label":"any","kind":"method","documentation":"any(Predicate a): boolean","insertText":"any"},{"label":"asCollection","kind":"method","documentation":"asCollection(): Collection","insertText":"asCollection"},{"label":"asList","kind":"method","documentation":"asList(): List","insertText":"asList"},{"label":"ceiling","kind":"method","documentation":"ceiling(def a): def","insertText":"ceiling"},{"label":"clear","kind":"method","documentation":"clear(): void","insertText":"clear"},{"label":"clone","kind":"method","documentation":"clone(): def","insertText":"clone"},{"label":"collect","kind":"method","documentation":"collect(Collection a, Function b | Function a): def | List","insertText":"collect"},{"label":"comparator","kind":"method","documentation":"comparator(): Comparator","insertText":"comparator"},{"label":"contains","kind":"method","documentation":"contains(def a): boolean","insertText":"contains"},{"label":"containsAll","kind":"method","documentation":"containsAll(Collection a): boolean","insertText":"containsAll"},{"label":"descendingIterator","kind":"method","documentation":"descendingIterator(): Iterator","insertText":"descendingIterator"},{"label":"descendingSet","kind":"method","documentation":"descendingSet(): NavigableSet","insertText":"descendingSet"},{"label":"each","kind":"method","documentation":"each(Consumer a): def","insertText":"each"},{"label":"eachWithIndex","kind":"method","documentation":"eachWithIndex(ObjIntConsumer a): def","insertText":"eachWithIndex"},{"label":"equals","kind":"method","documentation":"equals(Object a): boolean","insertText":"equals"},{"label":"every","kind":"method","documentation":"every(Predicate a): boolean","insertText":"every"},{"label":"find","kind":"method","documentation":"find(Predicate a): def","insertText":"find"},{"label":"findAll","kind":"method","documentation":"findAll(Predicate a): List","insertText":"findAll"},{"label":"findResult","kind":"method","documentation":"findResult(def a, Function b | Function a): def","insertText":"findResult"},{"label":"findResults","kind":"method","documentation":"findResults(Function a): List","insertText":"findResults"},{"label":"first","kind":"method","documentation":"first(): def","insertText":"first"},{"label":"floor","kind":"method","documentation":"floor(def a): def","insertText":"floor"},{"label":"forEach","kind":"method","documentation":"forEach(Consumer a): void","insertText":"forEach"},{"label":"groupBy","kind":"method","documentation":"groupBy(Function a): Map","insertText":"groupBy"},{"label":"hashCode","kind":"method","documentation":"hashCode(): int","insertText":"hashCode"},{"label":"headSet","kind":"method","documentation":"headSet(def a, boolean b | def a): NavigableSet | SortedSet","insertText":"headSet"},{"label":"higher","kind":"method","documentation":"higher(def a): def","insertText":"higher"},{"label":"isEmpty","kind":"method","documentation":"isEmpty(): boolean","insertText":"isEmpty"},{"label":"iterator","kind":"method","documentation":"iterator(): Iterator","insertText":"iterator"},{"label":"join","kind":"method","documentation":"join(String a): String","insertText":"join"},{"label":"last","kind":"method","documentation":"last(): def","insertText":"last"},{"label":"lower","kind":"method","documentation":"lower(def a): def","insertText":"lower"},{"label":"pollFirst","kind":"method","documentation":"pollFirst(): def","insertText":"pollFirst"},{"label":"pollLast","kind":"method","documentation":"pollLast(): def","insertText":"pollLast"},{"label":"remove","kind":"method","documentation":"remove(def a): boolean","insertText":"remove"},{"label":"removeAll","kind":"method","documentation":"removeAll(Collection a): boolean","insertText":"removeAll"},{"label":"removeIf","kind":"method","documentation":"removeIf(Predicate a): boolean","insertText":"removeIf"},{"label":"retainAll","kind":"method","documentation":"retainAll(Collection a): boolean","insertText":"retainAll"},{"label":"size","kind":"method","documentation":"size(): int","insertText":"size"},{"label":"split","kind":"method","documentation":"split(Predicate a): List","insertText":"split"},{"label":"spliterator","kind":"method","documentation":"spliterator(): Spliterator","insertText":"spliterator"},{"label":"stream","kind":"method","documentation":"stream(): Stream","insertText":"stream"},{"label":"subSet","kind":"method","documentation":"subSet(def a, boolean b, def c, boolean d | def a, def b): NavigableSet | SortedSet","insertText":"subSet"},{"label":"sum","kind":"method","documentation":"sum(ToDoubleFunction a): double","insertText":"sum"},{"label":"tailSet","kind":"method","documentation":"tailSet(def a, boolean b | def a): NavigableSet | SortedSet","insertText":"tailSet"},{"label":"toArray","kind":"method","documentation":"toArray(def[] a): def[]","insertText":"toArray"},{"label":"toString","kind":"method","documentation":"toString(): String","insertText":"toString"}],"constructorDefinition":{"label":"TreeSet","kind":"constructor","documentation":"Constructor: TreeSet","insertText":"TreeSet"}},{"label":"UUID","kind":"class","documentation":"Class: UUID","insertText":"UUID","properties":[{"label":"fromString","kind":"method","documentation":"fromString(String a): UUID","insertText":"fromString"},{"label":"nameUUIDFromBytes","kind":"method","documentation":"nameUUIDFromBytes(byte[] a): UUID","insertText":"nameUUIDFromBytes"},{"label":"randomUUID","kind":"method","documentation":"randomUUID(): UUID","insertText":"randomUUID"},{"label":"clockSequence","kind":"method","documentation":"clockSequence(): int","insertText":"clockSequence"},{"label":"compareTo","kind":"method","documentation":"compareTo(UUID a): int","insertText":"compareTo"},{"label":"equals","kind":"method","documentation":"equals(Object a): boolean","insertText":"equals"},{"label":"getLeastSignificantBits","kind":"method","documentation":"getLeastSignificantBits(): long","insertText":"getLeastSignificantBits"},{"label":"getMostSignificantBits","kind":"method","documentation":"getMostSignificantBits(): long","insertText":"getMostSignificantBits"},{"label":"hashCode","kind":"method","documentation":"hashCode(): int","insertText":"hashCode"},{"label":"node","kind":"method","documentation":"node(): long","insertText":"node"},{"label":"timestamp","kind":"method","documentation":"timestamp(): long","insertText":"timestamp"},{"label":"toString","kind":"method","documentation":"toString(): String","insertText":"toString"},{"label":"variant","kind":"method","documentation":"variant(): int","insertText":"variant"},{"label":"version","kind":"method","documentation":"version(): int","insertText":"version"}],"constructorDefinition":{"label":"UUID","kind":"constructor","documentation":"Constructor: UUID","insertText":"UUID"}},{"label":"UnknownFormatConversionException","kind":"class","documentation":"Class: UnknownFormatConversionException","insertText":"UnknownFormatConversionException","properties":[{"label":"equals","kind":"method","documentation":"equals(Object a): boolean","insertText":"equals"},{"label":"getConversion","kind":"method","documentation":"getConversion(): String","insertText":"getConversion"},{"label":"getLocalizedMessage","kind":"method","documentation":"getLocalizedMessage(): String","insertText":"getLocalizedMessage"},{"label":"getMessage","kind":"method","documentation":"getMessage(): String","insertText":"getMessage"},{"label":"getStackTrace","kind":"method","documentation":"getStackTrace(): StackTraceElement[]","insertText":"getStackTrace"},{"label":"hashCode","kind":"method","documentation":"hashCode(): int","insertText":"hashCode"},{"label":"toString","kind":"method","documentation":"toString(): String","insertText":"toString"}],"constructorDefinition":{"label":"UnknownFormatConversionException","kind":"constructor","documentation":"Constructor: UnknownFormatConversionException","insertText":"UnknownFormatConversionException"}},{"label":"UnknownFormatFlagsException","kind":"class","documentation":"Class: UnknownFormatFlagsException","insertText":"UnknownFormatFlagsException","properties":[{"label":"equals","kind":"method","documentation":"equals(Object a): boolean","insertText":"equals"},{"label":"getFlags","kind":"method","documentation":"getFlags(): String","insertText":"getFlags"},{"label":"getLocalizedMessage","kind":"method","documentation":"getLocalizedMessage(): String","insertText":"getLocalizedMessage"},{"label":"getMessage","kind":"method","documentation":"getMessage(): String","insertText":"getMessage"},{"label":"getStackTrace","kind":"method","documentation":"getStackTrace(): StackTraceElement[]","insertText":"getStackTrace"},{"label":"hashCode","kind":"method","documentation":"hashCode(): int","insertText":"hashCode"},{"label":"toString","kind":"method","documentation":"toString(): String","insertText":"toString"}],"constructorDefinition":{"label":"UnknownFormatFlagsException","kind":"constructor","documentation":"Constructor: UnknownFormatFlagsException","insertText":"UnknownFormatFlagsException"}},{"label":"Vector","kind":"class","documentation":"Class: Vector","insertText":"Vector","properties":[{"label":"add","kind":"method","documentation":"add(int a, def b | def a): void | boolean","insertText":"add"},{"label":"addAll","kind":"method","documentation":"addAll(int a, Collection b | Collection a): boolean","insertText":"addAll"},{"label":"addElement","kind":"method","documentation":"addElement(def a): void","insertText":"addElement"},{"label":"any","kind":"method","documentation":"any(Predicate a): boolean","insertText":"any"},{"label":"asCollection","kind":"method","documentation":"asCollection(): Collection","insertText":"asCollection"},{"label":"asList","kind":"method","documentation":"asList(): List","insertText":"asList"},{"label":"clear","kind":"method","documentation":"clear(): void","insertText":"clear"},{"label":"clone","kind":"method","documentation":"clone(): def","insertText":"clone"},{"label":"collect","kind":"method","documentation":"collect(Collection a, Function b | Function a): def | List","insertText":"collect"},{"label":"contains","kind":"method","documentation":"contains(def a): boolean","insertText":"contains"},{"label":"containsAll","kind":"method","documentation":"containsAll(Collection a): boolean","insertText":"containsAll"},{"label":"copyInto","kind":"method","documentation":"copyInto(Object[] a): void","insertText":"copyInto"},{"label":"each","kind":"method","documentation":"each(Consumer a): def","insertText":"each"},{"label":"eachWithIndex","kind":"method","documentation":"eachWithIndex(ObjIntConsumer a): def","insertText":"eachWithIndex"},{"label":"elementAt","kind":"method","documentation":"elementAt(int a): def","insertText":"elementAt"},{"label":"elements","kind":"method","documentation":"elements(): Enumeration","insertText":"elements"},{"label":"equals","kind":"method","documentation":"equals(Object a): boolean","insertText":"equals"},{"label":"every","kind":"method","documentation":"every(Predicate a): boolean","insertText":"every"},{"label":"find","kind":"method","documentation":"find(Predicate a): def","insertText":"find"},{"label":"findAll","kind":"method","documentation":"findAll(Predicate a): List","insertText":"findAll"},{"label":"findResult","kind":"method","documentation":"findResult(def a, Function b | Function a): def","insertText":"findResult"},{"label":"findResults","kind":"method","documentation":"findResults(Function a): List","insertText":"findResults"},{"label":"firstElement","kind":"method","documentation":"firstElement(): def","insertText":"firstElement"},{"label":"forEach","kind":"method","documentation":"forEach(Consumer a): void","insertText":"forEach"},{"label":"get","kind":"method","documentation":"get(int a): def","insertText":"get"},{"label":"getByPath","kind":"method","documentation":"getByPath(String a, Object b | String a): Object","insertText":"getByPath"},{"label":"getLength","kind":"method","documentation":"getLength(): int","insertText":"getLength"},{"label":"groupBy","kind":"method","documentation":"groupBy(Function a): Map","insertText":"groupBy"},{"label":"hashCode","kind":"method","documentation":"hashCode(): int","insertText":"hashCode"},{"label":"indexOf","kind":"method","documentation":"indexOf(def a): int","insertText":"indexOf"},{"label":"insertElementAt","kind":"method","documentation":"insertElementAt(def a, int b): void","insertText":"insertElementAt"},{"label":"isEmpty","kind":"method","documentation":"isEmpty(): boolean","insertText":"isEmpty"},{"label":"iterator","kind":"method","documentation":"iterator(): Iterator","insertText":"iterator"},{"label":"join","kind":"method","documentation":"join(String a): String","insertText":"join"},{"label":"lastElement","kind":"method","documentation":"lastElement(): def","insertText":"lastElement"},{"label":"lastIndexOf","kind":"method","documentation":"lastIndexOf(def a, int b | def a): int","insertText":"lastIndexOf"},{"label":"listIterator","kind":"method","documentation":"listIterator(int a): ListIterator","insertText":"listIterator"},{"label":"remove","kind":"method","documentation":"remove(int a): def","insertText":"remove"},{"label":"removeAll","kind":"method","documentation":"removeAll(Collection a): boolean","insertText":"removeAll"},{"label":"removeAllElements","kind":"method","documentation":"removeAllElements(): void","insertText":"removeAllElements"},{"label":"removeElement","kind":"method","documentation":"removeElement(def a): boolean","insertText":"removeElement"},{"label":"removeElementAt","kind":"method","documentation":"removeElementAt(int a): void","insertText":"removeElementAt"},{"label":"removeIf","kind":"method","documentation":"removeIf(Predicate a): boolean","insertText":"removeIf"},{"label":"replaceAll","kind":"method","documentation":"replaceAll(UnaryOperator a): void","insertText":"replaceAll"},{"label":"retainAll","kind":"method","documentation":"retainAll(Collection a): boolean","insertText":"retainAll"},{"label":"set","kind":"method","documentation":"set(int a, def b): def","insertText":"set"},{"label":"setElementAt","kind":"method","documentation":"setElementAt(def a, int b): void","insertText":"setElementAt"},{"label":"size","kind":"method","documentation":"size(): int","insertText":"size"},{"label":"sort","kind":"method","documentation":"sort(Comparator a): void","insertText":"sort"},{"label":"split","kind":"method","documentation":"split(Predicate a): List","insertText":"split"},{"label":"spliterator","kind":"method","documentation":"spliterator(): Spliterator","insertText":"spliterator"},{"label":"stream","kind":"method","documentation":"stream(): Stream","insertText":"stream"},{"label":"subList","kind":"method","documentation":"subList(int a, int b): List","insertText":"subList"},{"label":"sum","kind":"method","documentation":"sum(ToDoubleFunction a): double","insertText":"sum"},{"label":"toArray","kind":"method","documentation":"toArray(def[] a): def[]","insertText":"toArray"},{"label":"toString","kind":"method","documentation":"toString(): String","insertText":"toString"}],"constructorDefinition":{"label":"Vector","kind":"constructor","documentation":"Constructor: Vector","insertText":"Vector"}},{"label":"BiConsumer","kind":"class","documentation":"Class: BiConsumer","insertText":"BiConsumer","properties":[{"label":"accept","kind":"method","documentation":"accept(def a, def b): void","insertText":"accept"},{"label":"andThen","kind":"method","documentation":"andThen(BiConsumer a): BiConsumer","insertText":"andThen"},{"label":"equals","kind":"method","documentation":"equals(Object a): boolean","insertText":"equals"},{"label":"hashCode","kind":"method","documentation":"hashCode(): int","insertText":"hashCode"},{"label":"toString","kind":"method","documentation":"toString(): String","insertText":"toString"}]},{"label":"BiFunction","kind":"class","documentation":"Class: BiFunction","insertText":"BiFunction","properties":[{"label":"andThen","kind":"method","documentation":"andThen(Function a): BiFunction","insertText":"andThen"},{"label":"apply","kind":"method","documentation":"apply(def a, def b): def","insertText":"apply"},{"label":"equals","kind":"method","documentation":"equals(Object a): boolean","insertText":"equals"},{"label":"hashCode","kind":"method","documentation":"hashCode(): int","insertText":"hashCode"},{"label":"toString","kind":"method","documentation":"toString(): String","insertText":"toString"}]},{"label":"BiPredicate","kind":"class","documentation":"Class: BiPredicate","insertText":"BiPredicate","properties":[{"label":"and","kind":"method","documentation":"and(BiPredicate a): BiPredicate","insertText":"and"},{"label":"equals","kind":"method","documentation":"equals(Object a): boolean","insertText":"equals"},{"label":"hashCode","kind":"method","documentation":"hashCode(): int","insertText":"hashCode"},{"label":"negate","kind":"method","documentation":"negate(): BiPredicate","insertText":"negate"},{"label":"or","kind":"method","documentation":"or(BiPredicate a): BiPredicate","insertText":"or"},{"label":"test","kind":"method","documentation":"test(def a, def b): boolean","insertText":"test"},{"label":"toString","kind":"method","documentation":"toString(): String","insertText":"toString"}]},{"label":"BinaryOperator","kind":"class","documentation":"Class: BinaryOperator","insertText":"BinaryOperator","properties":[{"label":"maxBy","kind":"method","documentation":"maxBy(Comparator a): BinaryOperator","insertText":"maxBy"},{"label":"minBy","kind":"method","documentation":"minBy(Comparator a): BinaryOperator","insertText":"minBy"},{"label":"andThen","kind":"method","documentation":"andThen(Function a): BiFunction","insertText":"andThen"},{"label":"apply","kind":"method","documentation":"apply(def a, def b): def","insertText":"apply"},{"label":"equals","kind":"method","documentation":"equals(Object a): boolean","insertText":"equals"},{"label":"hashCode","kind":"method","documentation":"hashCode(): int","insertText":"hashCode"},{"label":"toString","kind":"method","documentation":"toString(): String","insertText":"toString"}]},{"label":"BooleanSupplier","kind":"class","documentation":"Class: BooleanSupplier","insertText":"BooleanSupplier","properties":[{"label":"equals","kind":"method","documentation":"equals(Object a): boolean","insertText":"equals"},{"label":"getAsBoolean","kind":"method","documentation":"getAsBoolean(): boolean","insertText":"getAsBoolean"},{"label":"hashCode","kind":"method","documentation":"hashCode(): int","insertText":"hashCode"},{"label":"toString","kind":"method","documentation":"toString(): String","insertText":"toString"}]},{"label":"Consumer","kind":"class","documentation":"Class: Consumer","insertText":"Consumer","properties":[{"label":"accept","kind":"method","documentation":"accept(def a): void","insertText":"accept"},{"label":"andThen","kind":"method","documentation":"andThen(Consumer a): Consumer","insertText":"andThen"},{"label":"equals","kind":"method","documentation":"equals(Object a): boolean","insertText":"equals"},{"label":"hashCode","kind":"method","documentation":"hashCode(): int","insertText":"hashCode"},{"label":"toString","kind":"method","documentation":"toString(): String","insertText":"toString"}]},{"label":"DoubleBinaryOperator","kind":"class","documentation":"Class: DoubleBinaryOperator","insertText":"DoubleBinaryOperator","properties":[{"label":"applyAsDouble","kind":"method","documentation":"applyAsDouble(double a, double b): double","insertText":"applyAsDouble"},{"label":"equals","kind":"method","documentation":"equals(Object a): boolean","insertText":"equals"},{"label":"hashCode","kind":"method","documentation":"hashCode(): int","insertText":"hashCode"},{"label":"toString","kind":"method","documentation":"toString(): String","insertText":"toString"}]},{"label":"DoubleConsumer","kind":"class","documentation":"Class: DoubleConsumer","insertText":"DoubleConsumer","properties":[{"label":"accept","kind":"method","documentation":"accept(double a): void","insertText":"accept"},{"label":"andThen","kind":"method","documentation":"andThen(DoubleConsumer a): DoubleConsumer","insertText":"andThen"},{"label":"equals","kind":"method","documentation":"equals(Object a): boolean","insertText":"equals"},{"label":"hashCode","kind":"method","documentation":"hashCode(): int","insertText":"hashCode"},{"label":"toString","kind":"method","documentation":"toString(): String","insertText":"toString"}]},{"label":"DoubleFunction","kind":"class","documentation":"Class: DoubleFunction","insertText":"DoubleFunction","properties":[{"label":"apply","kind":"method","documentation":"apply(double a): def","insertText":"apply"},{"label":"equals","kind":"method","documentation":"equals(Object a): boolean","insertText":"equals"},{"label":"hashCode","kind":"method","documentation":"hashCode(): int","insertText":"hashCode"},{"label":"toString","kind":"method","documentation":"toString(): String","insertText":"toString"}]},{"label":"DoublePredicate","kind":"class","documentation":"Class: DoublePredicate","insertText":"DoublePredicate","properties":[{"label":"and","kind":"method","documentation":"and(DoublePredicate a): DoublePredicate","insertText":"and"},{"label":"equals","kind":"method","documentation":"equals(Object a): boolean","insertText":"equals"},{"label":"hashCode","kind":"method","documentation":"hashCode(): int","insertText":"hashCode"},{"label":"negate","kind":"method","documentation":"negate(): DoublePredicate","insertText":"negate"},{"label":"or","kind":"method","documentation":"or(DoublePredicate a): DoublePredicate","insertText":"or"},{"label":"test","kind":"method","documentation":"test(double a): boolean","insertText":"test"},{"label":"toString","kind":"method","documentation":"toString(): String","insertText":"toString"}]},{"label":"DoubleSupplier","kind":"class","documentation":"Class: DoubleSupplier","insertText":"DoubleSupplier","properties":[{"label":"equals","kind":"method","documentation":"equals(Object a): boolean","insertText":"equals"},{"label":"getAsDouble","kind":"method","documentation":"getAsDouble(): double","insertText":"getAsDouble"},{"label":"hashCode","kind":"method","documentation":"hashCode(): int","insertText":"hashCode"},{"label":"toString","kind":"method","documentation":"toString(): String","insertText":"toString"}]},{"label":"DoubleToIntFunction","kind":"class","documentation":"Class: DoubleToIntFunction","insertText":"DoubleToIntFunction","properties":[{"label":"applyAsInt","kind":"method","documentation":"applyAsInt(double a): int","insertText":"applyAsInt"},{"label":"equals","kind":"method","documentation":"equals(Object a): boolean","insertText":"equals"},{"label":"hashCode","kind":"method","documentation":"hashCode(): int","insertText":"hashCode"},{"label":"toString","kind":"method","documentation":"toString(): String","insertText":"toString"}]},{"label":"DoubleToLongFunction","kind":"class","documentation":"Class: DoubleToLongFunction","insertText":"DoubleToLongFunction","properties":[{"label":"applyAsLong","kind":"method","documentation":"applyAsLong(double a): long","insertText":"applyAsLong"},{"label":"equals","kind":"method","documentation":"equals(Object a): boolean","insertText":"equals"},{"label":"hashCode","kind":"method","documentation":"hashCode(): int","insertText":"hashCode"},{"label":"toString","kind":"method","documentation":"toString(): String","insertText":"toString"}]},{"label":"DoubleUnaryOperator","kind":"class","documentation":"Class: DoubleUnaryOperator","insertText":"DoubleUnaryOperator","properties":[{"label":"identity","kind":"method","documentation":"identity(): DoubleUnaryOperator","insertText":"identity"},{"label":"andThen","kind":"method","documentation":"andThen(DoubleUnaryOperator a): DoubleUnaryOperator","insertText":"andThen"},{"label":"applyAsDouble","kind":"method","documentation":"applyAsDouble(double a): double","insertText":"applyAsDouble"},{"label":"compose","kind":"method","documentation":"compose(DoubleUnaryOperator a): DoubleUnaryOperator","insertText":"compose"},{"label":"equals","kind":"method","documentation":"equals(Object a): boolean","insertText":"equals"},{"label":"hashCode","kind":"method","documentation":"hashCode(): int","insertText":"hashCode"},{"label":"toString","kind":"method","documentation":"toString(): String","insertText":"toString"}]},{"label":"Function","kind":"class","documentation":"Class: Function","insertText":"Function","properties":[{"label":"identity","kind":"method","documentation":"identity(): Function","insertText":"identity"},{"label":"andThen","kind":"method","documentation":"andThen(Function a): Function","insertText":"andThen"},{"label":"apply","kind":"method","documentation":"apply(def a): def","insertText":"apply"},{"label":"compose","kind":"method","documentation":"compose(Function a): Function","insertText":"compose"},{"label":"equals","kind":"method","documentation":"equals(Object a): boolean","insertText":"equals"},{"label":"hashCode","kind":"method","documentation":"hashCode(): int","insertText":"hashCode"},{"label":"toString","kind":"method","documentation":"toString(): String","insertText":"toString"}]},{"label":"IntBinaryOperator","kind":"class","documentation":"Class: IntBinaryOperator","insertText":"IntBinaryOperator","properties":[{"label":"applyAsInt","kind":"method","documentation":"applyAsInt(int a, int b): int","insertText":"applyAsInt"},{"label":"equals","kind":"method","documentation":"equals(Object a): boolean","insertText":"equals"},{"label":"hashCode","kind":"method","documentation":"hashCode(): int","insertText":"hashCode"},{"label":"toString","kind":"method","documentation":"toString(): String","insertText":"toString"}]},{"label":"IntConsumer","kind":"class","documentation":"Class: IntConsumer","insertText":"IntConsumer","properties":[{"label":"accept","kind":"method","documentation":"accept(int a): void","insertText":"accept"},{"label":"andThen","kind":"method","documentation":"andThen(IntConsumer a): IntConsumer","insertText":"andThen"},{"label":"equals","kind":"method","documentation":"equals(Object a): boolean","insertText":"equals"},{"label":"hashCode","kind":"method","documentation":"hashCode(): int","insertText":"hashCode"},{"label":"toString","kind":"method","documentation":"toString(): String","insertText":"toString"}]},{"label":"IntFunction","kind":"class","documentation":"Class: IntFunction","insertText":"IntFunction","properties":[{"label":"apply","kind":"method","documentation":"apply(int a): def","insertText":"apply"},{"label":"equals","kind":"method","documentation":"equals(Object a): boolean","insertText":"equals"},{"label":"hashCode","kind":"method","documentation":"hashCode(): int","insertText":"hashCode"},{"label":"toString","kind":"method","documentation":"toString(): String","insertText":"toString"}]},{"label":"IntPredicate","kind":"class","documentation":"Class: IntPredicate","insertText":"IntPredicate","properties":[{"label":"and","kind":"method","documentation":"and(IntPredicate a): IntPredicate","insertText":"and"},{"label":"equals","kind":"method","documentation":"equals(Object a): boolean","insertText":"equals"},{"label":"hashCode","kind":"method","documentation":"hashCode(): int","insertText":"hashCode"},{"label":"negate","kind":"method","documentation":"negate(): IntPredicate","insertText":"negate"},{"label":"or","kind":"method","documentation":"or(IntPredicate a): IntPredicate","insertText":"or"},{"label":"test","kind":"method","documentation":"test(int a): boolean","insertText":"test"},{"label":"toString","kind":"method","documentation":"toString(): String","insertText":"toString"}]},{"label":"IntSupplier","kind":"class","documentation":"Class: IntSupplier","insertText":"IntSupplier","properties":[{"label":"equals","kind":"method","documentation":"equals(Object a): boolean","insertText":"equals"},{"label":"getAsInt","kind":"method","documentation":"getAsInt(): int","insertText":"getAsInt"},{"label":"hashCode","kind":"method","documentation":"hashCode(): int","insertText":"hashCode"},{"label":"toString","kind":"method","documentation":"toString(): String","insertText":"toString"}]},{"label":"IntToDoubleFunction","kind":"class","documentation":"Class: IntToDoubleFunction","insertText":"IntToDoubleFunction","properties":[{"label":"applyAsDouble","kind":"method","documentation":"applyAsDouble(int a): double","insertText":"applyAsDouble"},{"label":"equals","kind":"method","documentation":"equals(Object a): boolean","insertText":"equals"},{"label":"hashCode","kind":"method","documentation":"hashCode(): int","insertText":"hashCode"},{"label":"toString","kind":"method","documentation":"toString(): String","insertText":"toString"}]},{"label":"IntToLongFunction","kind":"class","documentation":"Class: IntToLongFunction","insertText":"IntToLongFunction","properties":[{"label":"applyAsLong","kind":"method","documentation":"applyAsLong(int a): long","insertText":"applyAsLong"},{"label":"equals","kind":"method","documentation":"equals(Object a): boolean","insertText":"equals"},{"label":"hashCode","kind":"method","documentation":"hashCode(): int","insertText":"hashCode"},{"label":"toString","kind":"method","documentation":"toString(): String","insertText":"toString"}]},{"label":"IntUnaryOperator","kind":"class","documentation":"Class: IntUnaryOperator","insertText":"IntUnaryOperator","properties":[{"label":"identity","kind":"method","documentation":"identity(): IntUnaryOperator","insertText":"identity"},{"label":"andThen","kind":"method","documentation":"andThen(IntUnaryOperator a): IntUnaryOperator","insertText":"andThen"},{"label":"applyAsInt","kind":"method","documentation":"applyAsInt(int a): int","insertText":"applyAsInt"},{"label":"compose","kind":"method","documentation":"compose(IntUnaryOperator a): IntUnaryOperator","insertText":"compose"},{"label":"equals","kind":"method","documentation":"equals(Object a): boolean","insertText":"equals"},{"label":"hashCode","kind":"method","documentation":"hashCode(): int","insertText":"hashCode"},{"label":"toString","kind":"method","documentation":"toString(): String","insertText":"toString"}]},{"label":"LongBinaryOperator","kind":"class","documentation":"Class: LongBinaryOperator","insertText":"LongBinaryOperator","properties":[{"label":"applyAsLong","kind":"method","documentation":"applyAsLong(long a, long b): long","insertText":"applyAsLong"},{"label":"equals","kind":"method","documentation":"equals(Object a): boolean","insertText":"equals"},{"label":"hashCode","kind":"method","documentation":"hashCode(): int","insertText":"hashCode"},{"label":"toString","kind":"method","documentation":"toString(): String","insertText":"toString"}]},{"label":"LongConsumer","kind":"class","documentation":"Class: LongConsumer","insertText":"LongConsumer","properties":[{"label":"accept","kind":"method","documentation":"accept(long a): void","insertText":"accept"},{"label":"andThen","kind":"method","documentation":"andThen(LongConsumer a): LongConsumer","insertText":"andThen"},{"label":"equals","kind":"method","documentation":"equals(Object a): boolean","insertText":"equals"},{"label":"hashCode","kind":"method","documentation":"hashCode(): int","insertText":"hashCode"},{"label":"toString","kind":"method","documentation":"toString(): String","insertText":"toString"}]},{"label":"LongFunction","kind":"class","documentation":"Class: LongFunction","insertText":"LongFunction","properties":[{"label":"apply","kind":"method","documentation":"apply(long a): def","insertText":"apply"},{"label":"equals","kind":"method","documentation":"equals(Object a): boolean","insertText":"equals"},{"label":"hashCode","kind":"method","documentation":"hashCode(): int","insertText":"hashCode"},{"label":"toString","kind":"method","documentation":"toString(): String","insertText":"toString"}]},{"label":"LongPredicate","kind":"class","documentation":"Class: LongPredicate","insertText":"LongPredicate","properties":[{"label":"and","kind":"method","documentation":"and(LongPredicate a): LongPredicate","insertText":"and"},{"label":"equals","kind":"method","documentation":"equals(Object a): boolean","insertText":"equals"},{"label":"hashCode","kind":"method","documentation":"hashCode(): int","insertText":"hashCode"},{"label":"negate","kind":"method","documentation":"negate(): LongPredicate","insertText":"negate"},{"label":"or","kind":"method","documentation":"or(LongPredicate a): LongPredicate","insertText":"or"},{"label":"test","kind":"method","documentation":"test(long a): boolean","insertText":"test"},{"label":"toString","kind":"method","documentation":"toString(): String","insertText":"toString"}]},{"label":"LongSupplier","kind":"class","documentation":"Class: LongSupplier","insertText":"LongSupplier","properties":[{"label":"equals","kind":"method","documentation":"equals(Object a): boolean","insertText":"equals"},{"label":"getAsLong","kind":"method","documentation":"getAsLong(): long","insertText":"getAsLong"},{"label":"hashCode","kind":"method","documentation":"hashCode(): int","insertText":"hashCode"},{"label":"toString","kind":"method","documentation":"toString(): String","insertText":"toString"}]},{"label":"LongToDoubleFunction","kind":"class","documentation":"Class: LongToDoubleFunction","insertText":"LongToDoubleFunction","properties":[{"label":"applyAsDouble","kind":"method","documentation":"applyAsDouble(long a): double","insertText":"applyAsDouble"},{"label":"equals","kind":"method","documentation":"equals(Object a): boolean","insertText":"equals"},{"label":"hashCode","kind":"method","documentation":"hashCode(): int","insertText":"hashCode"},{"label":"toString","kind":"method","documentation":"toString(): String","insertText":"toString"}]},{"label":"LongToIntFunction","kind":"class","documentation":"Class: LongToIntFunction","insertText":"LongToIntFunction","properties":[{"label":"applyAsInt","kind":"method","documentation":"applyAsInt(long a): int","insertText":"applyAsInt"},{"label":"equals","kind":"method","documentation":"equals(Object a): boolean","insertText":"equals"},{"label":"hashCode","kind":"method","documentation":"hashCode(): int","insertText":"hashCode"},{"label":"toString","kind":"method","documentation":"toString(): String","insertText":"toString"}]},{"label":"LongUnaryOperator","kind":"class","documentation":"Class: LongUnaryOperator","insertText":"LongUnaryOperator","properties":[{"label":"identity","kind":"method","documentation":"identity(): LongUnaryOperator","insertText":"identity"},{"label":"andThen","kind":"method","documentation":"andThen(LongUnaryOperator a): LongUnaryOperator","insertText":"andThen"},{"label":"applyAsLong","kind":"method","documentation":"applyAsLong(long a): long","insertText":"applyAsLong"},{"label":"compose","kind":"method","documentation":"compose(LongUnaryOperator a): LongUnaryOperator","insertText":"compose"},{"label":"equals","kind":"method","documentation":"equals(Object a): boolean","insertText":"equals"},{"label":"hashCode","kind":"method","documentation":"hashCode(): int","insertText":"hashCode"},{"label":"toString","kind":"method","documentation":"toString(): String","insertText":"toString"}]},{"label":"ObjDoubleConsumer","kind":"class","documentation":"Class: ObjDoubleConsumer","insertText":"ObjDoubleConsumer","properties":[{"label":"accept","kind":"method","documentation":"accept(def a, double b): void","insertText":"accept"},{"label":"equals","kind":"method","documentation":"equals(Object a): boolean","insertText":"equals"},{"label":"hashCode","kind":"method","documentation":"hashCode(): int","insertText":"hashCode"},{"label":"toString","kind":"method","documentation":"toString(): String","insertText":"toString"}]},{"label":"ObjIntConsumer","kind":"class","documentation":"Class: ObjIntConsumer","insertText":"ObjIntConsumer","properties":[{"label":"accept","kind":"method","documentation":"accept(def a, int b): void","insertText":"accept"},{"label":"equals","kind":"method","documentation":"equals(Object a): boolean","insertText":"equals"},{"label":"hashCode","kind":"method","documentation":"hashCode(): int","insertText":"hashCode"},{"label":"toString","kind":"method","documentation":"toString(): String","insertText":"toString"}]},{"label":"ObjLongConsumer","kind":"class","documentation":"Class: ObjLongConsumer","insertText":"ObjLongConsumer","properties":[{"label":"accept","kind":"method","documentation":"accept(def a, long b): void","insertText":"accept"},{"label":"equals","kind":"method","documentation":"equals(Object a): boolean","insertText":"equals"},{"label":"hashCode","kind":"method","documentation":"hashCode(): int","insertText":"hashCode"},{"label":"toString","kind":"method","documentation":"toString(): String","insertText":"toString"}]},{"label":"Predicate","kind":"class","documentation":"Class: Predicate","insertText":"Predicate","properties":[{"label":"isEqual","kind":"method","documentation":"isEqual(def a): Predicate","insertText":"isEqual"},{"label":"and","kind":"method","documentation":"and(Predicate a): Predicate","insertText":"and"},{"label":"equals","kind":"method","documentation":"equals(Object a): boolean","insertText":"equals"},{"label":"hashCode","kind":"method","documentation":"hashCode(): int","insertText":"hashCode"},{"label":"negate","kind":"method","documentation":"negate(): Predicate","insertText":"negate"},{"label":"or","kind":"method","documentation":"or(Predicate a): Predicate","insertText":"or"},{"label":"test","kind":"method","documentation":"test(def a): boolean","insertText":"test"},{"label":"toString","kind":"method","documentation":"toString(): String","insertText":"toString"}]},{"label":"Supplier","kind":"class","documentation":"Class: Supplier","insertText":"Supplier","properties":[{"label":"equals","kind":"method","documentation":"equals(Object a): boolean","insertText":"equals"},{"label":"get","kind":"method","documentation":"get(): def","insertText":"get"},{"label":"hashCode","kind":"method","documentation":"hashCode(): int","insertText":"hashCode"},{"label":"toString","kind":"method","documentation":"toString(): String","insertText":"toString"}]},{"label":"ToDoubleBiFunction","kind":"class","documentation":"Class: ToDoubleBiFunction","insertText":"ToDoubleBiFunction","properties":[{"label":"applyAsDouble","kind":"method","documentation":"applyAsDouble(def a, def b): double","insertText":"applyAsDouble"},{"label":"equals","kind":"method","documentation":"equals(Object a): boolean","insertText":"equals"},{"label":"hashCode","kind":"method","documentation":"hashCode(): int","insertText":"hashCode"},{"label":"toString","kind":"method","documentation":"toString(): String","insertText":"toString"}]},{"label":"ToDoubleFunction","kind":"class","documentation":"Class: ToDoubleFunction","insertText":"ToDoubleFunction","properties":[{"label":"applyAsDouble","kind":"method","documentation":"applyAsDouble(def a): double","insertText":"applyAsDouble"},{"label":"equals","kind":"method","documentation":"equals(Object a): boolean","insertText":"equals"},{"label":"hashCode","kind":"method","documentation":"hashCode(): int","insertText":"hashCode"},{"label":"toString","kind":"method","documentation":"toString(): String","insertText":"toString"}]},{"label":"ToIntBiFunction","kind":"class","documentation":"Class: ToIntBiFunction","insertText":"ToIntBiFunction","properties":[{"label":"applyAsInt","kind":"method","documentation":"applyAsInt(def a, def b): int","insertText":"applyAsInt"},{"label":"equals","kind":"method","documentation":"equals(Object a): boolean","insertText":"equals"},{"label":"hashCode","kind":"method","documentation":"hashCode(): int","insertText":"hashCode"},{"label":"toString","kind":"method","documentation":"toString(): String","insertText":"toString"}]},{"label":"ToIntFunction","kind":"class","documentation":"Class: ToIntFunction","insertText":"ToIntFunction","properties":[{"label":"applyAsInt","kind":"method","documentation":"applyAsInt(def a): int","insertText":"applyAsInt"},{"label":"equals","kind":"method","documentation":"equals(Object a): boolean","insertText":"equals"},{"label":"hashCode","kind":"method","documentation":"hashCode(): int","insertText":"hashCode"},{"label":"toString","kind":"method","documentation":"toString(): String","insertText":"toString"}]},{"label":"ToLongBiFunction","kind":"class","documentation":"Class: ToLongBiFunction","insertText":"ToLongBiFunction","properties":[{"label":"applyAsLong","kind":"method","documentation":"applyAsLong(def a, def b): long","insertText":"applyAsLong"},{"label":"equals","kind":"method","documentation":"equals(Object a): boolean","insertText":"equals"},{"label":"hashCode","kind":"method","documentation":"hashCode(): int","insertText":"hashCode"},{"label":"toString","kind":"method","documentation":"toString(): String","insertText":"toString"}]},{"label":"ToLongFunction","kind":"class","documentation":"Class: ToLongFunction","insertText":"ToLongFunction","properties":[{"label":"applyAsLong","kind":"method","documentation":"applyAsLong(def a): long","insertText":"applyAsLong"},{"label":"equals","kind":"method","documentation":"equals(Object a): boolean","insertText":"equals"},{"label":"hashCode","kind":"method","documentation":"hashCode(): int","insertText":"hashCode"},{"label":"toString","kind":"method","documentation":"toString(): String","insertText":"toString"}]},{"label":"UnaryOperator","kind":"class","documentation":"Class: UnaryOperator","insertText":"UnaryOperator","properties":[{"label":"identity","kind":"method","documentation":"identity(): UnaryOperator","insertText":"identity"},{"label":"andThen","kind":"method","documentation":"andThen(Function a): Function","insertText":"andThen"},{"label":"apply","kind":"method","documentation":"apply(def a): def","insertText":"apply"},{"label":"compose","kind":"method","documentation":"compose(Function a): Function","insertText":"compose"},{"label":"equals","kind":"method","documentation":"equals(Object a): boolean","insertText":"equals"},{"label":"hashCode","kind":"method","documentation":"hashCode(): int","insertText":"hashCode"},{"label":"toString","kind":"method","documentation":"toString(): String","insertText":"toString"}]},{"label":"Matcher","kind":"class","documentation":"Class: Matcher","insertText":"Matcher","properties":[{"label":"quoteReplacement","kind":"method","documentation":"quoteReplacement(String a): String","insertText":"quoteReplacement"},{"label":"end","kind":"method","documentation":"end(int a): int","insertText":"end"},{"label":"equals","kind":"method","documentation":"equals(Object a): boolean","insertText":"equals"},{"label":"find","kind":"method","documentation":"find(int a): boolean","insertText":"find"},{"label":"group","kind":"method","documentation":"group(int a): String","insertText":"group"},{"label":"groupCount","kind":"method","documentation":"groupCount(): int","insertText":"groupCount"},{"label":"hasAnchoringBounds","kind":"method","documentation":"hasAnchoringBounds(): boolean","insertText":"hasAnchoringBounds"},{"label":"hasTransparentBounds","kind":"method","documentation":"hasTransparentBounds(): boolean","insertText":"hasTransparentBounds"},{"label":"hashCode","kind":"method","documentation":"hashCode(): int","insertText":"hashCode"},{"label":"hitEnd","kind":"method","documentation":"hitEnd(): boolean","insertText":"hitEnd"},{"label":"lookingAt","kind":"method","documentation":"lookingAt(): boolean","insertText":"lookingAt"},{"label":"matches","kind":"method","documentation":"matches(): boolean","insertText":"matches"},{"label":"namedGroup","kind":"method","documentation":"namedGroup(String a): String","insertText":"namedGroup"},{"label":"pattern","kind":"method","documentation":"pattern(): Pattern","insertText":"pattern"},{"label":"region","kind":"method","documentation":"region(int a, int b): Matcher","insertText":"region"},{"label":"regionEnd","kind":"method","documentation":"regionEnd(): int","insertText":"regionEnd"},{"label":"regionStart","kind":"method","documentation":"regionStart(): int","insertText":"regionStart"},{"label":"replaceAll","kind":"method","documentation":"replaceAll(String a): String","insertText":"replaceAll"},{"label":"replaceFirst","kind":"method","documentation":"replaceFirst(String a): String","insertText":"replaceFirst"},{"label":"requireEnd","kind":"method","documentation":"requireEnd(): boolean","insertText":"requireEnd"},{"label":"reset","kind":"method","documentation":"reset(): Matcher","insertText":"reset"},{"label":"start","kind":"method","documentation":"start(int a): int","insertText":"start"},{"label":"toString","kind":"method","documentation":"toString(): String","insertText":"toString"},{"label":"useAnchoringBounds","kind":"method","documentation":"useAnchoringBounds(boolean a): Matcher","insertText":"useAnchoringBounds"},{"label":"usePattern","kind":"method","documentation":"usePattern(Pattern a): Matcher","insertText":"usePattern"},{"label":"useTransparentBounds","kind":"method","documentation":"useTransparentBounds(boolean a): Matcher","insertText":"useTransparentBounds"}]},{"label":"Pattern","kind":"class","documentation":"Class: Pattern","insertText":"Pattern","properties":[{"label":"quote","kind":"method","documentation":"quote(String a): String","insertText":"quote"},{"label":"asPredicate","kind":"method","documentation":"asPredicate(): Predicate","insertText":"asPredicate"},{"label":"equals","kind":"method","documentation":"equals(Object a): boolean","insertText":"equals"},{"label":"flags","kind":"method","documentation":"flags(): int","insertText":"flags"},{"label":"hashCode","kind":"method","documentation":"hashCode(): int","insertText":"hashCode"},{"label":"matcher","kind":"method","documentation":"matcher(CharSequence a): Matcher","insertText":"matcher"},{"label":"pattern","kind":"method","documentation":"pattern(): String","insertText":"pattern"},{"label":"split","kind":"method","documentation":"split(CharSequence a, int b | CharSequence a): String[]","insertText":"split"},{"label":"splitAsStream","kind":"method","documentation":"splitAsStream(CharSequence a): Stream","insertText":"splitAsStream"},{"label":"toString","kind":"method","documentation":"toString(): String","insertText":"toString"}]},{"label":"BaseStream","kind":"class","documentation":"Class: BaseStream","insertText":"BaseStream","properties":[{"label":"close","kind":"method","documentation":"close(): void","insertText":"close"},{"label":"equals","kind":"method","documentation":"equals(Object a): boolean","insertText":"equals"},{"label":"hashCode","kind":"method","documentation":"hashCode(): int","insertText":"hashCode"},{"label":"isParallel","kind":"method","documentation":"isParallel(): boolean","insertText":"isParallel"},{"label":"iterator","kind":"method","documentation":"iterator(): Iterator","insertText":"iterator"},{"label":"sequential","kind":"method","documentation":"sequential(): BaseStream","insertText":"sequential"},{"label":"spliterator","kind":"method","documentation":"spliterator(): Spliterator","insertText":"spliterator"},{"label":"toString","kind":"method","documentation":"toString(): String","insertText":"toString"},{"label":"unordered","kind":"method","documentation":"unordered(): BaseStream","insertText":"unordered"}]},{"label":"Collector","kind":"class","documentation":"Class: Collector","insertText":"Collector","properties":[{"label":"of","kind":"method","documentation":"of(Supplier a, BiConsumer b, BinaryOperator c, Function d, Collector.Characteristics[] e | Supplier a, BiConsumer b, BinaryOperator c, Collector.Characteristics[] d): Collector","insertText":"of"},{"label":"accumulator","kind":"method","documentation":"accumulator(): BiConsumer","insertText":"accumulator"},{"label":"characteristics","kind":"method","documentation":"characteristics(): Set","insertText":"characteristics"},{"label":"combiner","kind":"method","documentation":"combiner(): BinaryOperator","insertText":"combiner"},{"label":"equals","kind":"method","documentation":"equals(Object a): boolean","insertText":"equals"},{"label":"finisher","kind":"method","documentation":"finisher(): Function","insertText":"finisher"},{"label":"hashCode","kind":"method","documentation":"hashCode(): int","insertText":"hashCode"},{"label":"supplier","kind":"method","documentation":"supplier(): Supplier","insertText":"supplier"},{"label":"toString","kind":"method","documentation":"toString(): String","insertText":"toString"}]},{"label":"Characteristics","kind":"class","documentation":"Class: Characteristics","insertText":"Characteristics","properties":[{"label":"CONCURRENT","kind":"property","documentation":"CONCURRENT: Collector.Characteristics","insertText":"CONCURRENT"},{"label":"IDENTITY_FINISH","kind":"property","documentation":"IDENTITY_FINISH: Collector.Characteristics","insertText":"IDENTITY_FINISH"},{"label":"UNORDERED","kind":"property","documentation":"UNORDERED: Collector.Characteristics","insertText":"UNORDERED"},{"label":"valueOf","kind":"method","documentation":"valueOf(String a): Collector.Characteristics","insertText":"valueOf"},{"label":"values","kind":"method","documentation":"values(): Collector.Characteristics[]","insertText":"values"},{"label":"compareTo","kind":"method","documentation":"compareTo(Enum a): int","insertText":"compareTo"},{"label":"equals","kind":"method","documentation":"equals(Object a): boolean","insertText":"equals"},{"label":"hashCode","kind":"method","documentation":"hashCode(): int","insertText":"hashCode"},{"label":"name","kind":"method","documentation":"name(): String","insertText":"name"},{"label":"ordinal","kind":"method","documentation":"ordinal(): int","insertText":"ordinal"},{"label":"toString","kind":"method","documentation":"toString(): String","insertText":"toString"}]},{"label":"Collectors","kind":"class","documentation":"Class: Collectors","insertText":"Collectors","properties":[{"label":"averagingDouble","kind":"method","documentation":"averagingDouble(ToDoubleFunction a): Collector","insertText":"averagingDouble"},{"label":"averagingInt","kind":"method","documentation":"averagingInt(ToIntFunction a): Collector","insertText":"averagingInt"},{"label":"averagingLong","kind":"method","documentation":"averagingLong(ToLongFunction a): Collector","insertText":"averagingLong"},{"label":"collectingAndThen","kind":"method","documentation":"collectingAndThen(Collector a, Function b): Collector","insertText":"collectingAndThen"},{"label":"counting","kind":"method","documentation":"counting(): Collector","insertText":"counting"},{"label":"groupingBy","kind":"method","documentation":"groupingBy(Function a, Supplier b, Collector c | Function a, Collector b | Function a): Collector","insertText":"groupingBy"},{"label":"joining","kind":"method","documentation":"joining(CharSequence a, CharSequence b, CharSequence c | CharSequence a): Collector","insertText":"joining"},{"label":"mapping","kind":"method","documentation":"mapping(Function a, Collector b): Collector","insertText":"mapping"},{"label":"maxBy","kind":"method","documentation":"maxBy(Comparator a): Collector","insertText":"maxBy"},{"label":"minBy","kind":"method","documentation":"minBy(Comparator a): Collector","insertText":"minBy"},{"label":"partitioningBy","kind":"method","documentation":"partitioningBy(Predicate a, Collector b | Predicate a): Collector","insertText":"partitioningBy"},{"label":"reducing","kind":"method","documentation":"reducing(def a, Function b, BinaryOperator c | def a, BinaryOperator b | BinaryOperator a): Collector","insertText":"reducing"},{"label":"summarizingDouble","kind":"method","documentation":"summarizingDouble(ToDoubleFunction a): Collector","insertText":"summarizingDouble"},{"label":"summarizingInt","kind":"method","documentation":"summarizingInt(ToIntFunction a): Collector","insertText":"summarizingInt"},{"label":"summarizingLong","kind":"method","documentation":"summarizingLong(ToLongFunction a): Collector","insertText":"summarizingLong"},{"label":"summingDouble","kind":"method","documentation":"summingDouble(ToDoubleFunction a): Collector","insertText":"summingDouble"},{"label":"summingInt","kind":"method","documentation":"summingInt(ToIntFunction a): Collector","insertText":"summingInt"},{"label":"summingLong","kind":"method","documentation":"summingLong(ToLongFunction a): Collector","insertText":"summingLong"},{"label":"toCollection","kind":"method","documentation":"toCollection(Supplier a): Collector","insertText":"toCollection"},{"label":"toList","kind":"method","documentation":"toList(): Collector","insertText":"toList"},{"label":"toMap","kind":"method","documentation":"toMap(Function a, Function b, BinaryOperator c, Supplier d | Function a, Function b, BinaryOperator c | Function a, Function b): Collector","insertText":"toMap"},{"label":"toSet","kind":"method","documentation":"toSet(): Collector","insertText":"toSet"},{"label":"equals","kind":"method","documentation":"equals(Object a): boolean","insertText":"equals"},{"label":"hashCode","kind":"method","documentation":"hashCode(): int","insertText":"hashCode"},{"label":"toString","kind":"method","documentation":"toString(): String","insertText":"toString"}]},{"label":"DoubleStream","kind":"class","documentation":"Class: DoubleStream","insertText":"DoubleStream","properties":[{"label":"builder","kind":"method","documentation":"builder(): DoubleStream.Builder","insertText":"builder"},{"label":"concat","kind":"method","documentation":"concat(DoubleStream a, DoubleStream b): DoubleStream","insertText":"concat"},{"label":"empty","kind":"method","documentation":"empty(): DoubleStream","insertText":"empty"},{"label":"of","kind":"method","documentation":"of(double[] a): DoubleStream","insertText":"of"},{"label":"allMatch","kind":"method","documentation":"allMatch(DoublePredicate a): boolean","insertText":"allMatch"},{"label":"anyMatch","kind":"method","documentation":"anyMatch(DoublePredicate a): boolean","insertText":"anyMatch"},{"label":"average","kind":"method","documentation":"average(): OptionalDouble","insertText":"average"},{"label":"boxed","kind":"method","documentation":"boxed(): Stream","insertText":"boxed"},{"label":"close","kind":"method","documentation":"close(): void","insertText":"close"},{"label":"collect","kind":"method","documentation":"collect(Supplier a, ObjDoubleConsumer b, BiConsumer c): def","insertText":"collect"},{"label":"count","kind":"method","documentation":"count(): long","insertText":"count"},{"label":"distinct","kind":"method","documentation":"distinct(): DoubleStream","insertText":"distinct"},{"label":"equals","kind":"method","documentation":"equals(Object a): boolean","insertText":"equals"},{"label":"filter","kind":"method","documentation":"filter(DoublePredicate a): DoubleStream","insertText":"filter"},{"label":"findAny","kind":"method","documentation":"findAny(): OptionalDouble","insertText":"findAny"},{"label":"findFirst","kind":"method","documentation":"findFirst(): OptionalDouble","insertText":"findFirst"},{"label":"flatMap","kind":"method","documentation":"flatMap(DoubleFunction a): DoubleStream","insertText":"flatMap"},{"label":"forEach","kind":"method","documentation":"forEach(DoubleConsumer a): void","insertText":"forEach"},{"label":"forEachOrdered","kind":"method","documentation":"forEachOrdered(DoubleConsumer a): void","insertText":"forEachOrdered"},{"label":"hashCode","kind":"method","documentation":"hashCode(): int","insertText":"hashCode"},{"label":"isParallel","kind":"method","documentation":"isParallel(): boolean","insertText":"isParallel"},{"label":"iterator","kind":"method","documentation":"iterator(): PrimitiveIterator.OfDouble","insertText":"iterator"},{"label":"limit","kind":"method","documentation":"limit(long a): DoubleStream","insertText":"limit"},{"label":"map","kind":"method","documentation":"map(DoubleUnaryOperator a): DoubleStream","insertText":"map"},{"label":"mapToInt","kind":"method","documentation":"mapToInt(DoubleToIntFunction a): IntStream","insertText":"mapToInt"},{"label":"mapToLong","kind":"method","documentation":"mapToLong(DoubleToLongFunction a): LongStream","insertText":"mapToLong"},{"label":"mapToObj","kind":"method","documentation":"mapToObj(DoubleFunction a): Stream","insertText":"mapToObj"},{"label":"max","kind":"method","documentation":"max(): OptionalDouble","insertText":"max"},{"label":"min","kind":"method","documentation":"min(): OptionalDouble","insertText":"min"},{"label":"noneMatch","kind":"method","documentation":"noneMatch(DoublePredicate a): boolean","insertText":"noneMatch"},{"label":"peek","kind":"method","documentation":"peek(DoubleConsumer a): DoubleStream","insertText":"peek"},{"label":"reduce","kind":"method","documentation":"reduce(double a, DoubleBinaryOperator b | DoubleBinaryOperator a): double | OptionalDouble","insertText":"reduce"},{"label":"sequential","kind":"method","documentation":"sequential(): DoubleStream","insertText":"sequential"},{"label":"skip","kind":"method","documentation":"skip(long a): DoubleStream","insertText":"skip"},{"label":"sorted","kind":"method","documentation":"sorted(): DoubleStream","insertText":"sorted"},{"label":"spliterator","kind":"method","documentation":"spliterator(): Spliterator.OfDouble","insertText":"spliterator"},{"label":"sum","kind":"method","documentation":"sum(): double","insertText":"sum"},{"label":"summaryStatistics","kind":"method","documentation":"summaryStatistics(): DoubleSummaryStatistics","insertText":"summaryStatistics"},{"label":"toArray","kind":"method","documentation":"toArray(): double[]","insertText":"toArray"},{"label":"toString","kind":"method","documentation":"toString(): String","insertText":"toString"},{"label":"unordered","kind":"method","documentation":"unordered(): BaseStream","insertText":"unordered"}]},{"label":"Builder","kind":"class","documentation":"Class: Builder","insertText":"Builder","properties":[{"label":"accept","kind":"method","documentation":"accept(double a): void","insertText":"accept"},{"label":"add","kind":"method","documentation":"add(double a): DoubleStream.Builder","insertText":"add"},{"label":"andThen","kind":"method","documentation":"andThen(DoubleConsumer a): DoubleConsumer","insertText":"andThen"},{"label":"build","kind":"method","documentation":"build(): DoubleStream","insertText":"build"},{"label":"equals","kind":"method","documentation":"equals(Object a): boolean","insertText":"equals"},{"label":"hashCode","kind":"method","documentation":"hashCode(): int","insertText":"hashCode"},{"label":"toString","kind":"method","documentation":"toString(): String","insertText":"toString"}]},{"label":"IntStream","kind":"class","documentation":"Class: IntStream","insertText":"IntStream","properties":[{"label":"builder","kind":"method","documentation":"builder(): IntStream.Builder","insertText":"builder"},{"label":"concat","kind":"method","documentation":"concat(IntStream a, IntStream b): IntStream","insertText":"concat"},{"label":"empty","kind":"method","documentation":"empty(): IntStream","insertText":"empty"},{"label":"of","kind":"method","documentation":"of(int[] a): IntStream","insertText":"of"},{"label":"range","kind":"method","documentation":"range(int a, int b): IntStream","insertText":"range"},{"label":"rangeClosed","kind":"method","documentation":"rangeClosed(int a, int b): IntStream","insertText":"rangeClosed"},{"label":"allMatch","kind":"method","documentation":"allMatch(IntPredicate a): boolean","insertText":"allMatch"},{"label":"anyMatch","kind":"method","documentation":"anyMatch(IntPredicate a): boolean","insertText":"anyMatch"},{"label":"asDoubleStream","kind":"method","documentation":"asDoubleStream(): DoubleStream","insertText":"asDoubleStream"},{"label":"asLongStream","kind":"method","documentation":"asLongStream(): LongStream","insertText":"asLongStream"},{"label":"average","kind":"method","documentation":"average(): OptionalDouble","insertText":"average"},{"label":"boxed","kind":"method","documentation":"boxed(): Stream","insertText":"boxed"},{"label":"close","kind":"method","documentation":"close(): void","insertText":"close"},{"label":"collect","kind":"method","documentation":"collect(Supplier a, ObjIntConsumer b, BiConsumer c): def","insertText":"collect"},{"label":"count","kind":"method","documentation":"count(): long","insertText":"count"},{"label":"distinct","kind":"method","documentation":"distinct(): IntStream","insertText":"distinct"},{"label":"equals","kind":"method","documentation":"equals(Object a): boolean","insertText":"equals"},{"label":"filter","kind":"method","documentation":"filter(IntPredicate a): IntStream","insertText":"filter"},{"label":"findAny","kind":"method","documentation":"findAny(): OptionalInt","insertText":"findAny"},{"label":"findFirst","kind":"method","documentation":"findFirst(): OptionalInt","insertText":"findFirst"},{"label":"flatMap","kind":"method","documentation":"flatMap(IntFunction a): IntStream","insertText":"flatMap"},{"label":"forEach","kind":"method","documentation":"forEach(IntConsumer a): void","insertText":"forEach"},{"label":"forEachOrdered","kind":"method","documentation":"forEachOrdered(IntConsumer a): void","insertText":"forEachOrdered"},{"label":"hashCode","kind":"method","documentation":"hashCode(): int","insertText":"hashCode"},{"label":"isParallel","kind":"method","documentation":"isParallel(): boolean","insertText":"isParallel"},{"label":"iterator","kind":"method","documentation":"iterator(): PrimitiveIterator.OfInt","insertText":"iterator"},{"label":"limit","kind":"method","documentation":"limit(long a): IntStream","insertText":"limit"},{"label":"map","kind":"method","documentation":"map(IntUnaryOperator a): IntStream","insertText":"map"},{"label":"mapToDouble","kind":"method","documentation":"mapToDouble(IntToDoubleFunction a): DoubleStream","insertText":"mapToDouble"},{"label":"mapToLong","kind":"method","documentation":"mapToLong(IntToLongFunction a): LongStream","insertText":"mapToLong"},{"label":"mapToObj","kind":"method","documentation":"mapToObj(IntFunction a): Stream","insertText":"mapToObj"},{"label":"max","kind":"method","documentation":"max(): OptionalInt","insertText":"max"},{"label":"min","kind":"method","documentation":"min(): OptionalInt","insertText":"min"},{"label":"noneMatch","kind":"method","documentation":"noneMatch(IntPredicate a): boolean","insertText":"noneMatch"},{"label":"peek","kind":"method","documentation":"peek(IntConsumer a): IntStream","insertText":"peek"},{"label":"reduce","kind":"method","documentation":"reduce(int a, IntBinaryOperator b | IntBinaryOperator a): int | OptionalInt","insertText":"reduce"},{"label":"sequential","kind":"method","documentation":"sequential(): IntStream","insertText":"sequential"},{"label":"skip","kind":"method","documentation":"skip(long a): IntStream","insertText":"skip"},{"label":"sorted","kind":"method","documentation":"sorted(): IntStream","insertText":"sorted"},{"label":"spliterator","kind":"method","documentation":"spliterator(): Spliterator.OfInt","insertText":"spliterator"},{"label":"sum","kind":"method","documentation":"sum(): int","insertText":"sum"},{"label":"summaryStatistics","kind":"method","documentation":"summaryStatistics(): IntSummaryStatistics","insertText":"summaryStatistics"},{"label":"toArray","kind":"method","documentation":"toArray(): int[]","insertText":"toArray"},{"label":"toString","kind":"method","documentation":"toString(): String","insertText":"toString"},{"label":"unordered","kind":"method","documentation":"unordered(): BaseStream","insertText":"unordered"}]},{"label":"Builder","kind":"class","documentation":"Class: Builder","insertText":"Builder","properties":[{"label":"accept","kind":"method","documentation":"accept(int a): void","insertText":"accept"},{"label":"add","kind":"method","documentation":"add(int a): IntStream.Builder","insertText":"add"},{"label":"andThen","kind":"method","documentation":"andThen(IntConsumer a): IntConsumer","insertText":"andThen"},{"label":"build","kind":"method","documentation":"build(): IntStream","insertText":"build"},{"label":"equals","kind":"method","documentation":"equals(Object a): boolean","insertText":"equals"},{"label":"hashCode","kind":"method","documentation":"hashCode(): int","insertText":"hashCode"},{"label":"toString","kind":"method","documentation":"toString(): String","insertText":"toString"}]},{"label":"LongStream","kind":"class","documentation":"Class: LongStream","insertText":"LongStream","properties":[{"label":"builder","kind":"method","documentation":"builder(): LongStream.Builder","insertText":"builder"},{"label":"concat","kind":"method","documentation":"concat(LongStream a, LongStream b): LongStream","insertText":"concat"},{"label":"empty","kind":"method","documentation":"empty(): LongStream","insertText":"empty"},{"label":"of","kind":"method","documentation":"of(long[] a): LongStream","insertText":"of"},{"label":"range","kind":"method","documentation":"range(long a, long b): LongStream","insertText":"range"},{"label":"rangeClosed","kind":"method","documentation":"rangeClosed(long a, long b): LongStream","insertText":"rangeClosed"},{"label":"allMatch","kind":"method","documentation":"allMatch(LongPredicate a): boolean","insertText":"allMatch"},{"label":"anyMatch","kind":"method","documentation":"anyMatch(LongPredicate a): boolean","insertText":"anyMatch"},{"label":"asDoubleStream","kind":"method","documentation":"asDoubleStream(): DoubleStream","insertText":"asDoubleStream"},{"label":"average","kind":"method","documentation":"average(): OptionalDouble","insertText":"average"},{"label":"boxed","kind":"method","documentation":"boxed(): Stream","insertText":"boxed"},{"label":"close","kind":"method","documentation":"close(): void","insertText":"close"},{"label":"collect","kind":"method","documentation":"collect(Supplier a, ObjLongConsumer b, BiConsumer c): def","insertText":"collect"},{"label":"count","kind":"method","documentation":"count(): long","insertText":"count"},{"label":"distinct","kind":"method","documentation":"distinct(): LongStream","insertText":"distinct"},{"label":"equals","kind":"method","documentation":"equals(Object a): boolean","insertText":"equals"},{"label":"filter","kind":"method","documentation":"filter(LongPredicate a): LongStream","insertText":"filter"},{"label":"findAny","kind":"method","documentation":"findAny(): OptionalLong","insertText":"findAny"},{"label":"findFirst","kind":"method","documentation":"findFirst(): OptionalLong","insertText":"findFirst"},{"label":"flatMap","kind":"method","documentation":"flatMap(LongFunction a): LongStream","insertText":"flatMap"},{"label":"forEach","kind":"method","documentation":"forEach(LongConsumer a): void","insertText":"forEach"},{"label":"forEachOrdered","kind":"method","documentation":"forEachOrdered(LongConsumer a): void","insertText":"forEachOrdered"},{"label":"hashCode","kind":"method","documentation":"hashCode(): int","insertText":"hashCode"},{"label":"isParallel","kind":"method","documentation":"isParallel(): boolean","insertText":"isParallel"},{"label":"iterator","kind":"method","documentation":"iterator(): PrimitiveIterator.OfLong","insertText":"iterator"},{"label":"limit","kind":"method","documentation":"limit(long a): LongStream","insertText":"limit"},{"label":"map","kind":"method","documentation":"map(LongUnaryOperator a): LongStream","insertText":"map"},{"label":"mapToDouble","kind":"method","documentation":"mapToDouble(LongToDoubleFunction a): DoubleStream","insertText":"mapToDouble"},{"label":"mapToInt","kind":"method","documentation":"mapToInt(LongToIntFunction a): IntStream","insertText":"mapToInt"},{"label":"mapToObj","kind":"method","documentation":"mapToObj(LongFunction a): Stream","insertText":"mapToObj"},{"label":"max","kind":"method","documentation":"max(): OptionalLong","insertText":"max"},{"label":"min","kind":"method","documentation":"min(): OptionalLong","insertText":"min"},{"label":"noneMatch","kind":"method","documentation":"noneMatch(LongPredicate a): boolean","insertText":"noneMatch"},{"label":"peek","kind":"method","documentation":"peek(LongConsumer a): LongStream","insertText":"peek"},{"label":"reduce","kind":"method","documentation":"reduce(long a, LongBinaryOperator b | LongBinaryOperator a): long | OptionalLong","insertText":"reduce"},{"label":"sequential","kind":"method","documentation":"sequential(): LongStream","insertText":"sequential"},{"label":"skip","kind":"method","documentation":"skip(long a): LongStream","insertText":"skip"},{"label":"sorted","kind":"method","documentation":"sorted(): LongStream","insertText":"sorted"},{"label":"spliterator","kind":"method","documentation":"spliterator(): Spliterator.OfLong","insertText":"spliterator"},{"label":"sum","kind":"method","documentation":"sum(): long","insertText":"sum"},{"label":"summaryStatistics","kind":"method","documentation":"summaryStatistics(): LongSummaryStatistics","insertText":"summaryStatistics"},{"label":"toArray","kind":"method","documentation":"toArray(): long[]","insertText":"toArray"},{"label":"toString","kind":"method","documentation":"toString(): String","insertText":"toString"},{"label":"unordered","kind":"method","documentation":"unordered(): BaseStream","insertText":"unordered"}]},{"label":"Builder","kind":"class","documentation":"Class: Builder","insertText":"Builder","properties":[{"label":"accept","kind":"method","documentation":"accept(long a): void","insertText":"accept"},{"label":"add","kind":"method","documentation":"add(long a): LongStream.Builder","insertText":"add"},{"label":"andThen","kind":"method","documentation":"andThen(LongConsumer a): LongConsumer","insertText":"andThen"},{"label":"build","kind":"method","documentation":"build(): LongStream","insertText":"build"},{"label":"equals","kind":"method","documentation":"equals(Object a): boolean","insertText":"equals"},{"label":"hashCode","kind":"method","documentation":"hashCode(): int","insertText":"hashCode"},{"label":"toString","kind":"method","documentation":"toString(): String","insertText":"toString"}]},{"label":"Stream","kind":"class","documentation":"Class: Stream","insertText":"Stream","properties":[{"label":"builder","kind":"method","documentation":"builder(): Stream.Builder","insertText":"builder"},{"label":"concat","kind":"method","documentation":"concat(Stream a, Stream b): Stream","insertText":"concat"},{"label":"empty","kind":"method","documentation":"empty(): Stream","insertText":"empty"},{"label":"of","kind":"method","documentation":"of(def[] a): Stream","insertText":"of"},{"label":"allMatch","kind":"method","documentation":"allMatch(Predicate a): boolean","insertText":"allMatch"},{"label":"anyMatch","kind":"method","documentation":"anyMatch(Predicate a): boolean","insertText":"anyMatch"},{"label":"close","kind":"method","documentation":"close(): void","insertText":"close"},{"label":"collect","kind":"method","documentation":"collect(Supplier a, BiConsumer b, BiConsumer c | Collector a): def","insertText":"collect"},{"label":"count","kind":"method","documentation":"count(): long","insertText":"count"},{"label":"distinct","kind":"method","documentation":"distinct(): Stream","insertText":"distinct"},{"label":"equals","kind":"method","documentation":"equals(Object a): boolean","insertText":"equals"},{"label":"filter","kind":"method","documentation":"filter(Predicate a): Stream","insertText":"filter"},{"label":"findAny","kind":"method","documentation":"findAny(): Optional","insertText":"findAny"},{"label":"findFirst","kind":"method","documentation":"findFirst(): Optional","insertText":"findFirst"},{"label":"flatMap","kind":"method","documentation":"flatMap(Function a): Stream","insertText":"flatMap"},{"label":"flatMapToDouble","kind":"method","documentation":"flatMapToDouble(Function a): DoubleStream","insertText":"flatMapToDouble"},{"label":"flatMapToInt","kind":"method","documentation":"flatMapToInt(Function a): IntStream","insertText":"flatMapToInt"},{"label":"flatMapToLong","kind":"method","documentation":"flatMapToLong(Function a): LongStream","insertText":"flatMapToLong"},{"label":"forEach","kind":"method","documentation":"forEach(Consumer a): void","insertText":"forEach"},{"label":"forEachOrdered","kind":"method","documentation":"forEachOrdered(Consumer a): void","insertText":"forEachOrdered"},{"label":"hashCode","kind":"method","documentation":"hashCode(): int","insertText":"hashCode"},{"label":"isParallel","kind":"method","documentation":"isParallel(): boolean","insertText":"isParallel"},{"label":"iterator","kind":"method","documentation":"iterator(): Iterator","insertText":"iterator"},{"label":"limit","kind":"method","documentation":"limit(long a): Stream","insertText":"limit"},{"label":"map","kind":"method","documentation":"map(Function a): Stream","insertText":"map"},{"label":"mapToDouble","kind":"method","documentation":"mapToDouble(ToDoubleFunction a): DoubleStream","insertText":"mapToDouble"},{"label":"mapToInt","kind":"method","documentation":"mapToInt(ToIntFunction a): IntStream","insertText":"mapToInt"},{"label":"mapToLong","kind":"method","documentation":"mapToLong(ToLongFunction a): LongStream","insertText":"mapToLong"},{"label":"max","kind":"method","documentation":"max(Comparator a): Optional","insertText":"max"},{"label":"min","kind":"method","documentation":"min(Comparator a): Optional","insertText":"min"},{"label":"noneMatch","kind":"method","documentation":"noneMatch(Predicate a): boolean","insertText":"noneMatch"},{"label":"peek","kind":"method","documentation":"peek(Consumer a): Stream","insertText":"peek"},{"label":"reduce","kind":"method","documentation":"reduce(def a, BiFunction b, BinaryOperator c | def a, BinaryOperator b | BinaryOperator a): def | Optional","insertText":"reduce"},{"label":"sequential","kind":"method","documentation":"sequential(): BaseStream","insertText":"sequential"},{"label":"skip","kind":"method","documentation":"skip(long a): Stream","insertText":"skip"},{"label":"sorted","kind":"method","documentation":"sorted(Comparator a): Stream","insertText":"sorted"},{"label":"spliterator","kind":"method","documentation":"spliterator(): Spliterator","insertText":"spliterator"},{"label":"toArray","kind":"method","documentation":"toArray(IntFunction a): def[]","insertText":"toArray"},{"label":"toString","kind":"method","documentation":"toString(): String","insertText":"toString"},{"label":"unordered","kind":"method","documentation":"unordered(): BaseStream","insertText":"unordered"}]},{"label":"Builder","kind":"class","documentation":"Class: Builder","insertText":"Builder","properties":[{"label":"accept","kind":"method","documentation":"accept(def a): void","insertText":"accept"},{"label":"add","kind":"method","documentation":"add(def a): Stream.Builder","insertText":"add"},{"label":"andThen","kind":"method","documentation":"andThen(Consumer a): Consumer","insertText":"andThen"},{"label":"build","kind":"method","documentation":"build(): Stream","insertText":"build"},{"label":"equals","kind":"method","documentation":"equals(Object a): boolean","insertText":"equals"},{"label":"hashCode","kind":"method","documentation":"hashCode(): int","insertText":"hashCode"},{"label":"toString","kind":"method","documentation":"toString(): String","insertText":"toString"}]},{"label":"BytesRef","kind":"class","documentation":"Class: BytesRef","insertText":"BytesRef","properties":[{"label":"bytesEquals","kind":"method","documentation":"bytesEquals(BytesRef a): boolean","insertText":"bytesEquals"},{"label":"compareTo","kind":"method","documentation":"compareTo(def a): int","insertText":"compareTo"},{"label":"equals","kind":"method","documentation":"equals(Object a): boolean","insertText":"equals"},{"label":"hashCode","kind":"method","documentation":"hashCode(): int","insertText":"hashCode"},{"label":"toString","kind":"method","documentation":"toString(): String","insertText":"toString"},{"label":"utf8ToString","kind":"method","documentation":"utf8ToString(): String","insertText":"utf8ToString"},{"label":"bytes","kind":"property","documentation":"bytes: byte[]","insertText":"bytes"},{"label":"length","kind":"property","documentation":"length: int","insertText":"length"},{"label":"offset","kind":"property","documentation":"offset: int","insertText":"offset"}]},{"label":"GeoPoint","kind":"class","documentation":"Class: GeoPoint","insertText":"GeoPoint","properties":[{"label":"equals","kind":"method","documentation":"equals(Object a): boolean","insertText":"equals"},{"label":"getLat","kind":"method","documentation":"getLat(): double","insertText":"getLat"},{"label":"getLon","kind":"method","documentation":"getLon(): double","insertText":"getLon"},{"label":"hashCode","kind":"method","documentation":"hashCode(): int","insertText":"hashCode"},{"label":"toString","kind":"method","documentation":"toString(): String","insertText":"toString"}]},{"label":"Booleans","kind":"class","documentation":"Class: Booleans","insertText":"Booleans","properties":[{"label":"add","kind":"method","documentation":"add(int a, def b | def a): void | boolean","insertText":"add"},{"label":"addAll","kind":"method","documentation":"addAll(int a, Collection b | Collection a): boolean","insertText":"addAll"},{"label":"any","kind":"method","documentation":"any(Predicate a): boolean","insertText":"any"},{"label":"asCollection","kind":"method","documentation":"asCollection(): Collection","insertText":"asCollection"},{"label":"asList","kind":"method","documentation":"asList(): List","insertText":"asList"},{"label":"clear","kind":"method","documentation":"clear(): void","insertText":"clear"},{"label":"collect","kind":"method","documentation":"collect(Collection a, Function b | Function a): def | List","insertText":"collect"},{"label":"contains","kind":"method","documentation":"contains(def a): boolean","insertText":"contains"},{"label":"containsAll","kind":"method","documentation":"containsAll(Collection a): boolean","insertText":"containsAll"},{"label":"each","kind":"method","documentation":"each(Consumer a): def","insertText":"each"},{"label":"eachWithIndex","kind":"method","documentation":"eachWithIndex(ObjIntConsumer a): def","insertText":"eachWithIndex"},{"label":"equals","kind":"method","documentation":"equals(Object a): boolean","insertText":"equals"},{"label":"every","kind":"method","documentation":"every(Predicate a): boolean","insertText":"every"},{"label":"find","kind":"method","documentation":"find(Predicate a): def","insertText":"find"},{"label":"findAll","kind":"method","documentation":"findAll(Predicate a): List","insertText":"findAll"},{"label":"findResult","kind":"method","documentation":"findResult(def a, Function b | Function a): def","insertText":"findResult"},{"label":"findResults","kind":"method","documentation":"findResults(Function a): List","insertText":"findResults"},{"label":"forEach","kind":"method","documentation":"forEach(Consumer a): void","insertText":"forEach"},{"label":"get","kind":"method","documentation":"get(int a): Boolean","insertText":"get"},{"label":"getByPath","kind":"method","documentation":"getByPath(String a, Object b | String a): Object","insertText":"getByPath"},{"label":"getLength","kind":"method","documentation":"getLength(): int","insertText":"getLength"},{"label":"getValue","kind":"method","documentation":"getValue(): boolean","insertText":"getValue"},{"label":"groupBy","kind":"method","documentation":"groupBy(Function a): Map","insertText":"groupBy"},{"label":"hashCode","kind":"method","documentation":"hashCode(): int","insertText":"hashCode"},{"label":"indexOf","kind":"method","documentation":"indexOf(def a): int","insertText":"indexOf"},{"label":"isEmpty","kind":"method","documentation":"isEmpty(): boolean","insertText":"isEmpty"},{"label":"iterator","kind":"method","documentation":"iterator(): Iterator","insertText":"iterator"},{"label":"join","kind":"method","documentation":"join(String a): String","insertText":"join"},{"label":"lastIndexOf","kind":"method","documentation":"lastIndexOf(def a): int","insertText":"lastIndexOf"},{"label":"listIterator","kind":"method","documentation":"listIterator(int a): ListIterator","insertText":"listIterator"},{"label":"remove","kind":"method","documentation":"remove(int a): def","insertText":"remove"},{"label":"removeAll","kind":"method","documentation":"removeAll(Collection a): boolean","insertText":"removeAll"},{"label":"removeIf","kind":"method","documentation":"removeIf(Predicate a): boolean","insertText":"removeIf"},{"label":"replaceAll","kind":"method","documentation":"replaceAll(UnaryOperator a): void","insertText":"replaceAll"},{"label":"retainAll","kind":"method","documentation":"retainAll(Collection a): boolean","insertText":"retainAll"},{"label":"set","kind":"method","documentation":"set(int a, def b): def","insertText":"set"},{"label":"size","kind":"method","documentation":"size(): int","insertText":"size"},{"label":"sort","kind":"method","documentation":"sort(Comparator a): void","insertText":"sort"},{"label":"split","kind":"method","documentation":"split(Predicate a): List","insertText":"split"},{"label":"spliterator","kind":"method","documentation":"spliterator(): Spliterator","insertText":"spliterator"},{"label":"stream","kind":"method","documentation":"stream(): Stream","insertText":"stream"},{"label":"subList","kind":"method","documentation":"subList(int a, int b): List","insertText":"subList"},{"label":"sum","kind":"method","documentation":"sum(ToDoubleFunction a): double","insertText":"sum"},{"label":"toArray","kind":"method","documentation":"toArray(def[] a): def[]","insertText":"toArray"},{"label":"toString","kind":"method","documentation":"toString(): String","insertText":"toString"}]},{"label":"BytesRefs","kind":"class","documentation":"Class: BytesRefs","insertText":"BytesRefs","properties":[{"label":"add","kind":"method","documentation":"add(int a, def b | def a): void | boolean","insertText":"add"},{"label":"addAll","kind":"method","documentation":"addAll(int a, Collection b | Collection a): boolean","insertText":"addAll"},{"label":"any","kind":"method","documentation":"any(Predicate a): boolean","insertText":"any"},{"label":"asCollection","kind":"method","documentation":"asCollection(): Collection","insertText":"asCollection"},{"label":"asList","kind":"method","documentation":"asList(): List","insertText":"asList"},{"label":"clear","kind":"method","documentation":"clear(): void","insertText":"clear"},{"label":"collect","kind":"method","documentation":"collect(Collection a, Function b | Function a): def | List","insertText":"collect"},{"label":"contains","kind":"method","documentation":"contains(def a): boolean","insertText":"contains"},{"label":"containsAll","kind":"method","documentation":"containsAll(Collection a): boolean","insertText":"containsAll"},{"label":"each","kind":"method","documentation":"each(Consumer a): def","insertText":"each"},{"label":"eachWithIndex","kind":"method","documentation":"eachWithIndex(ObjIntConsumer a): def","insertText":"eachWithIndex"},{"label":"equals","kind":"method","documentation":"equals(Object a): boolean","insertText":"equals"},{"label":"every","kind":"method","documentation":"every(Predicate a): boolean","insertText":"every"},{"label":"find","kind":"method","documentation":"find(Predicate a): def","insertText":"find"},{"label":"findAll","kind":"method","documentation":"findAll(Predicate a): List","insertText":"findAll"},{"label":"findResult","kind":"method","documentation":"findResult(def a, Function b | Function a): def","insertText":"findResult"},{"label":"findResults","kind":"method","documentation":"findResults(Function a): List","insertText":"findResults"},{"label":"forEach","kind":"method","documentation":"forEach(Consumer a): void","insertText":"forEach"},{"label":"get","kind":"method","documentation":"get(int a): BytesRef","insertText":"get"},{"label":"getByPath","kind":"method","documentation":"getByPath(String a, Object b | String a): Object","insertText":"getByPath"},{"label":"getLength","kind":"method","documentation":"getLength(): int","insertText":"getLength"},{"label":"getValue","kind":"method","documentation":"getValue(): BytesRef","insertText":"getValue"},{"label":"groupBy","kind":"method","documentation":"groupBy(Function a): Map","insertText":"groupBy"},{"label":"hashCode","kind":"method","documentation":"hashCode(): int","insertText":"hashCode"},{"label":"indexOf","kind":"method","documentation":"indexOf(def a): int","insertText":"indexOf"},{"label":"isEmpty","kind":"method","documentation":"isEmpty(): boolean","insertText":"isEmpty"},{"label":"iterator","kind":"method","documentation":"iterator(): Iterator","insertText":"iterator"},{"label":"join","kind":"method","documentation":"join(String a): String","insertText":"join"},{"label":"lastIndexOf","kind":"method","documentation":"lastIndexOf(def a): int","insertText":"lastIndexOf"},{"label":"listIterator","kind":"method","documentation":"listIterator(int a): ListIterator","insertText":"listIterator"},{"label":"remove","kind":"method","documentation":"remove(int a): def","insertText":"remove"},{"label":"removeAll","kind":"method","documentation":"removeAll(Collection a): boolean","insertText":"removeAll"},{"label":"removeIf","kind":"method","documentation":"removeIf(Predicate a): boolean","insertText":"removeIf"},{"label":"replaceAll","kind":"method","documentation":"replaceAll(UnaryOperator a): void","insertText":"replaceAll"},{"label":"retainAll","kind":"method","documentation":"retainAll(Collection a): boolean","insertText":"retainAll"},{"label":"set","kind":"method","documentation":"set(int a, def b): def","insertText":"set"},{"label":"size","kind":"method","documentation":"size(): int","insertText":"size"},{"label":"sort","kind":"method","documentation":"sort(Comparator a): void","insertText":"sort"},{"label":"split","kind":"method","documentation":"split(Predicate a): List","insertText":"split"},{"label":"spliterator","kind":"method","documentation":"spliterator(): Spliterator","insertText":"spliterator"},{"label":"stream","kind":"method","documentation":"stream(): Stream","insertText":"stream"},{"label":"subList","kind":"method","documentation":"subList(int a, int b): List","insertText":"subList"},{"label":"sum","kind":"method","documentation":"sum(ToDoubleFunction a): double","insertText":"sum"},{"label":"toArray","kind":"method","documentation":"toArray(def[] a): def[]","insertText":"toArray"},{"label":"toString","kind":"method","documentation":"toString(): String","insertText":"toString"}]},{"label":"Dates","kind":"class","documentation":"Class: Dates","insertText":"Dates","properties":[{"label":"add","kind":"method","documentation":"add(int a, def b | def a): void | boolean","insertText":"add"},{"label":"addAll","kind":"method","documentation":"addAll(int a, Collection b | Collection a): boolean","insertText":"addAll"},{"label":"any","kind":"method","documentation":"any(Predicate a): boolean","insertText":"any"},{"label":"asCollection","kind":"method","documentation":"asCollection(): Collection","insertText":"asCollection"},{"label":"asList","kind":"method","documentation":"asList(): List","insertText":"asList"},{"label":"clear","kind":"method","documentation":"clear(): void","insertText":"clear"},{"label":"collect","kind":"method","documentation":"collect(Collection a, Function b | Function a): def | List","insertText":"collect"},{"label":"contains","kind":"method","documentation":"contains(def a): boolean","insertText":"contains"},{"label":"containsAll","kind":"method","documentation":"containsAll(Collection a): boolean","insertText":"containsAll"},{"label":"each","kind":"method","documentation":"each(Consumer a): def","insertText":"each"},{"label":"eachWithIndex","kind":"method","documentation":"eachWithIndex(ObjIntConsumer a): def","insertText":"eachWithIndex"},{"label":"equals","kind":"method","documentation":"equals(Object a): boolean","insertText":"equals"},{"label":"every","kind":"method","documentation":"every(Predicate a): boolean","insertText":"every"},{"label":"find","kind":"method","documentation":"find(Predicate a): def","insertText":"find"},{"label":"findAll","kind":"method","documentation":"findAll(Predicate a): List","insertText":"findAll"},{"label":"findResult","kind":"method","documentation":"findResult(def a, Function b | Function a): def","insertText":"findResult"},{"label":"findResults","kind":"method","documentation":"findResults(Function a): List","insertText":"findResults"},{"label":"forEach","kind":"method","documentation":"forEach(Consumer a): void","insertText":"forEach"},{"label":"get","kind":"method","documentation":"get(int a): JodaCompatibleZonedDateTime","insertText":"get"},{"label":"getByPath","kind":"method","documentation":"getByPath(String a, Object b | String a): Object","insertText":"getByPath"},{"label":"getLength","kind":"method","documentation":"getLength(): int","insertText":"getLength"},{"label":"getValue","kind":"method","documentation":"getValue(): JodaCompatibleZonedDateTime","insertText":"getValue"},{"label":"groupBy","kind":"method","documentation":"groupBy(Function a): Map","insertText":"groupBy"},{"label":"hashCode","kind":"method","documentation":"hashCode(): int","insertText":"hashCode"},{"label":"indexOf","kind":"method","documentation":"indexOf(def a): int","insertText":"indexOf"},{"label":"isEmpty","kind":"method","documentation":"isEmpty(): boolean","insertText":"isEmpty"},{"label":"iterator","kind":"method","documentation":"iterator(): Iterator","insertText":"iterator"},{"label":"join","kind":"method","documentation":"join(String a): String","insertText":"join"},{"label":"lastIndexOf","kind":"method","documentation":"lastIndexOf(def a): int","insertText":"lastIndexOf"},{"label":"listIterator","kind":"method","documentation":"listIterator(int a): ListIterator","insertText":"listIterator"},{"label":"remove","kind":"method","documentation":"remove(int a): def","insertText":"remove"},{"label":"removeAll","kind":"method","documentation":"removeAll(Collection a): boolean","insertText":"removeAll"},{"label":"removeIf","kind":"method","documentation":"removeIf(Predicate a): boolean","insertText":"removeIf"},{"label":"replaceAll","kind":"method","documentation":"replaceAll(UnaryOperator a): void","insertText":"replaceAll"},{"label":"retainAll","kind":"method","documentation":"retainAll(Collection a): boolean","insertText":"retainAll"},{"label":"set","kind":"method","documentation":"set(int a, def b): def","insertText":"set"},{"label":"size","kind":"method","documentation":"size(): int","insertText":"size"},{"label":"sort","kind":"method","documentation":"sort(Comparator a): void","insertText":"sort"},{"label":"split","kind":"method","documentation":"split(Predicate a): List","insertText":"split"},{"label":"spliterator","kind":"method","documentation":"spliterator(): Spliterator","insertText":"spliterator"},{"label":"stream","kind":"method","documentation":"stream(): Stream","insertText":"stream"},{"label":"subList","kind":"method","documentation":"subList(int a, int b): List","insertText":"subList"},{"label":"sum","kind":"method","documentation":"sum(ToDoubleFunction a): double","insertText":"sum"},{"label":"toArray","kind":"method","documentation":"toArray(def[] a): def[]","insertText":"toArray"},{"label":"toString","kind":"method","documentation":"toString(): String","insertText":"toString"}]},{"label":"Doubles","kind":"class","documentation":"Class: Doubles","insertText":"Doubles","properties":[{"label":"add","kind":"method","documentation":"add(int a, def b | def a): void | boolean","insertText":"add"},{"label":"addAll","kind":"method","documentation":"addAll(int a, Collection b | Collection a): boolean","insertText":"addAll"},{"label":"any","kind":"method","documentation":"any(Predicate a): boolean","insertText":"any"},{"label":"asCollection","kind":"method","documentation":"asCollection(): Collection","insertText":"asCollection"},{"label":"asList","kind":"method","documentation":"asList(): List","insertText":"asList"},{"label":"clear","kind":"method","documentation":"clear(): void","insertText":"clear"},{"label":"collect","kind":"method","documentation":"collect(Collection a, Function b | Function a): def | List","insertText":"collect"},{"label":"contains","kind":"method","documentation":"contains(def a): boolean","insertText":"contains"},{"label":"containsAll","kind":"method","documentation":"containsAll(Collection a): boolean","insertText":"containsAll"},{"label":"each","kind":"method","documentation":"each(Consumer a): def","insertText":"each"},{"label":"eachWithIndex","kind":"method","documentation":"eachWithIndex(ObjIntConsumer a): def","insertText":"eachWithIndex"},{"label":"equals","kind":"method","documentation":"equals(Object a): boolean","insertText":"equals"},{"label":"every","kind":"method","documentation":"every(Predicate a): boolean","insertText":"every"},{"label":"find","kind":"method","documentation":"find(Predicate a): def","insertText":"find"},{"label":"findAll","kind":"method","documentation":"findAll(Predicate a): List","insertText":"findAll"},{"label":"findResult","kind":"method","documentation":"findResult(def a, Function b | Function a): def","insertText":"findResult"},{"label":"findResults","kind":"method","documentation":"findResults(Function a): List","insertText":"findResults"},{"label":"forEach","kind":"method","documentation":"forEach(Consumer a): void","insertText":"forEach"},{"label":"get","kind":"method","documentation":"get(int a): Double","insertText":"get"},{"label":"getByPath","kind":"method","documentation":"getByPath(String a, Object b | String a): Object","insertText":"getByPath"},{"label":"getLength","kind":"method","documentation":"getLength(): int","insertText":"getLength"},{"label":"getValue","kind":"method","documentation":"getValue(): double","insertText":"getValue"},{"label":"groupBy","kind":"method","documentation":"groupBy(Function a): Map","insertText":"groupBy"},{"label":"hashCode","kind":"method","documentation":"hashCode(): int","insertText":"hashCode"},{"label":"indexOf","kind":"method","documentation":"indexOf(def a): int","insertText":"indexOf"},{"label":"isEmpty","kind":"method","documentation":"isEmpty(): boolean","insertText":"isEmpty"},{"label":"iterator","kind":"method","documentation":"iterator(): Iterator","insertText":"iterator"},{"label":"join","kind":"method","documentation":"join(String a): String","insertText":"join"},{"label":"lastIndexOf","kind":"method","documentation":"lastIndexOf(def a): int","insertText":"lastIndexOf"},{"label":"listIterator","kind":"method","documentation":"listIterator(int a): ListIterator","insertText":"listIterator"},{"label":"remove","kind":"method","documentation":"remove(int a): def","insertText":"remove"},{"label":"removeAll","kind":"method","documentation":"removeAll(Collection a): boolean","insertText":"removeAll"},{"label":"removeIf","kind":"method","documentation":"removeIf(Predicate a): boolean","insertText":"removeIf"},{"label":"replaceAll","kind":"method","documentation":"replaceAll(UnaryOperator a): void","insertText":"replaceAll"},{"label":"retainAll","kind":"method","documentation":"retainAll(Collection a): boolean","insertText":"retainAll"},{"label":"set","kind":"method","documentation":"set(int a, def b): def","insertText":"set"},{"label":"size","kind":"method","documentation":"size(): int","insertText":"size"},{"label":"sort","kind":"method","documentation":"sort(Comparator a): void","insertText":"sort"},{"label":"split","kind":"method","documentation":"split(Predicate a): List","insertText":"split"},{"label":"spliterator","kind":"method","documentation":"spliterator(): Spliterator","insertText":"spliterator"},{"label":"stream","kind":"method","documentation":"stream(): Stream","insertText":"stream"},{"label":"subList","kind":"method","documentation":"subList(int a, int b): List","insertText":"subList"},{"label":"sum","kind":"method","documentation":"sum(ToDoubleFunction a): double","insertText":"sum"},{"label":"toArray","kind":"method","documentation":"toArray(def[] a): def[]","insertText":"toArray"},{"label":"toString","kind":"method","documentation":"toString(): String","insertText":"toString"}]},{"label":"GeoPoints","kind":"class","documentation":"Class: GeoPoints","insertText":"GeoPoints","properties":[{"label":"add","kind":"method","documentation":"add(int a, def b | def a): void | boolean","insertText":"add"},{"label":"addAll","kind":"method","documentation":"addAll(int a, Collection b | Collection a): boolean","insertText":"addAll"},{"label":"any","kind":"method","documentation":"any(Predicate a): boolean","insertText":"any"},{"label":"arcDistance","kind":"method","documentation":"arcDistance(double a, double b): double","insertText":"arcDistance"},{"label":"arcDistanceWithDefault","kind":"method","documentation":"arcDistanceWithDefault(double a, double b, double c): double","insertText":"arcDistanceWithDefault"},{"label":"asCollection","kind":"method","documentation":"asCollection(): Collection","insertText":"asCollection"},{"label":"asList","kind":"method","documentation":"asList(): List","insertText":"asList"},{"label":"clear","kind":"method","documentation":"clear(): void","insertText":"clear"},{"label":"collect","kind":"method","documentation":"collect(Collection a, Function b | Function a): def | List","insertText":"collect"},{"label":"contains","kind":"method","documentation":"contains(def a): boolean","insertText":"contains"},{"label":"containsAll","kind":"method","documentation":"containsAll(Collection a): boolean","insertText":"containsAll"},{"label":"each","kind":"method","documentation":"each(Consumer a): def","insertText":"each"},{"label":"eachWithIndex","kind":"method","documentation":"eachWithIndex(ObjIntConsumer a): def","insertText":"eachWithIndex"},{"label":"equals","kind":"method","documentation":"equals(Object a): boolean","insertText":"equals"},{"label":"every","kind":"method","documentation":"every(Predicate a): boolean","insertText":"every"},{"label":"find","kind":"method","documentation":"find(Predicate a): def","insertText":"find"},{"label":"findAll","kind":"method","documentation":"findAll(Predicate a): List","insertText":"findAll"},{"label":"findResult","kind":"method","documentation":"findResult(def a, Function b | Function a): def","insertText":"findResult"},{"label":"findResults","kind":"method","documentation":"findResults(Function a): List","insertText":"findResults"},{"label":"forEach","kind":"method","documentation":"forEach(Consumer a): void","insertText":"forEach"},{"label":"geohashDistance","kind":"method","documentation":"geohashDistance(String a): double","insertText":"geohashDistance"},{"label":"geohashDistanceWithDefault","kind":"method","documentation":"geohashDistanceWithDefault(String a, double b): double","insertText":"geohashDistanceWithDefault"},{"label":"get","kind":"method","documentation":"get(int a): GeoPoint","insertText":"get"},{"label":"getByPath","kind":"method","documentation":"getByPath(String a, Object b | String a): Object","insertText":"getByPath"},{"label":"getLat","kind":"method","documentation":"getLat(): double","insertText":"getLat"},{"label":"getLats","kind":"method","documentation":"getLats(): double[]","insertText":"getLats"},{"label":"getLength","kind":"method","documentation":"getLength(): int","insertText":"getLength"},{"label":"getLon","kind":"method","documentation":"getLon(): double","insertText":"getLon"},{"label":"getLons","kind":"method","documentation":"getLons(): double[]","insertText":"getLons"},{"label":"getValue","kind":"method","documentation":"getValue(): GeoPoint","insertText":"getValue"},{"label":"groupBy","kind":"method","documentation":"groupBy(Function a): Map","insertText":"groupBy"},{"label":"hashCode","kind":"method","documentation":"hashCode(): int","insertText":"hashCode"},{"label":"indexOf","kind":"method","documentation":"indexOf(def a): int","insertText":"indexOf"},{"label":"isEmpty","kind":"method","documentation":"isEmpty(): boolean","insertText":"isEmpty"},{"label":"iterator","kind":"method","documentation":"iterator(): Iterator","insertText":"iterator"},{"label":"join","kind":"method","documentation":"join(String a): String","insertText":"join"},{"label":"lastIndexOf","kind":"method","documentation":"lastIndexOf(def a): int","insertText":"lastIndexOf"},{"label":"listIterator","kind":"method","documentation":"listIterator(int a): ListIterator","insertText":"listIterator"},{"label":"planeDistance","kind":"method","documentation":"planeDistance(double a, double b): double","insertText":"planeDistance"},{"label":"planeDistanceWithDefault","kind":"method","documentation":"planeDistanceWithDefault(double a, double b, double c): double","insertText":"planeDistanceWithDefault"},{"label":"remove","kind":"method","documentation":"remove(int a): def","insertText":"remove"},{"label":"removeAll","kind":"method","documentation":"removeAll(Collection a): boolean","insertText":"removeAll"},{"label":"removeIf","kind":"method","documentation":"removeIf(Predicate a): boolean","insertText":"removeIf"},{"label":"replaceAll","kind":"method","documentation":"replaceAll(UnaryOperator a): void","insertText":"replaceAll"},{"label":"retainAll","kind":"method","documentation":"retainAll(Collection a): boolean","insertText":"retainAll"},{"label":"set","kind":"method","documentation":"set(int a, def b): def","insertText":"set"},{"label":"size","kind":"method","documentation":"size(): int","insertText":"size"},{"label":"sort","kind":"method","documentation":"sort(Comparator a): void","insertText":"sort"},{"label":"split","kind":"method","documentation":"split(Predicate a): List","insertText":"split"},{"label":"spliterator","kind":"method","documentation":"spliterator(): Spliterator","insertText":"spliterator"},{"label":"stream","kind":"method","documentation":"stream(): Stream","insertText":"stream"},{"label":"subList","kind":"method","documentation":"subList(int a, int b): List","insertText":"subList"},{"label":"sum","kind":"method","documentation":"sum(ToDoubleFunction a): double","insertText":"sum"},{"label":"toArray","kind":"method","documentation":"toArray(def[] a): def[]","insertText":"toArray"},{"label":"toString","kind":"method","documentation":"toString(): String","insertText":"toString"}]},{"label":"Longs","kind":"class","documentation":"Class: Longs","insertText":"Longs","properties":[{"label":"add","kind":"method","documentation":"add(int a, def b | def a): void | boolean","insertText":"add"},{"label":"addAll","kind":"method","documentation":"addAll(int a, Collection b | Collection a): boolean","insertText":"addAll"},{"label":"any","kind":"method","documentation":"any(Predicate a): boolean","insertText":"any"},{"label":"asCollection","kind":"method","documentation":"asCollection(): Collection","insertText":"asCollection"},{"label":"asList","kind":"method","documentation":"asList(): List","insertText":"asList"},{"label":"clear","kind":"method","documentation":"clear(): void","insertText":"clear"},{"label":"collect","kind":"method","documentation":"collect(Collection a, Function b | Function a): def | List","insertText":"collect"},{"label":"contains","kind":"method","documentation":"contains(def a): boolean","insertText":"contains"},{"label":"containsAll","kind":"method","documentation":"containsAll(Collection a): boolean","insertText":"containsAll"},{"label":"each","kind":"method","documentation":"each(Consumer a): def","insertText":"each"},{"label":"eachWithIndex","kind":"method","documentation":"eachWithIndex(ObjIntConsumer a): def","insertText":"eachWithIndex"},{"label":"equals","kind":"method","documentation":"equals(Object a): boolean","insertText":"equals"},{"label":"every","kind":"method","documentation":"every(Predicate a): boolean","insertText":"every"},{"label":"find","kind":"method","documentation":"find(Predicate a): def","insertText":"find"},{"label":"findAll","kind":"method","documentation":"findAll(Predicate a): List","insertText":"findAll"},{"label":"findResult","kind":"method","documentation":"findResult(def a, Function b | Function a): def","insertText":"findResult"},{"label":"findResults","kind":"method","documentation":"findResults(Function a): List","insertText":"findResults"},{"label":"forEach","kind":"method","documentation":"forEach(Consumer a): void","insertText":"forEach"},{"label":"get","kind":"method","documentation":"get(int a): Long","insertText":"get"},{"label":"getByPath","kind":"method","documentation":"getByPath(String a, Object b | String a): Object","insertText":"getByPath"},{"label":"getLength","kind":"method","documentation":"getLength(): int","insertText":"getLength"},{"label":"getValue","kind":"method","documentation":"getValue(): long","insertText":"getValue"},{"label":"groupBy","kind":"method","documentation":"groupBy(Function a): Map","insertText":"groupBy"},{"label":"hashCode","kind":"method","documentation":"hashCode(): int","insertText":"hashCode"},{"label":"indexOf","kind":"method","documentation":"indexOf(def a): int","insertText":"indexOf"},{"label":"isEmpty","kind":"method","documentation":"isEmpty(): boolean","insertText":"isEmpty"},{"label":"iterator","kind":"method","documentation":"iterator(): Iterator","insertText":"iterator"},{"label":"join","kind":"method","documentation":"join(String a): String","insertText":"join"},{"label":"lastIndexOf","kind":"method","documentation":"lastIndexOf(def a): int","insertText":"lastIndexOf"},{"label":"listIterator","kind":"method","documentation":"listIterator(int a): ListIterator","insertText":"listIterator"},{"label":"remove","kind":"method","documentation":"remove(int a): def","insertText":"remove"},{"label":"removeAll","kind":"method","documentation":"removeAll(Collection a): boolean","insertText":"removeAll"},{"label":"removeIf","kind":"method","documentation":"removeIf(Predicate a): boolean","insertText":"removeIf"},{"label":"replaceAll","kind":"method","documentation":"replaceAll(UnaryOperator a): void","insertText":"replaceAll"},{"label":"retainAll","kind":"method","documentation":"retainAll(Collection a): boolean","insertText":"retainAll"},{"label":"set","kind":"method","documentation":"set(int a, def b): def","insertText":"set"},{"label":"size","kind":"method","documentation":"size(): int","insertText":"size"},{"label":"sort","kind":"method","documentation":"sort(Comparator a): void","insertText":"sort"},{"label":"split","kind":"method","documentation":"split(Predicate a): List","insertText":"split"},{"label":"spliterator","kind":"method","documentation":"spliterator(): Spliterator","insertText":"spliterator"},{"label":"stream","kind":"method","documentation":"stream(): Stream","insertText":"stream"},{"label":"subList","kind":"method","documentation":"subList(int a, int b): List","insertText":"subList"},{"label":"sum","kind":"method","documentation":"sum(ToDoubleFunction a): double","insertText":"sum"},{"label":"toArray","kind":"method","documentation":"toArray(def[] a): def[]","insertText":"toArray"},{"label":"toString","kind":"method","documentation":"toString(): String","insertText":"toString"}]},{"label":"Strings","kind":"class","documentation":"Class: Strings","insertText":"Strings","properties":[{"label":"add","kind":"method","documentation":"add(int a, def b | def a): void | boolean","insertText":"add"},{"label":"addAll","kind":"method","documentation":"addAll(int a, Collection b | Collection a): boolean","insertText":"addAll"},{"label":"any","kind":"method","documentation":"any(Predicate a): boolean","insertText":"any"},{"label":"asCollection","kind":"method","documentation":"asCollection(): Collection","insertText":"asCollection"},{"label":"asList","kind":"method","documentation":"asList(): List","insertText":"asList"},{"label":"clear","kind":"method","documentation":"clear(): void","insertText":"clear"},{"label":"collect","kind":"method","documentation":"collect(Collection a, Function b | Function a): def | List","insertText":"collect"},{"label":"contains","kind":"method","documentation":"contains(def a): boolean","insertText":"contains"},{"label":"containsAll","kind":"method","documentation":"containsAll(Collection a): boolean","insertText":"containsAll"},{"label":"each","kind":"method","documentation":"each(Consumer a): def","insertText":"each"},{"label":"eachWithIndex","kind":"method","documentation":"eachWithIndex(ObjIntConsumer a): def","insertText":"eachWithIndex"},{"label":"equals","kind":"method","documentation":"equals(Object a): boolean","insertText":"equals"},{"label":"every","kind":"method","documentation":"every(Predicate a): boolean","insertText":"every"},{"label":"find","kind":"method","documentation":"find(Predicate a): def","insertText":"find"},{"label":"findAll","kind":"method","documentation":"findAll(Predicate a): List","insertText":"findAll"},{"label":"findResult","kind":"method","documentation":"findResult(def a, Function b | Function a): def","insertText":"findResult"},{"label":"findResults","kind":"method","documentation":"findResults(Function a): List","insertText":"findResults"},{"label":"forEach","kind":"method","documentation":"forEach(Consumer a): void","insertText":"forEach"},{"label":"get","kind":"method","documentation":"get(int a): String","insertText":"get"},{"label":"getByPath","kind":"method","documentation":"getByPath(String a, Object b | String a): Object","insertText":"getByPath"},{"label":"getLength","kind":"method","documentation":"getLength(): int","insertText":"getLength"},{"label":"getValue","kind":"method","documentation":"getValue(): String","insertText":"getValue"},{"label":"groupBy","kind":"method","documentation":"groupBy(Function a): Map","insertText":"groupBy"},{"label":"hashCode","kind":"method","documentation":"hashCode(): int","insertText":"hashCode"},{"label":"indexOf","kind":"method","documentation":"indexOf(def a): int","insertText":"indexOf"},{"label":"isEmpty","kind":"method","documentation":"isEmpty(): boolean","insertText":"isEmpty"},{"label":"iterator","kind":"method","documentation":"iterator(): Iterator","insertText":"iterator"},{"label":"join","kind":"method","documentation":"join(String a): String","insertText":"join"},{"label":"lastIndexOf","kind":"method","documentation":"lastIndexOf(def a): int","insertText":"lastIndexOf"},{"label":"listIterator","kind":"method","documentation":"listIterator(int a): ListIterator","insertText":"listIterator"},{"label":"remove","kind":"method","documentation":"remove(int a): def","insertText":"remove"},{"label":"removeAll","kind":"method","documentation":"removeAll(Collection a): boolean","insertText":"removeAll"},{"label":"removeIf","kind":"method","documentation":"removeIf(Predicate a): boolean","insertText":"removeIf"},{"label":"replaceAll","kind":"method","documentation":"replaceAll(UnaryOperator a): void","insertText":"replaceAll"},{"label":"retainAll","kind":"method","documentation":"retainAll(Collection a): boolean","insertText":"retainAll"},{"label":"set","kind":"method","documentation":"set(int a, def b): def","insertText":"set"},{"label":"size","kind":"method","documentation":"size(): int","insertText":"size"},{"label":"sort","kind":"method","documentation":"sort(Comparator a): void","insertText":"sort"},{"label":"split","kind":"method","documentation":"split(Predicate a): List","insertText":"split"},{"label":"spliterator","kind":"method","documentation":"spliterator(): Spliterator","insertText":"spliterator"},{"label":"stream","kind":"method","documentation":"stream(): Stream","insertText":"stream"},{"label":"subList","kind":"method","documentation":"subList(int a, int b): List","insertText":"subList"},{"label":"sum","kind":"method","documentation":"sum(ToDoubleFunction a): double","insertText":"sum"},{"label":"toArray","kind":"method","documentation":"toArray(def[] a): def[]","insertText":"toArray"},{"label":"toString","kind":"method","documentation":"toString(): String","insertText":"toString"}]},{"label":"IpScriptDocValues","kind":"class","documentation":"Class: IpScriptDocValues","insertText":"IpScriptDocValues","properties":[{"label":"add","kind":"method","documentation":"add(int a, def b | def a): void | boolean","insertText":"add"},{"label":"addAll","kind":"method","documentation":"addAll(int a, Collection b | Collection a): boolean","insertText":"addAll"},{"label":"any","kind":"method","documentation":"any(Predicate a): boolean","insertText":"any"},{"label":"asCollection","kind":"method","documentation":"asCollection(): Collection","insertText":"asCollection"},{"label":"asList","kind":"method","documentation":"asList(): List","insertText":"asList"},{"label":"clear","kind":"method","documentation":"clear(): void","insertText":"clear"},{"label":"collect","kind":"method","documentation":"collect(Collection a, Function b | Function a): def | List","insertText":"collect"},{"label":"contains","kind":"method","documentation":"contains(def a): boolean","insertText":"contains"},{"label":"containsAll","kind":"method","documentation":"containsAll(Collection a): boolean","insertText":"containsAll"},{"label":"each","kind":"method","documentation":"each(Consumer a): def","insertText":"each"},{"label":"eachWithIndex","kind":"method","documentation":"eachWithIndex(ObjIntConsumer a): def","insertText":"eachWithIndex"},{"label":"equals","kind":"method","documentation":"equals(Object a): boolean","insertText":"equals"},{"label":"every","kind":"method","documentation":"every(Predicate a): boolean","insertText":"every"},{"label":"find","kind":"method","documentation":"find(Predicate a): def","insertText":"find"},{"label":"findAll","kind":"method","documentation":"findAll(Predicate a): List","insertText":"findAll"},{"label":"findResult","kind":"method","documentation":"findResult(def a, Function b | Function a): def","insertText":"findResult"},{"label":"findResults","kind":"method","documentation":"findResults(Function a): List","insertText":"findResults"},{"label":"forEach","kind":"method","documentation":"forEach(Consumer a): void","insertText":"forEach"},{"label":"get","kind":"method","documentation":"get(int a): String","insertText":"get"},{"label":"getByPath","kind":"method","documentation":"getByPath(String a, Object b | String a): Object","insertText":"getByPath"},{"label":"getLength","kind":"method","documentation":"getLength(): int","insertText":"getLength"},{"label":"getValue","kind":"method","documentation":"getValue(): String","insertText":"getValue"},{"label":"groupBy","kind":"method","documentation":"groupBy(Function a): Map","insertText":"groupBy"},{"label":"hashCode","kind":"method","documentation":"hashCode(): int","insertText":"hashCode"},{"label":"indexOf","kind":"method","documentation":"indexOf(def a): int","insertText":"indexOf"},{"label":"isEmpty","kind":"method","documentation":"isEmpty(): boolean","insertText":"isEmpty"},{"label":"iterator","kind":"method","documentation":"iterator(): Iterator","insertText":"iterator"},{"label":"join","kind":"method","documentation":"join(String a): String","insertText":"join"},{"label":"lastIndexOf","kind":"method","documentation":"lastIndexOf(def a): int","insertText":"lastIndexOf"},{"label":"listIterator","kind":"method","documentation":"listIterator(int a): ListIterator","insertText":"listIterator"},{"label":"remove","kind":"method","documentation":"remove(int a): def","insertText":"remove"},{"label":"removeAll","kind":"method","documentation":"removeAll(Collection a): boolean","insertText":"removeAll"},{"label":"removeIf","kind":"method","documentation":"removeIf(Predicate a): boolean","insertText":"removeIf"},{"label":"replaceAll","kind":"method","documentation":"replaceAll(UnaryOperator a): void","insertText":"replaceAll"},{"label":"retainAll","kind":"method","documentation":"retainAll(Collection a): boolean","insertText":"retainAll"},{"label":"set","kind":"method","documentation":"set(int a, def b): def","insertText":"set"},{"label":"size","kind":"method","documentation":"size(): int","insertText":"size"},{"label":"sort","kind":"method","documentation":"sort(Comparator a): void","insertText":"sort"},{"label":"split","kind":"method","documentation":"split(Predicate a): List","insertText":"split"},{"label":"spliterator","kind":"method","documentation":"spliterator(): Spliterator","insertText":"spliterator"},{"label":"stream","kind":"method","documentation":"stream(): Stream","insertText":"stream"},{"label":"subList","kind":"method","documentation":"subList(int a, int b): List","insertText":"subList"},{"label":"sum","kind":"method","documentation":"sum(ToDoubleFunction a): double","insertText":"sum"},{"label":"toArray","kind":"method","documentation":"toArray(def[] a): def[]","insertText":"toArray"},{"label":"toString","kind":"method","documentation":"toString(): String","insertText":"toString"}]},{"label":"Interval","kind":"class","documentation":"Class: Interval","insertText":"Interval","properties":[{"label":"equals","kind":"method","documentation":"equals(Object a): boolean","insertText":"equals"},{"label":"getEnd","kind":"method","documentation":"getEnd(): int","insertText":"getEnd"},{"label":"getGaps","kind":"method","documentation":"getGaps(): int","insertText":"getGaps"},{"label":"getStart","kind":"method","documentation":"getStart(): int","insertText":"getStart"},{"label":"hashCode","kind":"method","documentation":"hashCode(): int","insertText":"hashCode"},{"label":"toString","kind":"method","documentation":"toString(): String","insertText":"toString"}]},{"label":"Doc","kind":"class","documentation":"Class: Doc","insertText":"Doc","properties":[{"label":"equals","kind":"method","documentation":"equals(Object a): boolean","insertText":"equals"},{"label":"getFreq","kind":"method","documentation":"getFreq(): float","insertText":"getFreq"},{"label":"getLength","kind":"method","documentation":"getLength(): int","insertText":"getLength"},{"label":"hashCode","kind":"method","documentation":"hashCode(): int","insertText":"hashCode"},{"label":"toString","kind":"method","documentation":"toString(): String","insertText":"toString"}]},{"label":"Field","kind":"class","documentation":"Class: Field","insertText":"Field","properties":[{"label":"equals","kind":"method","documentation":"equals(Object a): boolean","insertText":"equals"},{"label":"getDocCount","kind":"method","documentation":"getDocCount(): long","insertText":"getDocCount"},{"label":"getSumDocFreq","kind":"method","documentation":"getSumDocFreq(): long","insertText":"getSumDocFreq"},{"label":"getSumTotalTermFreq","kind":"method","documentation":"getSumTotalTermFreq(): long","insertText":"getSumTotalTermFreq"},{"label":"hashCode","kind":"method","documentation":"hashCode(): int","insertText":"hashCode"},{"label":"toString","kind":"method","documentation":"toString(): String","insertText":"toString"}]},{"label":"Query","kind":"class","documentation":"Class: Query","insertText":"Query","properties":[{"label":"equals","kind":"method","documentation":"equals(Object a): boolean","insertText":"equals"},{"label":"getBoost","kind":"method","documentation":"getBoost(): float","insertText":"getBoost"},{"label":"hashCode","kind":"method","documentation":"hashCode(): int","insertText":"hashCode"},{"label":"toString","kind":"method","documentation":"toString(): String","insertText":"toString"}]},{"label":"Term","kind":"class","documentation":"Class: Term","insertText":"Term","properties":[{"label":"equals","kind":"method","documentation":"equals(Object a): boolean","insertText":"equals"},{"label":"getDocFreq","kind":"method","documentation":"getDocFreq(): long","insertText":"getDocFreq"},{"label":"getTotalTermFreq","kind":"method","documentation":"getTotalTermFreq(): long","insertText":"getTotalTermFreq"},{"label":"hashCode","kind":"method","documentation":"hashCode(): int","insertText":"hashCode"},{"label":"toString","kind":"method","documentation":"toString(): String","insertText":"toString"}]},{"label":"Debug","kind":"class","documentation":"Class: Debug","insertText":"Debug","properties":[{"label":"explain","kind":"method","documentation":"explain(Object a): void","insertText":"explain"},{"label":"equals","kind":"method","documentation":"equals(Object a): boolean","insertText":"equals"},{"label":"hashCode","kind":"method","documentation":"hashCode(): int","insertText":"hashCode"},{"label":"toString","kind":"method","documentation":"toString(): String","insertText":"toString"}]},{"label":"JodaCompatibleZonedDateTime","kind":"class","documentation":"Class: JodaCompatibleZonedDateTime","insertText":"JodaCompatibleZonedDateTime","properties":[{"label":"compareTo","kind":"method","documentation":"compareTo(ChronoZonedDateTime a): int","insertText":"compareTo"},{"label":"equals","kind":"method","documentation":"equals(Object a): boolean","insertText":"equals"},{"label":"format","kind":"method","documentation":"format(DateTimeFormatter a): String","insertText":"format"},{"label":"get","kind":"method","documentation":"get(TemporalField a): int","insertText":"get"},{"label":"getCenturyOfEra","kind":"method","documentation":"getCenturyOfEra(): int","insertText":"getCenturyOfEra"},{"label":"getChronology","kind":"method","documentation":"getChronology(): Chronology","insertText":"getChronology"},{"label":"getDayOfMonth","kind":"method","documentation":"getDayOfMonth(): int","insertText":"getDayOfMonth"},{"label":"getDayOfWeek","kind":"method","documentation":"getDayOfWeek(): int","insertText":"getDayOfWeek"},{"label":"getDayOfWeekEnum","kind":"method","documentation":"getDayOfWeekEnum(): DayOfWeek","insertText":"getDayOfWeekEnum"},{"label":"getDayOfYear","kind":"method","documentation":"getDayOfYear(): int","insertText":"getDayOfYear"},{"label":"getEra","kind":"method","documentation":"getEra(): int","insertText":"getEra"},{"label":"getHour","kind":"method","documentation":"getHour(): int","insertText":"getHour"},{"label":"getHourOfDay","kind":"method","documentation":"getHourOfDay(): int","insertText":"getHourOfDay"},{"label":"getLong","kind":"method","documentation":"getLong(TemporalField a): long","insertText":"getLong"},{"label":"getMillis","kind":"method","documentation":"getMillis(): long","insertText":"getMillis"},{"label":"getMillisOfDay","kind":"method","documentation":"getMillisOfDay(): int","insertText":"getMillisOfDay"},{"label":"getMillisOfSecond","kind":"method","documentation":"getMillisOfSecond(): int","insertText":"getMillisOfSecond"},{"label":"getMinute","kind":"method","documentation":"getMinute(): int","insertText":"getMinute"},{"label":"getMinuteOfDay","kind":"method","documentation":"getMinuteOfDay(): int","insertText":"getMinuteOfDay"},{"label":"getMinuteOfHour","kind":"method","documentation":"getMinuteOfHour(): int","insertText":"getMinuteOfHour"},{"label":"getMonth","kind":"method","documentation":"getMonth(): Month","insertText":"getMonth"},{"label":"getMonthOfYear","kind":"method","documentation":"getMonthOfYear(): int","insertText":"getMonthOfYear"},{"label":"getMonthValue","kind":"method","documentation":"getMonthValue(): int","insertText":"getMonthValue"},{"label":"getNano","kind":"method","documentation":"getNano(): int","insertText":"getNano"},{"label":"getOffset","kind":"method","documentation":"getOffset(): ZoneOffset","insertText":"getOffset"},{"label":"getSecond","kind":"method","documentation":"getSecond(): int","insertText":"getSecond"},{"label":"getSecondOfDay","kind":"method","documentation":"getSecondOfDay(): int","insertText":"getSecondOfDay"},{"label":"getSecondOfMinute","kind":"method","documentation":"getSecondOfMinute(): int","insertText":"getSecondOfMinute"},{"label":"getWeekOfWeekyear","kind":"method","documentation":"getWeekOfWeekyear(): int","insertText":"getWeekOfWeekyear"},{"label":"getWeekyear","kind":"method","documentation":"getWeekyear(): int","insertText":"getWeekyear"},{"label":"getYear","kind":"method","documentation":"getYear(): int","insertText":"getYear"},{"label":"getYearOfCentury","kind":"method","documentation":"getYearOfCentury(): int","insertText":"getYearOfCentury"},{"label":"getYearOfEra","kind":"method","documentation":"getYearOfEra(): int","insertText":"getYearOfEra"},{"label":"getZone","kind":"method","documentation":"getZone(): ZoneId","insertText":"getZone"},{"label":"hashCode","kind":"method","documentation":"hashCode(): int","insertText":"hashCode"},{"label":"isAfter","kind":"method","documentation":"isAfter(ChronoZonedDateTime a): boolean","insertText":"isAfter"},{"label":"isBefore","kind":"method","documentation":"isBefore(ChronoZonedDateTime a): boolean","insertText":"isBefore"},{"label":"isEqual","kind":"method","documentation":"isEqual(ChronoZonedDateTime a): boolean","insertText":"isEqual"},{"label":"isSupported","kind":"method","documentation":"isSupported(TemporalField a): boolean","insertText":"isSupported"},{"label":"minus","kind":"method","documentation":"minus(long a, TemporalUnit b | TemporalAmount a): ZonedDateTime","insertText":"minus"},{"label":"minusDays","kind":"method","documentation":"minusDays(long a): ZonedDateTime","insertText":"minusDays"},{"label":"minusHours","kind":"method","documentation":"minusHours(long a): ZonedDateTime","insertText":"minusHours"},{"label":"minusMinutes","kind":"method","documentation":"minusMinutes(long a): ZonedDateTime","insertText":"minusMinutes"},{"label":"minusMonths","kind":"method","documentation":"minusMonths(long a): ZonedDateTime","insertText":"minusMonths"},{"label":"minusNanos","kind":"method","documentation":"minusNanos(long a): ZonedDateTime","insertText":"minusNanos"},{"label":"minusSeconds","kind":"method","documentation":"minusSeconds(long a): ZonedDateTime","insertText":"minusSeconds"},{"label":"minusWeeks","kind":"method","documentation":"minusWeeks(long a): ZonedDateTime","insertText":"minusWeeks"},{"label":"minusYears","kind":"method","documentation":"minusYears(long a): ZonedDateTime","insertText":"minusYears"},{"label":"plus","kind":"method","documentation":"plus(long a, TemporalUnit b | TemporalAmount a): ZonedDateTime","insertText":"plus"},{"label":"plusDays","kind":"method","documentation":"plusDays(long a): ZonedDateTime","insertText":"plusDays"},{"label":"plusHours","kind":"method","documentation":"plusHours(long a): ZonedDateTime","insertText":"plusHours"},{"label":"plusMinutes","kind":"method","documentation":"plusMinutes(long a): ZonedDateTime","insertText":"plusMinutes"},{"label":"plusMonths","kind":"method","documentation":"plusMonths(long a): ZonedDateTime","insertText":"plusMonths"},{"label":"plusNanos","kind":"method","documentation":"plusNanos(long a): ZonedDateTime","insertText":"plusNanos"},{"label":"plusSeconds","kind":"method","documentation":"plusSeconds(long a): ZonedDateTime","insertText":"plusSeconds"},{"label":"plusWeeks","kind":"method","documentation":"plusWeeks(long a): ZonedDateTime","insertText":"plusWeeks"},{"label":"plusYears","kind":"method","documentation":"plusYears(long a): ZonedDateTime","insertText":"plusYears"},{"label":"query","kind":"method","documentation":"query(TemporalQuery a): def","insertText":"query"},{"label":"range","kind":"method","documentation":"range(TemporalField a): ValueRange","insertText":"range"},{"label":"toEpochMilli","kind":"method","documentation":"toEpochMilli(): long","insertText":"toEpochMilli"},{"label":"toEpochSecond","kind":"method","documentation":"toEpochSecond(): long","insertText":"toEpochSecond"},{"label":"toInstant","kind":"method","documentation":"toInstant(): Instant","insertText":"toInstant"},{"label":"toLocalDate","kind":"method","documentation":"toLocalDate(): LocalDate","insertText":"toLocalDate"},{"label":"toLocalDateTime","kind":"method","documentation":"toLocalDateTime(): LocalDateTime","insertText":"toLocalDateTime"},{"label":"toLocalTime","kind":"method","documentation":"toLocalTime(): LocalTime","insertText":"toLocalTime"},{"label":"toOffsetDateTime","kind":"method","documentation":"toOffsetDateTime(): OffsetDateTime","insertText":"toOffsetDateTime"},{"label":"toString","kind":"method","documentation":"toString(String a, Locale b | String a): String","insertText":"toString"},{"label":"truncatedTo","kind":"method","documentation":"truncatedTo(TemporalUnit a): ZonedDateTime","insertText":"truncatedTo"},{"label":"until","kind":"method","documentation":"until(Temporal a, TemporalUnit b): long","insertText":"until"},{"label":"with","kind":"method","documentation":"with(TemporalField a, long b | TemporalAdjuster a): ZonedDateTime","insertText":"with"},{"label":"withDayOfMonth","kind":"method","documentation":"withDayOfMonth(int a): ZonedDateTime","insertText":"withDayOfMonth"},{"label":"withDayOfYear","kind":"method","documentation":"withDayOfYear(int a): ZonedDateTime","insertText":"withDayOfYear"},{"label":"withEarlierOffsetAtOverlap","kind":"method","documentation":"withEarlierOffsetAtOverlap(): ZonedDateTime","insertText":"withEarlierOffsetAtOverlap"},{"label":"withFixedOffsetZone","kind":"method","documentation":"withFixedOffsetZone(): ZonedDateTime","insertText":"withFixedOffsetZone"},{"label":"withHour","kind":"method","documentation":"withHour(int a): ZonedDateTime","insertText":"withHour"},{"label":"withLaterOffsetAtOverlap","kind":"method","documentation":"withLaterOffsetAtOverlap(): ZonedDateTime","insertText":"withLaterOffsetAtOverlap"},{"label":"withMinute","kind":"method","documentation":"withMinute(int a): ZonedDateTime","insertText":"withMinute"},{"label":"withMonth","kind":"method","documentation":"withMonth(int a): ZonedDateTime","insertText":"withMonth"},{"label":"withNano","kind":"method","documentation":"withNano(int a): ZonedDateTime","insertText":"withNano"},{"label":"withSecond","kind":"method","documentation":"withSecond(int a): ZonedDateTime","insertText":"withSecond"},{"label":"withYear","kind":"method","documentation":"withYear(int a): ZonedDateTime","insertText":"withYear"},{"label":"withZoneSameInstant","kind":"method","documentation":"withZoneSameInstant(ZoneId a): ZonedDateTime","insertText":"withZoneSameInstant"},{"label":"withZoneSameLocal","kind":"method","documentation":"withZoneSameLocal(ZoneId a): ZonedDateTime","insertText":"withZoneSameLocal"}]},{"label":"FieldLookup","kind":"class","documentation":"Class: FieldLookup","insertText":"FieldLookup","properties":[{"label":"equals","kind":"method","documentation":"equals(Object a): boolean","insertText":"equals"},{"label":"getValue","kind":"method","documentation":"getValue(): def","insertText":"getValue"},{"label":"getValues","kind":"method","documentation":"getValues(): List","insertText":"getValues"},{"label":"hashCode","kind":"method","documentation":"hashCode(): int","insertText":"hashCode"},{"label":"isEmpty","kind":"method","documentation":"isEmpty(): boolean","insertText":"isEmpty"},{"label":"toString","kind":"method","documentation":"toString(): String","insertText":"toString"}]}]}')},function(e){e.exports=JSON.parse('{"suggestions":[{"label":"String","kind":"class","documentation":"Class: String","insertText":"String","properties":[{"label":"copyValueOf","kind":"method","documentation":"copyValueOf(char[] a, int b, int c | char[] a): String","insertText":"copyValueOf"},{"label":"format","kind":"method","documentation":"format(Locale a, String b, def[] c | String a, def[] b): String","insertText":"format"},{"label":"join","kind":"method","documentation":"join(CharSequence a, Iterable b): String","insertText":"join"},{"label":"valueOf","kind":"method","documentation":"valueOf(def a): String","insertText":"valueOf"},{"label":"charAt","kind":"method","documentation":"charAt(int a): char","insertText":"charAt"},{"label":"chars","kind":"method","documentation":"chars(): IntStream","insertText":"chars"},{"label":"codePointAt","kind":"method","documentation":"codePointAt(int a): int","insertText":"codePointAt"},{"label":"codePointBefore","kind":"method","documentation":"codePointBefore(int a): int","insertText":"codePointBefore"},{"label":"codePointCount","kind":"method","documentation":"codePointCount(int a, int b): int","insertText":"codePointCount"},{"label":"codePoints","kind":"method","documentation":"codePoints(): IntStream","insertText":"codePoints"},{"label":"compareTo","kind":"method","documentation":"compareTo(String a): int","insertText":"compareTo"},{"label":"compareToIgnoreCase","kind":"method","documentation":"compareToIgnoreCase(String a): int","insertText":"compareToIgnoreCase"},{"label":"concat","kind":"method","documentation":"concat(String a): String","insertText":"concat"},{"label":"contains","kind":"method","documentation":"contains(CharSequence a): boolean","insertText":"contains"},{"label":"contentEquals","kind":"method","documentation":"contentEquals(CharSequence a): boolean","insertText":"contentEquals"},{"label":"decodeBase64","kind":"method","documentation":"decodeBase64(): String","insertText":"decodeBase64"},{"label":"encodeBase64","kind":"method","documentation":"encodeBase64(): String","insertText":"encodeBase64"},{"label":"endsWith","kind":"method","documentation":"endsWith(String a): boolean","insertText":"endsWith"},{"label":"equals","kind":"method","documentation":"equals(Object a): boolean","insertText":"equals"},{"label":"equalsIgnoreCase","kind":"method","documentation":"equalsIgnoreCase(String a): boolean","insertText":"equalsIgnoreCase"},{"label":"getChars","kind":"method","documentation":"getChars(int a, int b, char[] c, int d): void","insertText":"getChars"},{"label":"hashCode","kind":"method","documentation":"hashCode(): int","insertText":"hashCode"},{"label":"indexOf","kind":"method","documentation":"indexOf(String a, int b | String a): int","insertText":"indexOf"},{"label":"isEmpty","kind":"method","documentation":"isEmpty(): boolean","insertText":"isEmpty"},{"label":"lastIndexOf","kind":"method","documentation":"lastIndexOf(String a, int b | String a): int","insertText":"lastIndexOf"},{"label":"length","kind":"method","documentation":"length(): int","insertText":"length"},{"label":"offsetByCodePoints","kind":"method","documentation":"offsetByCodePoints(int a, int b): int","insertText":"offsetByCodePoints"},{"label":"regionMatches","kind":"method","documentation":"regionMatches(boolean a, int b, String c, int d, int e | int a, String b, int c, int d): boolean","insertText":"regionMatches"},{"label":"replace","kind":"method","documentation":"replace(CharSequence a, CharSequence b): String","insertText":"replace"},{"label":"replaceAll","kind":"method","documentation":"replaceAll(Pattern a, Function b): String","insertText":"replaceAll"},{"label":"replaceFirst","kind":"method","documentation":"replaceFirst(Pattern a, Function b): String","insertText":"replaceFirst"},{"label":"splitOnToken","kind":"method","documentation":"splitOnToken(String a, int b | String a): String[]","insertText":"splitOnToken"},{"label":"startsWith","kind":"method","documentation":"startsWith(String a, int b | String a): boolean","insertText":"startsWith"},{"label":"subSequence","kind":"method","documentation":"subSequence(int a, int b): CharSequence","insertText":"subSequence"},{"label":"substring","kind":"method","documentation":"substring(int a, int b | int a): String","insertText":"substring"},{"label":"toCharArray","kind":"method","documentation":"toCharArray(): char[]","insertText":"toCharArray"},{"label":"toLowerCase","kind":"method","documentation":"toLowerCase(Locale a): String","insertText":"toLowerCase"},{"label":"toString","kind":"method","documentation":"toString(): String","insertText":"toString"},{"label":"toUpperCase","kind":"method","documentation":"toUpperCase(Locale a): String","insertText":"toUpperCase"},{"label":"trim","kind":"method","documentation":"trim(): String","insertText":"trim"}],"constructorDefinition":{"label":"String","kind":"constructor","documentation":"Constructor: String","insertText":"String"}},{"label":"org.elasticsearch.xpack.runtimefields.mapper.LongFieldScript","kind":"class","documentation":"Class: org.elasticsearch.xpack.runtimefields.mapper.LongFieldScript","insertText":"org.elasticsearch.xpack.runtimefields.mapper.LongFieldScript","properties":[{"label":"equals","kind":"method","documentation":"equals(Object a): boolean","insertText":"equals"},{"label":"hashCode","kind":"method","documentation":"hashCode(): int","insertText":"hashCode"},{"label":"toString","kind":"method","documentation":"toString(): String","insertText":"toString"}]},{"label":"org.elasticsearch.xpack.runtimefields.mapper.LongFieldScript.Factory","kind":"class","documentation":"Class: org.elasticsearch.xpack.runtimefields.mapper.LongFieldScript.Factory","insertText":"org.elasticsearch.xpack.runtimefields.mapper.LongFieldScript.Factory","properties":[{"label":"equals","kind":"method","documentation":"equals(Object a): boolean","insertText":"equals"},{"label":"hashCode","kind":"method","documentation":"hashCode(): int","insertText":"hashCode"},{"label":"toString","kind":"method","documentation":"toString(): String","insertText":"toString"}]}]}')},function(e){e.exports=JSON.parse('{"suggestions":[{"label":"String","kind":"class","documentation":"Class: String","insertText":"String","properties":[{"label":"copyValueOf","kind":"method","documentation":"copyValueOf(char[] a, int b, int c | char[] a): String","insertText":"copyValueOf"},{"label":"format","kind":"method","documentation":"format(Locale a, String b, def[] c | String a, def[] b): String","insertText":"format"},{"label":"join","kind":"method","documentation":"join(CharSequence a, Iterable b): String","insertText":"join"},{"label":"valueOf","kind":"method","documentation":"valueOf(def a): String","insertText":"valueOf"},{"label":"charAt","kind":"method","documentation":"charAt(int a): char","insertText":"charAt"},{"label":"chars","kind":"method","documentation":"chars(): IntStream","insertText":"chars"},{"label":"codePointAt","kind":"method","documentation":"codePointAt(int a): int","insertText":"codePointAt"},{"label":"codePointBefore","kind":"method","documentation":"codePointBefore(int a): int","insertText":"codePointBefore"},{"label":"codePointCount","kind":"method","documentation":"codePointCount(int a, int b): int","insertText":"codePointCount"},{"label":"codePoints","kind":"method","documentation":"codePoints(): IntStream","insertText":"codePoints"},{"label":"compareTo","kind":"method","documentation":"compareTo(String a): int","insertText":"compareTo"},{"label":"compareToIgnoreCase","kind":"method","documentation":"compareToIgnoreCase(String a): int","insertText":"compareToIgnoreCase"},{"label":"concat","kind":"method","documentation":"concat(String a): String","insertText":"concat"},{"label":"contains","kind":"method","documentation":"contains(CharSequence a): boolean","insertText":"contains"},{"label":"contentEquals","kind":"method","documentation":"contentEquals(CharSequence a): boolean","insertText":"contentEquals"},{"label":"decodeBase64","kind":"method","documentation":"decodeBase64(): String","insertText":"decodeBase64"},{"label":"encodeBase64","kind":"method","documentation":"encodeBase64(): String","insertText":"encodeBase64"},{"label":"endsWith","kind":"method","documentation":"endsWith(String a): boolean","insertText":"endsWith"},{"label":"equals","kind":"method","documentation":"equals(Object a): boolean","insertText":"equals"},{"label":"equalsIgnoreCase","kind":"method","documentation":"equalsIgnoreCase(String a): boolean","insertText":"equalsIgnoreCase"},{"label":"getChars","kind":"method","documentation":"getChars(int a, int b, char[] c, int d): void","insertText":"getChars"},{"label":"hashCode","kind":"method","documentation":"hashCode(): int","insertText":"hashCode"},{"label":"indexOf","kind":"method","documentation":"indexOf(String a, int b | String a): int","insertText":"indexOf"},{"label":"isEmpty","kind":"method","documentation":"isEmpty(): boolean","insertText":"isEmpty"},{"label":"lastIndexOf","kind":"method","documentation":"lastIndexOf(String a, int b | String a): int","insertText":"lastIndexOf"},{"label":"length","kind":"method","documentation":"length(): int","insertText":"length"},{"label":"offsetByCodePoints","kind":"method","documentation":"offsetByCodePoints(int a, int b): int","insertText":"offsetByCodePoints"},{"label":"regionMatches","kind":"method","documentation":"regionMatches(boolean a, int b, String c, int d, int e | int a, String b, int c, int d): boolean","insertText":"regionMatches"},{"label":"replace","kind":"method","documentation":"replace(CharSequence a, CharSequence b): String","insertText":"replace"},{"label":"replaceAll","kind":"method","documentation":"replaceAll(Pattern a, Function b): String","insertText":"replaceAll"},{"label":"replaceFirst","kind":"method","documentation":"replaceFirst(Pattern a, Function b): String","insertText":"replaceFirst"},{"label":"splitOnToken","kind":"method","documentation":"splitOnToken(String a, int b | String a): String[]","insertText":"splitOnToken"},{"label":"startsWith","kind":"method","documentation":"startsWith(String a, int b | String a): boolean","insertText":"startsWith"},{"label":"subSequence","kind":"method","documentation":"subSequence(int a, int b): CharSequence","insertText":"subSequence"},{"label":"substring","kind":"method","documentation":"substring(int a, int b | int a): String","insertText":"substring"},{"label":"toCharArray","kind":"method","documentation":"toCharArray(): char[]","insertText":"toCharArray"},{"label":"toLowerCase","kind":"method","documentation":"toLowerCase(Locale a): String","insertText":"toLowerCase"},{"label":"toString","kind":"method","documentation":"toString(): String","insertText":"toString"},{"label":"toUpperCase","kind":"method","documentation":"toUpperCase(Locale a): String","insertText":"toUpperCase"},{"label":"trim","kind":"method","documentation":"trim(): String","insertText":"trim"}],"constructorDefinition":{"label":"String","kind":"constructor","documentation":"Constructor: String","insertText":"String"}},{"label":"org.elasticsearch.xpack.runtimefields.mapper.IpFieldScript","kind":"class","documentation":"Class: org.elasticsearch.xpack.runtimefields.mapper.IpFieldScript","insertText":"org.elasticsearch.xpack.runtimefields.mapper.IpFieldScript","properties":[{"label":"equals","kind":"method","documentation":"equals(Object a): boolean","insertText":"equals"},{"label":"hashCode","kind":"method","documentation":"hashCode(): int","insertText":"hashCode"},{"label":"toString","kind":"method","documentation":"toString(): String","insertText":"toString"}]},{"label":"org.elasticsearch.xpack.runtimefields.mapper.IpFieldScript.Factory","kind":"class","documentation":"Class: org.elasticsearch.xpack.runtimefields.mapper.IpFieldScript.Factory","insertText":"org.elasticsearch.xpack.runtimefields.mapper.IpFieldScript.Factory","properties":[{"label":"equals","kind":"method","documentation":"equals(Object a): boolean","insertText":"equals"},{"label":"hashCode","kind":"method","documentation":"hashCode(): int","insertText":"hashCode"},{"label":"toString","kind":"method","documentation":"toString(): String","insertText":"toString"}]}]}')},function(e){e.exports=JSON.parse('{"suggestions":[{"label":"String","kind":"class","documentation":"Class: String","insertText":"String","properties":[{"label":"copyValueOf","kind":"method","documentation":"copyValueOf(char[] a, int b, int c | char[] a): String","insertText":"copyValueOf"},{"label":"format","kind":"method","documentation":"format(Locale a, String b, def[] c | String a, def[] b): String","insertText":"format"},{"label":"join","kind":"method","documentation":"join(CharSequence a, Iterable b): String","insertText":"join"},{"label":"valueOf","kind":"method","documentation":"valueOf(def a): String","insertText":"valueOf"},{"label":"charAt","kind":"method","documentation":"charAt(int a): char","insertText":"charAt"},{"label":"chars","kind":"method","documentation":"chars(): IntStream","insertText":"chars"},{"label":"codePointAt","kind":"method","documentation":"codePointAt(int a): int","insertText":"codePointAt"},{"label":"codePointBefore","kind":"method","documentation":"codePointBefore(int a): int","insertText":"codePointBefore"},{"label":"codePointCount","kind":"method","documentation":"codePointCount(int a, int b): int","insertText":"codePointCount"},{"label":"codePoints","kind":"method","documentation":"codePoints(): IntStream","insertText":"codePoints"},{"label":"compareTo","kind":"method","documentation":"compareTo(String a): int","insertText":"compareTo"},{"label":"compareToIgnoreCase","kind":"method","documentation":"compareToIgnoreCase(String a): int","insertText":"compareToIgnoreCase"},{"label":"concat","kind":"method","documentation":"concat(String a): String","insertText":"concat"},{"label":"contains","kind":"method","documentation":"contains(CharSequence a): boolean","insertText":"contains"},{"label":"contentEquals","kind":"method","documentation":"contentEquals(CharSequence a): boolean","insertText":"contentEquals"},{"label":"decodeBase64","kind":"method","documentation":"decodeBase64(): String","insertText":"decodeBase64"},{"label":"encodeBase64","kind":"method","documentation":"encodeBase64(): String","insertText":"encodeBase64"},{"label":"endsWith","kind":"method","documentation":"endsWith(String a): boolean","insertText":"endsWith"},{"label":"equals","kind":"method","documentation":"equals(Object a): boolean","insertText":"equals"},{"label":"equalsIgnoreCase","kind":"method","documentation":"equalsIgnoreCase(String a): boolean","insertText":"equalsIgnoreCase"},{"label":"getChars","kind":"method","documentation":"getChars(int a, int b, char[] c, int d): void","insertText":"getChars"},{"label":"hashCode","kind":"method","documentation":"hashCode(): int","insertText":"hashCode"},{"label":"indexOf","kind":"method","documentation":"indexOf(String a, int b | String a): int","insertText":"indexOf"},{"label":"isEmpty","kind":"method","documentation":"isEmpty(): boolean","insertText":"isEmpty"},{"label":"lastIndexOf","kind":"method","documentation":"lastIndexOf(String a, int b | String a): int","insertText":"lastIndexOf"},{"label":"length","kind":"method","documentation":"length(): int","insertText":"length"},{"label":"offsetByCodePoints","kind":"method","documentation":"offsetByCodePoints(int a, int b): int","insertText":"offsetByCodePoints"},{"label":"regionMatches","kind":"method","documentation":"regionMatches(boolean a, int b, String c, int d, int e | int a, String b, int c, int d): boolean","insertText":"regionMatches"},{"label":"replace","kind":"method","documentation":"replace(CharSequence a, CharSequence b): String","insertText":"replace"},{"label":"replaceAll","kind":"method","documentation":"replaceAll(Pattern a, Function b): String","insertText":"replaceAll"},{"label":"replaceFirst","kind":"method","documentation":"replaceFirst(Pattern a, Function b): String","insertText":"replaceFirst"},{"label":"splitOnToken","kind":"method","documentation":"splitOnToken(String a, int b | String a): String[]","insertText":"splitOnToken"},{"label":"startsWith","kind":"method","documentation":"startsWith(String a, int b | String a): boolean","insertText":"startsWith"},{"label":"subSequence","kind":"method","documentation":"subSequence(int a, int b): CharSequence","insertText":"subSequence"},{"label":"substring","kind":"method","documentation":"substring(int a, int b | int a): String","insertText":"substring"},{"label":"toCharArray","kind":"method","documentation":"toCharArray(): char[]","insertText":"toCharArray"},{"label":"toLowerCase","kind":"method","documentation":"toLowerCase(Locale a): String","insertText":"toLowerCase"},{"label":"toString","kind":"method","documentation":"toString(): String","insertText":"toString"},{"label":"toUpperCase","kind":"method","documentation":"toUpperCase(Locale a): String","insertText":"toUpperCase"},{"label":"trim","kind":"method","documentation":"trim(): String","insertText":"trim"}],"constructorDefinition":{"label":"String","kind":"constructor","documentation":"Constructor: String","insertText":"String"}},{"label":"GeoShape","kind":"class","documentation":"Class: GeoShape","insertText":"GeoShape","properties":[{"label":"equals","kind":"method","documentation":"equals(Object a): boolean","insertText":"equals"},{"label":"hashCode","kind":"method","documentation":"hashCode(): int","insertText":"hashCode"},{"label":"toString","kind":"method","documentation":"toString(): String","insertText":"toString"}]},{"label":"IntervalDayTime","kind":"class","documentation":"Class: IntervalDayTime","insertText":"IntervalDayTime","properties":[{"label":"equals","kind":"method","documentation":"equals(Object a): boolean","insertText":"equals"},{"label":"hashCode","kind":"method","documentation":"hashCode(): int","insertText":"hashCode"},{"label":"toString","kind":"method","documentation":"toString(): String","insertText":"toString"}]},{"label":"IntervalYearMonth","kind":"class","documentation":"Class: IntervalYearMonth","insertText":"IntervalYearMonth","properties":[{"label":"equals","kind":"method","documentation":"equals(Object a): boolean","insertText":"equals"},{"label":"hashCode","kind":"method","documentation":"hashCode(): int","insertText":"hashCode"},{"label":"toString","kind":"method","documentation":"toString(): String","insertText":"toString"}]},{"label":"VersionScriptDocValues","kind":"class","documentation":"Class: VersionScriptDocValues","insertText":"VersionScriptDocValues","properties":[{"label":"add","kind":"method","documentation":"add(int a, def b | def a): void | boolean","insertText":"add"},{"label":"addAll","kind":"method","documentation":"addAll(int a, Collection b | Collection a): boolean","insertText":"addAll"},{"label":"any","kind":"method","documentation":"any(Predicate a): boolean","insertText":"any"},{"label":"asCollection","kind":"method","documentation":"asCollection(): Collection","insertText":"asCollection"},{"label":"asList","kind":"method","documentation":"asList(): List","insertText":"asList"},{"label":"clear","kind":"method","documentation":"clear(): void","insertText":"clear"},{"label":"collect","kind":"method","documentation":"collect(Collection a, Function b | Function a): def | List","insertText":"collect"},{"label":"contains","kind":"method","documentation":"contains(def a): boolean","insertText":"contains"},{"label":"containsAll","kind":"method","documentation":"containsAll(Collection a): boolean","insertText":"containsAll"},{"label":"each","kind":"method","documentation":"each(Consumer a): def","insertText":"each"},{"label":"eachWithIndex","kind":"method","documentation":"eachWithIndex(ObjIntConsumer a): def","insertText":"eachWithIndex"},{"label":"equals","kind":"method","documentation":"equals(Object a): boolean","insertText":"equals"},{"label":"every","kind":"method","documentation":"every(Predicate a): boolean","insertText":"every"},{"label":"find","kind":"method","documentation":"find(Predicate a): def","insertText":"find"},{"label":"findAll","kind":"method","documentation":"findAll(Predicate a): List","insertText":"findAll"},{"label":"findResult","kind":"method","documentation":"findResult(def a, Function b | Function a): def","insertText":"findResult"},{"label":"findResults","kind":"method","documentation":"findResults(Function a): List","insertText":"findResults"},{"label":"forEach","kind":"method","documentation":"forEach(Consumer a): void","insertText":"forEach"},{"label":"get","kind":"method","documentation":"get(int a): String","insertText":"get"},{"label":"getByPath","kind":"method","documentation":"getByPath(String a, Object b | String a): Object","insertText":"getByPath"},{"label":"getLength","kind":"method","documentation":"getLength(): int","insertText":"getLength"},{"label":"getValue","kind":"method","documentation":"getValue(): String","insertText":"getValue"},{"label":"groupBy","kind":"method","documentation":"groupBy(Function a): Map","insertText":"groupBy"},{"label":"hashCode","kind":"method","documentation":"hashCode(): int","insertText":"hashCode"},{"label":"indexOf","kind":"method","documentation":"indexOf(def a): int","insertText":"indexOf"},{"label":"isEmpty","kind":"method","documentation":"isEmpty(): boolean","insertText":"isEmpty"},{"label":"iterator","kind":"method","documentation":"iterator(): Iterator","insertText":"iterator"},{"label":"join","kind":"method","documentation":"join(String a): String","insertText":"join"},{"label":"lastIndexOf","kind":"method","documentation":"lastIndexOf(def a): int","insertText":"lastIndexOf"},{"label":"listIterator","kind":"method","documentation":"listIterator(int a): ListIterator","insertText":"listIterator"},{"label":"remove","kind":"method","documentation":"remove(int a): def","insertText":"remove"},{"label":"removeAll","kind":"method","documentation":"removeAll(Collection a): boolean","insertText":"removeAll"},{"label":"removeIf","kind":"method","documentation":"removeIf(Predicate a): boolean","insertText":"removeIf"},{"label":"replaceAll","kind":"method","documentation":"replaceAll(UnaryOperator a): void","insertText":"replaceAll"},{"label":"retainAll","kind":"method","documentation":"retainAll(Collection a): boolean","insertText":"retainAll"},{"label":"set","kind":"method","documentation":"set(int a, def b): def","insertText":"set"},{"label":"size","kind":"method","documentation":"size(): int","insertText":"size"},{"label":"sort","kind":"method","documentation":"sort(Comparator a): void","insertText":"sort"},{"label":"split","kind":"method","documentation":"split(Predicate a): List","insertText":"split"},{"label":"spliterator","kind":"method","documentation":"spliterator(): Spliterator","insertText":"spliterator"},{"label":"stream","kind":"method","documentation":"stream(): Stream","insertText":"stream"},{"label":"subList","kind":"method","documentation":"subList(int a, int b): List","insertText":"subList"},{"label":"sum","kind":"method","documentation":"sum(ToDoubleFunction a): double","insertText":"sum"},{"label":"toArray","kind":"method","documentation":"toArray(def[] a): def[]","insertText":"toArray"},{"label":"toString","kind":"method","documentation":"toString(): String","insertText":"toString"}]}]}')},function(e){e.exports=JSON.parse('{"suggestions":[{"label":"String","kind":"class","documentation":"Class: String","insertText":"String","properties":[{"label":"copyValueOf","kind":"method","documentation":"copyValueOf(char[] a, int b, int c | char[] a): String","insertText":"copyValueOf"},{"label":"format","kind":"method","documentation":"format(Locale a, String b, def[] c | String a, def[] b): String","insertText":"format"},{"label":"join","kind":"method","documentation":"join(CharSequence a, Iterable b): String","insertText":"join"},{"label":"valueOf","kind":"method","documentation":"valueOf(def a): String","insertText":"valueOf"},{"label":"charAt","kind":"method","documentation":"charAt(int a): char","insertText":"charAt"},{"label":"chars","kind":"method","documentation":"chars(): IntStream","insertText":"chars"},{"label":"codePointAt","kind":"method","documentation":"codePointAt(int a): int","insertText":"codePointAt"},{"label":"codePointBefore","kind":"method","documentation":"codePointBefore(int a): int","insertText":"codePointBefore"},{"label":"codePointCount","kind":"method","documentation":"codePointCount(int a, int b): int","insertText":"codePointCount"},{"label":"codePoints","kind":"method","documentation":"codePoints(): IntStream","insertText":"codePoints"},{"label":"compareTo","kind":"method","documentation":"compareTo(String a): int","insertText":"compareTo"},{"label":"compareToIgnoreCase","kind":"method","documentation":"compareToIgnoreCase(String a): int","insertText":"compareToIgnoreCase"},{"label":"concat","kind":"method","documentation":"concat(String a): String","insertText":"concat"},{"label":"contains","kind":"method","documentation":"contains(CharSequence a): boolean","insertText":"contains"},{"label":"contentEquals","kind":"method","documentation":"contentEquals(CharSequence a): boolean","insertText":"contentEquals"},{"label":"decodeBase64","kind":"method","documentation":"decodeBase64(): String","insertText":"decodeBase64"},{"label":"encodeBase64","kind":"method","documentation":"encodeBase64(): String","insertText":"encodeBase64"},{"label":"endsWith","kind":"method","documentation":"endsWith(String a): boolean","insertText":"endsWith"},{"label":"equals","kind":"method","documentation":"equals(Object a): boolean","insertText":"equals"},{"label":"equalsIgnoreCase","kind":"method","documentation":"equalsIgnoreCase(String a): boolean","insertText":"equalsIgnoreCase"},{"label":"getChars","kind":"method","documentation":"getChars(int a, int b, char[] c, int d): void","insertText":"getChars"},{"label":"hashCode","kind":"method","documentation":"hashCode(): int","insertText":"hashCode"},{"label":"indexOf","kind":"method","documentation":"indexOf(String a, int b | String a): int","insertText":"indexOf"},{"label":"isEmpty","kind":"method","documentation":"isEmpty(): boolean","insertText":"isEmpty"},{"label":"lastIndexOf","kind":"method","documentation":"lastIndexOf(String a, int b | String a): int","insertText":"lastIndexOf"},{"label":"length","kind":"method","documentation":"length(): int","insertText":"length"},{"label":"offsetByCodePoints","kind":"method","documentation":"offsetByCodePoints(int a, int b): int","insertText":"offsetByCodePoints"},{"label":"regionMatches","kind":"method","documentation":"regionMatches(boolean a, int b, String c, int d, int e | int a, String b, int c, int d): boolean","insertText":"regionMatches"},{"label":"replace","kind":"method","documentation":"replace(CharSequence a, CharSequence b): String","insertText":"replace"},{"label":"replaceAll","kind":"method","documentation":"replaceAll(Pattern a, Function b): String","insertText":"replaceAll"},{"label":"replaceFirst","kind":"method","documentation":"replaceFirst(Pattern a, Function b): String","insertText":"replaceFirst"},{"label":"splitOnToken","kind":"method","documentation":"splitOnToken(String a, int b | String a): String[]","insertText":"splitOnToken"},{"label":"startsWith","kind":"method","documentation":"startsWith(String a, int b | String a): boolean","insertText":"startsWith"},{"label":"subSequence","kind":"method","documentation":"subSequence(int a, int b): CharSequence","insertText":"subSequence"},{"label":"substring","kind":"method","documentation":"substring(int a, int b | int a): String","insertText":"substring"},{"label":"toCharArray","kind":"method","documentation":"toCharArray(): char[]","insertText":"toCharArray"},{"label":"toLowerCase","kind":"method","documentation":"toLowerCase(Locale a): String","insertText":"toLowerCase"},{"label":"toString","kind":"method","documentation":"toString(): String","insertText":"toString"},{"label":"toUpperCase","kind":"method","documentation":"toUpperCase(Locale a): String","insertText":"toUpperCase"},{"label":"trim","kind":"method","documentation":"trim(): String","insertText":"trim"}],"constructorDefinition":{"label":"String","kind":"constructor","documentation":"Constructor: String","insertText":"String"}},{"label":"org.elasticsearch.xpack.runtimefields.mapper.DoubleFieldScript","kind":"class","documentation":"Class: org.elasticsearch.xpack.runtimefields.mapper.DoubleFieldScript","insertText":"org.elasticsearch.xpack.runtimefields.mapper.DoubleFieldScript","properties":[{"label":"equals","kind":"method","documentation":"equals(Object a): boolean","insertText":"equals"},{"label":"hashCode","kind":"method","documentation":"hashCode(): int","insertText":"hashCode"},{"label":"toString","kind":"method","documentation":"toString(): String","insertText":"toString"}]},{"label":"org.elasticsearch.xpack.runtimefields.mapper.DoubleFieldScript.Factory","kind":"class","documentation":"Class: org.elasticsearch.xpack.runtimefields.mapper.DoubleFieldScript.Factory","insertText":"org.elasticsearch.xpack.runtimefields.mapper.DoubleFieldScript.Factory","properties":[{"label":"equals","kind":"method","documentation":"equals(Object a): boolean","insertText":"equals"},{"label":"hashCode","kind":"method","documentation":"hashCode(): int","insertText":"hashCode"},{"label":"toString","kind":"method","documentation":"toString(): String","insertText":"toString"}]}]}')},function(e){e.exports=JSON.parse('{"suggestions":[{"label":"String","kind":"class","documentation":"Class: String","insertText":"String","properties":[{"label":"copyValueOf","kind":"method","documentation":"copyValueOf(char[] a, int b, int c | char[] a): String","insertText":"copyValueOf"},{"label":"format","kind":"method","documentation":"format(Locale a, String b, def[] c | String a, def[] b): String","insertText":"format"},{"label":"join","kind":"method","documentation":"join(CharSequence a, Iterable b): String","insertText":"join"},{"label":"valueOf","kind":"method","documentation":"valueOf(def a): String","insertText":"valueOf"},{"label":"charAt","kind":"method","documentation":"charAt(int a): char","insertText":"charAt"},{"label":"chars","kind":"method","documentation":"chars(): IntStream","insertText":"chars"},{"label":"codePointAt","kind":"method","documentation":"codePointAt(int a): int","insertText":"codePointAt"},{"label":"codePointBefore","kind":"method","documentation":"codePointBefore(int a): int","insertText":"codePointBefore"},{"label":"codePointCount","kind":"method","documentation":"codePointCount(int a, int b): int","insertText":"codePointCount"},{"label":"codePoints","kind":"method","documentation":"codePoints(): IntStream","insertText":"codePoints"},{"label":"compareTo","kind":"method","documentation":"compareTo(String a): int","insertText":"compareTo"},{"label":"compareToIgnoreCase","kind":"method","documentation":"compareToIgnoreCase(String a): int","insertText":"compareToIgnoreCase"},{"label":"concat","kind":"method","documentation":"concat(String a): String","insertText":"concat"},{"label":"contains","kind":"method","documentation":"contains(CharSequence a): boolean","insertText":"contains"},{"label":"contentEquals","kind":"method","documentation":"contentEquals(CharSequence a): boolean","insertText":"contentEquals"},{"label":"decodeBase64","kind":"method","documentation":"decodeBase64(): String","insertText":"decodeBase64"},{"label":"encodeBase64","kind":"method","documentation":"encodeBase64(): String","insertText":"encodeBase64"},{"label":"endsWith","kind":"method","documentation":"endsWith(String a): boolean","insertText":"endsWith"},{"label":"equals","kind":"method","documentation":"equals(Object a): boolean","insertText":"equals"},{"label":"equalsIgnoreCase","kind":"method","documentation":"equalsIgnoreCase(String a): boolean","insertText":"equalsIgnoreCase"},{"label":"getChars","kind":"method","documentation":"getChars(int a, int b, char[] c, int d): void","insertText":"getChars"},{"label":"hashCode","kind":"method","documentation":"hashCode(): int","insertText":"hashCode"},{"label":"indexOf","kind":"method","documentation":"indexOf(String a, int b | String a): int","insertText":"indexOf"},{"label":"isEmpty","kind":"method","documentation":"isEmpty(): boolean","insertText":"isEmpty"},{"label":"lastIndexOf","kind":"method","documentation":"lastIndexOf(String a, int b | String a): int","insertText":"lastIndexOf"},{"label":"length","kind":"method","documentation":"length(): int","insertText":"length"},{"label":"offsetByCodePoints","kind":"method","documentation":"offsetByCodePoints(int a, int b): int","insertText":"offsetByCodePoints"},{"label":"regionMatches","kind":"method","documentation":"regionMatches(boolean a, int b, String c, int d, int e | int a, String b, int c, int d): boolean","insertText":"regionMatches"},{"label":"replace","kind":"method","documentation":"replace(CharSequence a, CharSequence b): String","insertText":"replace"},{"label":"replaceAll","kind":"method","documentation":"replaceAll(Pattern a, Function b): String","insertText":"replaceAll"},{"label":"replaceFirst","kind":"method","documentation":"replaceFirst(Pattern a, Function b): String","insertText":"replaceFirst"},{"label":"splitOnToken","kind":"method","documentation":"splitOnToken(String a, int b | String a): String[]","insertText":"splitOnToken"},{"label":"startsWith","kind":"method","documentation":"startsWith(String a, int b | String a): boolean","insertText":"startsWith"},{"label":"subSequence","kind":"method","documentation":"subSequence(int a, int b): CharSequence","insertText":"subSequence"},{"label":"substring","kind":"method","documentation":"substring(int a, int b | int a): String","insertText":"substring"},{"label":"toCharArray","kind":"method","documentation":"toCharArray(): char[]","insertText":"toCharArray"},{"label":"toLowerCase","kind":"method","documentation":"toLowerCase(Locale a): String","insertText":"toLowerCase"},{"label":"toString","kind":"method","documentation":"toString(): String","insertText":"toString"},{"label":"toUpperCase","kind":"method","documentation":"toUpperCase(Locale a): String","insertText":"toUpperCase"},{"label":"trim","kind":"method","documentation":"trim(): String","insertText":"trim"}],"constructorDefinition":{"label":"String","kind":"constructor","documentation":"Constructor: String","insertText":"String"}},{"label":"org.elasticsearch.xpack.runtimefields.mapper.DateFieldScript","kind":"class","documentation":"Class: org.elasticsearch.xpack.runtimefields.mapper.DateFieldScript","insertText":"org.elasticsearch.xpack.runtimefields.mapper.DateFieldScript","properties":[{"label":"equals","kind":"method","documentation":"equals(Object a): boolean","insertText":"equals"},{"label":"hashCode","kind":"method","documentation":"hashCode(): int","insertText":"hashCode"},{"label":"toString","kind":"method","documentation":"toString(): String","insertText":"toString"}]},{"label":"org.elasticsearch.xpack.runtimefields.mapper.DateFieldScript.Factory","kind":"class","documentation":"Class: org.elasticsearch.xpack.runtimefields.mapper.DateFieldScript.Factory","insertText":"org.elasticsearch.xpack.runtimefields.mapper.DateFieldScript.Factory","properties":[{"label":"equals","kind":"method","documentation":"equals(Object a): boolean","insertText":"equals"},{"label":"hashCode","kind":"method","documentation":"hashCode(): int","insertText":"hashCode"},{"label":"toString","kind":"method","documentation":"toString(): String","insertText":"toString"}]}]}')},function(e){e.exports=JSON.parse('{"suggestions":[{"label":"String","kind":"class","documentation":"Class: String","insertText":"String","properties":[{"label":"copyValueOf","kind":"method","documentation":"copyValueOf(char[] a, int b, int c | char[] a): String","insertText":"copyValueOf"},{"label":"format","kind":"method","documentation":"format(Locale a, String b, def[] c | String a, def[] b): String","insertText":"format"},{"label":"join","kind":"method","documentation":"join(CharSequence a, Iterable b): String","insertText":"join"},{"label":"valueOf","kind":"method","documentation":"valueOf(def a): String","insertText":"valueOf"},{"label":"charAt","kind":"method","documentation":"charAt(int a): char","insertText":"charAt"},{"label":"chars","kind":"method","documentation":"chars(): IntStream","insertText":"chars"},{"label":"codePointAt","kind":"method","documentation":"codePointAt(int a): int","insertText":"codePointAt"},{"label":"codePointBefore","kind":"method","documentation":"codePointBefore(int a): int","insertText":"codePointBefore"},{"label":"codePointCount","kind":"method","documentation":"codePointCount(int a, int b): int","insertText":"codePointCount"},{"label":"codePoints","kind":"method","documentation":"codePoints(): IntStream","insertText":"codePoints"},{"label":"compareTo","kind":"method","documentation":"compareTo(String a): int","insertText":"compareTo"},{"label":"compareToIgnoreCase","kind":"method","documentation":"compareToIgnoreCase(String a): int","insertText":"compareToIgnoreCase"},{"label":"concat","kind":"method","documentation":"concat(String a): String","insertText":"concat"},{"label":"contains","kind":"method","documentation":"contains(CharSequence a): boolean","insertText":"contains"},{"label":"contentEquals","kind":"method","documentation":"contentEquals(CharSequence a): boolean","insertText":"contentEquals"},{"label":"decodeBase64","kind":"method","documentation":"decodeBase64(): String","insertText":"decodeBase64"},{"label":"encodeBase64","kind":"method","documentation":"encodeBase64(): String","insertText":"encodeBase64"},{"label":"endsWith","kind":"method","documentation":"endsWith(String a): boolean","insertText":"endsWith"},{"label":"equals","kind":"method","documentation":"equals(Object a): boolean","insertText":"equals"},{"label":"equalsIgnoreCase","kind":"method","documentation":"equalsIgnoreCase(String a): boolean","insertText":"equalsIgnoreCase"},{"label":"getChars","kind":"method","documentation":"getChars(int a, int b, char[] c, int d): void","insertText":"getChars"},{"label":"hashCode","kind":"method","documentation":"hashCode(): int","insertText":"hashCode"},{"label":"indexOf","kind":"method","documentation":"indexOf(String a, int b | String a): int","insertText":"indexOf"},{"label":"isEmpty","kind":"method","documentation":"isEmpty(): boolean","insertText":"isEmpty"},{"label":"lastIndexOf","kind":"method","documentation":"lastIndexOf(String a, int b | String a): int","insertText":"lastIndexOf"},{"label":"length","kind":"method","documentation":"length(): int","insertText":"length"},{"label":"offsetByCodePoints","kind":"method","documentation":"offsetByCodePoints(int a, int b): int","insertText":"offsetByCodePoints"},{"label":"regionMatches","kind":"method","documentation":"regionMatches(boolean a, int b, String c, int d, int e | int a, String b, int c, int d): boolean","insertText":"regionMatches"},{"label":"replace","kind":"method","documentation":"replace(CharSequence a, CharSequence b): String","insertText":"replace"},{"label":"replaceAll","kind":"method","documentation":"replaceAll(Pattern a, Function b): String","insertText":"replaceAll"},{"label":"replaceFirst","kind":"method","documentation":"replaceFirst(Pattern a, Function b): String","insertText":"replaceFirst"},{"label":"splitOnToken","kind":"method","documentation":"splitOnToken(String a, int b | String a): String[]","insertText":"splitOnToken"},{"label":"startsWith","kind":"method","documentation":"startsWith(String a, int b | String a): boolean","insertText":"startsWith"},{"label":"subSequence","kind":"method","documentation":"subSequence(int a, int b): CharSequence","insertText":"subSequence"},{"label":"substring","kind":"method","documentation":"substring(int a, int b | int a): String","insertText":"substring"},{"label":"toCharArray","kind":"method","documentation":"toCharArray(): char[]","insertText":"toCharArray"},{"label":"toLowerCase","kind":"method","documentation":"toLowerCase(Locale a): String","insertText":"toLowerCase"},{"label":"toString","kind":"method","documentation":"toString(): String","insertText":"toString"},{"label":"toUpperCase","kind":"method","documentation":"toUpperCase(Locale a): String","insertText":"toUpperCase"},{"label":"trim","kind":"method","documentation":"trim(): String","insertText":"trim"}],"constructorDefinition":{"label":"String","kind":"constructor","documentation":"Constructor: String","insertText":"String"}},{"label":"org.elasticsearch.xpack.runtimefields.mapper.BooleanFieldScript","kind":"class","documentation":"Class: org.elasticsearch.xpack.runtimefields.mapper.BooleanFieldScript","insertText":"org.elasticsearch.xpack.runtimefields.mapper.BooleanFieldScript","properties":[{"label":"equals","kind":"method","documentation":"equals(Object a): boolean","insertText":"equals"},{"label":"hashCode","kind":"method","documentation":"hashCode(): int","insertText":"hashCode"},{"label":"toString","kind":"method","documentation":"toString(): String","insertText":"toString"}]},{"label":"org.elasticsearch.xpack.runtimefields.mapper.BooleanFieldScript.Factory","kind":"class","documentation":"Class: org.elasticsearch.xpack.runtimefields.mapper.BooleanFieldScript.Factory","insertText":"org.elasticsearch.xpack.runtimefields.mapper.BooleanFieldScript.Factory","properties":[{"label":"equals","kind":"method","documentation":"equals(Object a): boolean","insertText":"equals"},{"label":"hashCode","kind":"method","documentation":"hashCode(): int","insertText":"hashCode"},{"label":"toString","kind":"method","documentation":"toString(): String","insertText":"toString"}]}]}')},function(e,t,n){(function(e){var i=Object.getOwnPropertyDescriptors||function(e){for(var t=Object.keys(e),n={},i=0;i<t.length;i++)n[t[i]]=Object.getOwnPropertyDescriptor(e,t[i]);return n},o=/%[sdj%]/g;t.format=function(e){if(!g(e)){for(var t=[],n=0;n<arguments.length;n++)t.push(l(arguments[n]));return t.join(" ")}n=1;for(var i=arguments,a=i.length,r=String(e).replace(o,(function(e){if("%%"===e)return"%";if(n>=a)return e;switch(e){case"%s":return String(i[n++]);case"%d":return Number(i[n++]);case"%j":try{return JSON.stringify(i[n++])}catch(e){return"[Circular]"}default:return e}})),s=i[n];n<a;s=i[++n])T(s)||!k(s)?r+=" "+s:r+=" "+l(s);return r},t.deprecate=function(n,i){if(void 0!==e&&!0===e.noDeprecation)return n;if(void 0===e)return function(){return t.deprecate(n,i).apply(this,arguments)};var o=!1;return function(){if(!o){if(e.throwDeprecation)throw new Error(i);e.traceDeprecation?console.trace(i):console.error(i),o=!0}return n.apply(this,arguments)}};var a,r={};function l(e,n){var i={seen:[],stylize:d};return arguments.length>=3&&(i.depth=arguments[2]),arguments.length>=4&&(i.colors=arguments[3]),p(n)?i.showHidden=n:n&&t._extend(i,n),x(i.showHidden)&&(i.showHidden=!1),x(i.depth)&&(i.depth=2),x(i.colors)&&(i.colors=!1),x(i.customInspect)&&(i.customInspect=!0),i.colors&&(i.stylize=s),c(i,e,i.depth)}function s(e,t){var n=l.styles[t];return n?"["+l.colors[n][0]+"m"+e+"["+l.colors[n][1]+"m":e}function d(e,t){return e}function c(e,n,i){if(e.customInspect&&n&&C(n.inspect)&&n.inspect!==t.inspect&&(!n.constructor||n.constructor.prototype!==n)){var o=n.inspect(i,e);return g(o)||(o=c(e,o,i)),o}var a=function(e,t){if(x(t))return e.stylize("undefined","undefined");if(g(t)){var n="'"+JSON.stringify(t).replace(/^"|"$/g,"").replace(/'/g,"\\'").replace(/\\"/g,'"')+"'";return e.stylize(n,"string")}if(b(t))return e.stylize(""+t,"number");if(p(t))return e.stylize(""+t,"boolean");if(T(t))return e.stylize("null","null")}(e,n);if(a)return a;var r=Object.keys(n),l=function(e){var t={};return e.forEach((function(e,n){t[e]=!0})),t}(r);if(e.showHidden&&(r=Object.getOwnPropertyNames(n)),y(n)&&(r.indexOf("message")>=0||r.indexOf("description")>=0))return u(n);if(0===r.length){if(C(n)){var s=n.name?": "+n.name:"";return e.stylize("[Function"+s+"]","special")}if(f(n))return e.stylize(RegExp.prototype.toString.call(n),"regexp");if(S(n))return e.stylize(Date.prototype.toString.call(n),"date");if(y(n))return u(n)}var d,k="",E=!1,A=["{","}"];(h(n)&&(E=!0,A=["[","]"]),C(n))&&(k=" [Function"+(n.name?": "+n.name:"")+"]");return f(n)&&(k=" "+RegExp.prototype.toString.call(n)),S(n)&&(k=" "+Date.prototype.toUTCString.call(n)),y(n)&&(k=" "+u(n)),0!==r.length||E&&0!=n.length?i<0?f(n)?e.stylize(RegExp.prototype.toString.call(n),"regexp"):e.stylize("[Object]","special"):(e.seen.push(n),d=E?function(e,t,n,i,o){for(var a=[],r=0,l=t.length;r<l;++r)I(t,String(r))?a.push(m(e,t,n,i,String(r),!0)):a.push("");return o.forEach((function(o){o.match(/^\d+$/)||a.push(m(e,t,n,i,o,!0))})),a}(e,n,i,l,r):r.map((function(t){return m(e,n,i,l,t,E)})),e.seen.pop(),function(e,t,n){if(e.reduce((function(e,t){return t.indexOf("\n")>=0&&0,e+t.replace(/\u001b\[\d\d?m/g,"").length+1}),0)>60)return n[0]+(""===t?"":t+"\n ")+" "+e.join(",\n  ")+" "+n[1];return n[0]+t+" "+e.join(", ")+" "+n[1]}(d,k,A)):A[0]+k+A[1]}function u(e){return"["+Error.prototype.toString.call(e)+"]"}function m(e,t,n,i,o,a){var r,l,s;if((s=Object.getOwnPropertyDescriptor(t,o)||{value:t[o]}).get?l=s.set?e.stylize("[Getter/Setter]","special"):e.stylize("[Getter]","special"):s.set&&(l=e.stylize("[Setter]","special")),I(i,o)||(r="["+o+"]"),l||(e.seen.indexOf(s.value)<0?(l=T(n)?c(e,s.value,null):c(e,s.value,n-1)).indexOf("\n")>-1&&(l=a?l.split("\n").map((function(e){return"  "+e})).join("\n").substr(2):"\n"+l.split("\n").map((function(e){return"   "+e})).join("\n")):l=e.stylize("[Circular]","special")),x(r)){if(a&&o.match(/^\d+$/))return l;(r=JSON.stringify(""+o)).match(/^"([a-zA-Z_][a-zA-Z_0-9]*)"$/)?(r=r.substr(1,r.length-2),r=e.stylize(r,"name")):(r=r.replace(/'/g,"\\'").replace(/\\"/g,'"').replace(/(^"|"$)/g,"'"),r=e.stylize(r,"string"))}return r+": "+l}function h(e){return Array.isArray(e)}function p(e){return"boolean"==typeof e}function T(e){return null===e}function b(e){return"number"==typeof e}function g(e){return"string"==typeof e}function x(e){return void 0===e}function f(e){return k(e)&&"[object RegExp]"===E(e)}function k(e){return"object"==typeof e&&null!==e}function S(e){return k(e)&&"[object Date]"===E(e)}function y(e){return k(e)&&("[object Error]"===E(e)||e instanceof Error)}function C(e){return"function"==typeof e}function E(e){return Object.prototype.toString.call(e)}function A(e){return e<10?"0"+e.toString(10):e.toString(10)}t.debuglog=function(n){if(x(a)&&(a=e.env.NODE_DEBUG||""),n=n.toUpperCase(),!r[n])if(new RegExp("\\b"+n+"\\b","i").test(a)){var i=e.pid;r[n]=function(){var e=t.format.apply(t,arguments);console.error("%s %d: %s",n,i,e)}}else r[n]=function(){};return r[n]},t.inspect=l,l.colors={bold:[1,22],italic:[3,23],underline:[4,24],inverse:[7,27],white:[37,39],grey:[90,39],black:[30,39],blue:[34,39],cyan:[36,39],green:[32,39],magenta:[35,39],red:[31,39],yellow:[33,39]},l.styles={special:"cyan",number:"yellow",boolean:"yellow",undefined:"grey",null:"bold",string:"green",date:"magenta",regexp:"red"},t.isArray=h,t.isBoolean=p,t.isNull=T,t.isNullOrUndefined=function(e){return null==e},t.isNumber=b,t.isString=g,t.isSymbol=function(e){return"symbol"==typeof e},t.isUndefined=x,t.isRegExp=f,t.isObject=k,t.isDate=S,t.isError=y,t.isFunction=C,t.isPrimitive=function(e){return null===e||"boolean"==typeof e||"number"==typeof e||"string"==typeof e||"symbol"==typeof e||void 0===e},t.isBuffer=n(123);var O=["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"];function _(){var e=new Date,t=[A(e.getHours()),A(e.getMinutes()),A(e.getSeconds())].join(":");return[e.getDate(),O[e.getMonth()],t].join(" ")}function I(e,t){return Object.prototype.hasOwnProperty.call(e,t)}t.log=function(){console.log("%s - %s",_(),t.format.apply(t,arguments))},t.inherits=n(124),t._extend=function(e,t){if(!t||!k(t))return e;for(var n=Object.keys(t),i=n.length;i--;)e[n[i]]=t[n[i]];return e};var N="undefined"!=typeof Symbol?Symbol("util.promisify.custom"):void 0;function L(e,t){if(!e){var n=new Error("Promise was rejected with a falsy value");n.reason=e,e=n}return t(e)}t.promisify=function(e){if("function"!=typeof e)throw new TypeError('The "original" argument must be of type Function');if(N&&e[N]){var t;if("function"!=typeof(t=e[N]))throw new TypeError('The "util.promisify.custom" argument must be of type Function');return Object.defineProperty(t,N,{value:t,enumerable:!1,writable:!1,configurable:!0}),t}function t(){for(var t,n,i=new Promise((function(e,i){t=e,n=i})),o=[],a=0;a<arguments.length;a++)o.push(arguments[a]);o.push((function(e,i){e?n(e):t(i)}));try{e.apply(this,o)}catch(e){n(e)}return i}return Object.setPrototypeOf(t,Object.getPrototypeOf(e)),N&&Object.defineProperty(t,N,{value:t,enumerable:!1,writable:!1,configurable:!0}),Object.defineProperties(t,i(e))},t.promisify.custom=N,t.callbackify=function(t){if("function"!=typeof t)throw new TypeError('The "original" argument must be of type Function');function n(){for(var n=[],i=0;i<arguments.length;i++)n.push(arguments[i]);var o=n.pop();if("function"!=typeof o)throw new TypeError("The last argument must be of type Function");var a=this,r=function(){return o.apply(a,arguments)};t.apply(this,n).then((function(t){e.nextTick(r,null,t)}),(function(t){e.nextTick(L,t,r)}))}return Object.setPrototypeOf(n,Object.getPrototypeOf(t)),Object.defineProperties(n,i(t)),n}}).call(this,n(34))},function(e,t,n){"use strict";
/*!
 * Copyright 2016 The ANTLR Project. All rights reserved.
 * Licensed under the BSD-3-Clause license. See LICENSE file in the project root for license information.
 */var i=this&&this.__decorate||function(e,t,n,i){var o,a=arguments.length,r=a<3?t:null===i?i=Object.getOwnPropertyDescriptor(t,n):i;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)r=Reflect.decorate(e,t,n,i);else for(var l=e.length-1;l>=0;l--)(o=e[l])&&(r=(a<3?o(r):a>3?o(t,n,r):o(t,n))||r);return a>3&&r&&Object.defineProperty(t,n,r),r};Object.defineProperty(t,"__esModule",{value:!0});const o=n(49),a=n(43),r=n(0),l=n(100);class s extends o.DefaultErrorStrategy{recover(e,t){for(let n=e.context;n;n=n.parent)n.exception=t;throw new l.ParseCancellationException(t)}recoverInline(e){let t=new a.InputMismatchException(e);for(let n=e.context;n;n=n.parent)n.exception=t;throw new l.ParseCancellationException(t)}sync(e){}}i([r.Override],s.prototype,"recover",null),i([r.Override],s.prototype,"recoverInline",null),i([r.Override],s.prototype,"sync",null),t.BailErrorStrategy=s},function(e,t,n){"use strict";
/*!
 * Copyright 2016 The ANTLR Project. All rights reserved.
 * Licensed under the BSD-3-Clause license. See LICENSE file in the project root for license information.
 */var i=this&&this.__decorate||function(e,t,n,i){var o,a=arguments.length,r=a<3?t:null===i?i=Object.getOwnPropertyDescriptor(t,n):i;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)r=Reflect.decorate(e,t,n,i);else for(var l=e.length-1;l>=0;l--)(o=e[l])&&(r=(a<3?o(r):a>3?o(t,n,r):o(t,n))||r);return a>3&&r&&Object.defineProperty(t,n,r),r},o=this&&this.__param||function(e,t){return function(n,i){t(n,i,e)}};Object.defineProperty(t,"__esModule",{value:!0});const a=n(50),r=n(0),l=n(27);let s=class extends a.AbstractPredicateTransition{constructor(e,t,n,i){super(e),this.ruleIndex=t,this.predIndex=n,this.isCtxDependent=i}get serializationType(){return 4}get isEpsilon(){return!0}matches(e,t,n){return!1}get predicate(){return new l.SemanticContext.Predicate(this.ruleIndex,this.predIndex,this.isCtxDependent)}toString(){return"pred_"+this.ruleIndex+":"+this.predIndex}};i([r.Override],s.prototype,"serializationType",null),i([r.Override],s.prototype,"isEpsilon",null),i([r.Override],s.prototype,"matches",null),i([r.Override,r.NotNull],s.prototype,"toString",null),s=i([o(0,r.NotNull)],s),t.PredicateTransition=s},function(e,t,n){"use strict";
/*!
 * Copyright 2016 The ANTLR Project. All rights reserved.
 * Licensed under the BSD-3-Clause license. See LICENSE file in the project root for license information.
 */Object.defineProperty(t,"__esModule",{value:!0});const i=n(51);class o extends i.IntegerList{constructor(e){super(e)}push(e){this.add(e)}pop(){return this.removeAt(this.size-1)}peek(){return this.get(this.size-1)}}t.IntegerStack=o},function(e,t,n){"use strict";
/*!
 * Copyright 2016 The ANTLR Project. All rights reserved.
 * Licensed under the BSD-3-Clause license. See LICENSE file in the project root for license information.
 */Object.defineProperty(t,"__esModule",{value:!0});t.AcceptStateInfo=class{constructor(e,t){this._prediction=e,this._lexerActionExecutor=t}get prediction(){return this._prediction}get lexerActionExecutor(){return this._lexerActionExecutor}}},function(e,t,n){"use strict";
/*!
 * Copyright 2016 The ANTLR Project. All rights reserved.
 * Licensed under the BSD-3-Clause license. See LICENSE file in the project root for license information.
 */var i=this&&this.__decorate||function(e,t,n,i){var o,a=arguments.length,r=a<3?t:null===i?i=Object.getOwnPropertyDescriptor(t,n):i;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)r=Reflect.decorate(e,t,n,i);else for(var l=e.length-1;l>=0;l--)(o=e[l])&&(r=(a<3?o(r):a>3?o(t,n,r):o(t,n))||r);return a>3&&r&&Object.defineProperty(t,n,r),r},o=this&&this.__param||function(e,t){return function(n,i){t(n,i,e)}};Object.defineProperty(t,"__esModule",{value:!0});const a=n(21),r=n(36),l=n(84),s=n(46),d=n(126),c=n(0),u=n(15),m=n(56),h=n(16);let p=class{constructor(e,t=0){if(this.states=new a.Array2DHashSet(u.ObjectEqualityComparator.INSTANCE),this.nextStateNumber=0,!e.atn)throw new Error("The ATNState must be associated with an ATN");this.atnStartState=e,this.atn=e.atn,this.decision=t;let n=!1;e instanceof m.StarLoopEntryState&&e.precedenceRuleDecision&&(n=!0,this.s0=new s.DFAState(new r.ATNConfigSet),this.s0full=new s.DFAState(new r.ATNConfigSet)),this.precedenceDfa=n}get isPrecedenceDfa(){return this.precedenceDfa}getPrecedenceStartState(e,t){if(!this.isPrecedenceDfa)throw new Error("Only precedence DFAs may contain a precedence start state.");return t?this.s0full.getTarget(e):this.s0.getTarget(e)}setPrecedenceStartState(e,t,n){if(!this.isPrecedenceDfa)throw new Error("Only precedence DFAs may contain a precedence start state.");e<0||(t?this.s0full.setTarget(e,n):this.s0.setTarget(e,n))}get isEmpty(){return this.isPrecedenceDfa?0===this.s0.getEdgeMap().size&&0===this.s0full.getEdgeMap().size:null==this.s0&&null==this.s0full}get isContextSensitive(){return this.isPrecedenceDfa?this.s0full.getEdgeMap().size>0:null!=this.s0full}addState(e){return e.stateNumber=this.nextStateNumber++,this.states.getOrAdd(e)}toString(e,t){if(e||(e=h.VocabularyImpl.EMPTY_VOCABULARY),!this.s0)return"";let n;return n=t?new l.DFASerializer(this,e,t,this.atnStartState.atn):new l.DFASerializer(this,e),n.toString()}toLexerString(){if(!this.s0)return"";return new d.LexerDFASerializer(this).toString()}};i([c.NotNull],p.prototype,"states",void 0),i([c.NotNull],p.prototype,"atnStartState",void 0),i([c.NotNull],p.prototype,"atn",void 0),p=i([o(0,c.NotNull)],p),t.DFA=p},function(e,t,n){"use strict";
/*!
 * Copyright 2016 The ANTLR Project. All rights reserved.
 * Licensed under the BSD-3-Clause license. See LICENSE file in the project root for license information.
 */var i=this&&this.__decorate||function(e,t,n,i){var o,a=arguments.length,r=a<3?t:null===i?i=Object.getOwnPropertyDescriptor(t,n):i;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)r=Reflect.decorate(e,t,n,i);else for(var l=e.length-1;l>=0;l--)(o=e[l])&&(r=(a<3?o(r):a>3?o(t,n,r):o(t,n))||r);return a>3&&r&&Object.defineProperty(t,n,r),r};Object.defineProperty(t,"__esModule",{value:!0});const o=n(45),a=n(0),r=n(14),l=n(37),s=n(16);class d{constructor(e,t,n,i){t instanceof l.Recognizer?(n=t.ruleNames,i=t.atn,t=t.vocabulary):t||(t=s.VocabularyImpl.EMPTY_VOCABULARY),this.dfa=e,this.vocabulary=t,this.ruleNames=n,this.atn=i}toString(){if(!this.dfa.s0)return"";let e="";if(this.dfa.states){let t=new Array(...this.dfa.states.toArray());t.sort((e,t)=>e.stateNumber-t.stateNumber);for(let n of t){let t=n.getEdgeMap(),i=[...t.keys()].sort((e,t)=>e-t),a=n.getContextEdgeMap(),r=[...a.keys()].sort((e,t)=>e-t);for(let a of i){let i=t.get(a);if((null==i||i===o.ATNSimulator.ERROR)&&!n.isContextSymbol(a))continue;let r=!1;e+=this.getStateString(n)+"-"+this.getEdgeLabel(a)+"->",n.isContextSymbol(a)&&(e+="!",r=!0);let l=i;l&&l.stateNumber!==o.ATNSimulator.ERROR.stateNumber?e+=this.getStateString(l)+"\n":r&&(e+="ctx\n")}if(n.isContextSensitive)for(let t of r)e+=this.getStateString(n)+"-"+this.getContextLabel(t)+"->"+this.getStateString(a.get(t))+"\n"}}let t=e;return 0===t.length?"":t}getContextLabel(e){if(e===r.PredictionContext.EMPTY_FULL_STATE_KEY)return"ctx:EMPTY_FULL";if(e===r.PredictionContext.EMPTY_LOCAL_STATE_KEY)return"ctx:EMPTY_LOCAL";if(this.atn&&e>0&&e<=this.atn.states.length){let t=this.atn.states[e].ruleIndex;if(this.ruleNames&&t>=0&&t<this.ruleNames.length)return"ctx:"+String(e)+"("+this.ruleNames[t]+")"}return"ctx:"+String(e)}getEdgeLabel(e){return this.vocabulary.getDisplayName(e)}getStateString(e){if(e===o.ATNSimulator.ERROR)return"ERROR";let t=e.stateNumber,n="s"+t;if(e.isAcceptState&&(n=e.predicates?":s"+t+"=>"+e.predicates:":s"+t+"=>"+e.prediction),e.isContextSensitive){n+="*";for(let t of e.configs)if(t.reachesIntoOuterContext){n+="*";break}}return n}}i([a.NotNull],d.prototype,"dfa",void 0),i([a.NotNull],d.prototype,"vocabulary",void 0),i([a.Override],d.prototype,"toString",null),t.DFASerializer=d},function(e,t,n){"use strict";
/*!
 * Copyright 2016 The ANTLR Project. All rights reserved.
 * Licensed under the BSD-3-Clause license. See LICENSE file in the project root for license information.
 */Object.defineProperty(t,"__esModule",{value:!0});class i{syntaxError(e,t,n,i,o,a){console.error(`line ${n}:${i} ${o}`)}}i.INSTANCE=new i,t.ConsoleErrorListener=i},function(e,t,n){"use strict";
/*!
 * Copyright 2016 The ANTLR Project. All rights reserved.
 * Licensed under the BSD-3-Clause license. See LICENSE file in the project root for license information.
 */var i=this&&this.__decorate||function(e,t,n,i){var o,a=arguments.length,r=a<3?t:null===i?i=Object.getOwnPropertyDescriptor(t,n):i;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)r=Reflect.decorate(e,t,n,i);else for(var l=e.length-1;l>=0;l--)(o=e[l])&&(r=(a<3?o(r):a>3?o(t,n,r):o(t,n))||r);return a>3&&r&&Object.defineProperty(t,n,r),r};Object.defineProperty(t,"__esModule",{value:!0});const o=n(8),a=n(87),r=n(0);class l extends a.BasicState{get stateType(){return o.ATNStateType.INVALID_TYPE}}i([r.Override],l.prototype,"stateType",null),t.InvalidState=l},function(e,t,n){"use strict";
/*!
 * Copyright 2016 The ANTLR Project. All rights reserved.
 * Licensed under the BSD-3-Clause license. See LICENSE file in the project root for license information.
 */var i=this&&this.__decorate||function(e,t,n,i){var o,a=arguments.length,r=a<3?t:null===i?i=Object.getOwnPropertyDescriptor(t,n):i;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)r=Reflect.decorate(e,t,n,i);else for(var l=e.length-1;l>=0;l--)(o=e[l])&&(r=(a<3?o(r):a>3?o(t,n,r):o(t,n))||r);return a>3&&r&&Object.defineProperty(t,n,r),r};Object.defineProperty(t,"__esModule",{value:!0});const o=n(17),a=n(8),r=n(0);class l extends o.ATNState{get stateType(){return a.ATNStateType.BASIC}}i([r.Override],l.prototype,"stateType",null),t.BasicState=l},function(e,t,n){"use strict";
/*!
 * Copyright 2016 The ANTLR Project. All rights reserved.
 * Licensed under the BSD-3-Clause license. See LICENSE file in the project root for license information.
 */var i=this&&this.__decorate||function(e,t,n,i){var o,a=arguments.length,r=a<3?t:null===i?i=Object.getOwnPropertyDescriptor(t,n):i;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)r=Reflect.decorate(e,t,n,i);else for(var l=e.length-1;l>=0;l--)(o=e[l])&&(r=(a<3?o(r):a>3?o(t,n,r):o(t,n))||r);return a>3&&r&&Object.defineProperty(t,n,r),r},o=this&&this.__param||function(e,t){return function(n,i){t(n,i,e)}};Object.defineProperty(t,"__esModule",{value:!0});const a=n(0),r=n(20);let l=class extends r.Transition{constructor(e){super(e)}get serializationType(){return 9}matches(e,t,n){return e>=t&&e<=n}toString(){return"."}};i([a.Override],l.prototype,"serializationType",null),i([a.Override],l.prototype,"matches",null),i([a.Override,a.NotNull],l.prototype,"toString",null),l=i([o(0,a.NotNull)],l),t.WildcardTransition=l},function(e,t,n){"use strict";
/*!
 * Copyright 2016 The ANTLR Project. All rights reserved.
 * Licensed under the BSD-3-Clause license. See LICENSE file in the project root for license information.
 */var i=this&&this.__decorate||function(e,t,n,i){var o,a=arguments.length,r=a<3?t:null===i?i=Object.getOwnPropertyDescriptor(t,n):i;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)r=Reflect.decorate(e,t,n,i);else for(var l=e.length-1;l>=0;l--)(o=e[l])&&(r=(a<3?o(r):a>3?o(t,n,r):o(t,n))||r);return a>3&&r&&Object.defineProperty(t,n,r),r};Object.defineProperty(t,"__esModule",{value:!0});const o=n(0);class a{constructor(e){this.readOnly=!1,e?(this.verifyATN=e.verifyATN,this.generateRuleBypassTransitions=e.generateRuleBypassTransitions,this.optimize=e.optimize):(this.verifyATN=!0,this.generateRuleBypassTransitions=!1,this.optimize=!0)}static get defaultOptions(){return null==a._defaultOptions&&(a._defaultOptions=new a,a._defaultOptions.makeReadOnly()),a._defaultOptions}get isReadOnly(){return this.readOnly}makeReadOnly(){this.readOnly=!0}get isVerifyATN(){return this.verifyATN}set isVerifyATN(e){this.throwIfReadOnly(),this.verifyATN=e}get isGenerateRuleBypassTransitions(){return this.generateRuleBypassTransitions}set isGenerateRuleBypassTransitions(e){this.throwIfReadOnly(),this.generateRuleBypassTransitions=e}get isOptimize(){return this.optimize}set isOptimize(e){this.throwIfReadOnly(),this.optimize=e}throwIfReadOnly(){if(this.isReadOnly)throw new Error("The object is read only.")}}i([o.NotNull],a,"defaultOptions",null),t.ATNDeserializationOptions=a},function(e,t,n){"use strict";
/*!
 * Copyright 2016 The ANTLR Project. All rights reserved.
 * Licensed under the BSD-3-Clause license. See LICENSE file in the project root for license information.
 */var i=this&&this.__decorate||function(e,t,n,i){var o,a=arguments.length,r=a<3?t:null===i?i=Object.getOwnPropertyDescriptor(t,n):i;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)r=Reflect.decorate(e,t,n,i);else for(var l=e.length-1;l>=0;l--)(o=e[l])&&(r=(a<3?o(r):a>3?o(t,n,r):o(t,n))||r);return a>3&&r&&Object.defineProperty(t,n,r),r},o=this&&this.__param||function(e,t){return function(n,i){t(n,i,e)}};Object.defineProperty(t,"__esModule",{value:!0});const a=n(0),r=n(20);let l=class extends r.Transition{constructor(e,t,n=-1,i=!1){super(e),this.ruleIndex=t,this.actionIndex=n,this.isCtxDependent=i}get serializationType(){return 6}get isEpsilon(){return!0}matches(e,t,n){return!1}toString(){return"action_"+this.ruleIndex+":"+this.actionIndex}};i([a.Override],l.prototype,"serializationType",null),i([a.Override],l.prototype,"isEpsilon",null),i([a.Override],l.prototype,"matches",null),i([a.Override],l.prototype,"toString",null),l=i([o(0,a.NotNull)],l),t.ActionTransition=l},function(e,t,n){"use strict";
/*!
 * Copyright 2016 The ANTLR Project. All rights reserved.
 * Licensed under the BSD-3-Clause license. See LICENSE file in the project root for license information.
 */var i=this&&this.__decorate||function(e,t,n,i){var o,a=arguments.length,r=a<3?t:null===i?i=Object.getOwnPropertyDescriptor(t,n):i;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)r=Reflect.decorate(e,t,n,i);else for(var l=e.length-1;l>=0;l--)(o=e[l])&&(r=(a<3?o(r):a>3?o(t,n,r):o(t,n))||r);return a>3&&r&&Object.defineProperty(t,n,r),r},o=this&&this.__param||function(e,t){return function(n,i){t(n,i,e)}};Object.defineProperty(t,"__esModule",{value:!0});const a=n(23),r=n(0),l=n(20);let s=class extends l.Transition{constructor(e,t){super(e),this._label=t}get serializationType(){return 5}get label(){return a.IntervalSet.of(this._label)}matches(e,t,n){return this._label===e}toString(){return String(this.label)}};i([r.Override],s.prototype,"serializationType",null),i([r.Override,r.NotNull],s.prototype,"label",null),i([r.Override],s.prototype,"matches",null),i([r.Override,r.NotNull],s.prototype,"toString",null),s=i([o(0,r.NotNull)],s),t.AtomTransition=s},function(e,t,n){"use strict";
/*!
 * Copyright 2016 The ANTLR Project. All rights reserved.
 * Licensed under the BSD-3-Clause license. See LICENSE file in the project root for license information.
 */var i=this&&this.__decorate||function(e,t,n,i){var o,a=arguments.length,r=a<3?t:null===i?i=Object.getOwnPropertyDescriptor(t,n):i;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)r=Reflect.decorate(e,t,n,i);else for(var l=e.length-1;l>=0;l--)(o=e[l])&&(r=(a<3?o(r):a>3?o(t,n,r):o(t,n))||r);return a>3&&r&&Object.defineProperty(t,n,r),r};Object.defineProperty(t,"__esModule",{value:!0});const o=n(17),a=n(8),r=n(0);class l extends o.ATNState{get stateType(){return a.ATNStateType.LOOP_END}}i([r.Override],l.prototype,"stateType",null),t.LoopEndState=l},function(e,t,n){"use strict";
/*!
 * Copyright 2016 The ANTLR Project. All rights reserved.
 * Licensed under the BSD-3-Clause license. See LICENSE file in the project root for license information.
 */var i=this&&this.__decorate||function(e,t,n,i){var o,a=arguments.length,r=a<3?t:null===i?i=Object.getOwnPropertyDescriptor(t,n):i;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)r=Reflect.decorate(e,t,n,i);else for(var l=e.length-1;l>=0;l--)(o=e[l])&&(r=(a<3?o(r):a>3?o(t,n,r):o(t,n))||r);return a>3&&r&&Object.defineProperty(t,n,r),r};Object.defineProperty(t,"__esModule",{value:!0});const o=n(6),a=n(37),r=n(61),l=n(10),s=n(0),d=n(25),c=n(1);class u extends r.RuleNode{constructor(e,t){super(),this._parent=e,this.invokingState=null!=t?t:-1}static getChildContext(e,t){return new u(e,t)}depth(){let e=0,t=this;for(;t;)t=t._parent,e++;return e}get isEmpty(){return-1===this.invokingState}get sourceInterval(){return l.Interval.INVALID}get ruleContext(){return this}get parent(){return this._parent}setParent(e){this._parent=e}get payload(){return this}get text(){if(0===this.childCount)return"";let e="";for(let t=0;t<this.childCount;t++)e+=this.getChild(t).text;return e.toString()}get ruleIndex(){return-1}get altNumber(){return o.ATN.INVALID_ALT_NUMBER}set altNumber(e){}getChild(e){throw new RangeError("i must be greater than or equal to 0 and less than childCount")}get childCount(){return 0}accept(e){return e.visitChildren(this)}toStringTree(e){return d.Trees.toStringTree(this,e)}toString(e,t){const n=e instanceof a.Recognizer?e.ruleNames:e;t=t||c.ParserRuleContext.emptyContext();let i="",o=this;for(i+="[";o&&o!==t;){if(n){let e=o.ruleIndex;i+=e>=0&&e<n.length?n[e]:e.toString()}else o.isEmpty||(i+=o.invokingState);!o._parent||!n&&o._parent.isEmpty||(i+=" "),o=o._parent}return i+="]",i.toString()}}i([s.Override],u.prototype,"sourceInterval",null),i([s.Override],u.prototype,"ruleContext",null),i([s.Override],u.prototype,"parent",null),i([s.Override],u.prototype,"setParent",null),i([s.Override],u.prototype,"payload",null),i([s.Override],u.prototype,"text",null),i([s.Override],u.prototype,"getChild",null),i([s.Override],u.prototype,"childCount",null),i([s.Override],u.prototype,"accept",null),i([s.Override],u.prototype,"toStringTree",null),t.RuleContext=u},function(e,t,n){"use strict";
/*!
 * Copyright 2016 The ANTLR Project. All rights reserved.
 * Licensed under the BSD-3-Clause license. See LICENSE file in the project root for license information.
 */var i=this&&this.__decorate||function(e,t,n,i){var o,a=arguments.length,r=a<3?t:null===i?i=Object.getOwnPropertyDescriptor(t,n):i;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)r=Reflect.decorate(e,t,n,i);else for(var l=e.length-1;l>=0;l--)(o=e[l])&&(r=(a<3?o(r):a>3?o(t,n,r):o(t,n))||r);return a>3&&r&&Object.defineProperty(t,n,r),r},o=this&&this.__param||function(e,t){return function(n,i){t(n,i,e)}};Object.defineProperty(t,"__esModule",{value:!0});const a=n(0),r=n(1);let l=class{constructor(e,t,n,i){this.outerContext=null!=e?e:r.ParserRuleContext.emptyContext(),this.s0=t,this.useContext=n,this.remainingOuterContext=i}};l=i([o(1,a.NotNull)],l),t.SimulatorState=l},function(e,t,n){"use strict";
/*!
 * Copyright 2016 The ANTLR Project. All rights reserved.
 * Licensed under the BSD-3-Clause license. See LICENSE file in the project root for license information.
 */var i=this&&this.__decorate||function(e,t,n,i){var o,a=arguments.length,r=a<3?t:null===i?i=Object.getOwnPropertyDescriptor(t,n):i;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)r=Reflect.decorate(e,t,n,i);else for(var l=e.length-1;l>=0;l--)(o=e[l])&&(r=(a<3?o(r):a>3?o(t,n,r):o(t,n))||r);return a>3&&r&&Object.defineProperty(t,n,r),r};Object.defineProperty(t,"__esModule",{value:!0});const o=n(55),a=n(0);class r extends o.ProxyErrorListener{constructor(e){super(e)}reportAmbiguity(e,t,n,i,o,a,r){this.getDelegates().forEach(l=>{l.reportAmbiguity&&l.reportAmbiguity(e,t,n,i,o,a,r)})}reportAttemptingFullContext(e,t,n,i,o,a){this.getDelegates().forEach(r=>{r.reportAttemptingFullContext&&r.reportAttemptingFullContext(e,t,n,i,o,a)})}reportContextSensitivity(e,t,n,i,o,a){this.getDelegates().forEach(r=>{r.reportContextSensitivity&&r.reportContextSensitivity(e,t,n,i,o,a)})}}i([a.Override],r.prototype,"reportAmbiguity",null),i([a.Override],r.prototype,"reportAttemptingFullContext",null),i([a.Override],r.prototype,"reportContextSensitivity",null),t.ProxyParserErrorListener=r},function(e,t,n){"use strict";
/*!
 * Copyright 2016 The ANTLR Project. All rights reserved.
 * Licensed under the BSD-3-Clause license. See LICENSE file in the project root for license information.
 */Object.defineProperty(t,"__esModule",{value:!0});const i=n(12),o=n(155);class a{constructor(e,t){this.buffer=e,this._position=0,this._size=t}static withArray(e){return new a(e,e.length)}get position(){return this._position}set position(e){if(e<0||e>this._size)throw new RangeError;this._position=e}get remaining(){return this._size-this.position}get(e){return this.buffer[e]}array(){return this.buffer.slice(0,this._size)}static builder(e){return new a.Builder(e)}}t.CodePointBuffer=a,function(e){let t;!function(e){e[e.BYTE=0]="BYTE",e[e.CHAR=1]="CHAR",e[e.INT=2]="INT"}(t||(t={}));class n{constructor(e){this.type=0,this.buffer=new Uint8Array(e),this.prevHighSurrogate=-1,this.position=0}build(){return new e(this.buffer,this.position)}static roundUpToNextPowerOfTwo(e){let t=32-Math.clz32(e-1);return Math.pow(2,t)}ensureRemaining(e){switch(this.type){case 0:if(this.buffer.length-this.position<e){let t=n.roundUpToNextPowerOfTwo(this.buffer.length+e),i=new Uint8Array(t);i.set(this.buffer.subarray(0,this.position),0),this.buffer=i}break;case 1:if(this.buffer.length-this.position<e){let t=n.roundUpToNextPowerOfTwo(this.buffer.length+e),i=new Uint16Array(t);i.set(this.buffer.subarray(0,this.position),0),this.buffer=i}break;case 2:if(this.buffer.length-this.position<e){let t=n.roundUpToNextPowerOfTwo(this.buffer.length+e),i=new Int32Array(t);i.set(this.buffer.subarray(0,this.position),0),this.buffer=i}}}append(e){this.ensureRemaining(e.length),this.appendArray(e)}appendArray(e){switch(this.type){case 0:this.appendArrayByte(e);break;case 1:this.appendArrayChar(e);break;case 2:this.appendArrayInt(e)}}appendArrayByte(e){i(-1===this.prevHighSurrogate);let t=e,n=0,a=e.length,r=this.buffer,l=this.position;for(;n<a;){let i=t[n];if(!(i<=255))return e=e.subarray(n,a),this.position=l,o.isHighSurrogate(i)?(this.byteToIntBuffer(e.length),void this.appendArrayInt(e)):(this.byteToCharBuffer(e.length),void this.appendArrayChar(e));r[l]=i,n++,l++}this.position=l}appendArrayChar(e){i(-1===this.prevHighSurrogate);let t=e,n=0,a=e.length,r=this.buffer,l=this.position;for(;n<a;){let i=t[n];if(o.isHighSurrogate(i))return e=e.subarray(n,a),this.position=l,this.charToIntBuffer(e.length),void this.appendArrayInt(e);r[l]=i,n++,l++}this.position=l}appendArrayInt(e){let t=e,n=0,i=e.length,a=this.buffer,r=this.position;for(;n<i;){let e=t[n];n++,-1!==this.prevHighSurrogate?o.isLowSurrogate(e)?(a[r]=String.fromCharCode(this.prevHighSurrogate,e).codePointAt(0),r++,this.prevHighSurrogate=-1):(a[r]=this.prevHighSurrogate,r++,o.isHighSurrogate(e)?this.prevHighSurrogate=e:(a[r]=e,r++,this.prevHighSurrogate=-1)):o.isHighSurrogate(e)?this.prevHighSurrogate=e:(a[r]=e,r++)}-1!==this.prevHighSurrogate&&(a[r]=this.prevHighSurrogate,r++),this.position=r}byteToCharBuffer(e){let t=new Uint16Array(Math.max(this.position+e,this.buffer.length>>1));t.set(this.buffer.subarray(0,this.position),0),this.type=1,this.buffer=t}byteToIntBuffer(e){let t=new Int32Array(Math.max(this.position+e,this.buffer.length>>2));t.set(this.buffer.subarray(0,this.position),0),this.type=2,this.buffer=t}charToIntBuffer(e){let t=new Int32Array(Math.max(this.position+e,this.buffer.length>>1));t.set(this.buffer.subarray(0,this.position),0),this.type=2,this.buffer=t}}e.Builder=n}(a=t.CodePointBuffer||(t.CodePointBuffer={}))},function(e,t,n){"use strict";
/*!
 * Copyright 2016 The ANTLR Project. All rights reserved.
 * Licensed under the BSD-3-Clause license. See LICENSE file in the project root for license information.
 */var i=this&&this.__decorate||function(e,t,n,i){var o,a=arguments.length,r=a<3?t:null===i?i=Object.getOwnPropertyDescriptor(t,n):i;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)r=Reflect.decorate(e,t,n,i);else for(var l=e.length-1;l>=0;l--)(o=e[l])&&(r=(a<3?o(r):a>3?o(t,n,r):o(t,n))||r);return a>3&&r&&Object.defineProperty(t,n,r),r};Object.defineProperty(t,"__esModule",{value:!0});const o=n(12),a=n(19),r=n(10),l=n(0);class s{constructor(e,t,n,i){o(0===t),this._array=e,this._size=n,this._name=i,this._position=0}get internalStorage(){return this._array}static fromBuffer(e,t){return void 0!==t&&0!==t.length||(t=a.IntStream.UNKNOWN_SOURCE_NAME),new s(e.array(),e.position,e.remaining,t)}consume(){if(this._size-this._position==0)throw o(this.LA(1)===a.IntStream.EOF),new RangeError("cannot consume EOF");this._position++}get index(){return this._position}get size(){return this._size}mark(){return-1}release(e){}seek(e){this._position=e}get sourceName(){return this._name}toString(){return this.getText(r.Interval.of(0,this.size-1))}LA(e){let t;switch(Math.sign(e)){case-1:return t=this.index+e,t<0?a.IntStream.EOF:this._array[t];case 0:return 0;case 1:return t=this.index+e-1,t>=this.size?a.IntStream.EOF:this._array[t]}throw new RangeError("Not reached")}getText(e){const t=Math.min(e.a,this.size),n=Math.min(e.b-e.a+1,this.size-t);return this._array instanceof Int32Array?String.fromCodePoint(...Array.from(this._array.subarray(t,t+n))):String.fromCharCode(...Array.from(this._array.subarray(t,t+n)))}}i([l.Override],s.prototype,"consume",null),i([l.Override],s.prototype,"index",null),i([l.Override],s.prototype,"size",null),i([l.Override],s.prototype,"mark",null),i([l.Override],s.prototype,"release",null),i([l.Override],s.prototype,"seek",null),i([l.Override],s.prototype,"sourceName",null),i([l.Override],s.prototype,"toString",null),i([l.Override],s.prototype,"LA",null),i([l.Override],s.prototype,"getText",null),t.CodePointCharStream=s},function(e,t,n){"use strict";
/*!
 * Copyright 2016 The ANTLR Project. All rights reserved.
 * Licensed under the BSD-3-Clause license. See LICENSE file in the project root for license information.
 */var i=this&&this.__decorate||function(e,t,n,i){var o,a=arguments.length,r=a<3?t:null===i?i=Object.getOwnPropertyDescriptor(t,n):i;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)r=Reflect.decorate(e,t,n,i);else for(var l=e.length-1;l>=0;l--)(o=e[l])&&(r=(a<3?o(r):a>3?o(t,n,r):o(t,n))||r);return a>3&&r&&Object.defineProperty(t,n,r),r},o=this&&this.__param||function(e,t){return function(n,i){t(n,i,e)}};Object.defineProperty(t,"__esModule",{value:!0});const a=n(12),r=n(35),l=n(10),s=n(18),d=n(0),c=n(3);let u=class{constructor(e){if(this.tokens=[],this.p=-1,this.fetchedEOF=!1,null==e)throw new Error("tokenSource cannot be null");this._tokenSource=e}get tokenSource(){return this._tokenSource}set tokenSource(e){this._tokenSource=e,this.tokens.length=0,this.p=-1,this.fetchedEOF=!1}get index(){return this.p}mark(){return 0}release(e){}seek(e){this.lazyInit(),this.p=this.adjustSeekIndex(e)}get size(){return this.tokens.length}consume(){let e;if(e=this.p>=0&&(this.fetchedEOF?this.p<this.tokens.length-1:this.p<this.tokens.length),!e&&this.LA(1)===c.Token.EOF)throw new Error("cannot consume EOF");this.sync(this.p+1)&&(this.p=this.adjustSeekIndex(this.p+1))}sync(e){a(e>=0);let t=e-this.tokens.length+1;if(t>0){return this.fetch(t)>=t}return!0}fetch(e){if(this.fetchedEOF)return 0;for(let t=0;t<e;t++){let e=this.tokenSource.nextToken();if(this.isWritableToken(e)&&(e.tokenIndex=this.tokens.length),this.tokens.push(e),e.type===c.Token.EOF)return this.fetchedEOF=!0,t+1}return e}get(e){if(e<0||e>=this.tokens.length)throw new RangeError("token index "+e+" out of range 0.."+(this.tokens.length-1));return this.tokens[e]}getRange(e,t){if(e<0||t<0)return[];this.lazyInit();let n=new Array;t>=this.tokens.length&&(t=this.tokens.length-1);for(let i=e;i<=t;i++){let e=this.tokens[i];if(e.type===c.Token.EOF)break;n.push(e)}return n}LA(e){let t=this.LT(e);return t?t.type:c.Token.INVALID_TYPE}tryLB(e){if(!(this.p-e<0))return this.tokens[this.p-e]}LT(e){let t=this.tryLT(e);if(void 0===t)throw new RangeError("requested lookback index out of range");return t}tryLT(e){if(this.lazyInit(),0===e)throw new RangeError("0 is not a valid lookahead index");if(e<0)return this.tryLB(-e);let t=this.p+e-1;return this.sync(t),t>=this.tokens.length?this.tokens[this.tokens.length-1]:this.tokens[t]}adjustSeekIndex(e){return e}lazyInit(){-1===this.p&&this.setup()}setup(){this.sync(0),this.p=this.adjustSeekIndex(0)}getTokens(e,t,n){if(this.lazyInit(),void 0===e)return a(void 0===t&&void 0===n),this.tokens;if(void 0===t&&(t=this.tokens.length-1),e<0||t>=this.tokens.length||t<0||e>=this.tokens.length)throw new RangeError("start "+e+" or stop "+t+" not in 0.."+(this.tokens.length-1));if(e>t)return[];if(void 0===n)return this.tokens.slice(e,t+1);"number"==typeof n&&(n=(new Set).add(n));let i=n,o=this.tokens.slice(e,t+1);return o=o.filter(e=>i.has(e.type)),o}nextTokenOnChannel(e,t){if(this.sync(e),e>=this.size)return this.size-1;let n=this.tokens[e];for(;n.channel!==t;){if(n.type===c.Token.EOF)return e;e++,this.sync(e),n=this.tokens[e]}return e}previousTokenOnChannel(e,t){if(this.sync(e),e>=this.size)return this.size-1;for(;e>=0;){let n=this.tokens[e];if(n.type===c.Token.EOF||n.channel===t)return e;e--}return e}getHiddenTokensToRight(e,t=-1){if(this.lazyInit(),e<0||e>=this.tokens.length)throw new RangeError(e+" not in 0.."+(this.tokens.length-1));let n,i=this.nextTokenOnChannel(e+1,s.Lexer.DEFAULT_TOKEN_CHANNEL),o=e+1;return n=-1===i?this.size-1:i,this.filterForChannel(o,n,t)}getHiddenTokensToLeft(e,t=-1){if(this.lazyInit(),e<0||e>=this.tokens.length)throw new RangeError(e+" not in 0.."+(this.tokens.length-1));if(0===e)return[];let n=this.previousTokenOnChannel(e-1,s.Lexer.DEFAULT_TOKEN_CHANNEL);if(n===e-1)return[];let i=n+1,o=e-1;return this.filterForChannel(i,o,t)}filterForChannel(e,t,n){let i=new Array;for(let o=e;o<=t;o++){let e=this.tokens[o];-1===n?e.channel!==s.Lexer.DEFAULT_TOKEN_CHANNEL&&i.push(e):e.channel===n&&i.push(e)}return i}get sourceName(){return this.tokenSource.sourceName}getText(e){void 0===e?e=l.Interval.of(0,this.size-1):e instanceof l.Interval||(e=e.sourceInterval);let t=e.a,n=e.b;if(t<0||n<0)return"";this.fill(),n>=this.tokens.length&&(n=this.tokens.length-1);let i="";for(let e=t;e<=n;e++){let t=this.tokens[e];if(t.type===c.Token.EOF)break;i+=t.text}return i.toString()}getTextFromRange(e,t){return this.isToken(e)&&this.isToken(t)?this.getText(l.Interval.of(e.tokenIndex,t.tokenIndex)):""}fill(){this.lazyInit();for(;;){if(this.fetch(1e3)<1e3)return}}isWritableToken(e){return e instanceof r.CommonToken}isToken(e){return e instanceof r.CommonToken}};i([d.NotNull],u.prototype,"_tokenSource",void 0),i([d.Override],u.prototype,"tokenSource",null),i([d.Override],u.prototype,"index",null),i([d.Override],u.prototype,"mark",null),i([d.Override],u.prototype,"release",null),i([d.Override],u.prototype,"seek",null),i([d.Override],u.prototype,"size",null),i([d.Override],u.prototype,"consume",null),i([d.Override],u.prototype,"get",null),i([d.Override],u.prototype,"LA",null),i([d.NotNull,d.Override],u.prototype,"LT",null),i([d.Override],u.prototype,"sourceName",null),i([d.NotNull,d.Override],u.prototype,"getText",null),i([d.NotNull,d.Override],u.prototype,"getTextFromRange",null),u=i([o(0,d.NotNull)],u),t.BufferedTokenStream=u},function(e,t,n){"use strict";
/*!
 * Copyright 2016 The ANTLR Project. All rights reserved.
 * Licensed under the BSD-3-Clause license. See LICENSE file in the project root for license information.
 */var i=this&&this.__decorate||function(e,t,n,i){var o,a=arguments.length,r=a<3?t:null===i?i=Object.getOwnPropertyDescriptor(t,n):i;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)r=Reflect.decorate(e,t,n,i);else for(var l=e.length-1;l>=0;l--)(o=e[l])&&(r=(a<3?o(r):a>3?o(t,n,r):o(t,n))||r);return a>3&&r&&Object.defineProperty(t,n,r),r},o=this&&this.__param||function(e,t){return function(n,i){t(n,i,e)}};Object.defineProperty(t,"__esModule",{value:!0});const a=n(53),r=n(0),l=n(3);let s=class{constructor(e,t){if(this.i=0,this._factory=a.CommonTokenFactory.DEFAULT,null==e)throw new Error("tokens cannot be null");this.tokens=e,this._sourceName=t}get charPositionInLine(){if(this.i<this.tokens.length)return this.tokens[this.i].charPositionInLine;if(null!=this.eofToken)return this.eofToken.charPositionInLine;if(this.tokens.length>0){let e=this.tokens[this.tokens.length-1],t=e.text;if(null!=t){let e=t.lastIndexOf("\n");if(e>=0)return t.length-e-1}return e.charPositionInLine+e.stopIndex-e.startIndex+1}return 0}nextToken(){if(this.i>=this.tokens.length){if(null==this.eofToken){let e=-1;if(this.tokens.length>0){let t=this.tokens[this.tokens.length-1].stopIndex;-1!==t&&(e=t+1)}let t=Math.max(-1,e-1);this.eofToken=this._factory.create({source:this,stream:this.inputStream},l.Token.EOF,"EOF",l.Token.DEFAULT_CHANNEL,e,t,this.line,this.charPositionInLine)}return this.eofToken}let e=this.tokens[this.i];return this.i===this.tokens.length-1&&e.type===l.Token.EOF&&(this.eofToken=e),this.i++,e}get line(){if(this.i<this.tokens.length)return this.tokens[this.i].line;if(null!=this.eofToken)return this.eofToken.line;if(this.tokens.length>0){let e=this.tokens[this.tokens.length-1],t=e.line,n=e.text;if(null!=n)for(let e=0;e<n.length;e++)"\n"===n.charAt(e)&&t++;return t}return 1}get inputStream(){return this.i<this.tokens.length?this.tokens[this.i].inputStream:null!=this.eofToken?this.eofToken.inputStream:this.tokens.length>0?this.tokens[this.tokens.length-1].inputStream:void 0}get sourceName(){if(this._sourceName)return this._sourceName;let e=this.inputStream;return null!=e?e.sourceName:"List"}set tokenFactory(e){this._factory=e}get tokenFactory(){return this._factory}};i([r.Override],s.prototype,"charPositionInLine",null),i([r.Override],s.prototype,"nextToken",null),i([r.Override],s.prototype,"line",null),i([r.Override],s.prototype,"inputStream",null),i([r.Override],s.prototype,"sourceName",null),i([r.Override,r.NotNull,o(0,r.NotNull)],s.prototype,"tokenFactory",null),s=i([o(0,r.NotNull)],s),t.ListTokenSource=s},function(e,t,n){"use strict";
/*!
 * Copyright 2016 The ANTLR Project. All rights reserved.
 * Licensed under the BSD-3-Clause license. See LICENSE file in the project root for license information.
 */Object.defineProperty(t,"__esModule",{value:!0});class i extends Error{constructor(e){super(e.message),this.cause=e,this.stack=e.stack}getCause(){return this.cause}}t.ParseCancellationException=i},function(e,t,n){"use strict";
/*!
 * Copyright 2016 The ANTLR Project. All rights reserved.
 * Licensed under the BSD-3-Clause license. See LICENSE file in the project root for license information.
 */var i=this&&this.__decorate||function(e,t,n,i){var o,a=arguments.length,r=a<3?t:null===i?i=Object.getOwnPropertyDescriptor(t,n):i;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)r=Reflect.decorate(e,t,n,i);else for(var l=e.length-1;l>=0;l--)(o=e[l])&&(r=(a<3?o(r):a>3?o(t,n,r):o(t,n))||r);return a>3&&r&&Object.defineProperty(t,n,r),r},o=this&&this.__param||function(e,t){return function(n,i){t(n,i,e)}};Object.defineProperty(t,"__esModule",{value:!0});const a=n(17),r=n(8),l=n(22),s=n(7),d=n(43),c=n(102),u=n(92),m=n(0),h=n(0),p=n(31),T=n(32),b=n(2),g=n(56),x=n(3);let f=class e extends p.Parser{constructor(t,n,i,o,a){if(super(t instanceof e?t.inputStream:a),this._parentContextStack=[],this.overrideDecision=-1,this.overrideDecisionInputIndex=-1,this.overrideDecisionAlt=-1,this.overrideDecisionReached=!1,this._overrideDecisionRoot=void 0,t instanceof e){let e=t;this._grammarFileName=e._grammarFileName,this._atn=e._atn,this.pushRecursionContextStates=e.pushRecursionContextStates,this._ruleNames=e._ruleNames,this._vocabulary=e._vocabulary,this.interpreter=new T.ParserATNSimulator(this._atn,this)}else{n=n,i=i,o=o,this._grammarFileName=t,this._atn=o,this._ruleNames=i.slice(0),this._vocabulary=n,this.pushRecursionContextStates=new l.BitSet(o.states.length);for(let e of o.states)e instanceof g.StarLoopEntryState&&e.precedenceRuleDecision&&this.pushRecursionContextStates.set(e.stateNumber);this.interpreter=new T.ParserATNSimulator(o,this)}}reset(e){void 0===e?super.reset():super.reset(e),this.overrideDecisionReached=!1,this._overrideDecisionRoot=void 0}get atn(){return this._atn}get vocabulary(){return this._vocabulary}get ruleNames(){return this._ruleNames}get grammarFileName(){return this._grammarFileName}parse(e){let t=this._atn.ruleToStartState[e];for(this._rootContext=this.createInterpreterRuleContext(void 0,a.ATNState.INVALID_STATE_NUMBER,e),t.isPrecedenceRule?this.enterRecursionRule(this._rootContext,t.stateNumber,e,0):this.enterRule(this._rootContext,t.stateNumber,e);;){let e=this.atnState;switch(e.stateType){case r.ATNStateType.RULE_STOP:if(this._ctx.isEmpty){if(t.isPrecedenceRule){let e=this._ctx,t=this._parentContextStack.pop();return this.unrollRecursionContexts(t[0]),e}return this.exitRule(),this._rootContext}this.visitRuleStopState(e);break;default:try{this.visitState(e)}catch(t){if(!(t instanceof b.RecognitionException))throw t;this.state=this._atn.ruleToStopState[e.ruleIndex].stateNumber,this.context.exception=t,this.errorHandler.reportError(this,t),this.recover(t)}}}}enterRecursionRule(e,t,n,i){this._parentContextStack.push([this._ctx,e.invokingState]),super.enterRecursionRule(e,t,n,i)}get atnState(){return this._atn.states[this.state]}visitState(e){let t=1;e.numberOfTransitions>1&&(t=this.visitDecisionState(e));let n=e.transition(t-1);switch(n.serializationType){case 1:if(this.pushRecursionContextStates.get(e.stateNumber)&&!(n.target instanceof u.LoopEndState)){let t=this._parentContextStack[this._parentContextStack.length-1],n=this.createInterpreterRuleContext(t[0],t[1],this._ctx.ruleIndex);this.pushNewRecursionContext(n,this._atn.ruleToStartState[e.ruleIndex].stateNumber,this._ctx.ruleIndex)}break;case 5:this.match(n._label);break;case 2:case 7:case 8:n.matches(this._input.LA(1),x.Token.MIN_USER_TOKEN_TYPE,65535)||this.recoverInline(),this.matchWildcard();break;case 9:this.matchWildcard();break;case 3:let t=n.target,i=t.ruleIndex,o=this.createInterpreterRuleContext(this._ctx,e.stateNumber,i);t.isPrecedenceRule?this.enterRecursionRule(o,t.stateNumber,i,n.precedence):this.enterRule(o,n.target.stateNumber,i);break;case 4:let a=n;if(!this.sempred(this._ctx,a.ruleIndex,a.predIndex))throw new s.FailedPredicateException(this);break;case 6:let r=n;this.action(this._ctx,r.ruleIndex,r.actionIndex);break;case 10:if(!this.precpred(this._ctx,n.precedence)){let e=n.precedence;throw new s.FailedPredicateException(this,`precpred(_ctx, ${e})`)}break;default:throw new Error("UnsupportedOperationException: Unrecognized ATN transition type.")}this.state=n.target.stateNumber}visitDecisionState(e){let t;this.errorHandler.sync(this);let n=e.decision;return n!==this.overrideDecision||this._input.index!==this.overrideDecisionInputIndex||this.overrideDecisionReached?t=this.interpreter.adaptivePredict(this._input,n,this._ctx):(t=this.overrideDecisionAlt,this.overrideDecisionReached=!0),t}createInterpreterRuleContext(e,t,n){return new c.InterpreterRuleContext(n,e,t)}visitRuleStopState(e){if(this._atn.ruleToStartState[e.ruleIndex].isPrecedenceRule){let e=this._parentContextStack.pop();this.unrollRecursionContexts(e[0]),this.state=e[1]}else this.exitRule();let t=this._atn.states[this.state].transition(0);this.state=t.followState.stateNumber}addDecisionOverride(e,t,n){this.overrideDecision=e,this.overrideDecisionInputIndex=t,this.overrideDecisionAlt=n}get overrideDecisionRoot(){return this._overrideDecisionRoot}recover(e){let t=this._input.index;if(this.errorHandler.recover(this,e),this._input.index===t){let t=e.getOffendingToken();if(!t)throw new Error("Expected exception to have an offending token");let n=t.tokenSource,i={source:n,stream:void 0!==n?n.inputStream:void 0};if(e instanceof d.InputMismatchException){let n=e.expectedTokens;if(void 0===n)throw new Error("Expected the exception to provide expected tokens");let o=x.Token.INVALID_TYPE;n.isNil||(o=n.minElement);let a=this.tokenFactory.create(i,o,t.text,x.Token.DEFAULT_CHANNEL,-1,-1,t.line,t.charPositionInLine);this._ctx.addErrorNode(this.createErrorNode(this._ctx,a))}else{t.tokenSource;let e=this.tokenFactory.create(i,x.Token.INVALID_TYPE,t.text,x.Token.DEFAULT_CHANNEL,-1,-1,t.line,t.charPositionInLine);this._ctx.addErrorNode(this.createErrorNode(this._ctx,e))}}}recoverInline(){return this._errHandler.recoverInline(this)}get rootContext(){return this._rootContext}};i([m.NotNull],f.prototype,"_vocabulary",void 0),i([h.Override],f.prototype,"reset",null),i([h.Override],f.prototype,"atn",null),i([h.Override],f.prototype,"vocabulary",null),i([h.Override],f.prototype,"ruleNames",null),i([h.Override],f.prototype,"grammarFileName",null),i([h.Override],f.prototype,"enterRecursionRule",null),f=i([o(1,m.NotNull)],f),t.ParserInterpreter=f},function(e,t,n){"use strict";
/*!
 * Copyright 2016 The ANTLR Project. All rights reserved.
 * Licensed under the BSD-3-Clause license. See LICENSE file in the project root for license information.
 */var i=this&&this.__decorate||function(e,t,n,i){var o,a=arguments.length,r=a<3?t:null===i?i=Object.getOwnPropertyDescriptor(t,n):i;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)r=Reflect.decorate(e,t,n,i);else for(var l=e.length-1;l>=0;l--)(o=e[l])&&(r=(a<3?o(r):a>3?o(t,n,r):o(t,n))||r);return a>3&&r&&Object.defineProperty(t,n,r),r};Object.defineProperty(t,"__esModule",{value:!0});const o=n(0),a=n(1);class r extends a.ParserRuleContext{constructor(e,t,n){void 0!==n?super(t,n):super(),this._ruleIndex=e}get ruleIndex(){return this._ruleIndex}}i([o.Override],r.prototype,"ruleIndex",null),t.InterpreterRuleContext=r},function(e,t,n){"use strict";
/*!
 * Copyright 2016 The ANTLR Project. All rights reserved.
 * Licensed under the BSD-3-Clause license. See LICENSE file in the project root for license information.
 */Object.defineProperty(t,"__esModule",{value:!0});t.Chunk=class{}},function(e,t,n){"use strict";(function(e){
/*!
 * Copyright 2016 The ANTLR Project. All rights reserved.
 * Licensed under the BSD-3-Clause license. See LICENSE file in the project root for license information.
 */
var i=this&&this.__decorate||function(e,t,n,i){var o,a=arguments.length,r=a<3?t:null===i?i=Object.getOwnPropertyDescriptor(t,n):i;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)r=Reflect.decorate(e,t,n,i);else for(var l=e.length-1;l>=0;l--)(o=e[l])&&(r=(a<3?o(r):a>3?o(t,n,r):o(t,n))||r);return a>3&&r&&Object.defineProperty(t,n,r),r},o=this&&this.__param||function(e,t){return function(n,i){t(n,i,e)}};Object.defineProperty(t,"__esModule",{value:!0});const a=n(171),r=n(6),l=n(45),s=n(172),d=n(173),c=n(174),u=n(0),m=n(175),h=n(32),p=n(176),T=n(27),b=n(94);class g extends h.ParserATNSimulator{constructor(e){super(e.interpreter.atn,e),this._startIndex=0,this._sllStopIndex=0,this._llStopIndex=0,this.currentDecision=0,this.conflictingAltResolvedBySLL=0,this.optimize_ll1=!1,this.reportAmbiguities=!0,this.numDecisions=this.atn.decisionToState.length,this.decisions=[];for(let e=0;e<this.numDecisions;e++)this.decisions.push(new d.DecisionInfo(e))}adaptivePredict(t,n,i,o){if(void 0!==o)return super.adaptivePredict(t,n,i,o);try{this._input=t,this._startIndex=t.index,this._sllStopIndex=this._startIndex-1,this._llStopIndex=-1,this.currentDecision=n,this.currentState=void 0,this.conflictingAltResolvedBySLL=r.ATN.INVALID_ALT_NUMBER;let o=e.hrtime(),a=super.adaptivePredict(t,n,i),l=e.hrtime(),s=1e9*(l[0]-o[0]);0===s?s=l[1]-o[1]:s+=1e9-o[1]+l[1],this.decisions[n].timeInPrediction+=s,this.decisions[n].invocations++;let d=this._sllStopIndex-this._startIndex+1;if(this.decisions[n].SLL_TotalLook+=d,this.decisions[n].SLL_MinLook=0===this.decisions[n].SLL_MinLook?d:Math.min(this.decisions[n].SLL_MinLook,d),d>this.decisions[n].SLL_MaxLook&&(this.decisions[n].SLL_MaxLook=d,this.decisions[n].SLL_MaxLookEvent=new m.LookaheadEventInfo(n,void 0,a,t,this._startIndex,this._sllStopIndex,!1)),this._llStopIndex>=0){let e=this._llStopIndex-this._startIndex+1;this.decisions[n].LL_TotalLook+=e,this.decisions[n].LL_MinLook=0===this.decisions[n].LL_MinLook?e:Math.min(this.decisions[n].LL_MinLook,e),e>this.decisions[n].LL_MaxLook&&(this.decisions[n].LL_MaxLook=e,this.decisions[n].LL_MaxLookEvent=new m.LookaheadEventInfo(n,void 0,a,t,this._startIndex,this._llStopIndex,!0))}return a}finally{this._input=void 0,this.currentDecision=-1}}getStartState(e,t,n,i){let o=super.getStartState(e,t,n,i);return this.currentState=o,o}computeStartState(e,t,n){let i=super.computeStartState(e,t,n);return this.currentState=i,i}computeReachSet(e,t,n,i){if(void 0===this._input)throw new Error("Invalid state");let o=super.computeReachSet(e,t,n,i);return null==o&&this.decisions[this.currentDecision].errors.push(new c.ErrorInfo(this.currentDecision,t,this._input,this._startIndex,this._input.index)),this.currentState=o,o}getExistingTargetState(e,t){if(void 0===this.currentState||void 0===this._input)throw new Error("Invalid state");this.currentState.useContext?this._llStopIndex=this._input.index:this._sllStopIndex=this._input.index;let n=super.getExistingTargetState(e,t);if(null!=n&&(this.currentState=new b.SimulatorState(this.currentState.outerContext,n,this.currentState.useContext,this.currentState.remainingOuterContext),this.currentState.useContext?this.decisions[this.currentDecision].LL_DFATransitions++:this.decisions[this.currentDecision].SLL_DFATransitions++,n===l.ATNSimulator.ERROR)){let t=new b.SimulatorState(this.currentState.outerContext,e,this.currentState.useContext,this.currentState.remainingOuterContext);this.decisions[this.currentDecision].errors.push(new c.ErrorInfo(this.currentDecision,t,this._input,this._startIndex,this._input.index))}return n}computeTargetState(e,t,n,i,o,a){let r=super.computeTargetState(e,t,n,i,o,a);return o?this.decisions[this.currentDecision].LL_ATNTransitions++:this.decisions[this.currentDecision].SLL_ATNTransitions++,r}evalSemanticContextImpl(e,t,n){if(void 0===this.currentState||void 0===this._input)throw new Error("Invalid state");let i=super.evalSemanticContextImpl(e,t,n);if(!(e instanceof T.SemanticContext.PrecedencePredicate)){let t=this._llStopIndex>=0?this._llStopIndex:this._sllStopIndex;this.decisions[this.currentDecision].predicateEvals.push(new p.PredicateEvalInfo(this.currentState,this.currentDecision,this._input,this._startIndex,t,e,i,n))}return i}reportContextSensitivity(e,t,n,i,o){if(void 0===this._input)throw new Error("Invalid state");t!==this.conflictingAltResolvedBySLL&&this.decisions[this.currentDecision].contextSensitivities.push(new s.ContextSensitivityInfo(this.currentDecision,n,this._input,i,o)),super.reportContextSensitivity(e,t,n,i,o)}reportAttemptingFullContext(e,t,n,i,o){this.conflictingAltResolvedBySLL=null!=t?t.nextSetBit(0):n.s0.configs.getRepresentedAlternatives().nextSetBit(0),this.decisions[this.currentDecision].LL_Fallback++,super.reportAttemptingFullContext(e,t,n,i,o)}reportAmbiguity(e,t,n,i,o,l,d){if(void 0===this.currentState||void 0===this._input)throw new Error("Invalid state");let c;c=null!=l?l.nextSetBit(0):d.getRepresentedAlternatives().nextSetBit(0),this.conflictingAltResolvedBySLL!==r.ATN.INVALID_ALT_NUMBER&&c!==this.conflictingAltResolvedBySLL&&this.decisions[this.currentDecision].contextSensitivities.push(new s.ContextSensitivityInfo(this.currentDecision,this.currentState,this._input,n,i)),this.decisions[this.currentDecision].ambiguities.push(new a.AmbiguityInfo(this.currentDecision,this.currentState,l,this._input,n,i)),super.reportAmbiguity(e,t,n,i,o,l,d)}getDecisionInfo(){return this.decisions}getCurrentState(){return this.currentState}}i([u.Override,o(0,u.NotNull)],g.prototype,"adaptivePredict",null),i([u.Override],g.prototype,"getStartState",null),i([u.Override],g.prototype,"computeStartState",null),i([u.Override],g.prototype,"computeReachSet",null),i([u.Override],g.prototype,"getExistingTargetState",null),i([u.Override],g.prototype,"computeTargetState",null),i([u.Override],g.prototype,"evalSemanticContextImpl",null),i([u.Override],g.prototype,"reportContextSensitivity",null),i([u.Override],g.prototype,"reportAttemptingFullContext",null),i([u.Override,o(0,u.NotNull),o(5,u.NotNull),o(6,u.NotNull)],g.prototype,"reportAmbiguity",null),t.ProfilingATNSimulator=g}).call(this,n(34))},function(e,t,n){"use strict";(t=e.exports=n(106).default).default=t},function(e,t,n){"use strict";var i=n(107);function o(e){if("undefined"!=typeof JSON){var t,n,i,o=[];for(t=0,n=e.length;t<n;t+=1)(i=e[t])&&"object"==typeof i?o.push(a(i)):o.push(i);return JSON.stringify(o)}}function a(e){var t,n,i,o,a=[],r=[];for(t in e)e.hasOwnProperty(t)&&r.push(t);var l=r.sort();for(n=0,i=l.length;n<i;n+=1)(o={})[t=l[n]]=e[t],a[n]=o;return a}t.default=function(e){var t=i.objCreate(null);return function(){var n=Array.prototype.slice.call(arguments),a=o(n),r=a&&t[a];return r||(r=new(i.bind.apply(e,[null].concat(n))),a&&(t[a]=r)),r}}},function(e,t,n){"use strict";var i=Function.prototype.bind||function(e){if("function"!=typeof this)throw new TypeError("Function.prototype.bind - what is trying to be bound is not callable");var t=Array.prototype.slice.call(arguments,1),n=this,i=function(){},o=function(){return n.apply(this instanceof i?this:e,t.concat(Array.prototype.slice.call(arguments)))};return this.prototype&&(i.prototype=this.prototype),o.prototype=new i,o},o=Object.prototype.hasOwnProperty,a=function(){try{return!!Object.defineProperty({},"a",{})}catch(e){return!1}}(),r=(!a&&Object.prototype.__defineGetter__,a?Object.defineProperty:function(e,t,n){"get"in n&&e.__defineGetter__?e.__defineGetter__(t,n.get):o.call(e,t)&&!("value"in n)||(e[t]=n.value)}),l=Object.create||function(e,t){var n,i;function a(){}for(i in a.prototype=e,n=new a,t)o.call(t,i)&&r(n,i,t[i]);return n};t.bind=i,t.defineProperty=r,t.objCreate=l},function(e,t,n){"use strict";var i=n(109),o=n(114);i.default.__addLocaleData(o.default),i.default.defaultLocale="en",t.default=i.default},function(e,t,n){"use strict";var i=n(67),o=n(110),a=n(111),r=n(112);function l(e,t,n){var i="string"==typeof e?l.__parse(e):e;if(!i||"messageFormatPattern"!==i.type)throw new TypeError("A message must be provided as a String or AST.");n=this._mergeFormats(l.formats,n),o.defineProperty(this,"_locale",{value:this._resolveLocale(t)});var a=this._findPluralRuleFunction(this._locale),r=this._compilePattern(i,t,n,a),s=this;this.format=function(t){try{return s._format(r,t)}catch(t){throw t.variableId?new Error("The intl string context variable '"+t.variableId+"' was not provided to the string '"+e+"'"):t}}}t.default=l,o.defineProperty(l,"formats",{enumerable:!0,value:{number:{currency:{style:"currency"},percent:{style:"percent"}},date:{short:{month:"numeric",day:"numeric",year:"2-digit"},medium:{month:"short",day:"numeric",year:"numeric"},long:{month:"long",day:"numeric",year:"numeric"},full:{weekday:"long",month:"long",day:"numeric",year:"numeric"}},time:{short:{hour:"numeric",minute:"numeric"},medium:{hour:"numeric",minute:"numeric",second:"numeric"},long:{hour:"numeric",minute:"numeric",second:"numeric",timeZoneName:"short"},full:{hour:"numeric",minute:"numeric",second:"numeric",timeZoneName:"short"}}}}),o.defineProperty(l,"__localeData__",{value:o.objCreate(null)}),o.defineProperty(l,"__addLocaleData",{value:function(e){if(!e||!e.locale)throw new Error("Locale data provided to IntlMessageFormat is missing a `locale` property");l.__localeData__[e.locale.toLowerCase()]=e}}),o.defineProperty(l,"__parse",{value:r.default.parse}),o.defineProperty(l,"defaultLocale",{enumerable:!0,writable:!0,value:void 0}),l.prototype.resolvedOptions=function(){return{locale:this._locale}},l.prototype._compilePattern=function(e,t,n,i){return new a.default(t,n,i).compile(e)},l.prototype._findPluralRuleFunction=function(e){for(var t=l.__localeData__,n=t[e.toLowerCase()];n;){if(n.pluralRuleFunction)return n.pluralRuleFunction;n=n.parentLocale&&t[n.parentLocale.toLowerCase()]}throw new Error("Locale data added to IntlMessageFormat is missing a `pluralRuleFunction` for :"+e)},l.prototype._format=function(e,t){var n,o,a,r,l,s,d="";for(n=0,o=e.length;n<o;n+=1)if("string"!=typeof(a=e[n])){if(r=a.id,!t||!i.hop.call(t,r))throw(s=new Error("A value must be provided for: "+r)).variableId=r,s;l=t[r],a.options?d+=this._format(a.getOption(l),t):d+=a.format(l)}else d+=a;return d},l.prototype._mergeFormats=function(e,t){var n,a,r={};for(n in e)i.hop.call(e,n)&&(r[n]=a=o.objCreate(e[n]),t&&i.hop.call(t,n)&&i.extend(a,t[n]));return r},l.prototype._resolveLocale=function(e){"string"==typeof e&&(e=[e]),e=(e||[]).concat(l.defaultLocale);var t,n,i,o,a=l.__localeData__;for(t=0,n=e.length;t<n;t+=1)for(i=e[t].toLowerCase().split("-");i.length;){if(o=a[i.join("-")])return o.locale;i.pop()}var r=e.pop();throw new Error("No locale data has been added to IntlMessageFormat for: "+e.join(", ")+", or the default locale: "+r)}},function(e,t,n){"use strict";var i=n(67),o=function(){try{return!!Object.defineProperty({},"a",{})}catch(e){return!1}}(),a=(!o&&Object.prototype.__defineGetter__,o?Object.defineProperty:function(e,t,n){"get"in n&&e.__defineGetter__?e.__defineGetter__(t,n.get):i.hop.call(e,t)&&!("value"in n)||(e[t]=n.value)}),r=Object.create||function(e,t){var n,o;function r(){}for(o in r.prototype=e,n=new r,t)i.hop.call(t,o)&&a(n,o,t[o]);return n};t.defineProperty=a,t.objCreate=r},function(e,t,n){"use strict";function i(e,t,n){this.locales=e,this.formats=t,this.pluralFn=n}function o(e){this.id=e}function a(e,t,n,i,o){this.id=e,this.useOrdinal=t,this.offset=n,this.options=i,this.pluralFn=o}function r(e,t,n,i){this.id=e,this.offset=t,this.numberFormat=n,this.string=i}function l(e,t){this.id=e,this.options=t}t.default=i,i.prototype.compile=function(e){return this.pluralStack=[],this.currentPlural=null,this.pluralNumberFormat=null,this.compileMessage(e)},i.prototype.compileMessage=function(e){if(!e||"messageFormatPattern"!==e.type)throw new Error('Message AST is not of type: "messageFormatPattern"');var t,n,i,o=e.elements,a=[];for(t=0,n=o.length;t<n;t+=1)switch((i=o[t]).type){case"messageTextElement":a.push(this.compileMessageText(i));break;case"argumentElement":a.push(this.compileArgument(i));break;default:throw new Error("Message element does not have a valid type")}return a},i.prototype.compileMessageText=function(e){return this.currentPlural&&/(^|[^\\])#/g.test(e.value)?(this.pluralNumberFormat||(this.pluralNumberFormat=new Intl.NumberFormat(this.locales)),new r(this.currentPlural.id,this.currentPlural.format.offset,this.pluralNumberFormat,e.value)):e.value.replace(/\\#/g,"#")},i.prototype.compileArgument=function(e){var t=e.format;if(!t)return new o(e.id);var n,i=this.formats,r=this.locales,s=this.pluralFn;switch(t.type){case"numberFormat":return n=i.number[t.style],{id:e.id,format:new Intl.NumberFormat(r,n).format};case"dateFormat":return n=i.date[t.style],{id:e.id,format:new Intl.DateTimeFormat(r,n).format};case"timeFormat":return n=i.time[t.style],{id:e.id,format:new Intl.DateTimeFormat(r,n).format};case"pluralFormat":return n=this.compileOptions(e),new a(e.id,t.ordinal,t.offset,n,s);case"selectFormat":return n=this.compileOptions(e),new l(e.id,n);default:throw new Error("Message element does not have a valid format type")}},i.prototype.compileOptions=function(e){var t,n,i,o=e.format,a=o.options,r={};for(this.pluralStack.push(this.currentPlural),this.currentPlural="pluralFormat"===o.type?e:null,t=0,n=a.length;t<n;t+=1)r[(i=a[t]).selector]=this.compileMessage(i.value);return this.currentPlural=this.pluralStack.pop(),r},o.prototype.format=function(e){return e||"number"==typeof e?"string"==typeof e?e:String(e):""},a.prototype.getOption=function(e){var t=this.options;return t["="+e]||t[this.pluralFn(e-this.offset,this.useOrdinal)]||t.other},r.prototype.format=function(e){var t=this.numberFormat.format(e-this.offset);return this.string.replace(/(^|[^\\])#/g,"$1"+t).replace(/\\#/g,"#")},l.prototype.getOption=function(e){var t=this.options;return t[e]||t.other}},function(e,t,n){"use strict";(t=e.exports=n(113).default).default=t},function(e,t,n){"use strict";t.default=function(){function e(t,n,i,o){this.message=t,this.expected=n,this.found=i,this.location=o,this.name="SyntaxError","function"==typeof Error.captureStackTrace&&Error.captureStackTrace(this,e)}return function(e,t){function n(){this.constructor=e}n.prototype=t.prototype,e.prototype=new n}(e,Error),{SyntaxError:e,parse:function(t){var n,i=arguments.length>1?arguments[1]:{},o={},a={start:Le},r=Le,l=function(e){return{type:"messageFormatPattern",elements:e,location:Ae()}},s=function(e){var t,n,i,o,a,r="";for(t=0,i=e.length;t<i;t+=1)for(n=0,a=(o=e[t]).length;n<a;n+=1)r+=o[n];return r},d=function(e){return{type:"messageTextElement",value:e,location:Ae()}},c=/^[^ \t\n\r,.+={}#]/,u={type:"class",value:"[^ \\t\\n\\r,.+={}#]",description:"[^ \\t\\n\\r,.+={}#]"},m="{",h={type:"literal",value:"{",description:'"{"'},p=",",T={type:"literal",value:",",description:'","'},b="}",g={type:"literal",value:"}",description:'"}"'},x=function(e,t){return{type:"argumentElement",id:e,format:t&&t[2],location:Ae()}},f="number",k={type:"literal",value:"number",description:'"number"'},S="date",y={type:"literal",value:"date",description:'"date"'},C="time",E={type:"literal",value:"time",description:'"time"'},A=function(e,t){return{type:e+"Format",style:t&&t[2],location:Ae()}},O="plural",_={type:"literal",value:"plural",description:'"plural"'},I=function(e){return{type:e.type,ordinal:!1,offset:e.offset||0,options:e.options,location:Ae()}},N="selectordinal",L={type:"literal",value:"selectordinal",description:'"selectordinal"'},R=function(e){return{type:e.type,ordinal:!0,offset:e.offset||0,options:e.options,location:Ae()}},D="select",v={type:"literal",value:"select",description:'"select"'},M=function(e){return{type:"selectFormat",options:e,location:Ae()}},P="=",F={type:"literal",value:"=",description:'"="'},B=function(e,t){return{type:"optionalFormatPattern",selector:e,value:t,location:Ae()}},U="offset:",w={type:"literal",value:"offset:",description:'"offset:"'},q=function(e){return e},j=function(e,t){return{type:"pluralFormat",offset:e,options:t,location:Ae()}},H={type:"other",description:"whitespace"},Y=/^[ \t\n\r]/,V={type:"class",value:"[ \\t\\n\\r]",description:"[ \\t\\n\\r]"},z={type:"other",description:"optionalWhitespace"},G=/^[0-9]/,W={type:"class",value:"[0-9]",description:"[0-9]"},K=/^[0-9a-f]/i,Z={type:"class",value:"[0-9a-f]i",description:"[0-9a-f]i"},X="0",J={type:"literal",value:"0",description:'"0"'},$=/^[1-9]/,Q={type:"class",value:"[1-9]",description:"[1-9]"},ee=function(e){return parseInt(e,10)},te=/^[^{}\\\0-\x1F \t\n\r]/,ne={type:"class",value:"[^{}\\\\\\0-\\x1F\\x7f \\t\\n\\r]",description:"[^{}\\\\\\0-\\x1F\\x7f \\t\\n\\r]"},ie="\\\\",oe={type:"literal",value:"\\\\",description:'"\\\\\\\\"'},ae=function(){return"\\"},re="\\#",le={type:"literal",value:"\\#",description:'"\\\\#"'},se=function(){return"\\#"},de="\\{",ce={type:"literal",value:"\\{",description:'"\\\\{"'},ue=function(){return"{"},me="\\}",he={type:"literal",value:"\\}",description:'"\\\\}"'},pe=function(){return"}"},Te="\\u",be={type:"literal",value:"\\u",description:'"\\\\u"'},ge=function(e){return String.fromCharCode(parseInt(e,16))},xe=function(e){return e.join("")},fe=0,ke=0,Se=[{line:1,column:1,seenCR:!1}],ye=0,Ce=[],Ee=0;if("startRule"in i){if(!(i.startRule in a))throw new Error("Can't start parsing from rule \""+i.startRule+'".');r=a[i.startRule]}function Ae(){return _e(ke,fe)}function Oe(e){var n,i,o=Se[e];if(o)return o;for(n=e-1;!Se[n];)n--;for(o={line:(o=Se[n]).line,column:o.column,seenCR:o.seenCR};n<e;)"\n"===(i=t.charAt(n))?(o.seenCR||o.line++,o.column=1,o.seenCR=!1):"\r"===i||"\u2028"===i||"\u2029"===i?(o.line++,o.column=1,o.seenCR=!0):(o.column++,o.seenCR=!1),n++;return Se[e]=o,o}function _e(e,t){var n=Oe(e),i=Oe(t);return{start:{offset:e,line:n.line,column:n.column},end:{offset:t,line:i.line,column:i.column}}}function Ie(e){fe<ye||(fe>ye&&(ye=fe,Ce=[]),Ce.push(e))}function Ne(t,n,i,o){return null!==n&&function(e){var t=1;for(e.sort((function(e,t){return e.description<t.description?-1:e.description>t.description?1:0}));t<e.length;)e[t-1]===e[t]?e.splice(t,1):t++}(n),new e(null!==t?t:function(e,t){var n,i=new Array(e.length);for(n=0;n<e.length;n++)i[n]=e[n].description;return"Expected "+(e.length>1?i.slice(0,-1).join(", ")+" or "+i[e.length-1]:i[0])+" but "+(t?'"'+function(e){function t(e){return e.charCodeAt(0).toString(16).toUpperCase()}return e.replace(/\\/g,"\\\\").replace(/"/g,'\\"').replace(/\x08/g,"\\b").replace(/\t/g,"\\t").replace(/\n/g,"\\n").replace(/\f/g,"\\f").replace(/\r/g,"\\r").replace(/[\x00-\x07\x0B\x0E\x0F]/g,(function(e){return"\\x0"+t(e)})).replace(/[\x10-\x1F\x80-\xFF]/g,(function(e){return"\\x"+t(e)})).replace(/[\u0100-\u0FFF]/g,(function(e){return"\\u0"+t(e)})).replace(/[\u1000-\uFFFF]/g,(function(e){return"\\u"+t(e)}))}(t)+'"':"end of input")+" found."}(n,i),n,i,o)}function Le(){return Re()}function Re(){var e,t,n;for(e=fe,t=[],n=De();n!==o;)t.push(n),n=De();return t!==o&&(ke=e,t=l(t)),e=t}function De(){var e;return(e=Me())===o&&(e=Fe()),e}function ve(){var e,n,i,a,r,l;if(e=fe,n=[],i=fe,(a=We())!==o&&(r=$e())!==o&&(l=We())!==o?i=a=[a,r,l]:(fe=i,i=o),i!==o)for(;i!==o;)n.push(i),i=fe,(a=We())!==o&&(r=$e())!==o&&(l=We())!==o?i=a=[a,r,l]:(fe=i,i=o);else n=o;return n!==o&&(ke=e,n=s(n)),(e=n)===o&&(e=fe,e=(n=Ge())!==o?t.substring(e,fe):n),e}function Me(){var e,t;return e=fe,(t=ve())!==o&&(ke=e,t=d(t)),e=t}function Pe(){var e,n,i;if((e=Xe())===o){if(e=fe,n=[],c.test(t.charAt(fe))?(i=t.charAt(fe),fe++):(i=o,0===Ee&&Ie(u)),i!==o)for(;i!==o;)n.push(i),c.test(t.charAt(fe))?(i=t.charAt(fe),fe++):(i=o,0===Ee&&Ie(u));else n=o;e=n!==o?t.substring(e,fe):n}return e}function Fe(){var e,n,i,a,r,l,s;return e=fe,123===t.charCodeAt(fe)?(n=m,fe++):(n=o,0===Ee&&Ie(h)),n!==o&&We()!==o&&(i=Pe())!==o&&We()!==o?(a=fe,44===t.charCodeAt(fe)?(r=p,fe++):(r=o,0===Ee&&Ie(T)),r!==o&&(l=We())!==o&&(s=Be())!==o?a=r=[r,l,s]:(fe=a,a=o),a===o&&(a=null),a!==o&&(r=We())!==o?(125===t.charCodeAt(fe)?(l=b,fe++):(l=o,0===Ee&&Ie(g)),l!==o?(ke=e,e=n=x(i,a)):(fe=e,e=o)):(fe=e,e=o)):(fe=e,e=o),e}function Be(){var e;return(e=Ue())===o&&(e=we())===o&&(e=qe())===o&&(e=je()),e}function Ue(){var e,n,i,a,r,l;return e=fe,t.substr(fe,6)===f?(n=f,fe+=6):(n=o,0===Ee&&Ie(k)),n===o&&(t.substr(fe,4)===S?(n=S,fe+=4):(n=o,0===Ee&&Ie(y)),n===o&&(t.substr(fe,4)===C?(n=C,fe+=4):(n=o,0===Ee&&Ie(E)))),n!==o&&We()!==o?(i=fe,44===t.charCodeAt(fe)?(a=p,fe++):(a=o,0===Ee&&Ie(T)),a!==o&&(r=We())!==o&&(l=$e())!==o?i=a=[a,r,l]:(fe=i,i=o),i===o&&(i=null),i!==o?(ke=e,e=n=A(n,i)):(fe=e,e=o)):(fe=e,e=o),e}function we(){var e,n,i,a;return e=fe,t.substr(fe,6)===O?(n=O,fe+=6):(n=o,0===Ee&&Ie(_)),n!==o&&We()!==o?(44===t.charCodeAt(fe)?(i=p,fe++):(i=o,0===Ee&&Ie(T)),i!==o&&We()!==o&&(a=ze())!==o?(ke=e,e=n=I(a)):(fe=e,e=o)):(fe=e,e=o),e}function qe(){var e,n,i,a;return e=fe,t.substr(fe,13)===N?(n=N,fe+=13):(n=o,0===Ee&&Ie(L)),n!==o&&We()!==o?(44===t.charCodeAt(fe)?(i=p,fe++):(i=o,0===Ee&&Ie(T)),i!==o&&We()!==o&&(a=ze())!==o?(ke=e,e=n=R(a)):(fe=e,e=o)):(fe=e,e=o),e}function je(){var e,n,i,a,r;if(e=fe,t.substr(fe,6)===D?(n=D,fe+=6):(n=o,0===Ee&&Ie(v)),n!==o)if(We()!==o)if(44===t.charCodeAt(fe)?(i=p,fe++):(i=o,0===Ee&&Ie(T)),i!==o)if(We()!==o){if(a=[],(r=Ye())!==o)for(;r!==o;)a.push(r),r=Ye();else a=o;a!==o?(ke=e,e=n=M(a)):(fe=e,e=o)}else fe=e,e=o;else fe=e,e=o;else fe=e,e=o;else fe=e,e=o;return e}function He(){var e,n,i,a;return e=fe,n=fe,61===t.charCodeAt(fe)?(i=P,fe++):(i=o,0===Ee&&Ie(F)),i!==o&&(a=Xe())!==o?n=i=[i,a]:(fe=n,n=o),(e=n!==o?t.substring(e,fe):n)===o&&(e=$e()),e}function Ye(){var e,n,i,a,r;return e=fe,We()!==o&&(n=He())!==o&&We()!==o?(123===t.charCodeAt(fe)?(i=m,fe++):(i=o,0===Ee&&Ie(h)),i!==o&&We()!==o&&(a=Re())!==o&&We()!==o?(125===t.charCodeAt(fe)?(r=b,fe++):(r=o,0===Ee&&Ie(g)),r!==o?(ke=e,e=B(n,a)):(fe=e,e=o)):(fe=e,e=o)):(fe=e,e=o),e}function Ve(){var e,n,i;return e=fe,t.substr(fe,7)===U?(n=U,fe+=7):(n=o,0===Ee&&Ie(w)),n!==o&&We()!==o&&(i=Xe())!==o?(ke=e,e=n=q(i)):(fe=e,e=o),e}function ze(){var e,t,n,i;if(e=fe,(t=Ve())===o&&(t=null),t!==o)if(We()!==o){if(n=[],(i=Ye())!==o)for(;i!==o;)n.push(i),i=Ye();else n=o;n!==o?(ke=e,e=t=j(t,n)):(fe=e,e=o)}else fe=e,e=o;else fe=e,e=o;return e}function Ge(){var e,n;if(Ee++,e=[],Y.test(t.charAt(fe))?(n=t.charAt(fe),fe++):(n=o,0===Ee&&Ie(V)),n!==o)for(;n!==o;)e.push(n),Y.test(t.charAt(fe))?(n=t.charAt(fe),fe++):(n=o,0===Ee&&Ie(V));else e=o;return Ee--,e===o&&(n=o,0===Ee&&Ie(H)),e}function We(){var e,n,i;for(Ee++,e=fe,n=[],i=Ge();i!==o;)n.push(i),i=Ge();return e=n!==o?t.substring(e,fe):n,Ee--,e===o&&(n=o,0===Ee&&Ie(z)),e}function Ke(){var e;return G.test(t.charAt(fe))?(e=t.charAt(fe),fe++):(e=o,0===Ee&&Ie(W)),e}function Ze(){var e;return K.test(t.charAt(fe))?(e=t.charAt(fe),fe++):(e=o,0===Ee&&Ie(Z)),e}function Xe(){var e,n,i,a,r,l;if(e=fe,48===t.charCodeAt(fe)?(n=X,fe++):(n=o,0===Ee&&Ie(J)),n===o){if(n=fe,i=fe,$.test(t.charAt(fe))?(a=t.charAt(fe),fe++):(a=o,0===Ee&&Ie(Q)),a!==o){for(r=[],l=Ke();l!==o;)r.push(l),l=Ke();r!==o?i=a=[a,r]:(fe=i,i=o)}else fe=i,i=o;n=i!==o?t.substring(n,fe):i}return n!==o&&(ke=e,n=ee(n)),e=n}function Je(){var e,n,i,a,r,l,s,d;return te.test(t.charAt(fe))?(e=t.charAt(fe),fe++):(e=o,0===Ee&&Ie(ne)),e===o&&(e=fe,t.substr(fe,2)===ie?(n=ie,fe+=2):(n=o,0===Ee&&Ie(oe)),n!==o&&(ke=e,n=ae()),(e=n)===o&&(e=fe,t.substr(fe,2)===re?(n=re,fe+=2):(n=o,0===Ee&&Ie(le)),n!==o&&(ke=e,n=se()),(e=n)===o&&(e=fe,t.substr(fe,2)===de?(n=de,fe+=2):(n=o,0===Ee&&Ie(ce)),n!==o&&(ke=e,n=ue()),(e=n)===o&&(e=fe,t.substr(fe,2)===me?(n=me,fe+=2):(n=o,0===Ee&&Ie(he)),n!==o&&(ke=e,n=pe()),(e=n)===o&&(e=fe,t.substr(fe,2)===Te?(n=Te,fe+=2):(n=o,0===Ee&&Ie(be)),n!==o?(i=fe,a=fe,(r=Ze())!==o&&(l=Ze())!==o&&(s=Ze())!==o&&(d=Ze())!==o?a=r=[r,l,s,d]:(fe=a,a=o),(i=a!==o?t.substring(i,fe):a)!==o?(ke=e,e=n=ge(i)):(fe=e,e=o)):(fe=e,e=o)))))),e}function $e(){var e,t,n;if(e=fe,t=[],(n=Je())!==o)for(;n!==o;)t.push(n),n=Je();else t=o;return t!==o&&(ke=e,t=xe(t)),e=t}if((n=r())!==o&&fe===t.length)return n;throw n!==o&&fe<t.length&&Ie({type:"end",description:"end of input"}),Ne(null,Ce,ye<t.length?t.charAt(ye):null,ye<t.length?_e(ye,ye+1):_e(ye,ye))}}}()},function(e,t,n){"use strict";t.default={locale:"en",pluralRuleFunction:function(e,t){var n=String(e).split("."),i=!n[1],o=Number(n[0])==e,a=o&&n[0].slice(-1),r=o&&n[0].slice(-2);return t?1==a&&11!=r?"one":2==a&&12!=r?"two":3==a&&13!=r?"few":"other":1==e&&i?"one":"other"}}},function(e,t){},function(e,t,n){"use strict";var i=n(117),o=n(120);i.default.__addLocaleData(o.default),i.default.defaultLocale="en",t.default=i.default},function(e,t,n){"use strict";var i=n(26),o=n(118),a=n(119);t.default=s;var r=["second","second-short","minute","minute-short","hour","hour-short","day","day-short","month","month-short","year","year-short"],l=["best fit","numeric"];function s(e,t){t=t||{},a.isArray(e)&&(e=e.concat()),a.defineProperty(this,"_locale",{value:this._resolveLocale(e)}),a.defineProperty(this,"_options",{value:{style:this._resolveStyle(t.style),units:this._isValidUnits(t.units)&&t.units}}),a.defineProperty(this,"_locales",{value:e}),a.defineProperty(this,"_fields",{value:this._findFields(this._locale)}),a.defineProperty(this,"_messages",{value:a.objCreate(null)});var n=this;this.format=function(e,t){return n._format(e,t)}}a.defineProperty(s,"__localeData__",{value:a.objCreate(null)}),a.defineProperty(s,"__addLocaleData",{value:function(e){if(!e||!e.locale)throw new Error("Locale data provided to IntlRelativeFormat is missing a `locale` property value");s.__localeData__[e.locale.toLowerCase()]=e,i.default.__addLocaleData(e)}}),a.defineProperty(s,"defaultLocale",{enumerable:!0,writable:!0,value:void 0}),a.defineProperty(s,"thresholds",{enumerable:!0,value:{second:45,"second-short":45,minute:45,"minute-short":45,hour:22,"hour-short":22,day:26,"day-short":26,month:11,"month-short":11}}),s.prototype.resolvedOptions=function(){return{locale:this._locale,style:this._options.style,units:this._options.units}},s.prototype._compileMessage=function(e){var t,n=this._locales,o=(this._locale,this._fields[e].relativeTime),a="",r="";for(t in o.future)o.future.hasOwnProperty(t)&&(a+=" "+t+" {"+o.future[t].replace("{0}","#")+"}");for(t in o.past)o.past.hasOwnProperty(t)&&(r+=" "+t+" {"+o.past[t].replace("{0}","#")+"}");var l="{when, select, future {{0, plural, "+a+"}}past {{0, plural, "+r+"}}}";return new i.default(l,n)},s.prototype._getMessage=function(e){var t=this._messages;return t[e]||(t[e]=this._compileMessage(e)),t[e]},s.prototype._getRelativeUnits=function(e,t){var n=this._fields[t];if(n.relative)return n.relative[e]},s.prototype._findFields=function(e){for(var t=s.__localeData__,n=t[e.toLowerCase()];n;){if(n.fields)return n.fields;n=n.parentLocale&&t[n.parentLocale.toLowerCase()]}throw new Error("Locale data added to IntlRelativeFormat is missing `fields` for :"+e)},s.prototype._format=function(e,t){var n=t&&void 0!==t.now?t.now:a.dateNow();if(void 0===e&&(e=n),!isFinite(n))throw new RangeError("The `now` option provided to IntlRelativeFormat#format() is not in valid range.");if(!isFinite(e))throw new RangeError("The date value provided to IntlRelativeFormat#format() is not in valid range.");var i=o.default(n,e),r=this._options.units||this._selectUnits(i),l=i[r];if("numeric"!==this._options.style){var s=this._getRelativeUnits(l,r);if(s)return s}return this._getMessage(r).format({0:Math.abs(l),when:l<0?"past":"future"})},s.prototype._isValidUnits=function(e){if(!e||a.arrIndexOf.call(r,e)>=0)return!0;if("string"==typeof e){var t=/s$/.test(e)&&e.substr(0,e.length-1);if(t&&a.arrIndexOf.call(r,t)>=0)throw new Error('"'+e+'" is not a valid IntlRelativeFormat `units` value, did you mean: '+t)}throw new Error('"'+e+'" is not a valid IntlRelativeFormat `units` value, it must be one of: "'+r.join('", "')+'"')},s.prototype._resolveLocale=function(e){"string"==typeof e&&(e=[e]),e=(e||[]).concat(s.defaultLocale);var t,n,i,o,a=s.__localeData__;for(t=0,n=e.length;t<n;t+=1)for(i=e[t].toLowerCase().split("-");i.length;){if(o=a[i.join("-")])return o.locale;i.pop()}var r=e.pop();throw new Error("No locale data has been added to IntlRelativeFormat for: "+e.join(", ")+", or the default locale: "+r)},s.prototype._resolveStyle=function(e){if(!e)return l[0];if(a.arrIndexOf.call(l,e)>=0)return e;throw new Error('"'+e+'" is not a valid IntlRelativeFormat `style` value, it must be one of: "'+l.join('", "')+'"')},s.prototype._selectUnits=function(e){var t,n,i,o=r.filter((function(e){return e.indexOf("-short")<1}));for(t=0,n=o.length;t<n&&(i=o[t],!(Math.abs(e[i])<s.thresholds[i]));t+=1);return i}},function(e,t,n){"use strict";var i=Math.round;t.default=function(e,t){var n=i((t=+t)-(e=+e)),o=i(n/1e3),a=i(o/60),r=i(a/60),l=i(r/24),s=i(l/7),d=400*l/146097,c=i(12*d),u=i(d);return{millisecond:n,second:o,"second-short":o,minute:a,"minute-short":a,hour:r,"hour-short":r,day:l,"day-short":l,week:s,"week-short":s,month:c,"month-short":c,year:u,"year-short":u}}},function(e,t,n){"use strict";var i=Object.prototype.hasOwnProperty,o=Object.prototype.toString,a=function(){try{return!!Object.defineProperty({},"a",{})}catch(e){return!1}}(),r=(!a&&Object.prototype.__defineGetter__,a?Object.defineProperty:function(e,t,n){"get"in n&&e.__defineGetter__?e.__defineGetter__(t,n.get):i.call(e,t)&&!("value"in n)||(e[t]=n.value)}),l=Object.create||function(e,t){var n,o;function a(){}for(o in a.prototype=e,n=new a,t)i.call(t,o)&&r(n,o,t[o]);return n},s=Array.prototype.indexOf||function(e,t){if(!this.length)return-1;for(var n=t||0,i=this.length;n<i;n++)if(this[n]===e)return n;return-1},d=Array.isArray||function(e){return"[object Array]"===o.call(e)},c=Date.now||function(){return(new Date).getTime()};t.defineProperty=r,t.objCreate=l,t.arrIndexOf=s,t.isArray=d,t.dateNow=c},function(e,t,n){"use strict";t.default={locale:"en",pluralRuleFunction:function(e,t){var n=String(e).split("."),i=!n[1],o=Number(n[0])==e,a=o&&n[0].slice(-1),r=o&&n[0].slice(-2);return t?1==a&&11!=r?"one":2==a&&12!=r?"two":3==a&&13!=r?"few":"other":1==e&&i?"one":"other"},fields:{year:{displayName:"year",relative:{0:"this year",1:"next year","-1":"last year"},relativeTime:{future:{one:"in {0} year",other:"in {0} years"},past:{one:"{0} year ago",other:"{0} years ago"}}},"year-short":{displayName:"yr.",relative:{0:"this yr.",1:"next yr.","-1":"last yr."},relativeTime:{future:{one:"in {0} yr.",other:"in {0} yr."},past:{one:"{0} yr. ago",other:"{0} yr. ago"}}},month:{displayName:"month",relative:{0:"this month",1:"next month","-1":"last month"},relativeTime:{future:{one:"in {0} month",other:"in {0} months"},past:{one:"{0} month ago",other:"{0} months ago"}}},"month-short":{displayName:"mo.",relative:{0:"this mo.",1:"next mo.","-1":"last mo."},relativeTime:{future:{one:"in {0} mo.",other:"in {0} mo."},past:{one:"{0} mo. ago",other:"{0} mo. ago"}}},day:{displayName:"day",relative:{0:"today",1:"tomorrow","-1":"yesterday"},relativeTime:{future:{one:"in {0} day",other:"in {0} days"},past:{one:"{0} day ago",other:"{0} days ago"}}},"day-short":{displayName:"day",relative:{0:"today",1:"tomorrow","-1":"yesterday"},relativeTime:{future:{one:"in {0} day",other:"in {0} days"},past:{one:"{0} day ago",other:"{0} days ago"}}},hour:{displayName:"hour",relative:{0:"this hour"},relativeTime:{future:{one:"in {0} hour",other:"in {0} hours"},past:{one:"{0} hour ago",other:"{0} hours ago"}}},"hour-short":{displayName:"hr.",relative:{0:"this hour"},relativeTime:{future:{one:"in {0} hr.",other:"in {0} hr."},past:{one:"{0} hr. ago",other:"{0} hr. ago"}}},minute:{displayName:"minute",relative:{0:"this minute"},relativeTime:{future:{one:"in {0} minute",other:"in {0} minutes"},past:{one:"{0} minute ago",other:"{0} minutes ago"}}},"minute-short":{displayName:"min.",relative:{0:"this minute"},relativeTime:{future:{one:"in {0} min.",other:"in {0} min."},past:{one:"{0} min. ago",other:"{0} min. ago"}}},second:{displayName:"second",relative:{0:"now"},relativeTime:{future:{one:"in {0} second",other:"in {0} seconds"},past:{one:"{0} second ago",other:"{0} seconds ago"}}},"second-short":{displayName:"sec.",relative:{0:"now"},relativeTime:{future:{one:"in {0} sec.",other:"in {0} sec."},past:{one:"{0} sec. ago",other:"{0} sec. ago"}}}}}},function(e,t){},function(e,t,n){"use strict";
/*!
 * Copyright 2016 The ANTLR Project. All rights reserved.
 * Licensed under the BSD-3-Clause license. See LICENSE file in the project root for license information.
 */var i=this&&this.__decorate||function(e,t,n,i){var o,a=arguments.length,r=a<3?t:null===i?i=Object.getOwnPropertyDescriptor(t,n):i;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)r=Reflect.decorate(e,t,n,i);else for(var l=e.length-1;l>=0;l--)(o=e[l])&&(r=(a<3?o(r):a>3?o(t,n,r):o(t,n))||r);return a>3&&r&&Object.defineProperty(t,n,r),r};Object.defineProperty(t,"__esModule",{value:!0});const o=n(12),a=n(0),r=n(19);class l{constructor(e){this.p=0,this.data=e,this.n=e.length}reset(){this.p=0}consume(){if(this.p>=this.n)throw o(this.LA(1)===r.IntStream.EOF),new Error("cannot consume EOF");this.p<this.n&&this.p++}LA(e){return 0===e?0:e<0&&(e++,this.p+e-1<0)||this.p+e-1>=this.n?r.IntStream.EOF:this.data.charCodeAt(this.p+e-1)}LT(e){return this.LA(e)}get index(){return this.p}get size(){return this.n}mark(){return-1}release(e){}seek(e){if(e<=this.p)this.p=e;else for(e=Math.min(e,this.n);this.p<e;)this.consume()}getText(e){let t=e.a,n=e.b;n>=this.n&&(n=this.n-1);let i=n-t+1;return t>=this.n?"":this.data.substr(t,i)}get sourceName(){return this.name?this.name:r.IntStream.UNKNOWN_SOURCE_NAME}toString(){return this.data}}i([a.Override],l.prototype,"consume",null),i([a.Override],l.prototype,"LA",null),i([a.Override],l.prototype,"index",null),i([a.Override],l.prototype,"size",null),i([a.Override],l.prototype,"mark",null),i([a.Override],l.prototype,"release",null),i([a.Override],l.prototype,"seek",null),i([a.Override],l.prototype,"getText",null),i([a.Override],l.prototype,"sourceName",null),i([a.Override],l.prototype,"toString",null),t.ANTLRInputStream=l},function(e,t){e.exports=function(e){return e&&"object"==typeof e&&"function"==typeof e.copy&&"function"==typeof e.fill&&"function"==typeof e.readUInt8}},function(e,t){"function"==typeof Object.create?e.exports=function(e,t){e.super_=t,e.prototype=Object.create(t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}})}:e.exports=function(e,t){e.super_=t;var n=function(){};n.prototype=t.prototype,e.prototype=new n,e.prototype.constructor=e}},function(e,t,n){"use strict";
/*!
 * Copyright 2016 The ANTLR Project. All rights reserved.
 * Licensed under the BSD-3-Clause license. See LICENSE file in the project root for license information.
 */var i=this&&this.__decorate||function(e,t,n,i){var o,a=arguments.length,r=a<3?t:null===i?i=Object.getOwnPropertyDescriptor(t,n):i;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)r=Reflect.decorate(e,t,n,i);else for(var l=e.length-1;l>=0;l--)(o=e[l])&&(r=(a<3?o(r):a>3?o(t,n,r):o(t,n))||r);return a>3&&r&&Object.defineProperty(t,n,r),r};Object.defineProperty(t,"__esModule",{value:!0});const o=n(0),a=n(5),r=n(15);class l{hashCode(e){return null==e?0:"string"==typeof e||"number"==typeof e?a.MurmurHash.hashCode([e]):r.ObjectEqualityComparator.INSTANCE.hashCode(e)}equals(e,t){return null==e?null==t:"string"==typeof e||"number"==typeof e?e===t:r.ObjectEqualityComparator.INSTANCE.equals(e,t)}}l.INSTANCE=new l,i([o.Override],l.prototype,"hashCode",null),i([o.Override],l.prototype,"equals",null),t.DefaultEqualityComparator=l},function(e,t,n){"use strict";
/*!
 * Copyright 2016 The ANTLR Project. All rights reserved.
 * Licensed under the BSD-3-Clause license. See LICENSE file in the project root for license information.
 */var i=this&&this.__decorate||function(e,t,n,i){var o,a=arguments.length,r=a<3?t:null===i?i=Object.getOwnPropertyDescriptor(t,n):i;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)r=Reflect.decorate(e,t,n,i);else for(var l=e.length-1;l>=0;l--)(o=e[l])&&(r=(a<3?o(r):a>3?o(t,n,r):o(t,n))||r);return a>3&&r&&Object.defineProperty(t,n,r),r},o=this&&this.__param||function(e,t){return function(n,i){t(n,i,e)}};Object.defineProperty(t,"__esModule",{value:!0});const a=n(84),r=n(0),l=n(16);let s=class extends a.DFASerializer{constructor(e){super(e,l.VocabularyImpl.EMPTY_VOCABULARY)}getEdgeLabel(e){return"'"+String.fromCodePoint(e)+"'"}};i([r.Override,r.NotNull],s.prototype,"getEdgeLabel",null),s=i([o(0,r.NotNull)],s),t.LexerDFASerializer=s},function(e,t,n){"use strict";
/*!
 * Copyright 2016 The ANTLR Project. All rights reserved.
 * Licensed under the BSD-3-Clause license. See LICENSE file in the project root for license information.
 */var i=this&&this.__decorate||function(e,t,n,i){var o,a=arguments.length,r=a<3?t:null===i?i=Object.getOwnPropertyDescriptor(t,n):i;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)r=Reflect.decorate(e,t,n,i);else for(var l=e.length-1;l>=0;l--)(o=e[l])&&(r=(a<3?o(r):a>3?o(t,n,r):o(t,n))||r);return a>3&&r&&Object.defineProperty(t,n,r),r},o=this&&this.__param||function(e,t){return function(n,i){t(n,i,e)}};Object.defineProperty(t,"__esModule",{value:!0});const a=n(50),r=n(21),l=n(44),s=n(22),d=n(23),c=n(0),u=n(57),m=n(15),h=n(14),p=n(38),T=n(59),b=n(3),g=n(88);let x=class e{constructor(e){this.atn=e}getDecisionLookahead(t){if(null==t)return;let n=new Array(t.numberOfTransitions);for(let i=0;i<t.numberOfTransitions;i++){let o=new d.IntervalSet;n[i]=o;let a=new r.Array2DHashSet(m.ObjectEqualityComparator.INSTANCE),l=!1;this._LOOK(t.transition(i).target,void 0,h.PredictionContext.EMPTY_LOCAL,o,a,new s.BitSet,l,!1),(0===o.size||o.contains(e.HIT_PRED))&&(o=void 0,n[i]=o)}return n}LOOK(e,t,n){if(void 0===n){if(null==e.atn)throw new Error("Illegal state");n=e.atn.ruleToStopState[e.ruleIndex]}else null===n&&(n=void 0);let i=new d.IntervalSet;return this._LOOK(e,n,t,i,new r.Array2DHashSet,new s.BitSet,!0,!0),i}_LOOK(t,n,i,o,r,s,c,m){let x=l.ATNConfig.create(t,0,i);if(!r.add(x))return;if(t===n){if(h.PredictionContext.isEmptyLocal(i))return void o.add(b.Token.EPSILON);if(i.isEmpty)return void(m&&o.add(b.Token.EOF))}if(t instanceof p.RuleStopState){if(i.isEmpty&&!h.PredictionContext.isEmptyLocal(i))return void(m&&o.add(b.Token.EOF));let e=s.get(t.ruleIndex);try{s.clear(t.ruleIndex);for(let e=0;e<i.size;e++){if(i.getReturnState(e)===h.PredictionContext.EMPTY_FULL_STATE_KEY)continue;let t=this.atn.states[i.getReturnState(e)];this._LOOK(t,n,i.getParent(e),o,r,s,c,m)}}finally{e&&s.set(t.ruleIndex)}}let f=t.numberOfTransitions;for(let l=0;l<f;l++){let h=t.transition(l);if(h instanceof T.RuleTransition){if(s.get(h.ruleIndex))continue;let e=i.getChild(h.followState.stateNumber);try{s.set(h.ruleIndex),this._LOOK(h.target,n,e,o,r,s,c,m)}finally{s.clear(h.ruleIndex)}}else if(h instanceof a.AbstractPredicateTransition)c?this._LOOK(h.target,n,i,o,r,s,c,m):o.add(e.HIT_PRED);else if(h.isEpsilon)this._LOOK(h.target,n,i,o,r,s,c,m);else if(h instanceof g.WildcardTransition)o.addAll(d.IntervalSet.of(b.Token.MIN_USER_TOKEN_TYPE,this.atn.maxTokenType));else{let e=h.label;null!=e&&(h instanceof u.NotSetTransition&&(e=e.complement(d.IntervalSet.of(b.Token.MIN_USER_TOKEN_TYPE,this.atn.maxTokenType))),o.addAll(e))}}}};x.HIT_PRED=b.Token.INVALID_TYPE,i([c.NotNull],x.prototype,"atn",void 0),i([c.NotNull,o(0,c.NotNull),o(1,c.NotNull)],x.prototype,"LOOK",null),i([o(0,c.NotNull),o(2,c.NotNull),o(3,c.NotNull),o(4,c.NotNull),o(5,c.NotNull)],x.prototype,"_LOOK",null),x=i([o(0,c.NotNull)],x),t.LL1Analyzer=x},function(e,t,n){"use strict";
/*!
 * Copyright 2016 The ANTLR Project. All rights reserved.
 * Licensed under the BSD-3-Clause license. See LICENSE file in the project root for license information.
 */var i=this&&this.__decorate||function(e,t,n,i){var o,a=arguments.length,r=a<3?t:null===i?i=Object.getOwnPropertyDescriptor(t,n):i;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)r=Reflect.decorate(e,t,n,i);else for(var l=e.length-1;l>=0;l--)(o=e[l])&&(r=(a<3?o(r):a>3?o(t,n,r):o(t,n))||r);return a>3&&r&&Object.defineProperty(t,n,r),r},o=this&&this.__param||function(e,t){return function(n,i){t(n,i,e)}};Object.defineProperty(t,"__esModule",{value:!0});const a=n(42),r=n(129),l=n(5),s=n(0);let d=class e{constructor(e){this._lexerActions=e;let t=l.MurmurHash.initialize();for(let n of e)t=l.MurmurHash.update(t,n);this.cachedHashCode=l.MurmurHash.finish(t,e.length)}static append(t,n){if(!t)return new e([n]);let i=t._lexerActions.slice(0);return i.push(n),new e(i)}fixOffsetBeforeMatch(t){let n;for(let e=0;e<this._lexerActions.length;e++)!this._lexerActions[e].isPositionDependent||this._lexerActions[e]instanceof r.LexerIndexedCustomAction||(n||(n=this._lexerActions.slice(0)),n[e]=new r.LexerIndexedCustomAction(t,this._lexerActions[e]));return n?new e(n):this}get lexerActions(){return this._lexerActions}execute(e,t,n){let i=!1,o=t.index;try{for(let a of this._lexerActions){if(a instanceof r.LexerIndexedCustomAction){let e=a.offset;t.seek(n+e),a=a.action,i=n+e!==o}else a.isPositionDependent&&(t.seek(o),i=!1);a.execute(e)}}finally{i&&t.seek(o)}}hashCode(){return this.cachedHashCode}equals(t){return t===this||t instanceof e&&(this.cachedHashCode===t.cachedHashCode&&a.ArrayEqualityComparator.INSTANCE.equals(this._lexerActions,t._lexerActions))}};i([s.NotNull],d.prototype,"_lexerActions",void 0),i([s.NotNull],d.prototype,"lexerActions",null),i([o(0,s.NotNull)],d.prototype,"execute",null),i([s.Override],d.prototype,"hashCode",null),i([s.Override],d.prototype,"equals",null),i([s.NotNull,o(1,s.NotNull)],d,"append",null),d=i([o(0,s.NotNull)],d),t.LexerActionExecutor=d},function(e,t,n){"use strict";
/*!
 * Copyright 2016 The ANTLR Project. All rights reserved.
 * Licensed under the BSD-3-Clause license. See LICENSE file in the project root for license information.
 */var i=this&&this.__decorate||function(e,t,n,i){var o,a=arguments.length,r=a<3?t:null===i?i=Object.getOwnPropertyDescriptor(t,n):i;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)r=Reflect.decorate(e,t,n,i);else for(var l=e.length-1;l>=0;l--)(o=e[l])&&(r=(a<3?o(r):a>3?o(t,n,r):o(t,n))||r);return a>3&&r&&Object.defineProperty(t,n,r),r},o=this&&this.__param||function(e,t){return function(n,i){t(n,i,e)}};Object.defineProperty(t,"__esModule",{value:!0});const a=n(5),r=n(0);let l=class e{constructor(e,t){this._offset=e,this._action=t}get offset(){return this._offset}get action(){return this._action}get actionType(){return this._action.actionType}get isPositionDependent(){return!0}execute(e){this._action.execute(e)}hashCode(){let e=a.MurmurHash.initialize();return e=a.MurmurHash.update(e,this._offset),e=a.MurmurHash.update(e,this._action),a.MurmurHash.finish(e,2)}equals(t){return t===this||t instanceof e&&(this._offset===t._offset&&this._action.equals(t._action))}};i([r.NotNull],l.prototype,"action",null),i([r.Override],l.prototype,"actionType",null),i([r.Override],l.prototype,"isPositionDependent",null),i([r.Override],l.prototype,"execute",null),i([r.Override],l.prototype,"hashCode",null),i([r.Override],l.prototype,"equals",null),l=i([o(1,r.NotNull)],l),t.LexerIndexedCustomAction=l},function(e,t,n){"use strict";
/*!
 * Copyright 2016 The ANTLR Project. All rights reserved.
 * Licensed under the BSD-3-Clause license. See LICENSE file in the project root for license information.
 */var i=this&&this.__decorate||function(e,t,n,i){var o,a=arguments.length,r=a<3?t:null===i?i=Object.getOwnPropertyDescriptor(t,n):i;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)r=Reflect.decorate(e,t,n,i);else for(var l=e.length-1;l>=0;l--)(o=e[l])&&(r=(a<3?o(r):a>3?o(t,n,r):o(t,n))||r);return a>3&&r&&Object.defineProperty(t,n,r),r};Object.defineProperty(t,"__esModule",{value:!0});const o=n(36),a=n(0);class r extends o.ATNConfigSet{constructor(e,t){null!=e&&null!=t?super(e,t):super()}clone(e){let t=new r(this,e);return!e&&this.isReadOnly&&t.addAll(this),t}getKey(e){return{state:0,alt:e.hashCode()}}canMerge(e,t,n){return e.equals(n)}}i([a.Override],r.prototype,"clone",null),i([a.Override],r.prototype,"getKey",null),i([a.Override],r.prototype,"canMerge",null),t.OrderedATNConfigSet=r},function(e,t,n){"use strict";
/*!
 * Copyright 2016 The ANTLR Project. All rights reserved.
 * Licensed under the BSD-3-Clause license. See LICENSE file in the project root for license information.
 */var i=this&&this.__decorate||function(e,t,n,i){var o,a=arguments.length,r=a<3?t:null===i?i=Object.getOwnPropertyDescriptor(t,n):i;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)r=Reflect.decorate(e,t,n,i);else for(var l=e.length-1;l>=0;l--)(o=e[l])&&(r=(a<3?o(r):a>3?o(t,n,r):o(t,n))||r);return a>3&&r&&Object.defineProperty(t,n,r),r};Object.defineProperty(t,"__esModule",{value:!0});const o=n(8),a=n(48),r=n(0);class l extends a.BlockStartState{get stateType(){return o.ATNStateType.BLOCK_START}}i([r.Override],l.prototype,"stateType",null),t.BasicBlockStartState=l},function(e,t,n){"use strict";
/*!
 * Copyright 2016 The ANTLR Project. All rights reserved.
 * Licensed under the BSD-3-Clause license. See LICENSE file in the project root for license information.
 */var i=this&&this.__decorate||function(e,t,n,i){var o,a=arguments.length,r=a<3?t:null===i?i=Object.getOwnPropertyDescriptor(t,n):i;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)r=Reflect.decorate(e,t,n,i);else for(var l=e.length-1;l>=0;l--)(o=e[l])&&(r=(a<3?o(r):a>3?o(t,n,r):o(t,n))||r);return a>3&&r&&Object.defineProperty(t,n,r),r};Object.defineProperty(t,"__esModule",{value:!0});const o=n(17),a=n(8),r=n(0);class l extends o.ATNState{get stateType(){return a.ATNStateType.BLOCK_END}}i([r.Override],l.prototype,"stateType",null),t.BlockEndState=l},function(e,t,n){"use strict";
/*!
 * Copyright 2016 The ANTLR Project. All rights reserved.
 * Licensed under the BSD-3-Clause license. See LICENSE file in the project root for license information.
 */var i=this&&this.__decorate||function(e,t,n,i){var o,a=arguments.length,r=a<3?t:null===i?i=Object.getOwnPropertyDescriptor(t,n):i;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)r=Reflect.decorate(e,t,n,i);else for(var l=e.length-1;l>=0;l--)(o=e[l])&&(r=(a<3?o(r):a>3?o(t,n,r):o(t,n))||r);return a>3&&r&&Object.defineProperty(t,n,r),r},o=this&&this.__param||function(e,t){return function(n,i){t(n,i,e)}};Object.defineProperty(t,"__esModule",{value:!0});const a=n(0),r=n(20);let l=class extends r.Transition{constructor(e,t=-1){super(e),this._outermostPrecedenceReturn=t}get outermostPrecedenceReturn(){return this._outermostPrecedenceReturn}get serializationType(){return 1}get isEpsilon(){return!0}matches(e,t,n){return!1}toString(){return"epsilon"}};i([a.Override],l.prototype,"serializationType",null),i([a.Override],l.prototype,"isEpsilon",null),i([a.Override],l.prototype,"matches",null),i([a.Override,a.NotNull],l.prototype,"toString",null),l=i([o(0,a.NotNull)],l),t.EpsilonTransition=l},function(e,t,n){"use strict";
/*!
 * Copyright 2016 The ANTLR Project. All rights reserved.
 * Licensed under the BSD-3-Clause license. See LICENSE file in the project root for license information.
 */var i=this&&this.__decorate||function(e,t,n,i){var o,a=arguments.length,r=a<3?t:null===i?i=Object.getOwnPropertyDescriptor(t,n):i;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)r=Reflect.decorate(e,t,n,i);else for(var l=e.length-1;l>=0;l--)(o=e[l])&&(r=(a<3?o(r):a>3?o(t,n,r):o(t,n))||r);return a>3&&r&&Object.defineProperty(t,n,r),r},o=this&&this.__param||function(e,t){return function(n,i){t(n,i,e)}};Object.defineProperty(t,"__esModule",{value:!0});const a=n(5),r=n(0);class l{constructor(e){this._channel=e}get channel(){return this._channel}get actionType(){return 0}get isPositionDependent(){return!1}execute(e){e.channel=this._channel}hashCode(){let e=a.MurmurHash.initialize();return e=a.MurmurHash.update(e,this.actionType),e=a.MurmurHash.update(e,this._channel),a.MurmurHash.finish(e,2)}equals(e){return e===this||e instanceof l&&this._channel===e._channel}toString(){return`channel(${this._channel})`}}i([r.Override],l.prototype,"actionType",null),i([r.Override],l.prototype,"isPositionDependent",null),i([r.Override,o(0,r.NotNull)],l.prototype,"execute",null),i([r.Override],l.prototype,"hashCode",null),i([r.Override],l.prototype,"equals",null),i([r.Override],l.prototype,"toString",null),t.LexerChannelAction=l},function(e,t,n){"use strict";
/*!
 * Copyright 2016 The ANTLR Project. All rights reserved.
 * Licensed under the BSD-3-Clause license. See LICENSE file in the project root for license information.
 */var i=this&&this.__decorate||function(e,t,n,i){var o,a=arguments.length,r=a<3?t:null===i?i=Object.getOwnPropertyDescriptor(t,n):i;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)r=Reflect.decorate(e,t,n,i);else for(var l=e.length-1;l>=0;l--)(o=e[l])&&(r=(a<3?o(r):a>3?o(t,n,r):o(t,n))||r);return a>3&&r&&Object.defineProperty(t,n,r),r},o=this&&this.__param||function(e,t){return function(n,i){t(n,i,e)}};Object.defineProperty(t,"__esModule",{value:!0});const a=n(5),r=n(0);class l{constructor(e,t){this._ruleIndex=e,this._actionIndex=t}get ruleIndex(){return this._ruleIndex}get actionIndex(){return this._actionIndex}get actionType(){return 1}get isPositionDependent(){return!0}execute(e){e.action(void 0,this._ruleIndex,this._actionIndex)}hashCode(){let e=a.MurmurHash.initialize();return e=a.MurmurHash.update(e,this.actionType),e=a.MurmurHash.update(e,this._ruleIndex),e=a.MurmurHash.update(e,this._actionIndex),a.MurmurHash.finish(e,3)}equals(e){return e===this||e instanceof l&&(this._ruleIndex===e._ruleIndex&&this._actionIndex===e._actionIndex)}}i([r.Override],l.prototype,"actionType",null),i([r.Override],l.prototype,"isPositionDependent",null),i([r.Override,o(0,r.NotNull)],l.prototype,"execute",null),i([r.Override],l.prototype,"hashCode",null),i([r.Override],l.prototype,"equals",null),t.LexerCustomAction=l},function(e,t,n){"use strict";
/*!
 * Copyright 2016 The ANTLR Project. All rights reserved.
 * Licensed under the BSD-3-Clause license. See LICENSE file in the project root for license information.
 */var i=this&&this.__decorate||function(e,t,n,i){var o,a=arguments.length,r=a<3?t:null===i?i=Object.getOwnPropertyDescriptor(t,n):i;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)r=Reflect.decorate(e,t,n,i);else for(var l=e.length-1;l>=0;l--)(o=e[l])&&(r=(a<3?o(r):a>3?o(t,n,r):o(t,n))||r);return a>3&&r&&Object.defineProperty(t,n,r),r},o=this&&this.__param||function(e,t){return function(n,i){t(n,i,e)}};Object.defineProperty(t,"__esModule",{value:!0});const a=n(5),r=n(0);class l{constructor(e){this._mode=e}get mode(){return this._mode}get actionType(){return 2}get isPositionDependent(){return!1}execute(e){e.mode(this._mode)}hashCode(){let e=a.MurmurHash.initialize();return e=a.MurmurHash.update(e,this.actionType),e=a.MurmurHash.update(e,this._mode),a.MurmurHash.finish(e,2)}equals(e){return e===this||e instanceof l&&this._mode===e._mode}toString(){return`mode(${this._mode})`}}i([r.Override],l.prototype,"actionType",null),i([r.Override],l.prototype,"isPositionDependent",null),i([r.Override,o(0,r.NotNull)],l.prototype,"execute",null),i([r.Override],l.prototype,"hashCode",null),i([r.Override],l.prototype,"equals",null),i([r.Override],l.prototype,"toString",null),t.LexerModeAction=l},function(e,t,n){"use strict";
/*!
 * Copyright 2016 The ANTLR Project. All rights reserved.
 * Licensed under the BSD-3-Clause license. See LICENSE file in the project root for license information.
 */var i=this&&this.__decorate||function(e,t,n,i){var o,a=arguments.length,r=a<3?t:null===i?i=Object.getOwnPropertyDescriptor(t,n):i;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)r=Reflect.decorate(e,t,n,i);else for(var l=e.length-1;l>=0;l--)(o=e[l])&&(r=(a<3?o(r):a>3?o(t,n,r):o(t,n))||r);return a>3&&r&&Object.defineProperty(t,n,r),r},o=this&&this.__param||function(e,t){return function(n,i){t(n,i,e)}};Object.defineProperty(t,"__esModule",{value:!0});const a=n(5),r=n(0);class l{constructor(){}get actionType(){return 3}get isPositionDependent(){return!1}execute(e){e.more()}hashCode(){let e=a.MurmurHash.initialize();return e=a.MurmurHash.update(e,this.actionType),a.MurmurHash.finish(e,1)}equals(e){return e===this}toString(){return"more"}}i([r.Override],l.prototype,"actionType",null),i([r.Override],l.prototype,"isPositionDependent",null),i([r.Override,o(0,r.NotNull)],l.prototype,"execute",null),i([r.Override],l.prototype,"hashCode",null),i([r.Override],l.prototype,"equals",null),i([r.Override],l.prototype,"toString",null),t.LexerMoreAction=l,function(e){e.INSTANCE=new e}(l=t.LexerMoreAction||(t.LexerMoreAction={}))},function(e,t,n){"use strict";
/*!
 * Copyright 2016 The ANTLR Project. All rights reserved.
 * Licensed under the BSD-3-Clause license. See LICENSE file in the project root for license information.
 */var i=this&&this.__decorate||function(e,t,n,i){var o,a=arguments.length,r=a<3?t:null===i?i=Object.getOwnPropertyDescriptor(t,n):i;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)r=Reflect.decorate(e,t,n,i);else for(var l=e.length-1;l>=0;l--)(o=e[l])&&(r=(a<3?o(r):a>3?o(t,n,r):o(t,n))||r);return a>3&&r&&Object.defineProperty(t,n,r),r},o=this&&this.__param||function(e,t){return function(n,i){t(n,i,e)}};Object.defineProperty(t,"__esModule",{value:!0});const a=n(5),r=n(0);class l{constructor(){}get actionType(){return 4}get isPositionDependent(){return!1}execute(e){e.popMode()}hashCode(){let e=a.MurmurHash.initialize();return e=a.MurmurHash.update(e,this.actionType),a.MurmurHash.finish(e,1)}equals(e){return e===this}toString(){return"popMode"}}i([r.Override],l.prototype,"actionType",null),i([r.Override],l.prototype,"isPositionDependent",null),i([r.Override,o(0,r.NotNull)],l.prototype,"execute",null),i([r.Override],l.prototype,"hashCode",null),i([r.Override],l.prototype,"equals",null),i([r.Override],l.prototype,"toString",null),t.LexerPopModeAction=l,function(e){e.INSTANCE=new e}(l=t.LexerPopModeAction||(t.LexerPopModeAction={}))},function(e,t,n){"use strict";
/*!
 * Copyright 2016 The ANTLR Project. All rights reserved.
 * Licensed under the BSD-3-Clause license. See LICENSE file in the project root for license information.
 */var i=this&&this.__decorate||function(e,t,n,i){var o,a=arguments.length,r=a<3?t:null===i?i=Object.getOwnPropertyDescriptor(t,n):i;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)r=Reflect.decorate(e,t,n,i);else for(var l=e.length-1;l>=0;l--)(o=e[l])&&(r=(a<3?o(r):a>3?o(t,n,r):o(t,n))||r);return a>3&&r&&Object.defineProperty(t,n,r),r},o=this&&this.__param||function(e,t){return function(n,i){t(n,i,e)}};Object.defineProperty(t,"__esModule",{value:!0});const a=n(5),r=n(0);class l{constructor(e){this._mode=e}get mode(){return this._mode}get actionType(){return 5}get isPositionDependent(){return!1}execute(e){e.pushMode(this._mode)}hashCode(){let e=a.MurmurHash.initialize();return e=a.MurmurHash.update(e,this.actionType),e=a.MurmurHash.update(e,this._mode),a.MurmurHash.finish(e,2)}equals(e){return e===this||e instanceof l&&this._mode===e._mode}toString(){return`pushMode(${this._mode})`}}i([r.Override],l.prototype,"actionType",null),i([r.Override],l.prototype,"isPositionDependent",null),i([r.Override,o(0,r.NotNull)],l.prototype,"execute",null),i([r.Override],l.prototype,"hashCode",null),i([r.Override],l.prototype,"equals",null),i([r.Override],l.prototype,"toString",null),t.LexerPushModeAction=l},function(e,t,n){"use strict";
/*!
 * Copyright 2016 The ANTLR Project. All rights reserved.
 * Licensed under the BSD-3-Clause license. See LICENSE file in the project root for license information.
 */var i=this&&this.__decorate||function(e,t,n,i){var o,a=arguments.length,r=a<3?t:null===i?i=Object.getOwnPropertyDescriptor(t,n):i;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)r=Reflect.decorate(e,t,n,i);else for(var l=e.length-1;l>=0;l--)(o=e[l])&&(r=(a<3?o(r):a>3?o(t,n,r):o(t,n))||r);return a>3&&r&&Object.defineProperty(t,n,r),r},o=this&&this.__param||function(e,t){return function(n,i){t(n,i,e)}};Object.defineProperty(t,"__esModule",{value:!0});const a=n(5),r=n(0);class l{constructor(){}get actionType(){return 6}get isPositionDependent(){return!1}execute(e){e.skip()}hashCode(){let e=a.MurmurHash.initialize();return e=a.MurmurHash.update(e,this.actionType),a.MurmurHash.finish(e,1)}equals(e){return e===this}toString(){return"skip"}}i([r.Override],l.prototype,"actionType",null),i([r.Override],l.prototype,"isPositionDependent",null),i([r.Override,o(0,r.NotNull)],l.prototype,"execute",null),i([r.Override],l.prototype,"hashCode",null),i([r.Override],l.prototype,"equals",null),i([r.Override],l.prototype,"toString",null),t.LexerSkipAction=l,function(e){e.INSTANCE=new e}(l=t.LexerSkipAction||(t.LexerSkipAction={}))},function(e,t,n){"use strict";
/*!
 * Copyright 2016 The ANTLR Project. All rights reserved.
 * Licensed under the BSD-3-Clause license. See LICENSE file in the project root for license information.
 */var i=this&&this.__decorate||function(e,t,n,i){var o,a=arguments.length,r=a<3?t:null===i?i=Object.getOwnPropertyDescriptor(t,n):i;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)r=Reflect.decorate(e,t,n,i);else for(var l=e.length-1;l>=0;l--)(o=e[l])&&(r=(a<3?o(r):a>3?o(t,n,r):o(t,n))||r);return a>3&&r&&Object.defineProperty(t,n,r),r},o=this&&this.__param||function(e,t){return function(n,i){t(n,i,e)}};Object.defineProperty(t,"__esModule",{value:!0});const a=n(5),r=n(0);class l{constructor(e){this._type=e}get type(){return this._type}get actionType(){return 7}get isPositionDependent(){return!1}execute(e){e.type=this._type}hashCode(){let e=a.MurmurHash.initialize();return e=a.MurmurHash.update(e,this.actionType),e=a.MurmurHash.update(e,this._type),a.MurmurHash.finish(e,2)}equals(e){return e===this||e instanceof l&&this._type===e._type}toString(){return`type(${this._type})`}}i([r.Override],l.prototype,"actionType",null),i([r.Override],l.prototype,"isPositionDependent",null),i([r.Override,o(0,r.NotNull)],l.prototype,"execute",null),i([r.Override],l.prototype,"hashCode",null),i([r.Override],l.prototype,"equals",null),i([r.Override],l.prototype,"toString",null),t.LexerTypeAction=l},function(e,t,n){"use strict";
/*!
 * Copyright 2016 The ANTLR Project. All rights reserved.
 * Licensed under the BSD-3-Clause license. See LICENSE file in the project root for license information.
 */var i=this&&this.__decorate||function(e,t,n,i){var o,a=arguments.length,r=a<3?t:null===i?i=Object.getOwnPropertyDescriptor(t,n):i;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)r=Reflect.decorate(e,t,n,i);else for(var l=e.length-1;l>=0;l--)(o=e[l])&&(r=(a<3?o(r):a>3?o(t,n,r):o(t,n))||r);return a>3&&r&&Object.defineProperty(t,n,r),r};Object.defineProperty(t,"__esModule",{value:!0});const o=n(0),a=n(11);class r{constructor(e,t){this._conflictedAlts=e,this.exact=t}get conflictedAlts(){return this._conflictedAlts}get isExact(){return this.exact}equals(e){return e===this||e instanceof r&&(this.isExact===e.isExact&&a.equals(this.conflictedAlts,e.conflictedAlts))}hashCode(){return this.conflictedAlts.hashCode()}}i([o.Override],r.prototype,"equals",null),i([o.Override],r.prototype,"hashCode",null),t.ConflictInfo=r},function(e,t,n){"use strict";
/*!
 * Copyright 2016 The ANTLR Project. All rights reserved.
 * Licensed under the BSD-3-Clause license. See LICENSE file in the project root for license information.
 */var i=this&&this.__decorate||function(e,t,n,i){var o,a=arguments.length,r=a<3?t:null===i?i=Object.getOwnPropertyDescriptor(t,n):i;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)r=Reflect.decorate(e,t,n,i);else for(var l=e.length-1;l>=0;l--)(o=e[l])&&(r=(a<3?o(r):a>3?o(t,n,r):o(t,n))||r);return a>3&&r&&Object.defineProperty(t,n,r),r};Object.defineProperty(t,"__esModule",{value:!0});const o=n(28),a=n(5),r=n(0),l=n(38);!function(e){e[e.SLL=0]="SLL",e[e.LL=1]="LL",e[e.LL_EXACT_AMBIG_DETECTION=2]="LL_EXACT_AMBIG_DETECTION"}(t.PredictionMode||(t.PredictionMode={})),function(e){o.Array2DHashMap;class t{AltAndContextConfigEqualityComparator(){}hashCode(e){let t=a.MurmurHash.initialize(7);return t=a.MurmurHash.update(t,e.state.stateNumber),t=a.MurmurHash.update(t,e.context),t=a.MurmurHash.finish(t,2),t}equals(e,t){return e===t||null!=e&&null!=t&&(e.state.stateNumber===t.state.stateNumber&&e.context.equals(t.context))}}t.INSTANCE=new t,i([r.Override],t.prototype,"hashCode",null),i([r.Override],t.prototype,"equals",null),e.hasConfigInRuleStopState=function(e){for(let t of e)if(t.state instanceof l.RuleStopState)return!0;return!1},e.allConfigsInRuleStopStates=function(e){for(let t of e)if(!(t.state instanceof l.RuleStopState))return!1;return!0}}(t.PredictionMode||(t.PredictionMode={}))},function(e,t,n){"use strict";
/*!
 * Copyright 2016 The ANTLR Project. All rights reserved.
 * Licensed under the BSD-3-Clause license. See LICENSE file in the project root for license information.
 */var i=this&&this.__decorate||function(e,t,n,i){var o,a=arguments.length,r=a<3?t:null===i?i=Object.getOwnPropertyDescriptor(t,n):i;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)r=Reflect.decorate(e,t,n,i);else for(var l=e.length-1;l>=0;l--)(o=e[l])&&(r=(a<3?o(r):a>3?o(t,n,r):o(t,n))||r);return a>3&&r&&Object.defineProperty(t,n,r),r};Object.defineProperty(t,"__esModule",{value:!0});const o=n(8),a=n(48),r=n(0);class l extends a.BlockStartState{get stateType(){return o.ATNStateType.PLUS_BLOCK_START}}i([r.Override],l.prototype,"stateType",null),t.PlusBlockStartState=l},function(e,t,n){"use strict";
/*!
 * Copyright 2016 The ANTLR Project. All rights reserved.
 * Licensed under the BSD-3-Clause license. See LICENSE file in the project root for license information.
 */var i=this&&this.__decorate||function(e,t,n,i){var o,a=arguments.length,r=a<3?t:null===i?i=Object.getOwnPropertyDescriptor(t,n):i;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)r=Reflect.decorate(e,t,n,i);else for(var l=e.length-1;l>=0;l--)(o=e[l])&&(r=(a<3?o(r):a>3?o(t,n,r):o(t,n))||r);return a>3&&r&&Object.defineProperty(t,n,r),r};Object.defineProperty(t,"__esModule",{value:!0});const o=n(8),a=n(24),r=n(0);class l extends a.DecisionState{get stateType(){return o.ATNStateType.PLUS_LOOP_BACK}}i([r.Override],l.prototype,"stateType",null),t.PlusLoopbackState=l},function(e,t,n){"use strict";
/*!
 * Copyright 2016 The ANTLR Project. All rights reserved.
 * Licensed under the BSD-3-Clause license. See LICENSE file in the project root for license information.
 */var i=this&&this.__decorate||function(e,t,n,i){var o,a=arguments.length,r=a<3?t:null===i?i=Object.getOwnPropertyDescriptor(t,n):i;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)r=Reflect.decorate(e,t,n,i);else for(var l=e.length-1;l>=0;l--)(o=e[l])&&(r=(a<3?o(r):a>3?o(t,n,r):o(t,n))||r);return a>3&&r&&Object.defineProperty(t,n,r),r},o=this&&this.__param||function(e,t){return function(n,i){t(n,i,e)}};Object.defineProperty(t,"__esModule",{value:!0});const a=n(50),r=n(0),l=n(27);let s=class extends a.AbstractPredicateTransition{constructor(e,t){super(e),this.precedence=t}get serializationType(){return 10}get isEpsilon(){return!0}matches(e,t,n){return!1}get predicate(){return new l.SemanticContext.PrecedencePredicate(this.precedence)}toString(){return this.precedence+" >= _p"}};i([r.Override],s.prototype,"serializationType",null),i([r.Override],s.prototype,"isEpsilon",null),i([r.Override],s.prototype,"matches",null),i([r.Override],s.prototype,"toString",null),s=i([o(0,r.NotNull)],s),t.PrecedencePredicateTransition=s},function(e,t,n){"use strict";
/*!
 * Copyright 2016 The ANTLR Project. All rights reserved.
 * Licensed under the BSD-3-Clause license. See LICENSE file in the project root for license information.
 */var i=this&&this.__decorate||function(e,t,n,i){var o,a=arguments.length,r=a<3?t:null===i?i=Object.getOwnPropertyDescriptor(t,n):i;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)r=Reflect.decorate(e,t,n,i);else for(var l=e.length-1;l>=0;l--)(o=e[l])&&(r=(a<3?o(r):a>3?o(t,n,r):o(t,n))||r);return a>3&&r&&Object.defineProperty(t,n,r),r},o=this&&this.__param||function(e,t){return function(n,i){t(n,i,e)}};Object.defineProperty(t,"__esModule",{value:!0});const a=n(23),r=n(0),l=n(20);let s=class extends l.Transition{constructor(e,t,n){super(e),this.from=t,this.to=n}get serializationType(){return 2}get label(){return a.IntervalSet.of(this.from,this.to)}matches(e,t,n){return e>=this.from&&e<=this.to}toString(){return"'"+String.fromCodePoint(this.from)+"'..'"+String.fromCodePoint(this.to)+"'"}};i([r.Override],s.prototype,"serializationType",null),i([r.Override,r.NotNull],s.prototype,"label",null),i([r.Override],s.prototype,"matches",null),i([r.Override,r.NotNull],s.prototype,"toString",null),s=i([o(0,r.NotNull)],s),t.RangeTransition=s},function(e,t,n){"use strict";
/*!
 * Copyright 2016 The ANTLR Project. All rights reserved.
 * Licensed under the BSD-3-Clause license. See LICENSE file in the project root for license information.
 */var i=this&&this.__decorate||function(e,t,n,i){var o,a=arguments.length,r=a<3?t:null===i?i=Object.getOwnPropertyDescriptor(t,n):i;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)r=Reflect.decorate(e,t,n,i);else for(var l=e.length-1;l>=0;l--)(o=e[l])&&(r=(a<3?o(r):a>3?o(t,n,r):o(t,n))||r);return a>3&&r&&Object.defineProperty(t,n,r),r};Object.defineProperty(t,"__esModule",{value:!0});const o=n(17),a=n(8),r=n(0);class l extends o.ATNState{constructor(){super(...arguments),this.isPrecedenceRule=!1,this.leftFactored=!1}get stateType(){return a.ATNStateType.RULE_START}}i([r.Override],l.prototype,"stateType",null),t.RuleStartState=l},function(e,t,n){"use strict";
/*!
 * Copyright 2016 The ANTLR Project. All rights reserved.
 * Licensed under the BSD-3-Clause license. See LICENSE file in the project root for license information.
 */var i=this&&this.__decorate||function(e,t,n,i){var o,a=arguments.length,r=a<3?t:null===i?i=Object.getOwnPropertyDescriptor(t,n):i;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)r=Reflect.decorate(e,t,n,i);else for(var l=e.length-1;l>=0;l--)(o=e[l])&&(r=(a<3?o(r):a>3?o(t,n,r):o(t,n))||r);return a>3&&r&&Object.defineProperty(t,n,r),r};Object.defineProperty(t,"__esModule",{value:!0});const o=n(8),a=n(48),r=n(0);class l extends a.BlockStartState{get stateType(){return o.ATNStateType.STAR_BLOCK_START}}i([r.Override],l.prototype,"stateType",null),t.StarBlockStartState=l},function(e,t,n){"use strict";
/*!
 * Copyright 2016 The ANTLR Project. All rights reserved.
 * Licensed under the BSD-3-Clause license. See LICENSE file in the project root for license information.
 */var i=this&&this.__decorate||function(e,t,n,i){var o,a=arguments.length,r=a<3?t:null===i?i=Object.getOwnPropertyDescriptor(t,n):i;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)r=Reflect.decorate(e,t,n,i);else for(var l=e.length-1;l>=0;l--)(o=e[l])&&(r=(a<3?o(r):a>3?o(t,n,r):o(t,n))||r);return a>3&&r&&Object.defineProperty(t,n,r),r};Object.defineProperty(t,"__esModule",{value:!0});const o=n(17),a=n(8),r=n(0);class l extends o.ATNState{get loopEntryState(){return this.transition(0).target}get stateType(){return a.ATNStateType.STAR_LOOP_BACK}}i([r.Override],l.prototype,"stateType",null),t.StarLoopbackState=l},function(e,t,n){"use strict";
/*!
 * Copyright 2016 The ANTLR Project. All rights reserved.
 * Licensed under the BSD-3-Clause license. See LICENSE file in the project root for license information.
 */var i=this&&this.__decorate||function(e,t,n,i){var o,a=arguments.length,r=a<3?t:null===i?i=Object.getOwnPropertyDescriptor(t,n):i;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)r=Reflect.decorate(e,t,n,i);else for(var l=e.length-1;l>=0;l--)(o=e[l])&&(r=(a<3?o(r):a>3?o(t,n,r):o(t,n))||r);return a>3&&r&&Object.defineProperty(t,n,r),r};Object.defineProperty(t,"__esModule",{value:!0});const o=n(8),a=n(24),r=n(0);class l extends a.DecisionState{get stateType(){return o.ATNStateType.TOKEN_START}}i([r.Override],l.prototype,"stateType",null),t.TokensStartState=l},function(e,t,n){"use strict";
/*!
 * Copyright 2016 The ANTLR Project. All rights reserved.
 * Licensed under the BSD-3-Clause license. See LICENSE file in the project root for license information.
 */Object.defineProperty(t,"__esModule",{value:!0});const i=n(5);class o{constructor(e,t,n,i){this.data=new Uint32Array(4),this.data[0]=e,this.data[1]=t,this.data[2]=n,this.data[3]=i}static fromString(e){if(!/^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$/.test(e))throw new Error("Incorrectly formatted UUID");let t=e.split("-"),n=parseInt(t[0],16),i=(parseInt(t[1],16)<<16>>>0)+parseInt(t[2],16),a=(parseInt(t[3],16)<<16>>>0)+parseInt(t[4].substr(0,4),16),r=parseInt(t[4].substr(-8),16);return new o(n,i,a,r)}hashCode(){return i.MurmurHash.hashCode([this.data[0],this.data[1],this.data[2],this.data[3]])}equals(e){return e===this||e instanceof o&&(this.data[0]===e.data[0]&&this.data[1]===e.data[1]&&this.data[2]===e.data[2]&&this.data[3]===e.data[3])}toString(){return("00000000"+this.data[0].toString(16)).substr(-8)+"-"+("0000"+(this.data[1]>>>16).toString(16)).substr(-4)+"-"+("0000"+this.data[1].toString(16)).substr(-4)+"-"+("0000"+(this.data[2]>>>16).toString(16)).substr(-4)+"-"+("0000"+this.data[2].toString(16)).substr(-4)+("00000000"+this.data[3].toString(16)).substr(-8)}}t.UUID=o},function(e,t,n){"use strict";
/*!
 * Copyright 2016 The ANTLR Project. All rights reserved.
 * Licensed under the BSD-3-Clause license. See LICENSE file in the project root for license information.
 */var i=this&&this.__decorate||function(e,t,n,i){var o,a=arguments.length,r=a<3?t:null===i?i=Object.getOwnPropertyDescriptor(t,n):i;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)r=Reflect.decorate(e,t,n,i);else for(var l=e.length-1;l>=0;l--)(o=e[l])&&(r=(a<3?o(r):a>3?o(t,n,r):o(t,n))||r);return a>3&&r&&Object.defineProperty(t,n,r),r},o=this&&this.__param||function(e,t){return function(n,i){t(n,i,e)}};Object.defineProperty(t,"__esModule",{value:!0});const a=n(0);let r=class{constructor(e){this.atnSimulator=e}getDecisionInfo(){return this.atnSimulator.getDecisionInfo()}getLLDecisions(){let e=this.atnSimulator.getDecisionInfo(),t=[];for(let n=0;n<e.length;n++){e[n].LL_Fallback>0&&t.push(n)}return t}getTotalTimeInPrediction(){let e=this.atnSimulator.getDecisionInfo(),t=0;for(let n of e)t+=n.timeInPrediction;return t}getTotalSLLLookaheadOps(){let e=this.atnSimulator.getDecisionInfo(),t=0;for(let n of e)t+=n.SLL_TotalLook;return t}getTotalLLLookaheadOps(){let e=this.atnSimulator.getDecisionInfo(),t=0;for(let n of e)t+=n.LL_TotalLook;return t}getTotalSLLATNLookaheadOps(){let e=this.atnSimulator.getDecisionInfo(),t=0;for(let n of e)t+=n.SLL_ATNTransitions;return t}getTotalLLATNLookaheadOps(){let e=this.atnSimulator.getDecisionInfo(),t=0;for(let n of e)t+=n.LL_ATNTransitions;return t}getTotalATNLookaheadOps(){let e=this.atnSimulator.getDecisionInfo(),t=0;for(let n of e)t+=n.SLL_ATNTransitions,t+=n.LL_ATNTransitions;return t}getDFASize(e){if(e){return this.atnSimulator.atn.decisionToDFA[e].states.size}{let e=0,t=this.atnSimulator.atn.decisionToDFA;for(let n=0;n<t.length;n++)e+=this.getDFASize(n);return e}}};i([a.NotNull],r.prototype,"getDecisionInfo",null),i([a.NotNull],r.prototype,"getLLDecisions",null),r=i([o(0,a.NotNull)],r),t.ParseInfo=r},function(e,t,n){"use strict";
/*!
 * Copyright 2016 The ANTLR Project. All rights reserved.
 * Licensed under the BSD-3-Clause license. See LICENSE file in the project root for license information.
 */var i=this&&this.__decorate||function(e,t,n,i){var o,a=arguments.length,r=a<3?t:null===i?i=Object.getOwnPropertyDescriptor(t,n):i;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)r=Reflect.decorate(e,t,n,i);else for(var l=e.length-1;l>=0;l--)(o=e[l])&&(r=(a<3?o(r):a>3?o(t,n,r):o(t,n))||r);return a>3&&r&&Object.defineProperty(t,n,r),r},o=this&&this.__param||function(e,t){return function(n,i){t(n,i,e)}};Object.defineProperty(t,"__esModule",{value:!0});const a=n(79),r=n(62),l=n(63),s=n(99),d=n(156),c=n(0),u=n(100),m=n(101),h=n(1),p=n(157),T=n(158),b=n(2),g=n(61),x=n(167),f=n(168),k=n(29),S=n(169),y=n(3),C=n(170);class E{constructor(e,t){this.start="<",this.stop=">",this.escape="\\",this.escapeRE=/\\/g,this._lexer=e,this._parser=t}setDelimiters(e,t,n){if(!e)throw new Error("start cannot be null or empty");if(!t)throw new Error("stop cannot be null or empty");this.start=e,this.stop=t,this.escape=n,this.escapeRE=new RegExp(n.replace(/[.*+?^${}()|[\]\\]/g,"\\$&"),"g")}matches(e,t,n=0){if("string"==typeof t){let i=this.compile(t,n);return this.matches(e,i)}{let n=new d.MultiMap;return!this.matchImpl(e,t.patternTree,n)}}match(e,t,n=0){if("string"==typeof t){let i=this.compile(t,n);return this.match(e,i)}{let n=new d.MultiMap,i=this.matchImpl(e,t.patternTree,n);return new p.ParseTreeMatch(e,t,n,i)}}compile(e,t){let n=this.tokenize(e),i=new s.ListTokenSource(n),o=new l.CommonTokenStream(i);const r=this._parser;let d,c=new m.ParserInterpreter(r.grammarFileName,r.vocabulary,r.ruleNames,r.getATNWithBypassAlts(),o);try{c.errorHandler=new a.BailErrorStrategy,d=c.parse(t)}catch(e){throw e instanceof u.ParseCancellationException?e.getCause():e instanceof b.RecognitionException?e:e instanceof Error?new E.CannotInvokeStartRule(e):e}if(o.LA(1)!==y.Token.EOF)throw new E.StartRuleDoesNotConsumeFullPattern;return new T.ParseTreePattern(this,e,t,d)}get lexer(){return this._lexer}get parser(){return this._parser}matchImpl(e,t,n){if(!e)throw new TypeError("tree cannot be null");if(!t)throw new TypeError("patternTree cannot be null");if(e instanceof k.TerminalNode&&t instanceof k.TerminalNode){let i;if(e.symbol.type===t.symbol.type)if(t.symbol instanceof C.TokenTagToken){let i=t.symbol;n.map(i.tokenName,e);const o=i.label;o&&n.map(o,e)}else e.text===t.text||i||(i=e);else i||(i=e);return i}if(e instanceof h.ParserRuleContext&&t instanceof h.ParserRuleContext){let i,o=this.getRuleTagToken(t);if(o){if(e.ruleContext.ruleIndex===t.ruleContext.ruleIndex){n.map(o.ruleName,e);const t=o.label;t&&n.map(t,e)}else i||(i=e);return i}if(e.childCount!==t.childCount)return i||(i=e),i;let a=e.childCount;for(let i=0;i<a;i++){let o=this.matchImpl(e.getChild(i),t.getChild(i),n);if(o)return o}return i}return e}getRuleTagToken(e){if(e instanceof g.RuleNode&&1===e.childCount&&e.getChild(0)instanceof k.TerminalNode){let t=e.getChild(0);if(t.symbol instanceof x.RuleTagToken)return t.symbol}}tokenize(e){let t=this.split(e),n=[];for(let i of t)if(i instanceof f.TagChunk){let t=i;const o=t.tag.substr(0,1);if(o===o.toUpperCase()){let i=this._parser.getTokenType(t.tag);if(i===y.Token.INVALID_TYPE)throw new Error("Unknown token "+t.tag+" in pattern: "+e);let o=new C.TokenTagToken(t.tag,i,t.label);n.push(o)}else{if(o!==o.toLowerCase())throw new Error("invalid tag: "+t.tag+" in pattern: "+e);{let i=this._parser.getRuleIndex(t.tag);if(-1===i)throw new Error("Unknown rule "+t.tag+" in pattern: "+e);let o=this._parser.getATNWithBypassAlts().ruleToTokenType[i];n.push(new x.RuleTagToken(t.tag,o,t.label))}}}else{let e=i;this._lexer.inputStream=r.CharStreams.fromString(e.text);let t=this._lexer.nextToken();for(;t.type!==y.Token.EOF;)n.push(t),t=this._lexer.nextToken()}return n}split(e){let t=0,n=e.length,i=[],o=[],a=[];for(;t<n;)t===e.indexOf(this.escape+this.start,t)?t+=this.escape.length+this.start.length:t===e.indexOf(this.escape+this.stop,t)?t+=this.escape.length+this.stop.length:t===e.indexOf(this.start,t)?(o.push(t),t+=this.start.length):t===e.indexOf(this.stop,t)?(a.push(t),t+=this.stop.length):t++;if(o.length>a.length)throw new Error("unterminated tag in pattern: "+e);if(o.length<a.length)throw new Error("missing start tag in pattern: "+e);let r=o.length;for(let t=0;t<r;t++)if(o[t]>=a[t])throw new Error("tag delimiters out of order in pattern: "+e);if(0===r){let t=e.substring(0,n);i.push(new S.TextChunk(t))}if(r>0&&o[0]>0){let t=e.substring(0,o[0]);i.push(new S.TextChunk(t))}for(let t=0;t<r;t++){let n,l=e.substring(o[t]+this.start.length,a[t]),s=l,d=l.indexOf(":");if(d>=0&&(n=l.substring(0,d),s=l.substring(d+1,l.length)),i.push(new f.TagChunk(s,n)),t+1<r){let n=e.substring(a[t]+this.stop.length,o[t+1]);i.push(new S.TextChunk(n))}}if(r>0){let t=a[r-1]+this.stop.length;if(t<n){let o=e.substring(t,n);i.push(new S.TextChunk(o))}}for(let e=0;e<i.length;e++){let t=i[e];if(t instanceof S.TextChunk){let n=t.text.replace(this.escapeRE,"");n.length<t.text.length&&(i[e]=new S.TextChunk(n))}}return i}}i([c.NotNull,o(1,c.NotNull)],E.prototype,"match",null),i([c.NotNull],E.prototype,"lexer",null),i([c.NotNull],E.prototype,"parser",null),i([o(0,c.NotNull),o(1,c.NotNull),o(2,c.NotNull)],E.prototype,"matchImpl",null),t.ParseTreePatternMatcher=E,function(e){class t extends Error{constructor(e){super("CannotInvokeStartRule: "+e),this.error=e}}e.CannotInvokeStartRule=t;class n extends Error{constructor(){super("StartRuleDoesNotConsumeFullPattern")}}e.StartRuleDoesNotConsumeFullPattern=n}(E=t.ParseTreePatternMatcher||(t.ParseTreePatternMatcher={}))},function(e,t,n){"use strict";
/*!
 * Copyright 2016 The ANTLR Project. All rights reserved.
 * Licensed under the BSD-3-Clause license. See LICENSE file in the project root for license information.
 */Object.defineProperty(t,"__esModule",{value:!0}),t.isHighSurrogate=function(e){return e>=55296&&e<=56319},t.isLowSurrogate=function(e){return e>=56320&&e<=57343},t.isSupplementaryCodePoint=function(e){return e>=65536}},function(e,t,n){"use strict";
/*!
 * Copyright 2016 The ANTLR Project. All rights reserved.
 * Licensed under the BSD-3-Clause license. See LICENSE file in the project root for license information.
 */Object.defineProperty(t,"__esModule",{value:!0});class i extends Map{constructor(){super()}map(e,t){let n=super.get(e);n||(n=[],super.set(e,n)),n.push(t)}getPairs(){let e=[];return this.forEach((t,n)=>{t.forEach(t=>{e.push([n,t])})}),e}}t.MultiMap=i},function(e,t,n){"use strict";
/*!
 * Copyright 2016 The ANTLR Project. All rights reserved.
 * Licensed under the BSD-3-Clause license. See LICENSE file in the project root for license information.
 */var i=this&&this.__decorate||function(e,t,n,i){var o,a=arguments.length,r=a<3?t:null===i?i=Object.getOwnPropertyDescriptor(t,n):i;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)r=Reflect.decorate(e,t,n,i);else for(var l=e.length-1;l>=0;l--)(o=e[l])&&(r=(a<3?o(r):a>3?o(t,n,r):o(t,n))||r);return a>3&&r&&Object.defineProperty(t,n,r),r},o=this&&this.__param||function(e,t){return function(n,i){t(n,i,e)}};Object.defineProperty(t,"__esModule",{value:!0});const a=n(0);let r=class{constructor(e,t,n,i){if(!e)throw new Error("tree cannot be null");if(!t)throw new Error("pattern cannot be null");if(!n)throw new Error("labels cannot be null");this._tree=e,this._pattern=t,this._labels=n,this._mismatchedNode=i}get(e){let t=this._labels.get(e);if(t&&0!==t.length)return t[t.length-1]}getAll(e){const t=this._labels.get(e);return t||[]}get labels(){return this._labels}get mismatchedNode(){return this._mismatchedNode}get succeeded(){return!this._mismatchedNode}get pattern(){return this._pattern}get tree(){return this._tree}toString(){return`Match ${this.succeeded?"succeeded":"failed"}; found ${this.labels.size} labels`}};i([a.NotNull,o(0,a.NotNull)],r.prototype,"getAll",null),i([a.NotNull],r.prototype,"labels",null),i([a.NotNull],r.prototype,"pattern",null),i([a.NotNull],r.prototype,"tree",null),i([a.Override],r.prototype,"toString",null),r=i([o(0,a.NotNull),o(1,a.NotNull),o(2,a.NotNull)],r),t.ParseTreeMatch=r},function(e,t,n){"use strict";
/*!
 * Copyright 2016 The ANTLR Project. All rights reserved.
 * Licensed under the BSD-3-Clause license. See LICENSE file in the project root for license information.
 */var i=this&&this.__decorate||function(e,t,n,i){var o,a=arguments.length,r=a<3?t:null===i?i=Object.getOwnPropertyDescriptor(t,n):i;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)r=Reflect.decorate(e,t,n,i);else for(var l=e.length-1;l>=0;l--)(o=e[l])&&(r=(a<3?o(r):a>3?o(t,n,r):o(t,n))||r);return a>3&&r&&Object.defineProperty(t,n,r),r},o=this&&this.__param||function(e,t){return function(n,i){t(n,i,e)}};Object.defineProperty(t,"__esModule",{value:!0});const a=n(0),r=n(64);let l=class{constructor(e,t,n,i){this._matcher=e,this._patternRuleIndex=n,this._pattern=t,this._patternTree=i}match(e){return this._matcher.match(e,this)}matches(e){return this._matcher.match(e,this).succeeded}findAll(e,t){let n=r.XPath.findAll(e,t,this._matcher.parser),i=[];for(let e of n){let t=this.match(e);t.succeeded&&i.push(t)}return i}get matcher(){return this._matcher}get pattern(){return this._pattern}get patternRuleIndex(){return this._patternRuleIndex}get patternTree(){return this._patternTree}};i([a.NotNull],l.prototype,"_pattern",void 0),i([a.NotNull],l.prototype,"_patternTree",void 0),i([a.NotNull],l.prototype,"_matcher",void 0),i([a.NotNull,o(0,a.NotNull)],l.prototype,"match",null),i([o(0,a.NotNull)],l.prototype,"matches",null),i([a.NotNull,o(0,a.NotNull),o(1,a.NotNull)],l.prototype,"findAll",null),i([a.NotNull],l.prototype,"matcher",null),i([a.NotNull],l.prototype,"pattern",null),i([a.NotNull],l.prototype,"patternTree",null),l=i([o(0,a.NotNull),o(1,a.NotNull),o(3,a.NotNull)],l),t.ParseTreePattern=l},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const i=n(33),o=n(18),a=n(40),r=n(16),l=n(11);class s extends o.Lexer{constructor(e){super(e),this._interp=new a.LexerATNSimulator(s._ATN,this)}get vocabulary(){return s.VOCABULARY}get grammarFileName(){return"XPathLexer.g4"}get ruleNames(){return s.ruleNames}get serializedATN(){return s._serializedATN}get channelNames(){return s.channelNames}get modeNames(){return s.modeNames}action(e,t,n){switch(t){case 4:this.ID_action(e,n)}}ID_action(e,t){switch(t){case 0:let e=this.text;e.charAt(0)===e.charAt(0).toUpperCase()?this.type=s.TOKEN_REF:this.type=s.RULE_REF}}static get _ATN(){return s.__ATN||(s.__ATN=(new i.ATNDeserializer).deserialize(l.toCharArray(s._serializedATN))),s.__ATN}}s.TOKEN_REF=1,s.RULE_REF=2,s.ANYWHERE=3,s.ROOT=4,s.WILDCARD=5,s.BANG=6,s.ID=7,s.STRING=8,s.channelNames=["DEFAULT_TOKEN_CHANNEL","HIDDEN"],s.modeNames=["DEFAULT_MODE"],s.ruleNames=["ANYWHERE","ROOT","WILDCARD","BANG","ID","NameChar","NameStartChar","STRING"],s._LITERAL_NAMES=[void 0,void 0,void 0,"'//'","'/'","'*'","'!'"],s._SYMBOLIC_NAMES=[void 0,"TOKEN_REF","RULE_REF","ANYWHERE","ROOT","WILDCARD","BANG","ID","STRING"],s.VOCABULARY=new r.VocabularyImpl(s._LITERAL_NAMES,s._SYMBOLIC_NAMES,[]),s._serializedATNSegments=2,s._serializedATNSegment0='줝쪺֍꾺体؇쉁\n2\b\t\t\t\t\t\t\b\t\b\t\t\t\n\f"\v\b\b\t\t\t,\n\t\f\t\t/\v\t\t\t-\n\t\b\v\t\r\nʶ\n2;C\\aac|¡¬¬¯¯··¼¼ÂØÚøú˃ˈ˓ˢ˦ˮˮ˰˰̂Ͷ͸͹ͼͿ΁΁ΈΈΊΌΎΎΐΣΥϷϹ҃҅҉ҌԱԳ՘՛՛գ։֓ֿׁׁ׃ׄ׆ׇ׉׉ג׬ײ״؂؇ؒ؜؞؞آ٫ٰەۗ۟ۡ۪۬۾܁܁ܑ݌ݏ޳߂߷߼߼ࠂ࠯ࡂ࡝ࢢࢶࢸࢿࣖ॥२ॱॳঅই঎঑঒কপবল঴঴স঻া৆৉৊্৐৙৙৞য়ৡ৥২৳ਃਅਇ਌਑਒ਕਪਬਲ਴ਵ਷ਸ਺਻ਾਾੀ੄੉੊੍੏੓੓ਜ਼ਫ਼੠੠੨੷ઃઅઇએઑઓકપબલ઴વષ઻ાેૉો્૏૒૒ૢ૥૨૱ૻૻଃଅଇ଎଑଒କପବଲ଴ଵଷ଻ା୆୉୊୍୏୘୙୞ୟୡ୥୨ୱ୳୳஄அஇ஌ஐஒஔ஗஛ஜஞஞ஠஡஥஦ப஬ர஻ீ௄ைொௌ௏௒௒௙௙௨௱ంఅఇఎఐఒఔపబ఻ిెైొౌ౏౗ౘౚ౜ౢ౥౨౱ಂಅಇಎಐಒಔಪಬವಷ಻ಾೆೈೊೌ೏೗೘ೠೠೢ೥೨ೱೳ೴ഃഅഇഎഐഒഔ഼ിെൈൊൌ൐ൖ൙ൡ൥൨൱ർඁ඄අඇ඘ගඳඵල඿඿ෂ෈෌෌ෑූෘෘේ෡෨෱෴෵ฃ฼โ๐๒๛຃ຄຆຆຉຊຌຌຏຏຖນປມຣລວວຩຩຬອຯົຽ຿ໂໆ່່໊໏໒໛ໞ໡༂༂༚༛༢༫༷༷༹༹༻༻ཀཉཋ཮ཱི྆ྈྙྛ྾࿈࿈ဂ။ၒ႟ႢჇ჉჉჏჏გჼჾቊቌ቏ቒቘቚቚቜ቟ቢኊኌ኏ኒኲኴ኷ኺዀዂዂዄ዇ዊዘዚጒጔ጗ጚ፜፟፡ᎂ᎑Ꭲ᏷ᏺ᏿ᐃ᙮ᙱᚁᚃ᚜ᚢ᛬ᛰ᛺ᜂᜎᜐ᜖ᜢ᜶ᝂ᝕ᝢᝮᝰᝲ᝴᝵គ៕៙៙៞៟២៫᠍᠐᠒᠛ᠢ᡹ᢂ᢬ᢲ᣷ᤂᤠᤢ᤭ᤲ᤽᥈᥯ᥲ᥶ᦂ᦭ᦲ᧋᧒᧛ᨂ᨝ᨢ᩠ᩢ᩾᪁᪋᪒᪛᪩᪩᪲ᪿᬂ᭍᭒᭛᭭᭵ᮂ᯵ᰂ᰹᱂᱋ᱏ᱿ᲂᲊ᳒᳔᳖᳸ᳺ᳻ᴂ᷷᷽἗Ἒ἟ἢ὇Ὂ὏ὒὙὛὛὝὝὟὟὡ὿ᾂᾶᾸι῀῀ῄῆῈ῎ῒ῕Ῐ῝ῢ΅ῴῶῸ῾‍‑‬‰⁁⁂⁖⁖⁢⁦⁨ⁱ⁳⁳₁₁ₒ₞⃒⃞⃣⃣⃧⃲℄℄℉℉ℌℕ℗℗ℛ℟ΩΩℨℨKKℬℯℱ℻ℾ⅁ⅇ⅋⅐⅐Ⅲ↊ⰂⰰⰲⱠⱢ⳦Ⳮ⳵ⴂⴧ⴩⴩⴯⴯ⴲ⵩⵱⵱ⶁ⶘ⶢⶨⶪⶰⶲⶸⶺⷀⷂⷈⷊⷐⷒⷘⷚⷠⷢ⸁⸱⸱〇〉〣〱〳〷〺〾ぃ゘゛゜ゟァィーヾ㄁ㄇㄯㄳ㆐ㆢㆼㇲ㈁㐂䶷丂鿗ꀂ꒎ꓒ꓿ꔂ꘎ꘒ꘭Ꙃ꙱ꙶꙿꚁ꛳ꜙ꜡Ꜥ꞊ꞍꞰꞲꞹꟹ꠩ꡂ꡵ꢂ꣇꣒꣛꣢꣹ꣽꣽꣿꣿ꤂꤯ꤲ꥕ꥢ꥾ꦂ꧂꧑꧛ꧢꨀꨂ꨸ꩂ꩏꩒꩛ꩢ꩸ꩼ꫄ꫝ꫟ꫢ꫱ꫴ꫸ꬃ꬈ꬋ꬐ꬓ꬘ꬢꬨꬪꬰꬲꭜꭞꭧꭲ꯬꯮꯯꯲꯻갂힥ힲ퟈ퟍ퟽車﩯全﫛ﬂ﬈ﬕ﬙ײַשׁשּׁטּךּמּנּנּ﭂ףּ﭅צּרּ﮳ﯕ﴿ﵒ﶑ﶔ﷉ﷲ﷽︂︑︢︱︵︶﹏﹑ﹲﹶﹸ﻾！！２；Ｃ＼ａａｃ｜ｨ￀ￄ￉ￌ￑ￔ￙ￜ￞￻�\r(*<>?AOR_üłŶǿǿʂʞʢ˒ˢˢ̂̡̲͌͒ͼ΂Ο΢υϊϑϓϗЂҟҢҫҲӕӚӽԂԩԲե؂ܸ݂ݗݢݩࠂࠇࠊࠊࠌ࠷࠹࠺࠾࠾ࡁࡗࡢࡸࢂࢠ࣢ࣴࣶࣷंगढऻংহীুਂਅਇਈ਎ਕਗਙਛਵ਺਼ੁੁ੢੾ંઞૂૉો૨ଂଷୂୗୢ୴ஂஓంొಂ಴ೂ೴ဂ၈ၨၱႁႼႿႿგცჲ჻ᄂᄶᄸᅁᅒᅵᅸᅸᆂᇆᇌᇎᇒᇜᇞᇞሂሓሕሹቀቀኂኈኊኊኌ኏ኑኟኡኪኲዬዲዻጂጅጇጎ጑ጒጕጪጬጲጴጵጷጻጾፆፉፊፍፏፒፒፙፙ፟፥፨፮፲፶ᐂᑌᑒᑛᒂᓇᓉᓉᓒᓛᖂᖷᖺᗂᗚᗟᘂᙂᙆᙆᙒᙛᚂᚹᛂᛋᜂ᜛ᜟᜭᜲ᜻ᢢᣫᤁᤁ᫂᫺ᰂᰊᰌ᰸᰺᱂᱒ᱛᱴᲑᲔᲩᲫᲸ ⎛␂⑰⒂╅。㐰䐂䙈栂樺橂橠橢橫櫒櫯櫲櫶欂欸歂歅歒歛步歹歿殑漂潆潒澀澑澡濢濢瀂蟮蠂諴뀂뀃밂뱬뱲뱾벂벊벒벛벟베벢벥텧텫텯톄톇톍톬톯퉄퉆퐂푖푘풞풠풡풤풤풧풨풫풮풰풻풽풽풿퓅퓇픇픉플픏픖픘픞픠픻픽핀핂핆핈핈핌핒핔횧횪훂후훜훞훼훾휖휘휶휸흐흒흰흲힊힌힪힬ퟄퟆퟍퟐ\ud801\uda02\uda38\uda3d\uda6e\uda77\uda77\uda86\uda86\uda9d\udaa1\udaa3\udab1ꛘ꜂뜶띂렟렢캣﨟"ĂǱɀC\\c|¬¬··¼¼ÂØÚøú˃ˈ˓ˢ˦ˮˮ˰˰ͲͶ͸͹ͼͿ΁΁ΈΈΊΌΎΎΐΣΥϷϹ҃ҌԱԳ՘՛՛գ։ג׬ײ״آٌٰٱٳەۗۗۧۨ۰۱ۼ۾܁܁ܒܒܔܱݏާ޳޳ߌ߬߶߷߼߼ࠂࠗࠜࠜࠦࠦࠪࠪࡂ࡚ࢢࢶࢸࢿआऻिि॒॒ग़ॣॳংই঎঑঒কপবল঴঴স঻িি৐৐৞য়ৡৣ৲৳ਇ਌਑਒ਕਪਬਲ਴ਵ਷ਸ਺਻ਜ਼ਫ਼੠੠ੴ੶ઇએઑઓકપબલ઴વષ઻િિ૒૒ૢૣૻૻଇ଎଑଒କପବଲ଴ଵଷ଻ିି୞ୟୡୣ୳୳அஅஇ஌ஐஒஔ஗஛ஜஞஞ஠஡஥஦ப஬ர஻௒௒ఇఎఐఒఔపబ఻ిిౚ౜ౢౣಂಂಇಎಐಒಔಪಬವಷ಻ಿಿೠೠೢೣೳ೴ഇഎഐഒഔ഼ിി൐൐ൖ൘ൡൣർඁඇ඘ගඳඵල඿඿ෂ෈ฃาิีโ่຃ຄຆຆຉຊຌຌຏຏຖນປມຣລວວຩຩຬອຯາິີ຿຿ໂໆ່່ໞ໡༂༂གཉཋ཮ྊྎဂာ၁၁ၒၗၜၟၣၣၧၨၰၲၷႃ႐႐ႢჇ჉჉჏჏გჼჾቊቌ቏ቒቘቚቚቜ቟ቢኊኌ኏ኒኲኴ኷ኺዀዂዂዄ዇ዊዘዚጒጔ጗ጚ፜ᎂ᎑Ꭲ᏷ᏺ᏿ᐃ᙮ᙱᚁᚃ᚜ᚢ᛬ᛰ᛺ᜂᜎᜐᜓᜢᜳᝂᝓᝢᝮᝰᝲគ឵៙៙៞៞ᠢ᡹ᢂᢆᢉᢪ᢬᢬ᢲ᣷ᤂᤠᥒ᥯ᥲ᥶ᦂ᦭ᦲ᧋ᨂᨘᨢᩖ᪩᪩ᬇᬵᭇ᭍ᮅᮢ᮰᮱ᮼᯧᰂᰥᱏ᱑ᱜ᱿ᲂᲊᳫᳮᳰᳳ᳷᳸ᴂ᷁Ḃ἗Ἒ἟ἢ὇Ὂ὏ὒὙὛὛὝὝὟὟὡ὿ᾂᾶᾸι῀῀ῄῆῈ῎ῒ῕Ῐ῝ῢ΅ῴῶῸ῾⁳⁳₁₁ₒ₞℄℄℉℉ℌℕ℗℗ℛ℟ΩΩℨℨKKℬℯℱ℻ℾ⅁ⅇ⅋⅐⅐Ⅲ↊ⰂⰰⰲⱠⱢ⳦Ⳮ⳰⳴⳵ⴂⴧ⴩⴩⴯⴯ⴲ⵩⵱⵱ⶂ⶘ⶢⶨⶪⶰⶲⶸⶺⷀⷂⷈⷊⷐⷒⷘⷚⷠ⸱⸱〇〉〣〫〳〷〺〾ぃ゘ゟァィーヾ㄁ㄇㄯㄳ㆐ㆢㆼㇲ㈁㐂䶷丂鿗ꀂ꒎ꓒ꓿ꔂ꘎ꘒ꘡꘬꘭Ꙃ꙰ꚁꚟꚢ꛱ꜙ꜡Ꜥ꞊ꞍꞰꞲꞹꟹꠃꠅꠇꠉꠌꠎꠤꡂ꡵ꢄꢵꣴ꣹ꣽꣽꣿꣿꤌꤧꤲꥈꥢ꥾ꦆꦴ꧑꧑ꧢꧦꧨ꧱ꧼꨀꨂꨪꩂꩄꩆꩍꩢ꩸ꩼꩼꪀꪱꪳꪳꪷꪸꪻ꪿ꫂꫂ꫄꫄ꫝ꫟ꫢꫬꫴ꫶ꬃ꬈ꬋ꬐ꬓ꬘ꬢꬨꬪꬰꬲꭜꭞꭧꭲꯤ갂힥ힲ퟈ퟍ퟽車﩯全﫛ﬂ﬈ﬕ﬙ײַײַﬡשׁשּׁטּךּמּנּנּ﭂ףּ﭅צּרּ﮳ﯕ﴿ﵒ﶑ﶔ﷉ﷲ﷽ﹲﹶﹸ﻾Ｃ＼ｃ｜ｨ￀ￄ￉ￌ￑ￔ￙ￜ￞\r(*<>?AOR_üłŶʂʞʢ˒̂̡̲͌͒ͷ΂Ο΢υϊϑϓϗЂҟҲӕӚӽԂԩԲե؂ܸ݂ݗݢݩࠂࠇࠊࠊࠌ࠷࠹࠺࠾࠾ࡁࡗࡢࡸࢂࢠ࣢ࣴࣶࣷंगढऻংহীুਂਂ਒ਕਗਙਛਵ੢੾ંઞૂૉો૦ଂଷୂୗୢ୴ஂஓంొಂ಴ೂ೴စ္ႅႱგცᄅᄨᅒᅴᅸᅸᆅᆴᇃᇆᇜᇜᇞᇞሂሓሕርኂኈኊኊኌ኏ኑኟኡኪኲዠጇጎ጑ጒጕጪጬጲጴጵጷጻጿጿፒፒ፟፣ᐂᐶᑉᑌᒂᒱᓆᓇᓉᓉᖂᖰᗚᗝᘂᘱᙆᙆᚂᚬᜂ᜛ᢢᣡᤁᤁ᫂᫺ᰂᰊᰌᰰ᱂᱂ᱴᲑ ⎛␂⑰⒂╅。㐰䐂䙈栂樺橂橠櫒櫯欂欱歂歅步歹歿殑漂潆潒潒澕澡濢濢瀂蟮蠂諴뀂뀃밂뱬뱲뱾벂벊벒벛퐂푖푘풞풠풡풤풤풧풨풫풮풰풻풽풽풿퓅퓇픇픉플픏픖픘픞픠픻픽핀핂핆핈핈',s._serializedATNSegment1="핌핒핔횧횪훂후훜훞훼훾휖휘휶휸흐흒흰흲힊힌힪힬ퟄퟆퟍꛘ꜂뜶띂렟렢캣﨟1\t\v\t\v\r%')111,\b#\n \b\r\"  !!#\" #$\b$\f%&\t&'(\t()-)*,\v+*,/-.-+.0/-01)1 -",s._serializedATN=l.join([s._serializedATNSegment0,s._serializedATNSegment1],""),t.XPathLexer=s},function(e,t,n){"use strict";
/*!
 * Copyright 2016 The ANTLR Project. All rights reserved.
 * Licensed under the BSD-3-Clause license. See LICENSE file in the project root for license information.
 */var i=this&&this.__decorate||function(e,t,n,i){var o,a=arguments.length,r=a<3?t:null===i?i=Object.getOwnPropertyDescriptor(t,n):i;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)r=Reflect.decorate(e,t,n,i);else for(var l=e.length-1;l>=0;l--)(o=e[l])&&(r=(a<3?o(r):a>3?o(t,n,r):o(t,n))||r);return a>3&&r&&Object.defineProperty(t,n,r),r};Object.defineProperty(t,"__esModule",{value:!0});const o=n(0);class a{syntaxError(e,t,n,i,o,a){}}i([o.Override],a.prototype,"syntaxError",null),t.XPathLexerErrorListener=a},function(e,t,n){"use strict";
/*!
 * Copyright 2016 The ANTLR Project. All rights reserved.
 * Licensed under the BSD-3-Clause license. See LICENSE file in the project root for license information.
 */var i=this&&this.__decorate||function(e,t,n,i){var o,a=arguments.length,r=a<3?t:null===i?i=Object.getOwnPropertyDescriptor(t,n):i;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)r=Reflect.decorate(e,t,n,i);else for(var l=e.length-1;l>=0;l--)(o=e[l])&&(r=(a<3?o(r):a>3?o(t,n,r):o(t,n))||r);return a>3&&r&&Object.defineProperty(t,n,r),r};Object.defineProperty(t,"__esModule",{value:!0});const o=n(0),a=n(25),r=n(30);class l extends r.XPathElement{constructor(e,t){super(e),this.ruleIndex=t}evaluate(e){return a.Trees.findAllRuleNodes(e,this.ruleIndex)}}i([o.Override],l.prototype,"evaluate",null),t.XPathRuleAnywhereElement=l},function(e,t,n){"use strict";
/*!
 * Copyright 2016 The ANTLR Project. All rights reserved.
 * Licensed under the BSD-3-Clause license. See LICENSE file in the project root for license information.
 */var i=this&&this.__decorate||function(e,t,n,i){var o,a=arguments.length,r=a<3?t:null===i?i=Object.getOwnPropertyDescriptor(t,n):i;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)r=Reflect.decorate(e,t,n,i);else for(var l=e.length-1;l>=0;l--)(o=e[l])&&(r=(a<3?o(r):a>3?o(t,n,r):o(t,n))||r);return a>3&&r&&Object.defineProperty(t,n,r),r};Object.defineProperty(t,"__esModule",{value:!0});const o=n(1),a=n(0),r=n(25),l=n(30);class s extends l.XPathElement{constructor(e,t){super(e),this.ruleIndex=t}evaluate(e){let t=[];for(let n of r.Trees.getChildren(e))n instanceof o.ParserRuleContext&&(n.ruleIndex===this.ruleIndex&&!this.invert||n.ruleIndex!==this.ruleIndex&&this.invert)&&t.push(n);return t}}i([a.Override],s.prototype,"evaluate",null),t.XPathRuleElement=s},function(e,t,n){"use strict";
/*!
 * Copyright 2016 The ANTLR Project. All rights reserved.
 * Licensed under the BSD-3-Clause license. See LICENSE file in the project root for license information.
 */var i=this&&this.__decorate||function(e,t,n,i){var o,a=arguments.length,r=a<3?t:null===i?i=Object.getOwnPropertyDescriptor(t,n):i;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)r=Reflect.decorate(e,t,n,i);else for(var l=e.length-1;l>=0;l--)(o=e[l])&&(r=(a<3?o(r):a>3?o(t,n,r):o(t,n))||r);return a>3&&r&&Object.defineProperty(t,n,r),r};Object.defineProperty(t,"__esModule",{value:!0});const o=n(0),a=n(25),r=n(30);class l extends r.XPathElement{constructor(e,t){super(e),this.tokenType=t}evaluate(e){return a.Trees.findAllTokenNodes(e,this.tokenType)}}i([o.Override],l.prototype,"evaluate",null),t.XPathTokenAnywhereElement=l},function(e,t,n){"use strict";
/*!
 * Copyright 2016 The ANTLR Project. All rights reserved.
 * Licensed under the BSD-3-Clause license. See LICENSE file in the project root for license information.
 */var i=this&&this.__decorate||function(e,t,n,i){var o,a=arguments.length,r=a<3?t:null===i?i=Object.getOwnPropertyDescriptor(t,n):i;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)r=Reflect.decorate(e,t,n,i);else for(var l=e.length-1;l>=0;l--)(o=e[l])&&(r=(a<3?o(r):a>3?o(t,n,r):o(t,n))||r);return a>3&&r&&Object.defineProperty(t,n,r),r};Object.defineProperty(t,"__esModule",{value:!0});const o=n(0),a=n(29),r=n(25),l=n(30);class s extends l.XPathElement{constructor(e,t){super(e),this.tokenType=t}evaluate(e){let t=[];for(let n of r.Trees.getChildren(e))n instanceof a.TerminalNode&&(n.symbol.type===this.tokenType&&!this.invert||n.symbol.type!==this.tokenType&&this.invert)&&t.push(n);return t}}i([o.Override],s.prototype,"evaluate",null),t.XPathTokenElement=s},function(e,t,n){"use strict";
/*!
 * Copyright 2016 The ANTLR Project. All rights reserved.
 * Licensed under the BSD-3-Clause license. See LICENSE file in the project root for license information.
 */var i=this&&this.__decorate||function(e,t,n,i){var o,a=arguments.length,r=a<3?t:null===i?i=Object.getOwnPropertyDescriptor(t,n):i;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)r=Reflect.decorate(e,t,n,i);else for(var l=e.length-1;l>=0;l--)(o=e[l])&&(r=(a<3?o(r):a>3?o(t,n,r):o(t,n))||r);return a>3&&r&&Object.defineProperty(t,n,r),r};Object.defineProperty(t,"__esModule",{value:!0});const o=n(0),a=n(25),r=n(64),l=n(30);class s extends l.XPathElement{constructor(){super(r.XPath.WILDCARD)}evaluate(e){return this.invert?[]:a.Trees.getDescendants(e)}}i([o.Override],s.prototype,"evaluate",null),t.XPathWildcardAnywhereElement=s},function(e,t,n){"use strict";
/*!
 * Copyright 2016 The ANTLR Project. All rights reserved.
 * Licensed under the BSD-3-Clause license. See LICENSE file in the project root for license information.
 */var i=this&&this.__decorate||function(e,t,n,i){var o,a=arguments.length,r=a<3?t:null===i?i=Object.getOwnPropertyDescriptor(t,n):i;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)r=Reflect.decorate(e,t,n,i);else for(var l=e.length-1;l>=0;l--)(o=e[l])&&(r=(a<3?o(r):a>3?o(t,n,r):o(t,n))||r);return a>3&&r&&Object.defineProperty(t,n,r),r};Object.defineProperty(t,"__esModule",{value:!0});const o=n(0),a=n(25),r=n(64),l=n(30);class s extends l.XPathElement{constructor(){super(r.XPath.WILDCARD)}evaluate(e){let t=[];if(this.invert)return t;for(let n of a.Trees.getChildren(e))t.push(n);return t}}i([o.Override],s.prototype,"evaluate",null),t.XPathWildcardElement=s},function(e,t,n){"use strict";
/*!
 * Copyright 2016 The ANTLR Project. All rights reserved.
 * Licensed under the BSD-3-Clause license. See LICENSE file in the project root for license information.
 */var i=this&&this.__decorate||function(e,t,n,i){var o,a=arguments.length,r=a<3?t:null===i?i=Object.getOwnPropertyDescriptor(t,n):i;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)r=Reflect.decorate(e,t,n,i);else for(var l=e.length-1;l>=0;l--)(o=e[l])&&(r=(a<3?o(r):a>3?o(t,n,r):o(t,n))||r);return a>3&&r&&Object.defineProperty(t,n,r),r},o=this&&this.__param||function(e,t){return function(n,i){t(n,i,e)}};Object.defineProperty(t,"__esModule",{value:!0});const a=n(0),r=n(3);let l=class{constructor(e,t,n){if(null==e||0===e.length)throw new Error("ruleName cannot be null or empty.");this._ruleName=e,this.bypassTokenType=t,this._label=n}get ruleName(){return this._ruleName}get label(){return this._label}get channel(){return r.Token.DEFAULT_CHANNEL}get text(){return null!=this._label?"<"+this._label+":"+this._ruleName+">":"<"+this._ruleName+">"}get type(){return this.bypassTokenType}get line(){return 0}get charPositionInLine(){return-1}get tokenIndex(){return-1}get startIndex(){return-1}get stopIndex(){return-1}get tokenSource(){}get inputStream(){}toString(){return this._ruleName+":"+this.bypassTokenType}};i([a.NotNull],l.prototype,"ruleName",null),i([a.Override],l.prototype,"channel",null),i([a.Override],l.prototype,"text",null),i([a.Override],l.prototype,"type",null),i([a.Override],l.prototype,"line",null),i([a.Override],l.prototype,"charPositionInLine",null),i([a.Override],l.prototype,"tokenIndex",null),i([a.Override],l.prototype,"startIndex",null),i([a.Override],l.prototype,"stopIndex",null),i([a.Override],l.prototype,"tokenSource",null),i([a.Override],l.prototype,"inputStream",null),i([a.Override],l.prototype,"toString",null),l=i([o(0,a.NotNull)],l),t.RuleTagToken=l},function(e,t,n){"use strict";
/*!
 * Copyright 2016 The ANTLR Project. All rights reserved.
 * Licensed under the BSD-3-Clause license. See LICENSE file in the project root for license information.
 */var i=this&&this.__decorate||function(e,t,n,i){var o,a=arguments.length,r=a<3?t:null===i?i=Object.getOwnPropertyDescriptor(t,n):i;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)r=Reflect.decorate(e,t,n,i);else for(var l=e.length-1;l>=0;l--)(o=e[l])&&(r=(a<3?o(r):a>3?o(t,n,r):o(t,n))||r);return a>3&&r&&Object.defineProperty(t,n,r),r};Object.defineProperty(t,"__esModule",{value:!0});const o=n(103),a=n(0);class r extends o.Chunk{constructor(e,t){if(super(),null==e||0===e.length)throw new Error("tag cannot be null or empty");this._tag=e,this._label=t}get tag(){return this._tag}get label(){return this._label}toString(){return null!=this._label?this._label+":"+this._tag:this._tag}}i([a.NotNull],r.prototype,"tag",null),i([a.Override],r.prototype,"toString",null),t.TagChunk=r},function(e,t,n){"use strict";
/*!
 * Copyright 2016 The ANTLR Project. All rights reserved.
 * Licensed under the BSD-3-Clause license. See LICENSE file in the project root for license information.
 */var i=this&&this.__decorate||function(e,t,n,i){var o,a=arguments.length,r=a<3?t:null===i?i=Object.getOwnPropertyDescriptor(t,n):i;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)r=Reflect.decorate(e,t,n,i);else for(var l=e.length-1;l>=0;l--)(o=e[l])&&(r=(a<3?o(r):a>3?o(t,n,r):o(t,n))||r);return a>3&&r&&Object.defineProperty(t,n,r),r},o=this&&this.__param||function(e,t){return function(n,i){t(n,i,e)}};Object.defineProperty(t,"__esModule",{value:!0});const a=n(103),r=n(0);let l=class extends a.Chunk{constructor(e){if(super(),null==e)throw new Error("text cannot be null");this._text=e}get text(){return this._text}toString(){return"'"+this._text+"'"}};i([r.NotNull],l.prototype,"_text",void 0),i([r.NotNull],l.prototype,"text",null),i([r.Override],l.prototype,"toString",null),l=i([o(0,r.NotNull)],l),t.TextChunk=l},function(e,t,n){"use strict";
/*!
 * Copyright 2016 The ANTLR Project. All rights reserved.
 * Licensed under the BSD-3-Clause license. See LICENSE file in the project root for license information.
 */var i=this&&this.__decorate||function(e,t,n,i){var o,a=arguments.length,r=a<3?t:null===i?i=Object.getOwnPropertyDescriptor(t,n):i;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)r=Reflect.decorate(e,t,n,i);else for(var l=e.length-1;l>=0;l--)(o=e[l])&&(r=(a<3?o(r):a>3?o(t,n,r):o(t,n))||r);return a>3&&r&&Object.defineProperty(t,n,r),r},o=this&&this.__param||function(e,t){return function(n,i){t(n,i,e)}};Object.defineProperty(t,"__esModule",{value:!0});const a=n(35),r=n(0);let l=class extends a.CommonToken{constructor(e,t,n){super(t),this._tokenName=e,this._label=n}get tokenName(){return this._tokenName}get label(){return this._label}get text(){return null!=this._label?"<"+this._label+":"+this._tokenName+">":"<"+this._tokenName+">"}toString(){return this._tokenName+":"+this.type}};i([r.NotNull],l.prototype,"_tokenName",void 0),i([r.NotNull],l.prototype,"tokenName",null),i([r.Override],l.prototype,"text",null),i([r.Override],l.prototype,"toString",null),l=i([o(0,r.NotNull)],l),t.TokenTagToken=l},function(e,t,n){"use strict";
/*!
 * Copyright 2016 The ANTLR Project. All rights reserved.
 * Licensed under the BSD-3-Clause license. See LICENSE file in the project root for license information.
 */var i=this&&this.__decorate||function(e,t,n,i){var o,a=arguments.length,r=a<3?t:null===i?i=Object.getOwnPropertyDescriptor(t,n):i;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)r=Reflect.decorate(e,t,n,i);else for(var l=e.length-1;l>=0;l--)(o=e[l])&&(r=(a<3?o(r):a>3?o(t,n,r):o(t,n))||r);return a>3&&r&&Object.defineProperty(t,n,r),r},o=this&&this.__param||function(e,t){return function(n,i){t(n,i,e)}};Object.defineProperty(t,"__esModule",{value:!0});const a=n(39),r=n(0);let l=class extends a.DecisionEventInfo{constructor(e,t,n,i,o,a){super(e,t,i,o,a,t.useContext),this.ambigAlts=n}get ambiguousAlternatives(){return this.ambigAlts}};i([r.NotNull],l.prototype,"ambigAlts",void 0),i([r.NotNull],l.prototype,"ambiguousAlternatives",null),l=i([o(1,r.NotNull),o(2,r.NotNull),o(3,r.NotNull)],l),t.AmbiguityInfo=l},function(e,t,n){"use strict";
/*!
 * Copyright 2016 The ANTLR Project. All rights reserved.
 * Licensed under the BSD-3-Clause license. See LICENSE file in the project root for license information.
 */var i=this&&this.__decorate||function(e,t,n,i){var o,a=arguments.length,r=a<3?t:null===i?i=Object.getOwnPropertyDescriptor(t,n):i;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)r=Reflect.decorate(e,t,n,i);else for(var l=e.length-1;l>=0;l--)(o=e[l])&&(r=(a<3?o(r):a>3?o(t,n,r):o(t,n))||r);return a>3&&r&&Object.defineProperty(t,n,r),r},o=this&&this.__param||function(e,t){return function(n,i){t(n,i,e)}};Object.defineProperty(t,"__esModule",{value:!0});const a=n(39),r=n(0);let l=class extends a.DecisionEventInfo{constructor(e,t,n,i,o){super(e,t,n,i,o,!0)}};l=i([o(1,r.NotNull),o(2,r.NotNull)],l),t.ContextSensitivityInfo=l},function(e,t,n){"use strict";
/*!
 * Copyright 2016 The ANTLR Project. All rights reserved.
 * Licensed under the BSD-3-Clause license. See LICENSE file in the project root for license information.
 */var i=this&&this.__decorate||function(e,t,n,i){var o,a=arguments.length,r=a<3?t:null===i?i=Object.getOwnPropertyDescriptor(t,n):i;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)r=Reflect.decorate(e,t,n,i);else for(var l=e.length-1;l>=0;l--)(o=e[l])&&(r=(a<3?o(r):a>3?o(t,n,r):o(t,n))||r);return a>3&&r&&Object.defineProperty(t,n,r),r};Object.defineProperty(t,"__esModule",{value:!0});const o=n(0);class a{constructor(e){this.invocations=0,this.timeInPrediction=0,this.SLL_TotalLook=0,this.SLL_MinLook=0,this.SLL_MaxLook=0,this.LL_TotalLook=0,this.LL_MinLook=0,this.LL_MaxLook=0,this.contextSensitivities=[],this.errors=[],this.ambiguities=[],this.predicateEvals=[],this.SLL_ATNTransitions=0,this.SLL_DFATransitions=0,this.LL_Fallback=0,this.LL_ATNTransitions=0,this.LL_DFATransitions=0,this.decision=e}toString(){return"{decision="+this.decision+", contextSensitivities="+this.contextSensitivities.length+", errors="+this.errors.length+", ambiguities="+this.ambiguities.length+", SLL_lookahead="+this.SLL_TotalLook+", SLL_ATNTransitions="+this.SLL_ATNTransitions+", SLL_DFATransitions="+this.SLL_DFATransitions+", LL_Fallback="+this.LL_Fallback+", LL_lookahead="+this.LL_TotalLook+", LL_ATNTransitions="+this.LL_ATNTransitions+"}"}}i([o.Override],a.prototype,"toString",null),t.DecisionInfo=a},function(e,t,n){"use strict";
/*!
 * Copyright 2016 The ANTLR Project. All rights reserved.
 * Licensed under the BSD-3-Clause license. See LICENSE file in the project root for license information.
 */var i=this&&this.__decorate||function(e,t,n,i){var o,a=arguments.length,r=a<3?t:null===i?i=Object.getOwnPropertyDescriptor(t,n):i;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)r=Reflect.decorate(e,t,n,i);else for(var l=e.length-1;l>=0;l--)(o=e[l])&&(r=(a<3?o(r):a>3?o(t,n,r):o(t,n))||r);return a>3&&r&&Object.defineProperty(t,n,r),r},o=this&&this.__param||function(e,t){return function(n,i){t(n,i,e)}};Object.defineProperty(t,"__esModule",{value:!0});const a=n(39),r=n(0);let l=class extends a.DecisionEventInfo{constructor(e,t,n,i,o){super(e,t,n,i,o,t.useContext)}};l=i([o(1,r.NotNull),o(2,r.NotNull)],l),t.ErrorInfo=l},function(e,t,n){"use strict";
/*!
 * Copyright 2016 The ANTLR Project. All rights reserved.
 * Licensed under the BSD-3-Clause license. See LICENSE file in the project root for license information.
 */var i=this&&this.__decorate||function(e,t,n,i){var o,a=arguments.length,r=a<3?t:null===i?i=Object.getOwnPropertyDescriptor(t,n):i;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)r=Reflect.decorate(e,t,n,i);else for(var l=e.length-1;l>=0;l--)(o=e[l])&&(r=(a<3?o(r):a>3?o(t,n,r):o(t,n))||r);return a>3&&r&&Object.defineProperty(t,n,r),r},o=this&&this.__param||function(e,t){return function(n,i){t(n,i,e)}};Object.defineProperty(t,"__esModule",{value:!0});const a=n(39),r=n(0);let l=class extends a.DecisionEventInfo{constructor(e,t,n,i,o,a,r){super(e,t,i,o,a,r),this.predictedAlt=n}};l=i([o(3,r.NotNull)],l),t.LookaheadEventInfo=l},function(e,t,n){"use strict";
/*!
 * Copyright 2016 The ANTLR Project. All rights reserved.
 * Licensed under the BSD-3-Clause license. See LICENSE file in the project root for license information.
 */var i=this&&this.__decorate||function(e,t,n,i){var o,a=arguments.length,r=a<3?t:null===i?i=Object.getOwnPropertyDescriptor(t,n):i;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)r=Reflect.decorate(e,t,n,i);else for(var l=e.length-1;l>=0;l--)(o=e[l])&&(r=(a<3?o(r):a>3?o(t,n,r):o(t,n))||r);return a>3&&r&&Object.defineProperty(t,n,r),r},o=this&&this.__param||function(e,t){return function(n,i){t(n,i,e)}};Object.defineProperty(t,"__esModule",{value:!0});const a=n(39),r=n(0);let l=class extends a.DecisionEventInfo{constructor(e,t,n,i,o,a,r,l){super(t,e,n,i,o,e.useContext),this.semctx=a,this.evalResult=r,this.predictedAlt=l}};l=i([o(0,r.NotNull),o(2,r.NotNull),o(5,r.NotNull)],l),t.PredicateEvalInfo=l},function(e,t,n){"use strict";
/*!
 * Copyright 2016 The ANTLR Project. All rights reserved.
 * Licensed under the BSD-3-Clause license. See LICENSE file in the project root for license information.
 */Object.defineProperty(t,"__esModule",{value:!0}),function(e){e[e.SELF=0]="SELF",e[e.PARENTS=1]="PARENTS",e[e.CHILDREN=2]="CHILDREN",e[e.ANCESTORS=3]="ANCESTORS",e[e.DESCENDANTS=4]="DESCENDANTS",e[e.SIBLINGS=5]="SIBLINGS",e[e.PRECEEDING_SIBLINGS=6]="PRECEEDING_SIBLINGS",e[e.FOLLOWING_SIBLINGS=7]="FOLLOWING_SIBLINGS",e[e.PRECEEDING=8]="PRECEEDING",e[e.FOLLOWING=9]="FOLLOWING"}(t.Dependents||(t.Dependents={}))},function(e,t,n){"use strict";
/*!
 * Copyright 2016 The ANTLR Project. All rights reserved.
 * Licensed under the BSD-3-Clause license. See LICENSE file in the project root for license information.
 */var i=this&&this.__decorate||function(e,t,n,i){var o,a=arguments.length,r=a<3?t:null===i?i=Object.getOwnPropertyDescriptor(t,n):i;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)r=Reflect.decorate(e,t,n,i);else for(var l=e.length-1;l>=0;l--)(o=e[l])&&(r=(a<3?o(r):a>3?o(t,n,r):o(t,n))||r);return a>3&&r&&Object.defineProperty(t,n,r),r},o=this&&this.__param||function(e,t){return function(n,i){t(n,i,e)}};Object.defineProperty(t,"__esModule",{value:!0});const a=n(22),r=n(0),l=n(10);class s{constructor(e=!0){this.exactOnly=e,this.exactOnly=e}syntaxError(e,t,n,i,o,a){}reportAmbiguity(e,t,n,i,o,a,r){if(this.exactOnly&&!o)return;let s=`reportAmbiguity d=${this.getDecisionDescription(e,t)}: ambigAlts=${this.getConflictingAlts(a,r)}, input='${e.inputStream.getText(l.Interval.of(n,i))}'`;e.notifyErrorListeners(s)}reportAttemptingFullContext(e,t,n,i,o,a){let r=`reportAttemptingFullContext d=${this.getDecisionDescription(e,t)}, input='${e.inputStream.getText(l.Interval.of(n,i))}'`;e.notifyErrorListeners(r)}reportContextSensitivity(e,t,n,i,o,a){let r=`reportContextSensitivity d=${this.getDecisionDescription(e,t)}, input='${e.inputStream.getText(l.Interval.of(n,i))}'`;e.notifyErrorListeners(r)}getDecisionDescription(e,t){let n=t.decision,i=t.atnStartState.ruleIndex,o=e.ruleNames;if(i<0||i>=o.length)return n.toString();let a=o[i];return a?`${n} (${a})`:n.toString()}getConflictingAlts(e,t){if(null!=e)return e;let n=new a.BitSet;for(let e of t)n.set(e.alt);return n}}i([r.Override],s.prototype,"syntaxError",null),i([r.Override,o(0,r.NotNull),o(1,r.NotNull),o(6,r.NotNull)],s.prototype,"reportAmbiguity",null),i([r.Override,o(0,r.NotNull),o(1,r.NotNull),o(5,r.NotNull)],s.prototype,"reportAttemptingFullContext",null),i([r.Override,o(0,r.NotNull),o(1,r.NotNull),o(5,r.NotNull)],s.prototype,"reportContextSensitivity",null),i([o(0,r.NotNull),o(1,r.NotNull)],s.prototype,"getDecisionDescription",null),i([r.NotNull,o(1,r.NotNull)],s.prototype,"getConflictingAlts",null),t.DiagnosticErrorListener=s},function(e,t,n){"use strict";
/*!
 * Copyright 2016 The ANTLR Project. All rights reserved.
 * Licensed under the BSD-3-Clause license. See LICENSE file in the project root for license information.
 */var i=this&&this.__decorate||function(e,t,n,i){var o,a=arguments.length,r=a<3?t:null===i?i=Object.getOwnPropertyDescriptor(t,n):i;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)r=Reflect.decorate(e,t,n,i);else for(var l=e.length-1;l>=0;l--)(o=e[l])&&(r=(a<3?o(r):a>3?o(t,n,r):o(t,n))||r);return a>3&&r&&Object.defineProperty(t,n,r),r},o=this&&this.__param||function(e,t){return function(n,i){t(n,i,e)}};Object.defineProperty(t,"__esModule",{value:!0});const a=n(18),r=n(40),l=n(0),s=n(0);let d=class extends a.Lexer{constructor(e,t,n,i,o,a,l){if(super(l),0!==a.grammarType)throw new Error("IllegalArgumentException: The ATN must be a lexer ATN.");this._grammarFileName=e,this._atn=a,this._ruleNames=n.slice(0),this._channelNames=i.slice(0),this._modeNames=o.slice(0),this._vocabulary=t,this._interp=new r.LexerATNSimulator(a,this)}get atn(){return this._atn}get grammarFileName(){return this._grammarFileName}get ruleNames(){return this._ruleNames}get channelNames(){return this._channelNames}get modeNames(){return this._modeNames}get vocabulary(){return this._vocabulary}};i([l.NotNull],d.prototype,"_vocabulary",void 0),i([s.Override],d.prototype,"atn",null),i([s.Override],d.prototype,"grammarFileName",null),i([s.Override],d.prototype,"ruleNames",null),i([s.Override],d.prototype,"channelNames",null),i([s.Override],d.prototype,"modeNames",null),i([s.Override],d.prototype,"vocabulary",null),d=i([o(1,l.NotNull)],d),t.LexerInterpreter=d},function(e,t,n){"use strict";
/*!
 * Copyright 2016 The ANTLR Project. All rights reserved.
 * Licensed under the BSD-3-Clause license. See LICENSE file in the project root for license information.
 */var i=this&&this.__decorate||function(e,t,n,i){var o,a=arguments.length,r=a<3?t:null===i?i=Object.getOwnPropertyDescriptor(t,n):i;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)r=Reflect.decorate(e,t,n,i);else for(var l=e.length-1;l>=0;l--)(o=e[l])&&(r=(a<3?o(r):a>3?o(t,n,r):o(t,n))||r);return a>3&&r&&Object.defineProperty(t,n,r),r};Object.defineProperty(t,"__esModule",{value:!0});const o=n(6),a=n(0),r=n(1);class l extends r.ParserRuleContext{constructor(e,t){void 0!==t?super(e,t):super(),this._altNumber=o.ATN.INVALID_ALT_NUMBER}get altNumber(){return this._altNumber}set altNumber(e){this._altNumber=e}}i([a.Override],l.prototype,"altNumber",null),t.RuleContextWithAltNum=l},function(e,t,n){"use strict";
/*!
 * Copyright 2016 The ANTLR Project. All rights reserved.
 * Licensed under the BSD-3-Clause license. See LICENSE file in the project root for license information.
 */Object.defineProperty(t,"__esModule",{value:!0}),t.RuleDependency=function(e){return(e,t,n)=>{}}},function(e,t,n){"use strict";
/*!
 * Copyright 2016 The ANTLR Project. All rights reserved.
 * Licensed under the BSD-3-Clause license. See LICENSE file in the project root for license information.
 */Object.defineProperty(t,"__esModule",{value:!0}),t.RuleVersion=function(e){return(e,t,n)=>{}}},function(e,t,n){"use strict";
/*!
 * Copyright 2016 The ANTLR Project. All rights reserved.
 * Licensed under the BSD-3-Clause license. See LICENSE file in the project root for license information.
 */var i=this&&this.__decorate||function(e,t,n,i){var o,a=arguments.length,r=a<3?t:null===i?i=Object.getOwnPropertyDescriptor(t,n):i;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)r=Reflect.decorate(e,t,n,i);else for(var l=e.length-1;l>=0;l--)(o=e[l])&&(r=(a<3?o(r):a>3?o(t,n,r):o(t,n))||r);return a>3&&r&&Object.defineProperty(t,n,r),r};Object.defineProperty(t,"__esModule",{value:!0});const o=n(10),a=n(0),r=n(3);class l{constructor(e){this.tokens=e,this.programs=new Map,this.programs.set(l.DEFAULT_PROGRAM_NAME,[]),this.lastRewriteTokenIndexes=new Map}getTokenStream(){return this.tokens}rollback(e,t=l.DEFAULT_PROGRAM_NAME){let n=this.programs.get(t);null!=n&&this.programs.set(t,n.slice(l.MIN_TOKEN_INDEX,e))}deleteProgram(e=l.DEFAULT_PROGRAM_NAME){this.rollback(l.MIN_TOKEN_INDEX,e)}insertAfter(e,t,n=l.DEFAULT_PROGRAM_NAME){let i;i="number"==typeof e?e:e.tokenIndex;let o=new c(this.tokens,i,t),a=this.getProgram(n);o.instructionIndex=a.length,a.push(o)}insertBefore(e,t,n=l.DEFAULT_PROGRAM_NAME){let i;i="number"==typeof e?e:e.tokenIndex;let o=new d(this.tokens,i,t),a=this.getProgram(n);o.instructionIndex=a.length,a.push(o)}replaceSingle(e,t){this.replace(e,e,t)}replace(e,t,n,i=l.DEFAULT_PROGRAM_NAME){if("number"!=typeof e&&(e=e.tokenIndex),"number"!=typeof t&&(t=t.tokenIndex),e>t||e<0||t<0||t>=this.tokens.size)throw new RangeError(`replace: range invalid: ${e}..${t}(size=${this.tokens.size})`);let o=new u(this.tokens,e,t,n),a=this.getProgram(i);o.instructionIndex=a.length,a.push(o)}delete(e,t,n=l.DEFAULT_PROGRAM_NAME){void 0===t&&(t=e),this.replace(e,t,"",n)}getLastRewriteTokenIndex(e=l.DEFAULT_PROGRAM_NAME){let t=this.lastRewriteTokenIndexes.get(e);return null==t?-1:t}setLastRewriteTokenIndex(e,t){this.lastRewriteTokenIndexes.set(e,t)}getProgram(e){let t=this.programs.get(e);return null==t&&(t=this.initializeProgram(e)),t}initializeProgram(e){let t=[];return this.programs.set(e,t),t}getText(e,t=l.DEFAULT_PROGRAM_NAME){let n;n=e instanceof o.Interval?e:o.Interval.of(0,this.tokens.size-1),"string"==typeof e&&(t=e);let i=this.programs.get(t),a=n.a,s=n.b;if(s>this.tokens.size-1&&(s=this.tokens.size-1),a<0&&(a=0),null==i||0===i.length)return this.tokens.getText(n);let d=[],c=this.reduceToSingleOperationPerIndex(i),u=a;for(;u<=s&&u<this.tokens.size;){let e=c.get(u);c.delete(u);let t=this.tokens.get(u);null==e?(t.type!==r.Token.EOF&&d.push(String(t.text)),u++):u=e.execute(d)}if(s===this.tokens.size-1)for(let e of c.values())e.index>=this.tokens.size-1&&d.push(e.text.toString());return d.join("")}reduceToSingleOperationPerIndex(e){for(let t=0;t<e.length;t++){let n=e[t];if(null==n)continue;if(!(n instanceof u))continue;let i=n,o=this.getKindOfOps(e,d,t);for(let t of o)t.index===i.index?(e[t.instructionIndex]=void 0,i.text=t.text.toString()+(null!=i.text?i.text.toString():"")):t.index>i.index&&t.index<=i.lastIndex&&(e[t.instructionIndex]=void 0);let a=this.getKindOfOps(e,u,t);for(let t of a){if(t.index>=i.index&&t.lastIndex<=i.lastIndex){e[t.instructionIndex]=void 0;continue}let n=t.lastIndex<i.index||t.index>i.lastIndex;if(null!=t.text||null!=i.text||n){if(!n)throw new Error(`replace op boundaries of ${i} overlap with previous ${t}`)}else e[t.instructionIndex]=void 0,i.index=Math.min(t.index,i.index),i.lastIndex=Math.max(t.lastIndex,i.lastIndex)}}for(let t=0;t<e.length;t++){let n=e[t];if(null==n)continue;if(!(n instanceof d))continue;let i=n,o=this.getKindOfOps(e,d,t);for(let t of o)t.index===i.index&&(t instanceof c?(i.text=this.catOpText(t.text,i.text),e[t.instructionIndex]=void 0):t instanceof d&&(i.text=this.catOpText(i.text,t.text),e[t.instructionIndex]=void 0));let a=this.getKindOfOps(e,u,t);for(let n of a)if(i.index!==n.index){if(i.index>=n.index&&i.index<=n.lastIndex)throw new Error(`insert op ${i} within boundaries of previous ${n}`)}else n.text=this.catOpText(i.text,n.text),e[t]=void 0}let t=new Map;for(let n of e)if(null!=n){if(null!=t.get(n.index))throw new Error("should only be one op per index");t.set(n.index,n)}return t}catOpText(e,t){let n="",i="";return null!=e&&(n=e.toString()),null!=t&&(i=t.toString()),n+i}getKindOfOps(e,t,n){let i=[];for(let o=0;o<n&&o<e.length;o++){let n=e[o];null!=n&&(n instanceof t&&i.push(n))}return i}}l.DEFAULT_PROGRAM_NAME="default",l.PROGRAM_INIT_SIZE=100,l.MIN_TOKEN_INDEX=0,t.TokenStreamRewriter=l;class s{constructor(e,t,n){this.tokens=e,this.index=t,this.text=void 0===n?"":n}execute(e){return this.index}toString(){let e=this.constructor.name,t=e.indexOf("$");return e=e.substring(t+1,e.length),"<"+e+"@"+this.tokens.get(this.index)+':"'+this.text+'">'}}i([a.Override],s.prototype,"toString",null),t.RewriteOperation=s;class d extends s{constructor(e,t,n){super(e,t,n)}execute(e){return e.push(this.text.toString()),this.tokens.get(this.index).type!==r.Token.EOF&&e.push(String(this.tokens.get(this.index).text)),this.index+1}}i([a.Override],d.prototype,"execute",null);class c extends d{constructor(e,t,n){super(e,t+1,n)}}class u extends s{constructor(e,t,n,i){super(e,t,i),this.lastIndex=n}execute(e){return null!=this.text&&e.push(this.text.toString()),this.lastIndex+1}toString(){return null==this.text?"<DeleteOp@"+this.tokens.get(this.index)+".."+this.tokens.get(this.lastIndex)+">":"<ReplaceOp@"+this.tokens.get(this.index)+".."+this.tokens.get(this.lastIndex)+':"'+this.text+'">'}}i([a.Override],u.prototype,"execute",null),i([a.Override],u.prototype,"toString",null)},function(e,t,n){"use strict";n.r(t);var i={};n.r(i),n.d(i,"formats",(function(){return qt})),n.d(i,"addTranslation",(function(){return ln})),n.d(i,"getTranslation",(function(){return sn})),n.d(i,"setLocale",(function(){return dn})),n.d(i,"getLocale",(function(){return cn})),n.d(i,"setDefaultLocale",(function(){return un})),n.d(i,"getDefaultLocale",(function(){return mn})),n.d(i,"setFormats",(function(){return hn})),n.d(i,"getFormats",(function(){return pn})),n.d(i,"getRegisteredLocales",(function(){return Tn})),n.d(i,"translate",(function(){return bn})),n.d(i,"init",(function(){return gn})),n.d(i,"load",(function(){return xn}));const o=new class{constructor(){this.listeners=[],this.unexpectedErrorHandler=function(e){setTimeout(()=>{if(e.stack)throw new Error(e.message+"\n\n"+e.stack);throw e},0)}}emit(e){this.listeners.forEach(t=>{t(e)})}onUnexpectedError(e){this.unexpectedErrorHandler(e),this.emit(e)}onUnexpectedExternalError(e){this.unexpectedErrorHandler(e)}};function a(e){l(e)||o.onUnexpectedError(e)}function r(e){if(e instanceof Error){let{name:t,message:n}=e;return{$isError:!0,name:t,message:n,stack:e.stacktrace||e.stack}}return e}function l(e){return e instanceof Error&&"Canceled"===e.name&&"Canceled"===e.message}var s;!function(e){e.is=function(e){return e&&"object"==typeof e&&"function"==typeof e[Symbol.iterator]};const t=Object.freeze([]);e.empty=function(){return t},e.single=function*(e){yield e},e.from=function(e){return e||t},e.isEmpty=function(e){return!e||!0===e[Symbol.iterator]().next().done},e.first=function(e){return e[Symbol.iterator]().next().value},e.some=function(e,t){for(const n of e)if(t(n))return!0;return!1},e.filter=function*(e,t){for(const n of e)t(n)&&(yield n)},e.map=function*(e,t){for(const n of e)yield t(n)},e.concat=function*(...e){for(const t of e)for(const e of t)yield e},e.concatNested=function*(e){for(const t of e)for(const e of t)yield e},e.slice=function*(e,t,n=e.length){for(t<0&&(t+=e.length),n<0?n+=e.length:n>e.length&&(n=e.length);t<n;t++)yield e[t]},e.consume=function(t,n=Number.POSITIVE_INFINITY){const i=[];if(0===n)return[i,t];const o=t[Symbol.iterator]();for(let t=0;t<n;t++){const t=o.next();if(t.done)return[i,e.empty()];i.push(t.value)}return[i,{[Symbol.iterator]:()=>o}]}}(s||(s={}));let d=null;function c(e){d&&d.markTracked(e)}function u(e){return d?(d.trackDisposable(e),e):e}class m extends Error{constructor(e){super(`Encounter errors while disposing of store. Errors: [${e.join(", ")}]`),this.errors=e}}function h(e){if(s.is(e)){let t=[];for(const n of e)if(n){c(n);try{n.dispose()}catch(e){t.push(e)}}if(1===t.length)throw t[0];if(t.length>1)throw new m(t);return Array.isArray(e)?[]:e}if(e)return c(e),e.dispose(),e}function p(...e){return e.forEach(c),function(e){const t=u({dispose:()=>{c(t),e()}});return t}(()=>h(e))}class T{constructor(){this._toDispose=new Set,this._isDisposed=!1}dispose(){this._isDisposed||(c(this),this._isDisposed=!0,this.clear())}clear(){try{h(this._toDispose.values())}finally{this._toDispose.clear()}}add(e){if(!e)return e;if(e===this)throw new Error("Cannot register a disposable on itself!");return c(e),this._isDisposed?T.DISABLE_DISPOSED_WARNING||console.warn(new Error("Trying to add a disposable to a DisposableStore that has already been disposed of. The added object will be leaked!").stack):this._toDispose.add(e),e}}T.DISABLE_DISPOSED_WARNING=!1;class b{constructor(){this._store=new T,u(this)}dispose(){c(this),this._store.dispose()}_register(e){if(e===this)throw new Error("Cannot register a disposable on itself!");return this._store.add(e)}}b.None=Object.freeze({dispose(){}});var g=n(4);function x(e){const t=[];for(const n of function(e){let t=[],n=Object.getPrototypeOf(e);for(;Object.prototype!==n;)t=t.concat(Object.getOwnPropertyNames(n)),n=Object.getPrototypeOf(n);return t}(e))"function"==typeof e[n]&&t.push(n);return t}function f(e,t){const n=e=>function(){const n=Array.prototype.slice.call(arguments,0);return t(e,n)};let i={};for(const t of e)i[t]=n(t);return i}class k{constructor(e){this._workerId=-1,this._handler=e,this._lastSentReq=0,this._pendingReplies=Object.create(null)}setWorkerId(e){this._workerId=e}sendMessage(e,t){let n=String(++this._lastSentReq);return new Promise((i,o)=>{this._pendingReplies[n]={resolve:i,reject:o},this._send({vsWorker:this._workerId,req:n,method:e,args:t})})}handleMessage(e){e&&e.vsWorker&&(-1!==this._workerId&&e.vsWorker!==this._workerId||this._handleMessage(e))}_handleMessage(e){if(e.seq){let t=e;if(!this._pendingReplies[t.seq])return void console.warn("Got reply to unknown seq");let n=this._pendingReplies[t.seq];if(delete this._pendingReplies[t.seq],t.err){let e=t.err;return t.err.$isError&&(e=new Error,e.name=t.err.name,e.message=t.err.message,e.stack=t.err.stack),void n.reject(e)}return void n.resolve(t.res)}let t=e,n=t.req;this._handler.handleMessage(t.method,t.args).then(e=>{this._send({vsWorker:this._workerId,seq:n,res:e,err:void 0})},e=>{e.detail instanceof Error&&(e.detail=r(e.detail)),this._send({vsWorker:this._workerId,seq:n,res:void 0,err:r(e)})})}_send(e){let t=[];if(e.req){const n=e;for(let e=0;e<n.args.length;e++)n.args[e]instanceof ArrayBuffer&&t.push(n.args[e])}else{const n=e;n.res instanceof ArrayBuffer&&t.push(n.res)}this._handler.sendMessage(e,t)}}class S{constructor(e,t){this._requestHandlerFactory=t,this._requestHandler=null,this._protocol=new k({sendMessage:(t,n)=>{e(t,n)},handleMessage:(e,t)=>this._handleMessage(e,t)})}onmessage(e){this._protocol.handleMessage(e)}_handleMessage(e,t){if("$initialize"===e)return this.initialize(t[0],t[1],t[2],t[3]);if(!this._requestHandler||"function"!=typeof this._requestHandler[e])return Promise.reject(new Error("Missing requestHandler or method: "+e));try{return Promise.resolve(this._requestHandler[e].apply(this._requestHandler,t))}catch(e){return Promise.reject(e)}}initialize(e,t,n,i){this._protocol.setWorkerId(e);const o=f(i,(e,t)=>this._protocol.sendMessage(e,t));return this._requestHandlerFactory?(this._requestHandler=this._requestHandlerFactory(o),Promise.resolve(x(this._requestHandler))):(t&&(void 0!==t.baseUrl&&delete t.baseUrl,void 0!==t.paths&&void 0!==t.paths.vs&&delete t.paths.vs,void 0!==typeof t.trustedTypesPolicy&&delete t.trustedTypesPolicy,t.catchError=!0,self.require.config(t)),new Promise((e,t)=>{self.require([n],n=>{this._requestHandler=n.create(o),this._requestHandler?e(x(this._requestHandler)):t(new Error("No RequestHandler!"))},t)}))}}function y(e,t){return function e(t,n,i,o,a){if(o<=i)return;const r=i+(o-i)/2|0;if(e(t,n,i,r,a),e(t,n,r+1,o,a),n(t[r],t[r+1])<=0)return;!function(e,t,n,i,o,a){let r=n,l=i+1;for(let t=n;t<=o;t++)a[t]=e[t];for(let s=n;s<=o;s++)r>i?e[s]=a[l++]:l>o?e[s]=a[r++]:t(a[l],a[r])<0?e[s]=a[l++]:e[s]=a[r++]}(t,n,i,r,o,a)}(e,t,0,e.length-1,[]),e}class C{constructor(e,t,n,i){this.originalStart=e,this.originalLength=t,this.modifiedStart=n,this.modifiedLength=i}getOriginalEnd(){return this.originalStart+this.originalLength}getModifiedEnd(){return this.modifiedStart+this.modifiedLength}}function E(e){return 55296<=e&&e<=56319}function A(e){return 56320<=e&&e<=57343}function O(e,t){return t-56320+(e-55296<<10)+65536}String.fromCharCode(65279);class _{constructor(){this._data=JSON.parse("[0,0,0,51592,51592,11,44424,44424,11,72251,72254,5,7150,7150,7,48008,48008,11,55176,55176,11,128420,128420,14,3276,3277,5,9979,9980,14,46216,46216,11,49800,49800,11,53384,53384,11,70726,70726,5,122915,122916,5,129320,129327,14,2558,2558,5,5906,5908,5,9762,9763,14,43360,43388,8,45320,45320,11,47112,47112,11,48904,48904,11,50696,50696,11,52488,52488,11,54280,54280,11,70082,70083,1,71350,71350,7,73111,73111,5,127892,127893,14,128726,128727,14,129473,129474,14,2027,2035,5,2901,2902,5,3784,3789,5,6754,6754,5,8418,8420,5,9877,9877,14,11088,11088,14,44008,44008,5,44872,44872,11,45768,45768,11,46664,46664,11,47560,47560,11,48456,48456,11,49352,49352,11,50248,50248,11,51144,51144,11,52040,52040,11,52936,52936,11,53832,53832,11,54728,54728,11,69811,69814,5,70459,70460,5,71096,71099,7,71998,71998,5,72874,72880,5,119149,119149,7,127374,127374,14,128335,128335,14,128482,128482,14,128765,128767,14,129399,129400,14,129680,129685,14,1476,1477,5,2377,2380,7,2759,2760,5,3137,3140,7,3458,3459,7,4153,4154,5,6432,6434,5,6978,6978,5,7675,7679,5,9723,9726,14,9823,9823,14,9919,9923,14,10035,10036,14,42736,42737,5,43596,43596,5,44200,44200,11,44648,44648,11,45096,45096,11,45544,45544,11,45992,45992,11,46440,46440,11,46888,46888,11,47336,47336,11,47784,47784,11,48232,48232,11,48680,48680,11,49128,49128,11,49576,49576,11,50024,50024,11,50472,50472,11,50920,50920,11,51368,51368,11,51816,51816,11,52264,52264,11,52712,52712,11,53160,53160,11,53608,53608,11,54056,54056,11,54504,54504,11,54952,54952,11,68108,68111,5,69933,69940,5,70197,70197,7,70498,70499,7,70845,70845,5,71229,71229,5,71727,71735,5,72154,72155,5,72344,72345,5,73023,73029,5,94095,94098,5,121403,121452,5,126981,127182,14,127538,127546,14,127990,127990,14,128391,128391,14,128445,128449,14,128500,128505,14,128752,128752,14,129160,129167,14,129356,129356,14,129432,129442,14,129648,129651,14,129751,131069,14,173,173,4,1757,1757,1,2274,2274,1,2494,2494,5,2641,2641,5,2876,2876,5,3014,3016,7,3262,3262,7,3393,3396,5,3570,3571,7,3968,3972,5,4228,4228,7,6086,6086,5,6679,6680,5,6912,6915,5,7080,7081,5,7380,7392,5,8252,8252,14,9096,9096,14,9748,9749,14,9784,9786,14,9833,9850,14,9890,9894,14,9938,9938,14,9999,9999,14,10085,10087,14,12349,12349,14,43136,43137,7,43454,43456,7,43755,43755,7,44088,44088,11,44312,44312,11,44536,44536,11,44760,44760,11,44984,44984,11,45208,45208,11,45432,45432,11,45656,45656,11,45880,45880,11,46104,46104,11,46328,46328,11,46552,46552,11,46776,46776,11,47000,47000,11,47224,47224,11,47448,47448,11,47672,47672,11,47896,47896,11,48120,48120,11,48344,48344,11,48568,48568,11,48792,48792,11,49016,49016,11,49240,49240,11,49464,49464,11,49688,49688,11,49912,49912,11,50136,50136,11,50360,50360,11,50584,50584,11,50808,50808,11,51032,51032,11,51256,51256,11,51480,51480,11,51704,51704,11,51928,51928,11,52152,52152,11,52376,52376,11,52600,52600,11,52824,52824,11,53048,53048,11,53272,53272,11,53496,53496,11,53720,53720,11,53944,53944,11,54168,54168,11,54392,54392,11,54616,54616,11,54840,54840,11,55064,55064,11,65438,65439,5,69633,69633,5,69837,69837,1,70018,70018,7,70188,70190,7,70368,70370,7,70465,70468,7,70712,70719,5,70835,70840,5,70850,70851,5,71132,71133,5,71340,71340,7,71458,71461,5,71985,71989,7,72002,72002,7,72193,72202,5,72281,72283,5,72766,72766,7,72885,72886,5,73104,73105,5,92912,92916,5,113824,113827,4,119173,119179,5,121505,121519,5,125136,125142,5,127279,127279,14,127489,127490,14,127570,127743,14,127900,127901,14,128254,128254,14,128369,128370,14,128400,128400,14,128425,128432,14,128468,128475,14,128489,128494,14,128715,128720,14,128745,128745,14,128759,128760,14,129004,129023,14,129296,129304,14,129340,129342,14,129388,129392,14,129404,129407,14,129454,129455,14,129485,129487,14,129659,129663,14,129719,129727,14,917536,917631,5,13,13,2,1160,1161,5,1564,1564,4,1807,1807,1,2085,2087,5,2363,2363,7,2402,2403,5,2507,2508,7,2622,2624,7,2691,2691,7,2786,2787,5,2881,2884,5,3006,3006,5,3072,3072,5,3170,3171,5,3267,3268,7,3330,3331,7,3406,3406,1,3538,3540,5,3655,3662,5,3897,3897,5,4038,4038,5,4184,4185,5,4352,4447,8,6068,6069,5,6155,6157,5,6448,6449,7,6742,6742,5,6783,6783,5,6966,6970,5,7042,7042,7,7143,7143,7,7212,7219,5,7412,7412,5,8206,8207,4,8294,8303,4,8596,8601,14,9410,9410,14,9742,9742,14,9757,9757,14,9770,9770,14,9794,9794,14,9828,9828,14,9855,9855,14,9882,9882,14,9900,9903,14,9929,9933,14,9963,9967,14,9987,9988,14,10006,10006,14,10062,10062,14,10175,10175,14,11744,11775,5,42607,42607,5,43043,43044,7,43263,43263,5,43444,43445,7,43569,43570,5,43698,43700,5,43766,43766,5,44032,44032,11,44144,44144,11,44256,44256,11,44368,44368,11,44480,44480,11,44592,44592,11,44704,44704,11,44816,44816,11,44928,44928,11,45040,45040,11,45152,45152,11,45264,45264,11,45376,45376,11,45488,45488,11,45600,45600,11,45712,45712,11,45824,45824,11,45936,45936,11,46048,46048,11,46160,46160,11,46272,46272,11,46384,46384,11,46496,46496,11,46608,46608,11,46720,46720,11,46832,46832,11,46944,46944,11,47056,47056,11,47168,47168,11,47280,47280,11,47392,47392,11,47504,47504,11,47616,47616,11,47728,47728,11,47840,47840,11,47952,47952,11,48064,48064,11,48176,48176,11,48288,48288,11,48400,48400,11,48512,48512,11,48624,48624,11,48736,48736,11,48848,48848,11,48960,48960,11,49072,49072,11,49184,49184,11,49296,49296,11,49408,49408,11,49520,49520,11,49632,49632,11,49744,49744,11,49856,49856,11,49968,49968,11,50080,50080,11,50192,50192,11,50304,50304,11,50416,50416,11,50528,50528,11,50640,50640,11,50752,50752,11,50864,50864,11,50976,50976,11,51088,51088,11,51200,51200,11,51312,51312,11,51424,51424,11,51536,51536,11,51648,51648,11,51760,51760,11,51872,51872,11,51984,51984,11,52096,52096,11,52208,52208,11,52320,52320,11,52432,52432,11,52544,52544,11,52656,52656,11,52768,52768,11,52880,52880,11,52992,52992,11,53104,53104,11,53216,53216,11,53328,53328,11,53440,53440,11,53552,53552,11,53664,53664,11,53776,53776,11,53888,53888,11,54000,54000,11,54112,54112,11,54224,54224,11,54336,54336,11,54448,54448,11,54560,54560,11,54672,54672,11,54784,54784,11,54896,54896,11,55008,55008,11,55120,55120,11,64286,64286,5,66272,66272,5,68900,68903,5,69762,69762,7,69817,69818,5,69927,69931,5,70003,70003,5,70070,70078,5,70094,70094,7,70194,70195,7,70206,70206,5,70400,70401,5,70463,70463,7,70475,70477,7,70512,70516,5,70722,70724,5,70832,70832,5,70842,70842,5,70847,70848,5,71088,71089,7,71102,71102,7,71219,71226,5,71231,71232,5,71342,71343,7,71453,71455,5,71463,71467,5,71737,71738,5,71995,71996,5,72000,72000,7,72145,72147,7,72160,72160,5,72249,72249,7,72273,72278,5,72330,72342,5,72752,72758,5,72850,72871,5,72882,72883,5,73018,73018,5,73031,73031,5,73109,73109,5,73461,73462,7,94031,94031,5,94192,94193,7,119142,119142,7,119155,119162,4,119362,119364,5,121476,121476,5,122888,122904,5,123184,123190,5,126976,126979,14,127184,127231,14,127344,127345,14,127405,127461,14,127514,127514,14,127561,127567,14,127778,127779,14,127896,127896,14,127985,127986,14,127995,127999,5,128326,128328,14,128360,128366,14,128378,128378,14,128394,128397,14,128405,128406,14,128422,128423,14,128435,128443,14,128453,128464,14,128479,128480,14,128484,128487,14,128496,128498,14,128640,128709,14,128723,128724,14,128736,128741,14,128747,128748,14,128755,128755,14,128762,128762,14,128981,128991,14,129096,129103,14,129292,129292,14,129311,129311,14,129329,129330,14,129344,129349,14,129360,129374,14,129394,129394,14,129402,129402,14,129413,129425,14,129445,129450,14,129466,129471,14,129483,129483,14,129511,129535,14,129653,129655,14,129667,129670,14,129705,129711,14,129731,129743,14,917505,917505,4,917760,917999,5,10,10,3,127,159,4,768,879,5,1471,1471,5,1536,1541,1,1648,1648,5,1767,1768,5,1840,1866,5,2070,2073,5,2137,2139,5,2307,2307,7,2366,2368,7,2382,2383,7,2434,2435,7,2497,2500,5,2519,2519,5,2563,2563,7,2631,2632,5,2677,2677,5,2750,2752,7,2763,2764,7,2817,2817,5,2879,2879,5,2891,2892,7,2914,2915,5,3008,3008,5,3021,3021,5,3076,3076,5,3146,3149,5,3202,3203,7,3264,3265,7,3271,3272,7,3298,3299,5,3390,3390,5,3402,3404,7,3426,3427,5,3535,3535,5,3544,3550,7,3635,3635,7,3763,3763,7,3893,3893,5,3953,3966,5,3981,3991,5,4145,4145,7,4157,4158,5,4209,4212,5,4237,4237,5,4520,4607,10,5970,5971,5,6071,6077,5,6089,6099,5,6277,6278,5,6439,6440,5,6451,6456,7,6683,6683,5,6744,6750,5,6765,6770,7,6846,6846,5,6964,6964,5,6972,6972,5,7019,7027,5,7074,7077,5,7083,7085,5,7146,7148,7,7154,7155,7,7222,7223,5,7394,7400,5,7416,7417,5,8204,8204,5,8233,8233,4,8288,8292,4,8413,8416,5,8482,8482,14,8986,8987,14,9193,9203,14,9654,9654,14,9733,9733,14,9745,9745,14,9752,9752,14,9760,9760,14,9766,9766,14,9774,9775,14,9792,9792,14,9800,9811,14,9825,9826,14,9831,9831,14,9852,9853,14,9872,9873,14,9880,9880,14,9885,9887,14,9896,9897,14,9906,9916,14,9926,9927,14,9936,9936,14,9941,9960,14,9974,9974,14,9982,9985,14,9992,9997,14,10002,10002,14,10017,10017,14,10055,10055,14,10071,10071,14,10145,10145,14,11013,11015,14,11503,11505,5,12334,12335,5,12951,12951,14,42612,42621,5,43014,43014,5,43047,43047,7,43204,43205,5,43335,43345,5,43395,43395,7,43450,43451,7,43561,43566,5,43573,43574,5,43644,43644,5,43710,43711,5,43758,43759,7,44005,44005,5,44012,44012,7,44060,44060,11,44116,44116,11,44172,44172,11,44228,44228,11,44284,44284,11,44340,44340,11,44396,44396,11,44452,44452,11,44508,44508,11,44564,44564,11,44620,44620,11,44676,44676,11,44732,44732,11,44788,44788,11,44844,44844,11,44900,44900,11,44956,44956,11,45012,45012,11,45068,45068,11,45124,45124,11,45180,45180,11,45236,45236,11,45292,45292,11,45348,45348,11,45404,45404,11,45460,45460,11,45516,45516,11,45572,45572,11,45628,45628,11,45684,45684,11,45740,45740,11,45796,45796,11,45852,45852,11,45908,45908,11,45964,45964,11,46020,46020,11,46076,46076,11,46132,46132,11,46188,46188,11,46244,46244,11,46300,46300,11,46356,46356,11,46412,46412,11,46468,46468,11,46524,46524,11,46580,46580,11,46636,46636,11,46692,46692,11,46748,46748,11,46804,46804,11,46860,46860,11,46916,46916,11,46972,46972,11,47028,47028,11,47084,47084,11,47140,47140,11,47196,47196,11,47252,47252,11,47308,47308,11,47364,47364,11,47420,47420,11,47476,47476,11,47532,47532,11,47588,47588,11,47644,47644,11,47700,47700,11,47756,47756,11,47812,47812,11,47868,47868,11,47924,47924,11,47980,47980,11,48036,48036,11,48092,48092,11,48148,48148,11,48204,48204,11,48260,48260,11,48316,48316,11,48372,48372,11,48428,48428,11,48484,48484,11,48540,48540,11,48596,48596,11,48652,48652,11,48708,48708,11,48764,48764,11,48820,48820,11,48876,48876,11,48932,48932,11,48988,48988,11,49044,49044,11,49100,49100,11,49156,49156,11,49212,49212,11,49268,49268,11,49324,49324,11,49380,49380,11,49436,49436,11,49492,49492,11,49548,49548,11,49604,49604,11,49660,49660,11,49716,49716,11,49772,49772,11,49828,49828,11,49884,49884,11,49940,49940,11,49996,49996,11,50052,50052,11,50108,50108,11,50164,50164,11,50220,50220,11,50276,50276,11,50332,50332,11,50388,50388,11,50444,50444,11,50500,50500,11,50556,50556,11,50612,50612,11,50668,50668,11,50724,50724,11,50780,50780,11,50836,50836,11,50892,50892,11,50948,50948,11,51004,51004,11,51060,51060,11,51116,51116,11,51172,51172,11,51228,51228,11,51284,51284,11,51340,51340,11,51396,51396,11,51452,51452,11,51508,51508,11,51564,51564,11,51620,51620,11,51676,51676,11,51732,51732,11,51788,51788,11,51844,51844,11,51900,51900,11,51956,51956,11,52012,52012,11,52068,52068,11,52124,52124,11,52180,52180,11,52236,52236,11,52292,52292,11,52348,52348,11,52404,52404,11,52460,52460,11,52516,52516,11,52572,52572,11,52628,52628,11,52684,52684,11,52740,52740,11,52796,52796,11,52852,52852,11,52908,52908,11,52964,52964,11,53020,53020,11,53076,53076,11,53132,53132,11,53188,53188,11,53244,53244,11,53300,53300,11,53356,53356,11,53412,53412,11,53468,53468,11,53524,53524,11,53580,53580,11,53636,53636,11,53692,53692,11,53748,53748,11,53804,53804,11,53860,53860,11,53916,53916,11,53972,53972,11,54028,54028,11,54084,54084,11,54140,54140,11,54196,54196,11,54252,54252,11,54308,54308,11,54364,54364,11,54420,54420,11,54476,54476,11,54532,54532,11,54588,54588,11,54644,54644,11,54700,54700,11,54756,54756,11,54812,54812,11,54868,54868,11,54924,54924,11,54980,54980,11,55036,55036,11,55092,55092,11,55148,55148,11,55216,55238,9,65056,65071,5,65529,65531,4,68097,68099,5,68159,68159,5,69446,69456,5,69688,69702,5,69808,69810,7,69815,69816,7,69821,69821,1,69888,69890,5,69932,69932,7,69957,69958,7,70016,70017,5,70067,70069,7,70079,70080,7,70089,70092,5,70095,70095,5,70191,70193,5,70196,70196,5,70198,70199,5,70367,70367,5,70371,70378,5,70402,70403,7,70462,70462,5,70464,70464,5,70471,70472,7,70487,70487,5,70502,70508,5,70709,70711,7,70720,70721,7,70725,70725,7,70750,70750,5,70833,70834,7,70841,70841,7,70843,70844,7,70846,70846,7,70849,70849,7,71087,71087,5,71090,71093,5,71100,71101,5,71103,71104,5,71216,71218,7,71227,71228,7,71230,71230,7,71339,71339,5,71341,71341,5,71344,71349,5,71351,71351,5,71456,71457,7,71462,71462,7,71724,71726,7,71736,71736,7,71984,71984,5,71991,71992,7,71997,71997,7,71999,71999,1,72001,72001,1,72003,72003,5,72148,72151,5,72156,72159,7,72164,72164,7,72243,72248,5,72250,72250,1,72263,72263,5,72279,72280,7,72324,72329,1,72343,72343,7,72751,72751,7,72760,72765,5,72767,72767,5,72873,72873,7,72881,72881,7,72884,72884,7,73009,73014,5,73020,73021,5,73030,73030,1,73098,73102,7,73107,73108,7,73110,73110,7,73459,73460,5,78896,78904,4,92976,92982,5,94033,94087,7,94180,94180,5,113821,113822,5,119141,119141,5,119143,119145,5,119150,119154,5,119163,119170,5,119210,119213,5,121344,121398,5,121461,121461,5,121499,121503,5,122880,122886,5,122907,122913,5,122918,122922,5,123628,123631,5,125252,125258,5,126980,126980,14,127183,127183,14,127245,127247,14,127340,127343,14,127358,127359,14,127377,127386,14,127462,127487,6,127491,127503,14,127535,127535,14,127548,127551,14,127568,127569,14,127744,127777,14,127780,127891,14,127894,127895,14,127897,127899,14,127902,127984,14,127987,127989,14,127991,127994,14,128000,128253,14,128255,128317,14,128329,128334,14,128336,128359,14,128367,128368,14,128371,128377,14,128379,128390,14,128392,128393,14,128398,128399,14,128401,128404,14,128407,128419,14,128421,128421,14,128424,128424,14,128433,128434,14,128444,128444,14,128450,128452,14,128465,128467,14,128476,128478,14,128481,128481,14,128483,128483,14,128488,128488,14,128495,128495,14,128499,128499,14,128506,128591,14,128710,128714,14,128721,128722,14,128725,128725,14,128728,128735,14,128742,128744,14,128746,128746,14,128749,128751,14,128753,128754,14,128756,128758,14,128761,128761,14,128763,128764,14,128884,128895,14,128992,129003,14,129036,129039,14,129114,129119,14,129198,129279,14,129293,129295,14,129305,129310,14,129312,129319,14,129328,129328,14,129331,129338,14,129343,129343,14,129351,129355,14,129357,129359,14,129375,129387,14,129393,129393,14,129395,129398,14,129401,129401,14,129403,129403,14,129408,129412,14,129426,129431,14,129443,129444,14,129451,129453,14,129456,129465,14,129472,129472,14,129475,129482,14,129484,129484,14,129488,129510,14,129536,129647,14,129652,129652,14,129656,129658,14,129664,129666,14,129671,129679,14,129686,129704,14,129712,129718,14,129728,129730,14,129744,129750,14,917504,917504,4,917506,917535,4,917632,917759,4,918000,921599,4,0,9,4,11,12,4,14,31,4,169,169,14,174,174,14,1155,1159,5,1425,1469,5,1473,1474,5,1479,1479,5,1552,1562,5,1611,1631,5,1750,1756,5,1759,1764,5,1770,1773,5,1809,1809,5,1958,1968,5,2045,2045,5,2075,2083,5,2089,2093,5,2259,2273,5,2275,2306,5,2362,2362,5,2364,2364,5,2369,2376,5,2381,2381,5,2385,2391,5,2433,2433,5,2492,2492,5,2495,2496,7,2503,2504,7,2509,2509,5,2530,2531,5,2561,2562,5,2620,2620,5,2625,2626,5,2635,2637,5,2672,2673,5,2689,2690,5,2748,2748,5,2753,2757,5,2761,2761,7,2765,2765,5,2810,2815,5,2818,2819,7,2878,2878,5,2880,2880,7,2887,2888,7,2893,2893,5,2903,2903,5,2946,2946,5,3007,3007,7,3009,3010,7,3018,3020,7,3031,3031,5,3073,3075,7,3134,3136,5,3142,3144,5,3157,3158,5,3201,3201,5,3260,3260,5,3263,3263,5,3266,3266,5,3270,3270,5,3274,3275,7,3285,3286,5,3328,3329,5,3387,3388,5,3391,3392,7,3398,3400,7,3405,3405,5,3415,3415,5,3457,3457,5,3530,3530,5,3536,3537,7,3542,3542,5,3551,3551,5,3633,3633,5,3636,3642,5,3761,3761,5,3764,3772,5,3864,3865,5,3895,3895,5,3902,3903,7,3967,3967,7,3974,3975,5,3993,4028,5,4141,4144,5,4146,4151,5,4155,4156,7,4182,4183,7,4190,4192,5,4226,4226,5,4229,4230,5,4253,4253,5,4448,4519,9,4957,4959,5,5938,5940,5,6002,6003,5,6070,6070,7,6078,6085,7,6087,6088,7,6109,6109,5,6158,6158,4,6313,6313,5,6435,6438,7,6441,6443,7,6450,6450,5,6457,6459,5,6681,6682,7,6741,6741,7,6743,6743,7,6752,6752,5,6757,6764,5,6771,6780,5,6832,6845,5,6847,6848,5,6916,6916,7,6965,6965,5,6971,6971,7,6973,6977,7,6979,6980,7,7040,7041,5,7073,7073,7,7078,7079,7,7082,7082,7,7142,7142,5,7144,7145,5,7149,7149,5,7151,7153,5,7204,7211,7,7220,7221,7,7376,7378,5,7393,7393,7,7405,7405,5,7415,7415,7,7616,7673,5,8203,8203,4,8205,8205,13,8232,8232,4,8234,8238,4,8265,8265,14,8293,8293,4,8400,8412,5,8417,8417,5,8421,8432,5,8505,8505,14,8617,8618,14,9000,9000,14,9167,9167,14,9208,9210,14,9642,9643,14,9664,9664,14,9728,9732,14,9735,9741,14,9743,9744,14,9746,9746,14,9750,9751,14,9753,9756,14,9758,9759,14,9761,9761,14,9764,9765,14,9767,9769,14,9771,9773,14,9776,9783,14,9787,9791,14,9793,9793,14,9795,9799,14,9812,9822,14,9824,9824,14,9827,9827,14,9829,9830,14,9832,9832,14,9851,9851,14,9854,9854,14,9856,9861,14,9874,9876,14,9878,9879,14,9881,9881,14,9883,9884,14,9888,9889,14,9895,9895,14,9898,9899,14,9904,9905,14,9917,9918,14,9924,9925,14,9928,9928,14,9934,9935,14,9937,9937,14,9939,9940,14,9961,9962,14,9968,9973,14,9975,9978,14,9981,9981,14,9986,9986,14,9989,9989,14,9998,9998,14,10000,10001,14,10004,10004,14,10013,10013,14,10024,10024,14,10052,10052,14,10060,10060,14,10067,10069,14,10083,10084,14,10133,10135,14,10160,10160,14,10548,10549,14,11035,11036,14,11093,11093,14,11647,11647,5,12330,12333,5,12336,12336,14,12441,12442,5,12953,12953,14,42608,42610,5,42654,42655,5,43010,43010,5,43019,43019,5,43045,43046,5,43052,43052,5,43188,43203,7,43232,43249,5,43302,43309,5,43346,43347,7,43392,43394,5,43443,43443,5,43446,43449,5,43452,43453,5,43493,43493,5,43567,43568,7,43571,43572,7,43587,43587,5,43597,43597,7,43696,43696,5,43703,43704,5,43713,43713,5,43756,43757,5,43765,43765,7,44003,44004,7,44006,44007,7,44009,44010,7,44013,44013,5,44033,44059,12,44061,44087,12,44089,44115,12,44117,44143,12,44145,44171,12,44173,44199,12,44201,44227,12,44229,44255,12,44257,44283,12,44285,44311,12,44313,44339,12,44341,44367,12,44369,44395,12,44397,44423,12,44425,44451,12,44453,44479,12,44481,44507,12,44509,44535,12,44537,44563,12,44565,44591,12,44593,44619,12,44621,44647,12,44649,44675,12,44677,44703,12,44705,44731,12,44733,44759,12,44761,44787,12,44789,44815,12,44817,44843,12,44845,44871,12,44873,44899,12,44901,44927,12,44929,44955,12,44957,44983,12,44985,45011,12,45013,45039,12,45041,45067,12,45069,45095,12,45097,45123,12,45125,45151,12,45153,45179,12,45181,45207,12,45209,45235,12,45237,45263,12,45265,45291,12,45293,45319,12,45321,45347,12,45349,45375,12,45377,45403,12,45405,45431,12,45433,45459,12,45461,45487,12,45489,45515,12,45517,45543,12,45545,45571,12,45573,45599,12,45601,45627,12,45629,45655,12,45657,45683,12,45685,45711,12,45713,45739,12,45741,45767,12,45769,45795,12,45797,45823,12,45825,45851,12,45853,45879,12,45881,45907,12,45909,45935,12,45937,45963,12,45965,45991,12,45993,46019,12,46021,46047,12,46049,46075,12,46077,46103,12,46105,46131,12,46133,46159,12,46161,46187,12,46189,46215,12,46217,46243,12,46245,46271,12,46273,46299,12,46301,46327,12,46329,46355,12,46357,46383,12,46385,46411,12,46413,46439,12,46441,46467,12,46469,46495,12,46497,46523,12,46525,46551,12,46553,46579,12,46581,46607,12,46609,46635,12,46637,46663,12,46665,46691,12,46693,46719,12,46721,46747,12,46749,46775,12,46777,46803,12,46805,46831,12,46833,46859,12,46861,46887,12,46889,46915,12,46917,46943,12,46945,46971,12,46973,46999,12,47001,47027,12,47029,47055,12,47057,47083,12,47085,47111,12,47113,47139,12,47141,47167,12,47169,47195,12,47197,47223,12,47225,47251,12,47253,47279,12,47281,47307,12,47309,47335,12,47337,47363,12,47365,47391,12,47393,47419,12,47421,47447,12,47449,47475,12,47477,47503,12,47505,47531,12,47533,47559,12,47561,47587,12,47589,47615,12,47617,47643,12,47645,47671,12,47673,47699,12,47701,47727,12,47729,47755,12,47757,47783,12,47785,47811,12,47813,47839,12,47841,47867,12,47869,47895,12,47897,47923,12,47925,47951,12,47953,47979,12,47981,48007,12,48009,48035,12,48037,48063,12,48065,48091,12,48093,48119,12,48121,48147,12,48149,48175,12,48177,48203,12,48205,48231,12,48233,48259,12,48261,48287,12,48289,48315,12,48317,48343,12,48345,48371,12,48373,48399,12,48401,48427,12,48429,48455,12,48457,48483,12,48485,48511,12,48513,48539,12,48541,48567,12,48569,48595,12,48597,48623,12,48625,48651,12,48653,48679,12,48681,48707,12,48709,48735,12,48737,48763,12,48765,48791,12,48793,48819,12,48821,48847,12,48849,48875,12,48877,48903,12,48905,48931,12,48933,48959,12,48961,48987,12,48989,49015,12,49017,49043,12,49045,49071,12,49073,49099,12,49101,49127,12,49129,49155,12,49157,49183,12,49185,49211,12,49213,49239,12,49241,49267,12,49269,49295,12,49297,49323,12,49325,49351,12,49353,49379,12,49381,49407,12,49409,49435,12,49437,49463,12,49465,49491,12,49493,49519,12,49521,49547,12,49549,49575,12,49577,49603,12,49605,49631,12,49633,49659,12,49661,49687,12,49689,49715,12,49717,49743,12,49745,49771,12,49773,49799,12,49801,49827,12,49829,49855,12,49857,49883,12,49885,49911,12,49913,49939,12,49941,49967,12,49969,49995,12,49997,50023,12,50025,50051,12,50053,50079,12,50081,50107,12,50109,50135,12,50137,50163,12,50165,50191,12,50193,50219,12,50221,50247,12,50249,50275,12,50277,50303,12,50305,50331,12,50333,50359,12,50361,50387,12,50389,50415,12,50417,50443,12,50445,50471,12,50473,50499,12,50501,50527,12,50529,50555,12,50557,50583,12,50585,50611,12,50613,50639,12,50641,50667,12,50669,50695,12,50697,50723,12,50725,50751,12,50753,50779,12,50781,50807,12,50809,50835,12,50837,50863,12,50865,50891,12,50893,50919,12,50921,50947,12,50949,50975,12,50977,51003,12,51005,51031,12,51033,51059,12,51061,51087,12,51089,51115,12,51117,51143,12,51145,51171,12,51173,51199,12,51201,51227,12,51229,51255,12,51257,51283,12,51285,51311,12,51313,51339,12,51341,51367,12,51369,51395,12,51397,51423,12,51425,51451,12,51453,51479,12,51481,51507,12,51509,51535,12,51537,51563,12,51565,51591,12,51593,51619,12,51621,51647,12,51649,51675,12,51677,51703,12,51705,51731,12,51733,51759,12,51761,51787,12,51789,51815,12,51817,51843,12,51845,51871,12,51873,51899,12,51901,51927,12,51929,51955,12,51957,51983,12,51985,52011,12,52013,52039,12,52041,52067,12,52069,52095,12,52097,52123,12,52125,52151,12,52153,52179,12,52181,52207,12,52209,52235,12,52237,52263,12,52265,52291,12,52293,52319,12,52321,52347,12,52349,52375,12,52377,52403,12,52405,52431,12,52433,52459,12,52461,52487,12,52489,52515,12,52517,52543,12,52545,52571,12,52573,52599,12,52601,52627,12,52629,52655,12,52657,52683,12,52685,52711,12,52713,52739,12,52741,52767,12,52769,52795,12,52797,52823,12,52825,52851,12,52853,52879,12,52881,52907,12,52909,52935,12,52937,52963,12,52965,52991,12,52993,53019,12,53021,53047,12,53049,53075,12,53077,53103,12,53105,53131,12,53133,53159,12,53161,53187,12,53189,53215,12,53217,53243,12,53245,53271,12,53273,53299,12,53301,53327,12,53329,53355,12,53357,53383,12,53385,53411,12,53413,53439,12,53441,53467,12,53469,53495,12,53497,53523,12,53525,53551,12,53553,53579,12,53581,53607,12,53609,53635,12,53637,53663,12,53665,53691,12,53693,53719,12,53721,53747,12,53749,53775,12,53777,53803,12,53805,53831,12,53833,53859,12,53861,53887,12,53889,53915,12,53917,53943,12,53945,53971,12,53973,53999,12,54001,54027,12,54029,54055,12,54057,54083,12,54085,54111,12,54113,54139,12,54141,54167,12,54169,54195,12,54197,54223,12,54225,54251,12,54253,54279,12,54281,54307,12,54309,54335,12,54337,54363,12,54365,54391,12,54393,54419,12,54421,54447,12,54449,54475,12,54477,54503,12,54505,54531,12,54533,54559,12,54561,54587,12,54589,54615,12,54617,54643,12,54645,54671,12,54673,54699,12,54701,54727,12,54729,54755,12,54757,54783,12,54785,54811,12,54813,54839,12,54841,54867,12,54869,54895,12,54897,54923,12,54925,54951,12,54953,54979,12,54981,55007,12,55009,55035,12,55037,55063,12,55065,55091,12,55093,55119,12,55121,55147,12,55149,55175,12,55177,55203,12,55243,55291,10,65024,65039,5,65279,65279,4,65520,65528,4,66045,66045,5,66422,66426,5,68101,68102,5,68152,68154,5,68325,68326,5,69291,69292,5,69632,69632,7,69634,69634,7,69759,69761,5]")}static getInstance(){return _._INSTANCE||(_._INSTANCE=new _),_._INSTANCE}getGraphemeBreakType(e){if(e<32)return 10===e?3:13===e?2:4;if(e<127)return 0;const t=this._data,n=t.length/3;let i=1;for(;i<=n;)if(e<t[3*i])i*=2;else{if(!(e>t[3*i+1]))return t[3*i+2];i=2*i+1}return 0}}function I(e,t){return(t<<5)-t+e|0}function N(e,t){t=I(149417,t);for(let n=0,i=e.length;n<i;n++)t=I(e.charCodeAt(n),t);return t}function L(e,t,n=32){const i=n-t;return(e<<t|(~((1<<i)-1)&e)>>>i)>>>0}function R(e,t=0,n=e.byteLength,i=0){for(let o=0;o<n;o++)e[t+o]=i}function D(e,t=32){return e instanceof ArrayBuffer?Array.from(new Uint8Array(e)).map(e=>e.toString(16).padStart(2,"0")).join(""):function(e,t,n="0"){for(;e.length<t;)e=n+e;return e}((e>>>0).toString(16),t/4)}_._INSTANCE=null;class v{constructor(){this._h0=1732584193,this._h1=4023233417,this._h2=2562383102,this._h3=271733878,this._h4=3285377520,this._buff=new Uint8Array(67),this._buffDV=new DataView(this._buff.buffer),this._buffLen=0,this._totalLen=0,this._leftoverHighSurrogate=0,this._finished=!1}update(e){const t=e.length;if(0===t)return;const n=this._buff;let i,o,a=this._buffLen,r=this._leftoverHighSurrogate;for(0!==r?(i=r,o=-1,r=0):(i=e.charCodeAt(0),o=0);;){let l=i;if(E(i)){if(!(o+1<t)){r=i;break}{const t=e.charCodeAt(o+1);A(t)?(o++,l=O(i,t)):l=65533}}else A(i)&&(l=65533);if(a=this._push(n,a,l),o++,!(o<t))break;i=e.charCodeAt(o)}this._buffLen=a,this._leftoverHighSurrogate=r}_push(e,t,n){return n<128?e[t++]=n:n<2048?(e[t++]=192|(1984&n)>>>6,e[t++]=128|(63&n)>>>0):n<65536?(e[t++]=224|(61440&n)>>>12,e[t++]=128|(4032&n)>>>6,e[t++]=128|(63&n)>>>0):(e[t++]=240|(1835008&n)>>>18,e[t++]=128|(258048&n)>>>12,e[t++]=128|(4032&n)>>>6,e[t++]=128|(63&n)>>>0),t>=64&&(this._step(),t-=64,this._totalLen+=64,e[0]=e[64],e[1]=e[65],e[2]=e[66]),t}digest(){return this._finished||(this._finished=!0,this._leftoverHighSurrogate&&(this._leftoverHighSurrogate=0,this._buffLen=this._push(this._buff,this._buffLen,65533)),this._totalLen+=this._buffLen,this._wrapUp()),D(this._h0)+D(this._h1)+D(this._h2)+D(this._h3)+D(this._h4)}_wrapUp(){this._buff[this._buffLen++]=128,R(this._buff,this._buffLen),this._buffLen>56&&(this._step(),R(this._buff));const e=8*this._totalLen;this._buffDV.setUint32(56,Math.floor(e/4294967296),!1),this._buffDV.setUint32(60,e%4294967296,!1),this._step()}_step(){const e=v._bigBlock32,t=this._buffDV;for(let n=0;n<64;n+=4)e.setUint32(n,t.getUint32(n,!1),!1);for(let t=64;t<320;t+=4)e.setUint32(t,L(e.getUint32(t-12,!1)^e.getUint32(t-32,!1)^e.getUint32(t-56,!1)^e.getUint32(t-64,!1),1),!1);let n,i,o,a=this._h0,r=this._h1,l=this._h2,s=this._h3,d=this._h4;for(let t=0;t<80;t++)t<20?(n=r&l|~r&s,i=1518500249):t<40?(n=r^l^s,i=1859775393):t<60?(n=r&l|r&s|l&s,i=2400959708):(n=r^l^s,i=3395469782),o=L(a,5)+n+d+i+e.getUint32(4*t,!1)&4294967295,d=s,s=l,l=L(r,30),r=a,a=o;this._h0=this._h0+a&4294967295,this._h1=this._h1+r&4294967295,this._h2=this._h2+l&4294967295,this._h3=this._h3+s&4294967295,this._h4=this._h4+d&4294967295}}v._bigBlock32=new DataView(new ArrayBuffer(320));class M{constructor(e){this.source=e}getElements(){const e=this.source,t=new Int32Array(e.length);for(let n=0,i=e.length;n<i;n++)t[n]=e.charCodeAt(n);return t}}function P(e,t,n){return new w(new M(e),new M(t)).ComputeDiff(n).changes}class F{static Assert(e,t){if(!e)throw new Error(t)}}class B{static Copy(e,t,n,i,o){for(let a=0;a<o;a++)n[i+a]=e[t+a]}static Copy2(e,t,n,i,o){for(let a=0;a<o;a++)n[i+a]=e[t+a]}}class U{constructor(){this.m_changes=[],this.m_originalStart=1073741824,this.m_modifiedStart=1073741824,this.m_originalCount=0,this.m_modifiedCount=0}MarkNextChange(){(this.m_originalCount>0||this.m_modifiedCount>0)&&this.m_changes.push(new C(this.m_originalStart,this.m_originalCount,this.m_modifiedStart,this.m_modifiedCount)),this.m_originalCount=0,this.m_modifiedCount=0,this.m_originalStart=1073741824,this.m_modifiedStart=1073741824}AddOriginalElement(e,t){this.m_originalStart=Math.min(this.m_originalStart,e),this.m_modifiedStart=Math.min(this.m_modifiedStart,t),this.m_originalCount++}AddModifiedElement(e,t){this.m_originalStart=Math.min(this.m_originalStart,e),this.m_modifiedStart=Math.min(this.m_modifiedStart,t),this.m_modifiedCount++}getChanges(){return(this.m_originalCount>0||this.m_modifiedCount>0)&&this.MarkNextChange(),this.m_changes}getReverseChanges(){return(this.m_originalCount>0||this.m_modifiedCount>0)&&this.MarkNextChange(),this.m_changes.reverse(),this.m_changes}}class w{constructor(e,t,n=null){this.ContinueProcessingPredicate=n;const[i,o,a]=w._getElements(e),[r,l,s]=w._getElements(t);this._hasStrings=a&&s,this._originalStringElements=i,this._originalElementsOrHash=o,this._modifiedStringElements=r,this._modifiedElementsOrHash=l,this.m_forwardHistory=[],this.m_reverseHistory=[]}static _isStringArray(e){return e.length>0&&"string"==typeof e[0]}static _getElements(e){const t=e.getElements();if(w._isStringArray(t)){const e=new Int32Array(t.length);for(let n=0,i=t.length;n<i;n++)e[n]=N(t[n],0);return[t,e,!0]}return t instanceof Int32Array?[[],t,!1]:[[],new Int32Array(t),!1]}ElementsAreEqual(e,t){return this._originalElementsOrHash[e]===this._modifiedElementsOrHash[t]&&(!this._hasStrings||this._originalStringElements[e]===this._modifiedStringElements[t])}OriginalElementsAreEqual(e,t){return this._originalElementsOrHash[e]===this._originalElementsOrHash[t]&&(!this._hasStrings||this._originalStringElements[e]===this._originalStringElements[t])}ModifiedElementsAreEqual(e,t){return this._modifiedElementsOrHash[e]===this._modifiedElementsOrHash[t]&&(!this._hasStrings||this._modifiedStringElements[e]===this._modifiedStringElements[t])}ComputeDiff(e){return this._ComputeDiff(0,this._originalElementsOrHash.length-1,0,this._modifiedElementsOrHash.length-1,e)}_ComputeDiff(e,t,n,i,o){const a=[!1];let r=this.ComputeDiffRecursive(e,t,n,i,a);return o&&(r=this.PrettifyChanges(r)),{quitEarly:a[0],changes:r}}ComputeDiffRecursive(e,t,n,i,o){for(o[0]=!1;e<=t&&n<=i&&this.ElementsAreEqual(e,n);)e++,n++;for(;t>=e&&i>=n&&this.ElementsAreEqual(t,i);)t--,i--;if(e>t||n>i){let o;return n<=i?(F.Assert(e===t+1,"originalStart should only be one more than originalEnd"),o=[new C(e,0,n,i-n+1)]):e<=t?(F.Assert(n===i+1,"modifiedStart should only be one more than modifiedEnd"),o=[new C(e,t-e+1,n,0)]):(F.Assert(e===t+1,"originalStart should only be one more than originalEnd"),F.Assert(n===i+1,"modifiedStart should only be one more than modifiedEnd"),o=[]),o}const a=[0],r=[0],l=this.ComputeRecursionPoint(e,t,n,i,a,r,o),s=a[0],d=r[0];if(null!==l)return l;if(!o[0]){const a=this.ComputeDiffRecursive(e,s,n,d,o);let r=[];return r=o[0]?[new C(s+1,t-(s+1)+1,d+1,i-(d+1)+1)]:this.ComputeDiffRecursive(s+1,t,d+1,i,o),this.ConcatenateChanges(a,r)}return[new C(e,t-e+1,n,i-n+1)]}WALKTRACE(e,t,n,i,o,a,r,l,s,d,c,u,m,h,p,T,b,g){let x=null,f=null,k=new U,S=t,y=n,E=m[0]-T[0]-i,A=-1073741824,O=this.m_forwardHistory.length-1;do{const t=E+e;t===S||t<y&&s[t-1]<s[t+1]?(h=(c=s[t+1])-E-i,c<A&&k.MarkNextChange(),A=c,k.AddModifiedElement(c+1,h),E=t+1-e):(h=(c=s[t-1]+1)-E-i,c<A&&k.MarkNextChange(),A=c-1,k.AddOriginalElement(c,h+1),E=t-1-e),O>=0&&(e=(s=this.m_forwardHistory[O])[0],S=1,y=s.length-1)}while(--O>=-1);if(x=k.getReverseChanges(),g[0]){let e=m[0]+1,t=T[0]+1;if(null!==x&&x.length>0){const n=x[x.length-1];e=Math.max(e,n.getOriginalEnd()),t=Math.max(t,n.getModifiedEnd())}f=[new C(e,u-e+1,t,p-t+1)]}else{k=new U,S=a,y=r,E=m[0]-T[0]-l,A=1073741824,O=b?this.m_reverseHistory.length-1:this.m_reverseHistory.length-2;do{const e=E+o;e===S||e<y&&d[e-1]>=d[e+1]?(h=(c=d[e+1]-1)-E-l,c>A&&k.MarkNextChange(),A=c+1,k.AddOriginalElement(c+1,h+1),E=e+1-o):(h=(c=d[e-1])-E-l,c>A&&k.MarkNextChange(),A=c,k.AddModifiedElement(c+1,h+1),E=e-1-o),O>=0&&(o=(d=this.m_reverseHistory[O])[0],S=1,y=d.length-1)}while(--O>=-1);f=k.getChanges()}return this.ConcatenateChanges(x,f)}ComputeRecursionPoint(e,t,n,i,o,a,r){let l=0,s=0,d=0,c=0,u=0,m=0;e--,n--,o[0]=0,a[0]=0,this.m_forwardHistory=[],this.m_reverseHistory=[];const h=t-e+(i-n),p=h+1,T=new Int32Array(p),b=new Int32Array(p),g=i-n,x=t-e,f=e-n,k=t-i,S=(x-g)%2==0;T[g]=e,b[x]=t,r[0]=!1;for(let y=1;y<=h/2+1;y++){let h=0,E=0;d=this.ClipDiagonalBound(g-y,y,g,p),c=this.ClipDiagonalBound(g+y,y,g,p);for(let e=d;e<=c;e+=2){l=e===d||e<c&&T[e-1]<T[e+1]?T[e+1]:T[e-1]+1,s=l-(e-g)-f;const n=l;for(;l<t&&s<i&&this.ElementsAreEqual(l+1,s+1);)l++,s++;if(T[e]=l,l+s>h+E&&(h=l,E=s),!S&&Math.abs(e-x)<=y-1&&l>=b[e])return o[0]=l,a[0]=s,n<=b[e]&&y<=1448?this.WALKTRACE(g,d,c,f,x,u,m,k,T,b,l,t,o,s,i,a,S,r):null}const A=(h-e+(E-n)-y)/2;if(null!==this.ContinueProcessingPredicate&&!this.ContinueProcessingPredicate(h,A))return r[0]=!0,o[0]=h,a[0]=E,A>0&&y<=1448?this.WALKTRACE(g,d,c,f,x,u,m,k,T,b,l,t,o,s,i,a,S,r):(e++,n++,[new C(e,t-e+1,n,i-n+1)]);u=this.ClipDiagonalBound(x-y,y,x,p),m=this.ClipDiagonalBound(x+y,y,x,p);for(let h=u;h<=m;h+=2){l=h===u||h<m&&b[h-1]>=b[h+1]?b[h+1]-1:b[h-1],s=l-(h-x)-k;const p=l;for(;l>e&&s>n&&this.ElementsAreEqual(l,s);)l--,s--;if(b[h]=l,S&&Math.abs(h-g)<=y&&l<=T[h])return o[0]=l,a[0]=s,p>=T[h]&&y<=1448?this.WALKTRACE(g,d,c,f,x,u,m,k,T,b,l,t,o,s,i,a,S,r):null}if(y<=1447){let e=new Int32Array(c-d+2);e[0]=g-d+1,B.Copy2(T,d,e,1,c-d+1),this.m_forwardHistory.push(e),e=new Int32Array(m-u+2),e[0]=x-u+1,B.Copy2(b,u,e,1,m-u+1),this.m_reverseHistory.push(e)}}return this.WALKTRACE(g,d,c,f,x,u,m,k,T,b,l,t,o,s,i,a,S,r)}PrettifyChanges(e){for(let t=0;t<e.length;t++){const n=e[t],i=t<e.length-1?e[t+1].originalStart:this._originalElementsOrHash.length,o=t<e.length-1?e[t+1].modifiedStart:this._modifiedElementsOrHash.length,a=n.originalLength>0,r=n.modifiedLength>0;for(;n.originalStart+n.originalLength<i&&n.modifiedStart+n.modifiedLength<o&&(!a||this.OriginalElementsAreEqual(n.originalStart,n.originalStart+n.originalLength))&&(!r||this.ModifiedElementsAreEqual(n.modifiedStart,n.modifiedStart+n.modifiedLength));)n.originalStart++,n.modifiedStart++;let l=[null];t<e.length-1&&this.ChangesOverlap(e[t],e[t+1],l)&&(e[t]=l[0],e.splice(t+1,1),t--)}for(let t=e.length-1;t>=0;t--){const n=e[t];let i=0,o=0;if(t>0){const n=e[t-1];n.originalLength>0&&(i=n.originalStart+n.originalLength),n.modifiedLength>0&&(o=n.modifiedStart+n.modifiedLength)}const a=n.originalLength>0,r=n.modifiedLength>0;let l=0,s=this._boundaryScore(n.originalStart,n.originalLength,n.modifiedStart,n.modifiedLength);for(let e=1;;e++){const t=n.originalStart-e,d=n.modifiedStart-e;if(t<i||d<o)break;if(a&&!this.OriginalElementsAreEqual(t,t+n.originalLength))break;if(r&&!this.ModifiedElementsAreEqual(d,d+n.modifiedLength))break;const c=this._boundaryScore(t,n.originalLength,d,n.modifiedLength);c>s&&(s=c,l=e)}n.originalStart-=l,n.modifiedStart-=l}if(this._hasStrings)for(let t=1,n=e.length;t<n;t++){const n=e[t-1],i=e[t],o=i.originalStart-n.originalStart-n.originalLength,a=n.originalStart,r=i.originalStart+i.originalLength,l=r-a,s=n.modifiedStart,d=i.modifiedStart+i.modifiedLength,c=d-s;if(o<5&&l<20&&c<20){const e=this._findBetterContiguousSequence(a,l,s,c,o);if(e){const[t,a]=e;t===n.originalStart+n.originalLength&&a===n.modifiedStart+n.modifiedLength||(n.originalLength=t-n.originalStart,n.modifiedLength=a-n.modifiedStart,i.originalStart=t+o,i.modifiedStart=a+o,i.originalLength=r-i.originalStart,i.modifiedLength=d-i.modifiedStart)}}}return e}_findBetterContiguousSequence(e,t,n,i,o){if(t<o||i<o)return null;const a=e+t-o+1,r=n+i-o+1;let l=0,s=0,d=0;for(let t=e;t<a;t++)for(let e=n;e<r;e++){const n=this._contiguousSequenceScore(t,e,o);n>0&&n>l&&(l=n,s=t,d=e)}return l>0?[s,d]:null}_contiguousSequenceScore(e,t,n){let i=0;for(let o=0;o<n;o++){if(!this.ElementsAreEqual(e+o,t+o))return 0;i+=this._originalStringElements[e+o].length}return i}_OriginalIsBoundary(e){return e<=0||e>=this._originalElementsOrHash.length-1||this._hasStrings&&/^\s*$/.test(this._originalStringElements[e])}_OriginalRegionIsBoundary(e,t){if(this._OriginalIsBoundary(e)||this._OriginalIsBoundary(e-1))return!0;if(t>0){const n=e+t;if(this._OriginalIsBoundary(n-1)||this._OriginalIsBoundary(n))return!0}return!1}_ModifiedIsBoundary(e){return e<=0||e>=this._modifiedElementsOrHash.length-1||this._hasStrings&&/^\s*$/.test(this._modifiedStringElements[e])}_ModifiedRegionIsBoundary(e,t){if(this._ModifiedIsBoundary(e)||this._ModifiedIsBoundary(e-1))return!0;if(t>0){const n=e+t;if(this._ModifiedIsBoundary(n-1)||this._ModifiedIsBoundary(n))return!0}return!1}_boundaryScore(e,t,n,i){return(this._OriginalRegionIsBoundary(e,t)?1:0)+(this._ModifiedRegionIsBoundary(n,i)?1:0)}ConcatenateChanges(e,t){let n=[];if(0===e.length||0===t.length)return t.length>0?t:e;if(this.ChangesOverlap(e[e.length-1],t[0],n)){const i=new Array(e.length+t.length-1);return B.Copy(e,0,i,0,e.length-1),i[e.length-1]=n[0],B.Copy(t,1,i,e.length,t.length-1),i}{const n=new Array(e.length+t.length);return B.Copy(e,0,n,0,e.length),B.Copy(t,0,n,e.length,t.length),n}}ChangesOverlap(e,t,n){if(F.Assert(e.originalStart<=t.originalStart,"Left change is not less than or equal to right change"),F.Assert(e.modifiedStart<=t.modifiedStart,"Left change is not less than or equal to right change"),e.originalStart+e.originalLength>=t.originalStart||e.modifiedStart+e.modifiedLength>=t.modifiedStart){const i=e.originalStart;let o=e.originalLength;const a=e.modifiedStart;let r=e.modifiedLength;return e.originalStart+e.originalLength>=t.originalStart&&(o=t.originalStart+t.originalLength-e.originalStart),e.modifiedStart+e.modifiedLength>=t.modifiedStart&&(r=t.modifiedStart+t.modifiedLength-e.modifiedStart),n[0]=new C(i,o,a,r),!0}return n[0]=null,!1}ClipDiagonalBound(e,t,n,i){if(e>=0&&e<i)return e;const o=t%2==0;if(e<0){return o===(n%2==0)?0:1}return o===((i-n-1)%2==0)?i-1:i-2}}var q=n(13);class j extends Error{constructor(e,t,n){let i;"string"==typeof t&&0===t.indexOf("not ")?(i="must not be",t=t.replace(/^not /,"")):i="must be";const o=-1!==e.indexOf(".")?"property":"argument";let a=`The "${e}" ${o} ${i} of type ${t}`;a+=". Received type "+typeof n,super(a),this.code="ERR_INVALID_ARG_TYPE"}}function H(e,t){if("string"!=typeof e)throw new j(t,"string",e)}function Y(e){return 47===e||92===e}function V(e){return 47===e}function z(e){return e>=65&&e<=90||e>=97&&e<=122}function G(e,t,n,i){let o="",a=0,r=-1,l=0,s=0;for(let d=0;d<=e.length;++d){if(d<e.length)s=e.charCodeAt(d);else{if(i(s))break;s=47}if(i(s)){if(r===d-1||1===l);else if(2===l){if(o.length<2||2!==a||46!==o.charCodeAt(o.length-1)||46!==o.charCodeAt(o.length-2)){if(o.length>2){const e=o.lastIndexOf(n);-1===e?(o="",a=0):(o=o.slice(0,e),a=o.length-1-o.lastIndexOf(n)),r=d,l=0;continue}if(0!==o.length){o="",a=0,r=d,l=0;continue}}t&&(o+=o.length>0?n+"..":"..",a=2)}else o.length>0?o+=`${n}${e.slice(r+1,d)}`:o=e.slice(r+1,d),a=d-r-1;r=d,l=0}else 46===s&&-1!==l?++l:l=-1}return o}function W(e,t){if(null===t||"object"!=typeof t)throw new j("pathObject","Object",t);const n=t.dir||t.root,i=t.base||`${t.name||""}${t.ext||""}`;return n?n===t.root?`${n}${i}`:`${n}${e}${i}`:i}const K={resolve(...e){let t="",n="",i=!1;for(let o=e.length-1;o>=-1;o--){let a;if(o>=0){if(a=e[o],H(a,"path"),0===a.length)continue}else 0===t.length?a=q.a():(a=q.b["="+t]||q.a(),(void 0===a||a.slice(0,2).toLowerCase()!==t.toLowerCase()&&92===a.charCodeAt(2))&&(a=t+"\\"));const r=a.length;let l=0,s="",d=!1;const c=a.charCodeAt(0);if(1===r)Y(c)&&(l=1,d=!0);else if(Y(c))if(d=!0,Y(a.charCodeAt(1))){let e=2,t=e;for(;e<r&&!Y(a.charCodeAt(e));)e++;if(e<r&&e!==t){const n=a.slice(t,e);for(t=e;e<r&&Y(a.charCodeAt(e));)e++;if(e<r&&e!==t){for(t=e;e<r&&!Y(a.charCodeAt(e));)e++;e!==r&&e===t||(s=`\\\\${n}\\${a.slice(t,e)}`,l=e)}}}else l=1;else z(c)&&58===a.charCodeAt(1)&&(s=a.slice(0,2),l=2,r>2&&Y(a.charCodeAt(2))&&(d=!0,l=3));if(s.length>0)if(t.length>0){if(s.toLowerCase()!==t.toLowerCase())continue}else t=s;if(i){if(t.length>0)break}else if(n=`${a.slice(l)}\\${n}`,i=d,d&&t.length>0)break}return n=G(n,!i,"\\",Y),i?`${t}\\${n}`:`${t}${n}`||"."},normalize(e){H(e,"path");const t=e.length;if(0===t)return".";let n,i=0,o=!1;const a=e.charCodeAt(0);if(1===t)return V(a)?"\\":e;if(Y(a))if(o=!0,Y(e.charCodeAt(1))){let o=2,a=o;for(;o<t&&!Y(e.charCodeAt(o));)o++;if(o<t&&o!==a){const r=e.slice(a,o);for(a=o;o<t&&Y(e.charCodeAt(o));)o++;if(o<t&&o!==a){for(a=o;o<t&&!Y(e.charCodeAt(o));)o++;if(o===t)return`\\\\${r}\\${e.slice(a)}\\`;o!==a&&(n=`\\\\${r}\\${e.slice(a,o)}`,i=o)}}}else i=1;else z(a)&&58===e.charCodeAt(1)&&(n=e.slice(0,2),i=2,t>2&&Y(e.charCodeAt(2))&&(o=!0,i=3));let r=i<t?G(e.slice(i),!o,"\\",Y):"";return 0!==r.length||o||(r="."),r.length>0&&Y(e.charCodeAt(t-1))&&(r+="\\"),void 0===n?o?"\\"+r:r:o?`${n}\\${r}`:`${n}${r}`},isAbsolute(e){H(e,"path");const t=e.length;if(0===t)return!1;const n=e.charCodeAt(0);return Y(n)||t>2&&z(n)&&58===e.charCodeAt(1)&&Y(e.charCodeAt(2))},join(...e){if(0===e.length)return".";let t,n;for(let i=0;i<e.length;++i){const o=e[i];H(o,"path"),o.length>0&&(void 0===t?t=n=o:t+="\\"+o)}if(void 0===t)return".";let i=!0,o=0;if("string"==typeof n&&Y(n.charCodeAt(0))){++o;const e=n.length;e>1&&Y(n.charCodeAt(1))&&(++o,e>2&&(Y(n.charCodeAt(2))?++o:i=!1))}if(i){for(;o<t.length&&Y(t.charCodeAt(o));)o++;o>=2&&(t="\\"+t.slice(o))}return K.normalize(t)},relative(e,t){if(H(e,"from"),H(t,"to"),e===t)return"";const n=K.resolve(e),i=K.resolve(t);if(n===i)return"";if((e=n.toLowerCase())===(t=i.toLowerCase()))return"";let o=0;for(;o<e.length&&92===e.charCodeAt(o);)o++;let a=e.length;for(;a-1>o&&92===e.charCodeAt(a-1);)a--;const r=a-o;let l=0;for(;l<t.length&&92===t.charCodeAt(l);)l++;let s=t.length;for(;s-1>l&&92===t.charCodeAt(s-1);)s--;const d=s-l,c=r<d?r:d;let u=-1,m=0;for(;m<c;m++){const n=e.charCodeAt(o+m);if(n!==t.charCodeAt(l+m))break;92===n&&(u=m)}if(m!==c){if(-1===u)return i}else{if(d>c){if(92===t.charCodeAt(l+m))return i.slice(l+m+1);if(2===m)return i.slice(l+m)}r>c&&(92===e.charCodeAt(o+m)?u=m:2===m&&(u=3)),-1===u&&(u=0)}let h="";for(m=o+u+1;m<=a;++m)m!==a&&92!==e.charCodeAt(m)||(h+=0===h.length?"..":"\\..");return l+=u,h.length>0?`${h}${i.slice(l,s)}`:(92===i.charCodeAt(l)&&++l,i.slice(l,s))},toNamespacedPath(e){if("string"!=typeof e)return e;if(0===e.length)return"";const t=K.resolve(e);if(t.length<=2)return e;if(92===t.charCodeAt(0)){if(92===t.charCodeAt(1)){const e=t.charCodeAt(2);if(63!==e&&46!==e)return"\\\\?\\UNC\\"+t.slice(2)}}else if(z(t.charCodeAt(0))&&58===t.charCodeAt(1)&&92===t.charCodeAt(2))return"\\\\?\\"+t;return e},dirname(e){H(e,"path");const t=e.length;if(0===t)return".";let n=-1,i=0;const o=e.charCodeAt(0);if(1===t)return Y(o)?e:".";if(Y(o)){if(n=i=1,Y(e.charCodeAt(1))){let o=2,a=o;for(;o<t&&!Y(e.charCodeAt(o));)o++;if(o<t&&o!==a){for(a=o;o<t&&Y(e.charCodeAt(o));)o++;if(o<t&&o!==a){for(a=o;o<t&&!Y(e.charCodeAt(o));)o++;if(o===t)return e;o!==a&&(n=i=o+1)}}}}else z(o)&&58===e.charCodeAt(1)&&(n=t>2&&Y(e.charCodeAt(2))?3:2,i=n);let a=-1,r=!0;for(let n=t-1;n>=i;--n)if(Y(e.charCodeAt(n))){if(!r){a=n;break}}else r=!1;if(-1===a){if(-1===n)return".";a=n}return e.slice(0,a)},basename(e,t){void 0!==t&&H(t,"ext"),H(e,"path");let n,i=0,o=-1,a=!0;if(e.length>=2&&z(e.charCodeAt(0))&&58===e.charCodeAt(1)&&(i=2),void 0!==t&&t.length>0&&t.length<=e.length){if(t===e)return"";let r=t.length-1,l=-1;for(n=e.length-1;n>=i;--n){const s=e.charCodeAt(n);if(Y(s)){if(!a){i=n+1;break}}else-1===l&&(a=!1,l=n+1),r>=0&&(s===t.charCodeAt(r)?-1==--r&&(o=n):(r=-1,o=l))}return i===o?o=l:-1===o&&(o=e.length),e.slice(i,o)}for(n=e.length-1;n>=i;--n)if(Y(e.charCodeAt(n))){if(!a){i=n+1;break}}else-1===o&&(a=!1,o=n+1);return-1===o?"":e.slice(i,o)},extname(e){H(e,"path");let t=0,n=-1,i=0,o=-1,a=!0,r=0;e.length>=2&&58===e.charCodeAt(1)&&z(e.charCodeAt(0))&&(t=i=2);for(let l=e.length-1;l>=t;--l){const t=e.charCodeAt(l);if(Y(t)){if(!a){i=l+1;break}}else-1===o&&(a=!1,o=l+1),46===t?-1===n?n=l:1!==r&&(r=1):-1!==n&&(r=-1)}return-1===n||-1===o||0===r||1===r&&n===o-1&&n===i+1?"":e.slice(n,o)},format:W.bind(null,"\\"),parse(e){H(e,"path");const t={root:"",dir:"",base:"",ext:"",name:""};if(0===e.length)return t;const n=e.length;let i=0,o=e.charCodeAt(0);if(1===n)return Y(o)?(t.root=t.dir=e,t):(t.base=t.name=e,t);if(Y(o)){if(i=1,Y(e.charCodeAt(1))){let t=2,o=t;for(;t<n&&!Y(e.charCodeAt(t));)t++;if(t<n&&t!==o){for(o=t;t<n&&Y(e.charCodeAt(t));)t++;if(t<n&&t!==o){for(o=t;t<n&&!Y(e.charCodeAt(t));)t++;t===n?i=t:t!==o&&(i=t+1)}}}}else if(z(o)&&58===e.charCodeAt(1)){if(n<=2)return t.root=t.dir=e,t;if(i=2,Y(e.charCodeAt(2))){if(3===n)return t.root=t.dir=e,t;i=3}}i>0&&(t.root=e.slice(0,i));let a=-1,r=i,l=-1,s=!0,d=e.length-1,c=0;for(;d>=i;--d)if(o=e.charCodeAt(d),Y(o)){if(!s){r=d+1;break}}else-1===l&&(s=!1,l=d+1),46===o?-1===a?a=d:1!==c&&(c=1):-1!==a&&(c=-1);return-1!==l&&(-1===a||0===c||1===c&&a===l-1&&a===r+1?t.base=t.name=e.slice(r,l):(t.name=e.slice(r,a),t.base=e.slice(r,l),t.ext=e.slice(a,l))),t.dir=r>0&&r!==i?e.slice(0,r-1):t.root,t},sep:"\\",delimiter:";",win32:null,posix:null},Z={resolve(...e){let t="",n=!1;for(let i=e.length-1;i>=-1&&!n;i--){const o=i>=0?e[i]:q.a();H(o,"path"),0!==o.length&&(t=`${o}/${t}`,n=47===o.charCodeAt(0))}return t=G(t,!n,"/",V),n?"/"+t:t.length>0?t:"."},normalize(e){if(H(e,"path"),0===e.length)return".";const t=47===e.charCodeAt(0),n=47===e.charCodeAt(e.length-1);return 0===(e=G(e,!t,"/",V)).length?t?"/":n?"./":".":(n&&(e+="/"),t?"/"+e:e)},isAbsolute:e=>(H(e,"path"),e.length>0&&47===e.charCodeAt(0)),join(...e){if(0===e.length)return".";let t;for(let n=0;n<e.length;++n){const i=e[n];H(i,"path"),i.length>0&&(void 0===t?t=i:t+="/"+i)}return void 0===t?".":Z.normalize(t)},relative(e,t){if(H(e,"from"),H(t,"to"),e===t)return"";if((e=Z.resolve(e))===(t=Z.resolve(t)))return"";const n=e.length,i=n-1,o=t.length-1,a=i<o?i:o;let r=-1,l=0;for(;l<a;l++){const n=e.charCodeAt(1+l);if(n!==t.charCodeAt(1+l))break;47===n&&(r=l)}if(l===a)if(o>a){if(47===t.charCodeAt(1+l))return t.slice(1+l+1);if(0===l)return t.slice(1+l)}else i>a&&(47===e.charCodeAt(1+l)?r=l:0===l&&(r=0));let s="";for(l=1+r+1;l<=n;++l)l!==n&&47!==e.charCodeAt(l)||(s+=0===s.length?"..":"/..");return`${s}${t.slice(1+r)}`},toNamespacedPath:e=>e,dirname(e){if(H(e,"path"),0===e.length)return".";const t=47===e.charCodeAt(0);let n=-1,i=!0;for(let t=e.length-1;t>=1;--t)if(47===e.charCodeAt(t)){if(!i){n=t;break}}else i=!1;return-1===n?t?"/":".":t&&1===n?"//":e.slice(0,n)},basename(e,t){void 0!==t&&H(t,"ext"),H(e,"path");let n,i=0,o=-1,a=!0;if(void 0!==t&&t.length>0&&t.length<=e.length){if(t===e)return"";let r=t.length-1,l=-1;for(n=e.length-1;n>=0;--n){const s=e.charCodeAt(n);if(47===s){if(!a){i=n+1;break}}else-1===l&&(a=!1,l=n+1),r>=0&&(s===t.charCodeAt(r)?-1==--r&&(o=n):(r=-1,o=l))}return i===o?o=l:-1===o&&(o=e.length),e.slice(i,o)}for(n=e.length-1;n>=0;--n)if(47===e.charCodeAt(n)){if(!a){i=n+1;break}}else-1===o&&(a=!1,o=n+1);return-1===o?"":e.slice(i,o)},extname(e){H(e,"path");let t=-1,n=0,i=-1,o=!0,a=0;for(let r=e.length-1;r>=0;--r){const l=e.charCodeAt(r);if(47!==l)-1===i&&(o=!1,i=r+1),46===l?-1===t?t=r:1!==a&&(a=1):-1!==t&&(a=-1);else if(!o){n=r+1;break}}return-1===t||-1===i||0===a||1===a&&t===i-1&&t===n+1?"":e.slice(t,i)},format:W.bind(null,"/"),parse(e){H(e,"path");const t={root:"",dir:"",base:"",ext:"",name:""};if(0===e.length)return t;const n=47===e.charCodeAt(0);let i;n?(t.root="/",i=1):i=0;let o=-1,a=0,r=-1,l=!0,s=e.length-1,d=0;for(;s>=i;--s){const t=e.charCodeAt(s);if(47!==t)-1===r&&(l=!1,r=s+1),46===t?-1===o?o=s:1!==d&&(d=1):-1!==o&&(d=-1);else if(!l){a=s+1;break}}if(-1!==r){const i=0===a&&n?1:a;-1===o||0===d||1===d&&o===r-1&&o===a+1?t.base=t.name=e.slice(i,r):(t.name=e.slice(i,o),t.base=e.slice(i,r),t.ext=e.slice(o,r))}return a>0?t.dir=e.slice(0,a-1):n&&(t.dir="/"),t},sep:"/",delimiter:":",win32:null,posix:null};Z.win32=K.win32=K,Z.posix=K.posix=Z;"win32"===q.c?K.normalize:Z.normalize,"win32"===q.c?K.resolve:Z.resolve,"win32"===q.c?K.relative:Z.relative,"win32"===q.c?K.dirname:Z.dirname,"win32"===q.c?K.basename:Z.basename,"win32"===q.c?K.extname:Z.extname,"win32"===q.c?K.sep:Z.sep;const X=/^\w[\w\d+.-]*$/,J=/^\//,$=/^\/\//;const Q="/",ee=/^(([^:/?#]+?):)?(\/\/([^/?#]*))?([^?#]*)(\?([^#]*))?(#(.*))?/;class te{constructor(e,t,n,i,o,a=!1){"object"==typeof e?(this.scheme=e.scheme||"",this.authority=e.authority||"",this.path=e.path||"",this.query=e.query||"",this.fragment=e.fragment||""):(this.scheme=function(e,t){return e||t?e:"file"}(e,a),this.authority=t||"",this.path=function(e,t){switch(e){case"https":case"http":case"file":t?t[0]!==Q&&(t=Q+t):t=Q}return t}(this.scheme,n||""),this.query=i||"",this.fragment=o||"",function(e,t){if(!e.scheme&&t)throw new Error(`[UriError]: Scheme is missing: {scheme: "", authority: "${e.authority}", path: "${e.path}", query: "${e.query}", fragment: "${e.fragment}"}`);if(e.scheme&&!X.test(e.scheme))throw new Error("[UriError]: Scheme contains illegal characters.");if(e.path)if(e.authority){if(!J.test(e.path))throw new Error('[UriError]: If a URI contains an authority component, then the path component must either be empty or begin with a slash ("/") character')}else if($.test(e.path))throw new Error('[UriError]: If a URI does not contain an authority component, then the path cannot begin with two slash characters ("//")')}(this,a))}static isUri(e){return e instanceof te||!!e&&("string"==typeof e.authority&&"string"==typeof e.fragment&&"string"==typeof e.path&&"string"==typeof e.query&&"string"==typeof e.scheme&&"string"==typeof e.fsPath&&"function"==typeof e.with&&"function"==typeof e.toString)}get fsPath(){return le(this,!1)}with(e){if(!e)return this;let{scheme:t,authority:n,path:i,query:o,fragment:a}=e;return void 0===t?t=this.scheme:null===t&&(t=""),void 0===n?n=this.authority:null===n&&(n=""),void 0===i?i=this.path:null===i&&(i=""),void 0===o?o=this.query:null===o&&(o=""),void 0===a?a=this.fragment:null===a&&(a=""),t===this.scheme&&n===this.authority&&i===this.path&&o===this.query&&a===this.fragment?this:new ie(t,n,i,o,a)}static parse(e,t=!1){const n=ee.exec(e);return n?new ie(n[2]||"",ce(n[4]||""),ce(n[5]||""),ce(n[7]||""),ce(n[9]||""),t):new ie("","","","","")}static file(e){let t="";if(g.d&&(e=e.replace(/\\/g,Q)),e[0]===Q&&e[1]===Q){const n=e.indexOf(Q,2);-1===n?(t=e.substring(2),e=Q):(t=e.substring(2,n),e=e.substring(n)||Q)}return new ie("file",t,e,"","")}static from(e){return new ie(e.scheme,e.authority,e.path,e.query,e.fragment)}static joinPath(e,...t){if(!e.path)throw new Error("[UriError]: cannot call joinPath on URI without path");let n;return n=g.d&&"file"===e.scheme?te.file(K.join(le(e,!0),...t)).path:Z.join(e.path,...t),e.with({path:n})}toString(e=!1){return se(this,e)}toJSON(){return this}static revive(e){if(e){if(e instanceof te)return e;{const t=new ie(e);return t._formatted=e.external,t._fsPath=e._sep===ne?e.fsPath:null,t}}return e}}const ne=g.d?1:void 0;class ie extends te{constructor(){super(...arguments),this._formatted=null,this._fsPath=null}get fsPath(){return this._fsPath||(this._fsPath=le(this,!1)),this._fsPath}toString(e=!1){return e?se(this,!0):(this._formatted||(this._formatted=se(this,!1)),this._formatted)}toJSON(){const e={$mid:1};return this._fsPath&&(e.fsPath=this._fsPath,e._sep=ne),this._formatted&&(e.external=this._formatted),this.path&&(e.path=this.path),this.scheme&&(e.scheme=this.scheme),this.authority&&(e.authority=this.authority),this.query&&(e.query=this.query),this.fragment&&(e.fragment=this.fragment),e}}const oe={58:"%3A",47:"%2F",63:"%3F",35:"%23",91:"%5B",93:"%5D",64:"%40",33:"%21",36:"%24",38:"%26",39:"%27",40:"%28",41:"%29",42:"%2A",43:"%2B",44:"%2C",59:"%3B",61:"%3D",32:"%20"};function ae(e,t){let n=void 0,i=-1;for(let o=0;o<e.length;o++){const a=e.charCodeAt(o);if(a>=97&&a<=122||a>=65&&a<=90||a>=48&&a<=57||45===a||46===a||95===a||126===a||t&&47===a)-1!==i&&(n+=encodeURIComponent(e.substring(i,o)),i=-1),void 0!==n&&(n+=e.charAt(o));else{void 0===n&&(n=e.substr(0,o));const t=oe[a];void 0!==t?(-1!==i&&(n+=encodeURIComponent(e.substring(i,o)),i=-1),n+=t):-1===i&&(i=o)}}return-1!==i&&(n+=encodeURIComponent(e.substring(i))),void 0!==n?n:e}function re(e){let t=void 0;for(let n=0;n<e.length;n++){const i=e.charCodeAt(n);35===i||63===i?(void 0===t&&(t=e.substr(0,n)),t+=oe[i]):void 0!==t&&(t+=e[n])}return void 0!==t?t:e}function le(e,t){let n;return n=e.authority&&e.path.length>1&&"file"===e.scheme?`//${e.authority}${e.path}`:47===e.path.charCodeAt(0)&&(e.path.charCodeAt(1)>=65&&e.path.charCodeAt(1)<=90||e.path.charCodeAt(1)>=97&&e.path.charCodeAt(1)<=122)&&58===e.path.charCodeAt(2)?t?e.path.substr(1):e.path[1].toLowerCase()+e.path.substr(2):e.path,g.d&&(n=n.replace(/\//g,"\\")),n}function se(e,t){const n=t?re:ae;let i="",{scheme:o,authority:a,path:r,query:l,fragment:s}=e;if(o&&(i+=o,i+=":"),(a||"file"===o)&&(i+=Q,i+=Q),a){let e=a.indexOf("@");if(-1!==e){const t=a.substr(0,e);a=a.substr(e+1),e=t.indexOf(":"),-1===e?i+=n(t,!1):(i+=n(t.substr(0,e),!1),i+=":",i+=n(t.substr(e+1),!1)),i+="@"}a=a.toLowerCase(),e=a.indexOf(":"),-1===e?i+=n(a,!1):(i+=n(a.substr(0,e),!1),i+=a.substr(e))}if(r){if(r.length>=3&&47===r.charCodeAt(0)&&58===r.charCodeAt(2)){const e=r.charCodeAt(1);e>=65&&e<=90&&(r=`/${String.fromCharCode(e+32)}:${r.substr(3)}`)}else if(r.length>=2&&58===r.charCodeAt(1)){const e=r.charCodeAt(0);e>=65&&e<=90&&(r=`${String.fromCharCode(e+32)}:${r.substr(2)}`)}i+=n(r,!0)}return l&&(i+="?",i+=n(l,!1)),s&&(i+="#",i+=t?s:ae(s,!1)),i}const de=/(%[0-9A-Za-z][0-9A-Za-z])+/g;function ce(e){return e.match(de)?e.replace(de,e=>function e(t){try{return decodeURIComponent(t)}catch(n){return t.length>3?t.substr(0,3)+e(t.substr(3)):t}}(e)):e}class ue{constructor(e,t){this.lineNumber=e,this.column=t}with(e=this.lineNumber,t=this.column){return e===this.lineNumber&&t===this.column?this:new ue(e,t)}delta(e=0,t=0){return this.with(this.lineNumber+e,this.column+t)}equals(e){return ue.equals(this,e)}static equals(e,t){return!e&&!t||!!e&&!!t&&e.lineNumber===t.lineNumber&&e.column===t.column}isBefore(e){return ue.isBefore(this,e)}static isBefore(e,t){return e.lineNumber<t.lineNumber||!(t.lineNumber<e.lineNumber)&&e.column<t.column}isBeforeOrEqual(e){return ue.isBeforeOrEqual(this,e)}static isBeforeOrEqual(e,t){return e.lineNumber<t.lineNumber||!(t.lineNumber<e.lineNumber)&&e.column<=t.column}static compare(e,t){let n=0|e.lineNumber,i=0|t.lineNumber;if(n===i){return(0|e.column)-(0|t.column)}return n-i}clone(){return new ue(this.lineNumber,this.column)}toString(){return"("+this.lineNumber+","+this.column+")"}static lift(e){return new ue(e.lineNumber,e.column)}static isIPosition(e){return e&&"number"==typeof e.lineNumber&&"number"==typeof e.column}}class me{constructor(e,t,n,i){e>n||e===n&&t>i?(this.startLineNumber=n,this.startColumn=i,this.endLineNumber=e,this.endColumn=t):(this.startLineNumber=e,this.startColumn=t,this.endLineNumber=n,this.endColumn=i)}isEmpty(){return me.isEmpty(this)}static isEmpty(e){return e.startLineNumber===e.endLineNumber&&e.startColumn===e.endColumn}containsPosition(e){return me.containsPosition(this,e)}static containsPosition(e,t){return!(t.lineNumber<e.startLineNumber||t.lineNumber>e.endLineNumber)&&(!(t.lineNumber===e.startLineNumber&&t.column<e.startColumn)&&!(t.lineNumber===e.endLineNumber&&t.column>e.endColumn))}containsRange(e){return me.containsRange(this,e)}static containsRange(e,t){return!(t.startLineNumber<e.startLineNumber||t.endLineNumber<e.startLineNumber)&&(!(t.startLineNumber>e.endLineNumber||t.endLineNumber>e.endLineNumber)&&(!(t.startLineNumber===e.startLineNumber&&t.startColumn<e.startColumn)&&!(t.endLineNumber===e.endLineNumber&&t.endColumn>e.endColumn)))}strictContainsRange(e){return me.strictContainsRange(this,e)}static strictContainsRange(e,t){return!(t.startLineNumber<e.startLineNumber||t.endLineNumber<e.startLineNumber)&&(!(t.startLineNumber>e.endLineNumber||t.endLineNumber>e.endLineNumber)&&(!(t.startLineNumber===e.startLineNumber&&t.startColumn<=e.startColumn)&&!(t.endLineNumber===e.endLineNumber&&t.endColumn>=e.endColumn)))}plusRange(e){return me.plusRange(this,e)}static plusRange(e,t){let n,i,o,a;return t.startLineNumber<e.startLineNumber?(n=t.startLineNumber,i=t.startColumn):t.startLineNumber===e.startLineNumber?(n=t.startLineNumber,i=Math.min(t.startColumn,e.startColumn)):(n=e.startLineNumber,i=e.startColumn),t.endLineNumber>e.endLineNumber?(o=t.endLineNumber,a=t.endColumn):t.endLineNumber===e.endLineNumber?(o=t.endLineNumber,a=Math.max(t.endColumn,e.endColumn)):(o=e.endLineNumber,a=e.endColumn),new me(n,i,o,a)}intersectRanges(e){return me.intersectRanges(this,e)}static intersectRanges(e,t){let n=e.startLineNumber,i=e.startColumn,o=e.endLineNumber,a=e.endColumn,r=t.startLineNumber,l=t.startColumn,s=t.endLineNumber,d=t.endColumn;return n<r?(n=r,i=l):n===r&&(i=Math.max(i,l)),o>s?(o=s,a=d):o===s&&(a=Math.min(a,d)),n>o||n===o&&i>a?null:new me(n,i,o,a)}equalsRange(e){return me.equalsRange(this,e)}static equalsRange(e,t){return!!e&&!!t&&e.startLineNumber===t.startLineNumber&&e.startColumn===t.startColumn&&e.endLineNumber===t.endLineNumber&&e.endColumn===t.endColumn}getEndPosition(){return me.getEndPosition(this)}static getEndPosition(e){return new ue(e.endLineNumber,e.endColumn)}getStartPosition(){return me.getStartPosition(this)}static getStartPosition(e){return new ue(e.startLineNumber,e.startColumn)}toString(){return"["+this.startLineNumber+","+this.startColumn+" -> "+this.endLineNumber+","+this.endColumn+"]"}setEndPosition(e,t){return new me(this.startLineNumber,this.startColumn,e,t)}setStartPosition(e,t){return new me(e,t,this.endLineNumber,this.endColumn)}collapseToStart(){return me.collapseToStart(this)}static collapseToStart(e){return new me(e.startLineNumber,e.startColumn,e.startLineNumber,e.startColumn)}static fromPositions(e,t=e){return new me(e.lineNumber,e.column,t.lineNumber,t.column)}static lift(e){return e?new me(e.startLineNumber,e.startColumn,e.endLineNumber,e.endColumn):null}static isIRange(e){return e&&"number"==typeof e.startLineNumber&&"number"==typeof e.startColumn&&"number"==typeof e.endLineNumber&&"number"==typeof e.endColumn}static areIntersectingOrTouching(e,t){return!(e.endLineNumber<t.startLineNumber||e.endLineNumber===t.startLineNumber&&e.endColumn<t.startColumn)&&!(t.endLineNumber<e.startLineNumber||t.endLineNumber===e.startLineNumber&&t.endColumn<e.startColumn)}static areIntersecting(e,t){return!(e.endLineNumber<t.startLineNumber||e.endLineNumber===t.startLineNumber&&e.endColumn<=t.startColumn)&&!(t.endLineNumber<e.startLineNumber||t.endLineNumber===e.startLineNumber&&t.endColumn<=e.startColumn)}static compareRangesUsingStarts(e,t){if(e&&t){const n=0|e.startLineNumber,i=0|t.startLineNumber;if(n===i){const n=0|e.startColumn,i=0|t.startColumn;if(n===i){const n=0|e.endLineNumber,i=0|t.endLineNumber;if(n===i){return(0|e.endColumn)-(0|t.endColumn)}return n-i}return n-i}return n-i}return(e?1:0)-(t?1:0)}static compareRangesUsingEnds(e,t){return e.endLineNumber===t.endLineNumber?e.endColumn===t.endColumn?e.startLineNumber===t.startLineNumber?e.startColumn-t.startColumn:e.startLineNumber-t.startLineNumber:e.endColumn-t.endColumn:e.endLineNumber-t.endLineNumber}static spansMultipleLines(e){return e.endLineNumber>e.startLineNumber}}function he(e,t,n,i){return new w(e,t,n).ComputeDiff(i)}class pe{constructor(e){const t=[],n=[];for(let i=0,o=e.length;i<o;i++)t[i]=fe(e[i],1),n[i]=ke(e[i],1);this.lines=e,this._startColumns=t,this._endColumns=n}getElements(){const e=[];for(let t=0,n=this.lines.length;t<n;t++)e[t]=this.lines[t].substring(this._startColumns[t]-1,this._endColumns[t]-1);return e}getStartLineNumber(e){return e+1}getEndLineNumber(e){return e+1}createCharSequence(e,t,n){const i=[],o=[],a=[];let r=0;for(let l=t;l<=n;l++){const t=this.lines[l],n=e?this._startColumns[l]:1,s=e?this._endColumns[l]:t.length+1;for(let e=n;e<s;e++)i[r]=t.charCodeAt(e-1),o[r]=l+1,a[r]=e,r++}return new Te(i,o,a)}}class Te{constructor(e,t,n){this._charCodes=e,this._lineNumbers=t,this._columns=n}getElements(){return this._charCodes}getStartLineNumber(e){return this._lineNumbers[e]}getStartColumn(e){return this._columns[e]}getEndLineNumber(e){return this._lineNumbers[e]}getEndColumn(e){return this._columns[e]+1}}class be{constructor(e,t,n,i,o,a,r,l){this.originalStartLineNumber=e,this.originalStartColumn=t,this.originalEndLineNumber=n,this.originalEndColumn=i,this.modifiedStartLineNumber=o,this.modifiedStartColumn=a,this.modifiedEndLineNumber=r,this.modifiedEndColumn=l}static createFromDiffChange(e,t,n){let i,o,a,r,l,s,d,c;return 0===e.originalLength?(i=0,o=0,a=0,r=0):(i=t.getStartLineNumber(e.originalStart),o=t.getStartColumn(e.originalStart),a=t.getEndLineNumber(e.originalStart+e.originalLength-1),r=t.getEndColumn(e.originalStart+e.originalLength-1)),0===e.modifiedLength?(l=0,s=0,d=0,c=0):(l=n.getStartLineNumber(e.modifiedStart),s=n.getStartColumn(e.modifiedStart),d=n.getEndLineNumber(e.modifiedStart+e.modifiedLength-1),c=n.getEndColumn(e.modifiedStart+e.modifiedLength-1)),new be(i,o,a,r,l,s,d,c)}}class ge{constructor(e,t,n,i,o){this.originalStartLineNumber=e,this.originalEndLineNumber=t,this.modifiedStartLineNumber=n,this.modifiedEndLineNumber=i,this.charChanges=o}static createFromDiffResult(e,t,n,i,o,a,r){let l,s,d,c,u=void 0;if(0===t.originalLength?(l=n.getStartLineNumber(t.originalStart)-1,s=0):(l=n.getStartLineNumber(t.originalStart),s=n.getEndLineNumber(t.originalStart+t.originalLength-1)),0===t.modifiedLength?(d=i.getStartLineNumber(t.modifiedStart)-1,c=0):(d=i.getStartLineNumber(t.modifiedStart),c=i.getEndLineNumber(t.modifiedStart+t.modifiedLength-1)),a&&t.originalLength>0&&t.originalLength<20&&t.modifiedLength>0&&t.modifiedLength<20&&o()){const a=n.createCharSequence(e,t.originalStart,t.originalStart+t.originalLength-1),l=i.createCharSequence(e,t.modifiedStart,t.modifiedStart+t.modifiedLength-1);let s=he(a,l,o,!0).changes;r&&(s=function(e){if(e.length<=1)return e;const t=[e[0]];let n=t[0];for(let i=1,o=e.length;i<o;i++){const o=e[i],a=o.originalStart-(n.originalStart+n.originalLength),r=o.modifiedStart-(n.modifiedStart+n.modifiedLength);Math.min(a,r)<3?(n.originalLength=o.originalStart+o.originalLength-n.originalStart,n.modifiedLength=o.modifiedStart+o.modifiedLength-n.modifiedStart):(t.push(o),n=o)}return t}(s)),u=[];for(let e=0,t=s.length;e<t;e++)u.push(be.createFromDiffChange(s[e],a,l))}return new ge(l,s,d,c,u)}}class xe{constructor(e,t,n){this.shouldComputeCharChanges=n.shouldComputeCharChanges,this.shouldPostProcessCharChanges=n.shouldPostProcessCharChanges,this.shouldIgnoreTrimWhitespace=n.shouldIgnoreTrimWhitespace,this.shouldMakePrettyDiff=n.shouldMakePrettyDiff,this.originalLines=e,this.modifiedLines=t,this.original=new pe(e),this.modified=new pe(t),this.continueLineDiff=Se(n.maxComputationTime),this.continueCharDiff=Se(0===n.maxComputationTime?0:Math.min(n.maxComputationTime,5e3))}computeDiff(){if(1===this.original.lines.length&&0===this.original.lines[0].length)return 1===this.modified.lines.length&&0===this.modified.lines[0].length?{quitEarly:!1,changes:[]}:{quitEarly:!1,changes:[{originalStartLineNumber:1,originalEndLineNumber:1,modifiedStartLineNumber:1,modifiedEndLineNumber:this.modified.lines.length,charChanges:[{modifiedEndColumn:0,modifiedEndLineNumber:0,modifiedStartColumn:0,modifiedStartLineNumber:0,originalEndColumn:0,originalEndLineNumber:0,originalStartColumn:0,originalStartLineNumber:0}]}]};if(1===this.modified.lines.length&&0===this.modified.lines[0].length)return{quitEarly:!1,changes:[{originalStartLineNumber:1,originalEndLineNumber:this.original.lines.length,modifiedStartLineNumber:1,modifiedEndLineNumber:1,charChanges:[{modifiedEndColumn:0,modifiedEndLineNumber:0,modifiedStartColumn:0,modifiedStartLineNumber:0,originalEndColumn:0,originalEndLineNumber:0,originalStartColumn:0,originalStartLineNumber:0}]}]};const e=he(this.original,this.modified,this.continueLineDiff,this.shouldMakePrettyDiff),t=e.changes,n=e.quitEarly;if(this.shouldIgnoreTrimWhitespace){const e=[];for(let n=0,i=t.length;n<i;n++)e.push(ge.createFromDiffResult(this.shouldIgnoreTrimWhitespace,t[n],this.original,this.modified,this.continueCharDiff,this.shouldComputeCharChanges,this.shouldPostProcessCharChanges));return{quitEarly:n,changes:e}}const i=[];let o=0,a=0;for(let e=-1,n=t.length;e<n;e++){const r=e+1<n?t[e+1]:null,l=r?r.originalStart:this.originalLines.length,s=r?r.modifiedStart:this.modifiedLines.length;for(;o<l&&a<s;){const e=this.originalLines[o],t=this.modifiedLines[a];if(e!==t){{let n=fe(e,1),r=fe(t,1);for(;n>1&&r>1;){if(e.charCodeAt(n-2)!==t.charCodeAt(r-2))break;n--,r--}(n>1||r>1)&&this._pushTrimWhitespaceCharChange(i,o+1,1,n,a+1,1,r)}{let n=ke(e,1),r=ke(t,1);const l=e.length+1,s=t.length+1;for(;n<l&&r<s;){if(e.charCodeAt(n-1)!==e.charCodeAt(r-1))break;n++,r++}(n<l||r<s)&&this._pushTrimWhitespaceCharChange(i,o+1,n,l,a+1,r,s)}}o++,a++}r&&(i.push(ge.createFromDiffResult(this.shouldIgnoreTrimWhitespace,r,this.original,this.modified,this.continueCharDiff,this.shouldComputeCharChanges,this.shouldPostProcessCharChanges)),o+=r.originalLength,a+=r.modifiedLength)}return{quitEarly:n,changes:i}}_pushTrimWhitespaceCharChange(e,t,n,i,o,a,r){if(this._mergeTrimWhitespaceCharChange(e,t,n,i,o,a,r))return;let l=void 0;this.shouldComputeCharChanges&&(l=[new be(t,n,t,i,o,a,o,r)]),e.push(new ge(t,t,o,o,l))}_mergeTrimWhitespaceCharChange(e,t,n,i,o,a,r){const l=e.length;if(0===l)return!1;const s=e[l-1];return 0!==s.originalEndLineNumber&&0!==s.modifiedEndLineNumber&&(s.originalEndLineNumber+1===t&&s.modifiedEndLineNumber+1===o&&(s.originalEndLineNumber=t,s.modifiedEndLineNumber=o,this.shouldComputeCharChanges&&s.charChanges&&s.charChanges.push(new be(t,n,t,i,o,a,o,r)),!0))}}function fe(e,t){const n=function(e){for(let t=0,n=e.length;t<n;t++){const n=e.charCodeAt(t);if(32!==n&&9!==n)return t}return-1}(e);return-1===n?t:n+1}function ke(e,t){const n=function(e,t=e.length-1){for(let n=t;n>=0;n--){const t=e.charCodeAt(n);if(32!==t&&9!==t)return n}return-1}(e);return-1===n?t:n+2}function Se(e){if(0===e)return()=>!0;const t=Date.now();return()=>Date.now()-t<e}function ye(e){return e<0?0:e>255?255:0|e}function Ce(e){return e<0?0:e>4294967295?4294967295:0|e}class Ee{constructor(e,t){this.index=e,this.remainder=t}}class Ae{constructor(e){this.values=e,this.prefixSum=new Uint32Array(e.length),this.prefixSumValidIndex=new Int32Array(1),this.prefixSumValidIndex[0]=-1}insertValues(e,t){e=Ce(e);const n=this.values,i=this.prefixSum,o=t.length;return 0!==o&&(this.values=new Uint32Array(n.length+o),this.values.set(n.subarray(0,e),0),this.values.set(n.subarray(e),e+o),this.values.set(t,e),e-1<this.prefixSumValidIndex[0]&&(this.prefixSumValidIndex[0]=e-1),this.prefixSum=new Uint32Array(this.values.length),this.prefixSumValidIndex[0]>=0&&this.prefixSum.set(i.subarray(0,this.prefixSumValidIndex[0]+1)),!0)}changeValue(e,t){return e=Ce(e),t=Ce(t),this.values[e]!==t&&(this.values[e]=t,e-1<this.prefixSumValidIndex[0]&&(this.prefixSumValidIndex[0]=e-1),!0)}removeValues(e,t){e=Ce(e),t=Ce(t);const n=this.values,i=this.prefixSum;if(e>=n.length)return!1;let o=n.length-e;return t>=o&&(t=o),0!==t&&(this.values=new Uint32Array(n.length-t),this.values.set(n.subarray(0,e),0),this.values.set(n.subarray(e+t),e),this.prefixSum=new Uint32Array(this.values.length),e-1<this.prefixSumValidIndex[0]&&(this.prefixSumValidIndex[0]=e-1),this.prefixSumValidIndex[0]>=0&&this.prefixSum.set(i.subarray(0,this.prefixSumValidIndex[0]+1)),!0)}getTotalValue(){return 0===this.values.length?0:this._getAccumulatedValue(this.values.length-1)}getAccumulatedValue(e){return e<0?0:(e=Ce(e),this._getAccumulatedValue(e))}_getAccumulatedValue(e){if(e<=this.prefixSumValidIndex[0])return this.prefixSum[e];let t=this.prefixSumValidIndex[0]+1;0===t&&(this.prefixSum[0]=this.values[0],t++),e>=this.values.length&&(e=this.values.length-1);for(let n=t;n<=e;n++)this.prefixSum[n]=this.prefixSum[n-1]+this.values[n];return this.prefixSumValidIndex[0]=Math.max(this.prefixSumValidIndex[0],e),this.prefixSum[e]}getIndexOf(e){e=Math.floor(e),this.getTotalValue();let t=0,n=this.values.length-1,i=0,o=0,a=0;for(;t<=n;)if(i=t+(n-t)/2|0,o=this.prefixSum[i],a=o-this.values[i],e<a)n=i-1;else{if(!(e>=o))break;t=i+1}return new Ee(i,e-a)}}const Oe=function(e=""){let t="(-?\\d*\\.\\d\\w*)|([^";for(const n of"`~!@#$%^&*()-=+[{]}\\|;:'\",.<>/?")e.indexOf(n)>=0||(t+="\\"+n);return t+="\\s]+)",new RegExp(t,"g")}();const _e={maxLen:1e3,windowSize:15,timeBudget:150};function Ie(e,t,n,i){let o;for(;o=e.exec(t);){const t=o.index||0;if(t<=n&&e.lastIndex>=n)return o;if(i>0&&t>i)return null}return null}class Ne{constructor(e){let t=ye(e);this._defaultValue=t,this._asciiMap=Ne._createAsciiMap(t),this._map=new Map}static _createAsciiMap(e){let t=new Uint8Array(256);for(let n=0;n<256;n++)t[n]=e;return t}set(e,t){let n=ye(t);e>=0&&e<256?this._asciiMap[e]=n:this._map.set(e,n)}get(e){return e>=0&&e<256?this._asciiMap[e]:this._map.get(e)||this._defaultValue}}class Le{constructor(e,t,n){const i=new Uint8Array(e*t);for(let o=0,a=e*t;o<a;o++)i[o]=n;this._data=i,this.rows=e,this.cols=t}get(e,t){return this._data[e*this.cols+t]}set(e,t,n){this._data[e*this.cols+t]=n}}class Re{constructor(e){let t=0,n=0;for(let i=0,o=e.length;i<o;i++){let[o,a,r]=e[i];a>t&&(t=a),o>n&&(n=o),r>n&&(n=r)}t++,n++;let i=new Le(n,t,0);for(let t=0,n=e.length;t<n;t++){let[n,o,a]=e[t];i.set(n,o,a)}this._states=i,this._maxCharCode=t}nextState(e,t){return t<0||t>=this._maxCharCode?0:this._states.get(e,t)}}let De=null;let ve=null;class Me{static _createLink(e,t,n,i,o){let a=o-1;do{const n=t.charCodeAt(a);if(2!==e.get(n))break;a--}while(a>i);if(i>0){const e=t.charCodeAt(i-1),n=t.charCodeAt(a);(40===e&&41===n||91===e&&93===n||123===e&&125===n)&&a--}return{range:{startLineNumber:n,startColumn:i+1,endLineNumber:n,endColumn:a+2},url:t.substring(i,a+1)}}static computeLinks(e,t=function(){return null===De&&(De=new Re([[1,104,2],[1,72,2],[1,102,6],[1,70,6],[2,116,3],[2,84,3],[3,116,4],[3,84,4],[4,112,5],[4,80,5],[5,115,9],[5,83,9],[5,58,10],[6,105,7],[6,73,7],[7,108,8],[7,76,8],[8,101,9],[8,69,9],[9,58,10],[10,47,11],[11,47,12]])),De}()){const n=function(){if(null===ve){ve=new Ne(0);const e=" \t<>'\"、。｡､，．：；‘“〈《「『【〔（［｛｢｣｝］）〕】』」》〉”’｀～…";for(let t=0;t<e.length;t++)ve.set(e.charCodeAt(t),1);const t=".,;";for(let e=0;e<t.length;e++)ve.set(t.charCodeAt(e),2)}return ve}();let i=[];for(let o=1,a=e.getLineCount();o<=a;o++){const a=e.getLineContent(o),r=a.length;let l=0,s=0,d=0,c=1,u=!1,m=!1,h=!1,p=!1;for(;l<r;){let e=!1;const r=a.charCodeAt(l);if(13===c){let t;switch(r){case 40:u=!0,t=0;break;case 41:t=u?0:1;break;case 91:h=!0,m=!0,t=0;break;case 93:h=!1,t=m?0:1;break;case 123:p=!0,t=0;break;case 125:t=p?0:1;break;case 39:t=34===d||96===d?0:1;break;case 34:t=39===d||96===d?0:1;break;case 96:t=39===d||34===d?0:1;break;case 42:t=42===d?1:0;break;case 124:t=124===d?1:0;break;case 32:t=h?0:1;break;default:t=n.get(r)}1===t&&(i.push(Me._createLink(n,a,o,s,l)),e=!0)}else if(12===c){let t;91===r?(m=!0,t=0):t=n.get(r),1===t?e=!0:c=13}else c=t.nextState(c,r),0===c&&(e=!0);e&&(c=1,u=!1,m=!1,p=!1,s=l+1,d=r),l++}13===c&&i.push(Me._createLink(n,a,o,s,r))}return i}}class Pe{constructor(){this._defaultValueSet=[["true","false"],["True","False"],["Private","Public","Friend","ReadOnly","Partial","Protected","WriteOnly"],["public","protected","private"]]}navigateValueSet(e,t,n,i,o){if(e&&t){let n=this.doNavigateValueSet(t,o);if(n)return{range:e,value:n}}if(n&&i){let e=this.doNavigateValueSet(i,o);if(e)return{range:n,value:e}}return null}doNavigateValueSet(e,t){let n=this.numberReplace(e,t);return null!==n?n:this.textReplace(e,t)}numberReplace(e,t){let n=Math.pow(10,e.length-(e.lastIndexOf(".")+1)),i=Number(e),o=parseFloat(e);return isNaN(i)||isNaN(o)||i!==o?null:0!==i||t?(i=Math.floor(i*n),i+=t?n:-n,String(i/n)):null}textReplace(e,t){return this.valueSetsReplace(this._defaultValueSet,e,t)}valueSetsReplace(e,t,n){let i=null;for(let o=0,a=e.length;null===i&&o<a;o++)i=this.valueSetReplace(e[o],t,n);return i}valueSetReplace(e,t,n){let i=e.indexOf(t);return i>=0?(i+=n?1:-1,i<0?i=e.length-1:i%=e.length,e[i]):null}}Pe.INSTANCE=new Pe;class Fe{constructor(e){this.element=e,this.next=Fe.Undefined,this.prev=Fe.Undefined}}Fe.Undefined=new Fe(void 0);class Be{constructor(){this._first=Fe.Undefined,this._last=Fe.Undefined,this._size=0}get size(){return this._size}isEmpty(){return this._first===Fe.Undefined}clear(){this._first=Fe.Undefined,this._last=Fe.Undefined,this._size=0}unshift(e){return this._insert(e,!1)}push(e){return this._insert(e,!0)}_insert(e,t){const n=new Fe(e);if(this._first===Fe.Undefined)this._first=n,this._last=n;else if(t){const e=this._last;this._last=n,n.prev=e,e.next=n}else{const e=this._first;this._first=n,n.next=e,e.prev=n}this._size+=1;let i=!1;return()=>{i||(i=!0,this._remove(n))}}shift(){if(this._first!==Fe.Undefined){const e=this._first.element;return this._remove(this._first),e}}pop(){if(this._last!==Fe.Undefined){const e=this._last.element;return this._remove(this._last),e}}_remove(e){if(e.prev!==Fe.Undefined&&e.next!==Fe.Undefined){const t=e.prev;t.next=e.next,e.next.prev=t}else e.prev===Fe.Undefined&&e.next===Fe.Undefined?(this._first=Fe.Undefined,this._last=Fe.Undefined):e.next===Fe.Undefined?(this._last=this._last.prev,this._last.next=Fe.Undefined):e.prev===Fe.Undefined&&(this._first=this._first.next,this._first.prev=Fe.Undefined);this._size-=1}*[Symbol.iterator](){let e=this._first;for(;e!==Fe.Undefined;)yield e.element,e=e.next}}const Ue=g.a.performance&&"function"==typeof g.a.performance.now;class we{constructor(e){this._highResolution=Ue&&e,this._startTime=this._now(),this._stopTime=-1}static create(e=!0){return new we(e)}stop(){this._stopTime=this._now()}elapsed(){return-1!==this._stopTime?this._stopTime-this._startTime:this._now()-this._startTime}_now(){return this._highResolution?g.a.performance.now():Date.now()}}var qe;!function(e){function t(e){return(t,n=null,i)=>{let o,a=!1;return o=e(e=>{if(!a)return o?o.dispose():a=!0,t.call(n,e)},null,i),a&&o.dispose(),o}}function n(e,t){return r((n,i=null,o)=>e(e=>n.call(i,t(e)),null,o))}function i(e,t){return r((n,i=null,o)=>e(e=>{t(e),n.call(i,e)},null,o))}function o(e,t){return r((n,i=null,o)=>e(e=>t(e)&&n.call(i,e),null,o))}function a(e,t,i){let o=i;return n(e,e=>(o=t(o,e),o))}function r(e){let t;const n=new He({onFirstListenerAdd(){t=e(n.fire,n)},onLastListenerRemove(){t.dispose()}});return n.event}function l(e,t,n=100,i=!1,o){let a,r=void 0,l=void 0,s=0;const d=new He({leakWarningThreshold:o,onFirstListenerAdd(){a=e(e=>{s++,r=t(r,e),i&&!l&&(d.fire(r),r=void 0),clearTimeout(l),l=setTimeout(()=>{const e=r;r=void 0,l=void 0,(!i||s>1)&&d.fire(e),s=0},n)})},onLastListenerRemove(){a.dispose()}});return d.event}function s(e){let t,n=!0;return o(e,e=>{const i=n||e!==t;return n=!1,t=e,i})}e.None=()=>b.None,e.once=t,e.map=n,e.forEach=i,e.filter=o,e.signal=function(e){return e},e.any=function(...e){return(t,n=null,i)=>p(...e.map(e=>e(e=>t.call(n,e),null,i)))},e.reduce=a,e.snapshot=r,e.debounce=l,e.stopwatch=function(e){const i=(new Date).getTime();return n(t(e),e=>(new Date).getTime()-i)},e.latch=s,e.buffer=function(e,t=!1,n=[]){let i=n.slice(),o=e(e=>{i?i.push(e):r.fire(e)});const a=()=>{i&&i.forEach(e=>r.fire(e)),i=null},r=new He({onFirstListenerAdd(){o||(o=e(e=>r.fire(e)))},onFirstListenerDidAdd(){i&&(t?setTimeout(a):a())},onLastListenerRemove(){o&&o.dispose(),o=null}});return r.event};class d{constructor(e){this.event=e}map(e){return new d(n(this.event,e))}forEach(e){return new d(i(this.event,e))}filter(e){return new d(o(this.event,e))}reduce(e,t){return new d(a(this.event,e,t))}latch(){return new d(s(this.event))}debounce(e,t=100,n=!1,i){return new d(l(this.event,e,t,n,i))}on(e,t,n){return this.event(e,t,n)}once(e,n,i){return t(this.event)(e,n,i)}}e.chain=function(e){return new d(e)},e.fromNodeEventEmitter=function(e,t,n=(e=>e)){const i=(...e)=>o.fire(n(...e)),o=new He({onFirstListenerAdd:()=>e.on(t,i),onLastListenerRemove:()=>e.removeListener(t,i)});return o.event},e.fromDOMEventEmitter=function(e,t,n=(e=>e)){const i=(...e)=>o.fire(n(...e)),o=new He({onFirstListenerAdd:()=>e.addEventListener(t,i),onLastListenerRemove:()=>e.removeEventListener(t,i)});return o.event},e.fromPromise=function(e){const t=new He;let n=!1;return e.then(void 0,()=>null).then(()=>{n?t.fire(void 0):setTimeout(()=>t.fire(void 0),0)}),n=!0,t.event},e.toPromise=function(e){return new Promise(n=>t(e)(n))}}(qe||(qe={}));class je{constructor(e){this._listenerCount=0,this._invocationCount=0,this._elapsedOverall=0,this._name=`${e}_${je._idPool++}`}start(e){this._stopWatch=new we(!0),this._listenerCount=e}stop(){if(this._stopWatch){const e=this._stopWatch.elapsed();this._elapsedOverall+=e,this._invocationCount+=1,console.info(`did FIRE ${this._name}: elapsed_ms: ${e.toFixed(5)}, listener: ${this._listenerCount} (elapsed_overall: ${this._elapsedOverall.toFixed(2)}, invocations: ${this._invocationCount})`),this._stopWatch=void 0}}}je._idPool=0;class He{constructor(e){var t;this._disposed=!1,this._options=e,this._leakageMon=void 0,this._perfMon=(null===(t=this._options)||void 0===t?void 0:t._profName)?new je(this._options._profName):void 0}get event(){return this._event||(this._event=(e,t,n)=>{var i;this._listeners||(this._listeners=new Be);const o=this._listeners.isEmpty();o&&this._options&&this._options.onFirstListenerAdd&&this._options.onFirstListenerAdd(this);const a=this._listeners.push(t?[e,t]:e);o&&this._options&&this._options.onFirstListenerDidAdd&&this._options.onFirstListenerDidAdd(this),this._options&&this._options.onListenerDidAdd&&this._options.onListenerDidAdd(this,e,t);const r=null===(i=this._leakageMon)||void 0===i?void 0:i.check(this._listeners.size);let l;return l={dispose:()=>{if(r&&r(),l.dispose=He._noop,!this._disposed&&(a(),this._options&&this._options.onLastListenerRemove)){this._listeners&&!this._listeners.isEmpty()||this._options.onLastListenerRemove(this)}}},n instanceof T?n.add(l):Array.isArray(n)&&n.push(l),l}),this._event}fire(e){var t,n;if(this._listeners){this._deliveryQueue||(this._deliveryQueue=new Be);for(let t of this._listeners)this._deliveryQueue.push([t,e]);for(null===(t=this._perfMon)||void 0===t||t.start(this._deliveryQueue.size);this._deliveryQueue.size>0;){const[e,t]=this._deliveryQueue.shift();try{"function"==typeof e?e.call(void 0,t):e[0].call(e[1],t)}catch(e){a(e)}}null===(n=this._perfMon)||void 0===n||n.stop()}}dispose(){var e,t,n;null===(e=this._listeners)||void 0===e||e.clear(),null===(t=this._deliveryQueue)||void 0===t||t.clear(),null===(n=this._leakageMon)||void 0===n||n.dispose(),this._disposed=!0}}He._noop=function(){};const Ye=Object.freeze((function(e,t){const n=setTimeout(e.bind(t),0);return{dispose(){clearTimeout(n)}}}));var Ve,ze;(ze=Ve||(Ve={})).isCancellationToken=function(e){return e===ze.None||e===ze.Cancelled||e instanceof Ge||!(!e||"object"!=typeof e)&&"boolean"==typeof e.isCancellationRequested&&"function"==typeof e.onCancellationRequested},ze.None=Object.freeze({isCancellationRequested:!1,onCancellationRequested:qe.None}),ze.Cancelled=Object.freeze({isCancellationRequested:!0,onCancellationRequested:Ye});class Ge{constructor(){this._isCancelled=!1,this._emitter=null}cancel(){this._isCancelled||(this._isCancelled=!0,this._emitter&&(this._emitter.fire(void 0),this.dispose()))}get isCancellationRequested(){return this._isCancelled}get onCancellationRequested(){return this._isCancelled?Ye:(this._emitter||(this._emitter=new He),this._emitter.event)}dispose(){this._emitter&&(this._emitter.dispose(),this._emitter=null)}}class We{constructor(e){this._token=void 0,this._parentListener=void 0,this._parentListener=e&&e.onCancellationRequested(this.cancel,this)}get token(){return this._token||(this._token=new Ge),this._token}cancel(){this._token?this._token instanceof Ge&&this._token.cancel():this._token=Ve.Cancelled}dispose(e=!1){e&&this.cancel(),this._parentListener&&this._parentListener.dispose(),this._token?this._token instanceof Ge&&this._token.dispose():this._token=Ve.None}}class Ke{constructor(){this._keyCodeToStr=[],this._strToKeyCode=Object.create(null)}define(e,t){this._keyCodeToStr[e]=t,this._strToKeyCode[t.toLowerCase()]=e}keyCodeToStr(e){return this._keyCodeToStr[e]}strToKeyCode(e){return this._strToKeyCode[e.toLowerCase()]||0}}const Ze=new Ke,Xe=new Ke,Je=new Ke;var $e,Qe,et,tt,nt,it,ot,at,rt,lt,st,dt,ct,ut,mt,ht,pt,Tt,bt,gt,xt,ft,kt,St,yt,Ct,Et,At,Ot,_t,It,Nt,Lt,Rt;!function(){function e(e,t,n=t,i=n){Ze.define(e,t),Xe.define(e,n),Je.define(e,i)}e(0,"unknown"),e(1,"Backspace"),e(2,"Tab"),e(3,"Enter"),e(4,"Shift"),e(5,"Ctrl"),e(6,"Alt"),e(7,"PauseBreak"),e(8,"CapsLock"),e(9,"Escape"),e(10,"Space"),e(11,"PageUp"),e(12,"PageDown"),e(13,"End"),e(14,"Home"),e(15,"LeftArrow","Left"),e(16,"UpArrow","Up"),e(17,"RightArrow","Right"),e(18,"DownArrow","Down"),e(19,"Insert"),e(20,"Delete"),e(21,"0"),e(22,"1"),e(23,"2"),e(24,"3"),e(25,"4"),e(26,"5"),e(27,"6"),e(28,"7"),e(29,"8"),e(30,"9"),e(31,"A"),e(32,"B"),e(33,"C"),e(34,"D"),e(35,"E"),e(36,"F"),e(37,"G"),e(38,"H"),e(39,"I"),e(40,"J"),e(41,"K"),e(42,"L"),e(43,"M"),e(44,"N"),e(45,"O"),e(46,"P"),e(47,"Q"),e(48,"R"),e(49,"S"),e(50,"T"),e(51,"U"),e(52,"V"),e(53,"W"),e(54,"X"),e(55,"Y"),e(56,"Z"),e(57,"Meta"),e(58,"ContextMenu"),e(59,"F1"),e(60,"F2"),e(61,"F3"),e(62,"F4"),e(63,"F5"),e(64,"F6"),e(65,"F7"),e(66,"F8"),e(67,"F9"),e(68,"F10"),e(69,"F11"),e(70,"F12"),e(71,"F13"),e(72,"F14"),e(73,"F15"),e(74,"F16"),e(75,"F17"),e(76,"F18"),e(77,"F19"),e(78,"NumLock"),e(79,"ScrollLock"),e(80,";",";","OEM_1"),e(81,"=","=","OEM_PLUS"),e(82,",",",","OEM_COMMA"),e(83,"-","-","OEM_MINUS"),e(84,".",".","OEM_PERIOD"),e(85,"/","/","OEM_2"),e(86,"`","`","OEM_3"),e(110,"ABNT_C1"),e(111,"ABNT_C2"),e(87,"[","[","OEM_4"),e(88,"\\","\\","OEM_5"),e(89,"]","]","OEM_6"),e(90,"'","'","OEM_7"),e(91,"OEM_8"),e(92,"OEM_102"),e(93,"NumPad0"),e(94,"NumPad1"),e(95,"NumPad2"),e(96,"NumPad3"),e(97,"NumPad4"),e(98,"NumPad5"),e(99,"NumPad6"),e(100,"NumPad7"),e(101,"NumPad8"),e(102,"NumPad9"),e(103,"NumPad_Multiply"),e(104,"NumPad_Add"),e(105,"NumPad_Separator"),e(106,"NumPad_Subtract"),e(107,"NumPad_Decimal"),e(108,"NumPad_Divide")}(),function(e){e.toString=function(e){return Ze.keyCodeToStr(e)},e.fromString=function(e){return Ze.strToKeyCode(e)},e.toUserSettingsUS=function(e){return Xe.keyCodeToStr(e)},e.toUserSettingsGeneral=function(e){return Je.keyCodeToStr(e)},e.fromUserSettings=function(e){return Xe.strToKeyCode(e)||Je.strToKeyCode(e)}}($e||($e={}));class Dt extends me{constructor(e,t,n,i){super(e,t,n,i),this.selectionStartLineNumber=e,this.selectionStartColumn=t,this.positionLineNumber=n,this.positionColumn=i}toString(){return"["+this.selectionStartLineNumber+","+this.selectionStartColumn+" -> "+this.positionLineNumber+","+this.positionColumn+"]"}equalsSelection(e){return Dt.selectionsEqual(this,e)}static selectionsEqual(e,t){return e.selectionStartLineNumber===t.selectionStartLineNumber&&e.selectionStartColumn===t.selectionStartColumn&&e.positionLineNumber===t.positionLineNumber&&e.positionColumn===t.positionColumn}getDirection(){return this.selectionStartLineNumber===this.startLineNumber&&this.selectionStartColumn===this.startColumn?0:1}setEndPosition(e,t){return 0===this.getDirection()?new Dt(this.startLineNumber,this.startColumn,e,t):new Dt(e,t,this.startLineNumber,this.startColumn)}getPosition(){return new ue(this.positionLineNumber,this.positionColumn)}setStartPosition(e,t){return 0===this.getDirection()?new Dt(e,t,this.endLineNumber,this.endColumn):new Dt(this.endLineNumber,this.endColumn,e,t)}static fromPositions(e,t=e){return new Dt(e.lineNumber,e.column,t.lineNumber,t.column)}static liftSelection(e){return new Dt(e.selectionStartLineNumber,e.selectionStartColumn,e.positionLineNumber,e.positionColumn)}static selectionsArrEqual(e,t){if(e&&!t||!e&&t)return!1;if(!e&&!t)return!0;if(e.length!==t.length)return!1;for(let n=0,i=e.length;n<i;n++)if(!this.selectionsEqual(e[n],t[n]))return!1;return!0}static isISelection(e){return e&&"number"==typeof e.selectionStartLineNumber&&"number"==typeof e.selectionStartColumn&&"number"==typeof e.positionLineNumber&&"number"==typeof e.positionColumn}static createWithDirection(e,t,n,i,o){return 0===o?new Dt(e,t,n,i):new Dt(n,i,e,t)}}class vt{constructor(e,t,n){this.offset=0|e,this.type=t,this.language=n}toString(){return"("+this.offset+", "+this.type+")"}}!function(e){e[e.Unknown=0]="Unknown",e[e.Disabled=1]="Disabled",e[e.Enabled=2]="Enabled"}(Qe||(Qe={})),function(e){e[e.KeepWhitespace=1]="KeepWhitespace",e[e.InsertAsSnippet=4]="InsertAsSnippet"}(et||(et={})),function(e){e[e.Method=0]="Method",e[e.Function=1]="Function",e[e.Constructor=2]="Constructor",e[e.Field=3]="Field",e[e.Variable=4]="Variable",e[e.Class=5]="Class",e[e.Struct=6]="Struct",e[e.Interface=7]="Interface",e[e.Module=8]="Module",e[e.Property=9]="Property",e[e.Event=10]="Event",e[e.Operator=11]="Operator",e[e.Unit=12]="Unit",e[e.Value=13]="Value",e[e.Constant=14]="Constant",e[e.Enum=15]="Enum",e[e.EnumMember=16]="EnumMember",e[e.Keyword=17]="Keyword",e[e.Text=18]="Text",e[e.Color=19]="Color",e[e.File=20]="File",e[e.Reference=21]="Reference",e[e.Customcolor=22]="Customcolor",e[e.Folder=23]="Folder",e[e.TypeParameter=24]="TypeParameter",e[e.User=25]="User",e[e.Issue=26]="Issue",e[e.Snippet=27]="Snippet"}(tt||(tt={})),function(e){e[e.Deprecated=1]="Deprecated"}(nt||(nt={})),function(e){e[e.Invoke=0]="Invoke",e[e.TriggerCharacter=1]="TriggerCharacter",e[e.TriggerForIncompleteCompletions=2]="TriggerForIncompleteCompletions"}(it||(it={})),function(e){e[e.EXACT=0]="EXACT",e[e.ABOVE=1]="ABOVE",e[e.BELOW=2]="BELOW"}(ot||(ot={})),function(e){e[e.NotSet=0]="NotSet",e[e.ContentFlush=1]="ContentFlush",e[e.RecoverFromMarkers=2]="RecoverFromMarkers",e[e.Explicit=3]="Explicit",e[e.Paste=4]="Paste",e[e.Undo=5]="Undo",e[e.Redo=6]="Redo"}(at||(at={})),function(e){e[e.LF=1]="LF",e[e.CRLF=2]="CRLF"}(rt||(rt={})),function(e){e[e.Text=0]="Text",e[e.Read=1]="Read",e[e.Write=2]="Write"}(lt||(lt={})),function(e){e[e.None=0]="None",e[e.Keep=1]="Keep",e[e.Brackets=2]="Brackets",e[e.Advanced=3]="Advanced",e[e.Full=4]="Full"}(st||(st={})),function(e){e[e.acceptSuggestionOnCommitCharacter=0]="acceptSuggestionOnCommitCharacter",e[e.acceptSuggestionOnEnter=1]="acceptSuggestionOnEnter",e[e.accessibilitySupport=2]="accessibilitySupport",e[e.accessibilityPageSize=3]="accessibilityPageSize",e[e.ariaLabel=4]="ariaLabel",e[e.autoClosingBrackets=5]="autoClosingBrackets",e[e.autoClosingOvertype=6]="autoClosingOvertype",e[e.autoClosingQuotes=7]="autoClosingQuotes",e[e.autoIndent=8]="autoIndent",e[e.automaticLayout=9]="automaticLayout",e[e.autoSurround=10]="autoSurround",e[e.codeLens=11]="codeLens",e[e.codeLensFontFamily=12]="codeLensFontFamily",e[e.codeLensFontSize=13]="codeLensFontSize",e[e.colorDecorators=14]="colorDecorators",e[e.columnSelection=15]="columnSelection",e[e.comments=16]="comments",e[e.contextmenu=17]="contextmenu",e[e.copyWithSyntaxHighlighting=18]="copyWithSyntaxHighlighting",e[e.cursorBlinking=19]="cursorBlinking",e[e.cursorSmoothCaretAnimation=20]="cursorSmoothCaretAnimation",e[e.cursorStyle=21]="cursorStyle",e[e.cursorSurroundingLines=22]="cursorSurroundingLines",e[e.cursorSurroundingLinesStyle=23]="cursorSurroundingLinesStyle",e[e.cursorWidth=24]="cursorWidth",e[e.disableLayerHinting=25]="disableLayerHinting",e[e.disableMonospaceOptimizations=26]="disableMonospaceOptimizations",e[e.dragAndDrop=27]="dragAndDrop",e[e.emptySelectionClipboard=28]="emptySelectionClipboard",e[e.extraEditorClassName=29]="extraEditorClassName",e[e.fastScrollSensitivity=30]="fastScrollSensitivity",e[e.find=31]="find",e[e.fixedOverflowWidgets=32]="fixedOverflowWidgets",e[e.folding=33]="folding",e[e.foldingStrategy=34]="foldingStrategy",e[e.foldingHighlight=35]="foldingHighlight",e[e.unfoldOnClickAfterEndOfLine=36]="unfoldOnClickAfterEndOfLine",e[e.fontFamily=37]="fontFamily",e[e.fontInfo=38]="fontInfo",e[e.fontLigatures=39]="fontLigatures",e[e.fontSize=40]="fontSize",e[e.fontWeight=41]="fontWeight",e[e.formatOnPaste=42]="formatOnPaste",e[e.formatOnType=43]="formatOnType",e[e.glyphMargin=44]="glyphMargin",e[e.gotoLocation=45]="gotoLocation",e[e.hideCursorInOverviewRuler=46]="hideCursorInOverviewRuler",e[e.highlightActiveIndentGuide=47]="highlightActiveIndentGuide",e[e.hover=48]="hover",e[e.inDiffEditor=49]="inDiffEditor",e[e.letterSpacing=50]="letterSpacing",e[e.lightbulb=51]="lightbulb",e[e.lineDecorationsWidth=52]="lineDecorationsWidth",e[e.lineHeight=53]="lineHeight",e[e.lineNumbers=54]="lineNumbers",e[e.lineNumbersMinChars=55]="lineNumbersMinChars",e[e.linkedEditing=56]="linkedEditing",e[e.links=57]="links",e[e.matchBrackets=58]="matchBrackets",e[e.minimap=59]="minimap",e[e.mouseStyle=60]="mouseStyle",e[e.mouseWheelScrollSensitivity=61]="mouseWheelScrollSensitivity",e[e.mouseWheelZoom=62]="mouseWheelZoom",e[e.multiCursorMergeOverlapping=63]="multiCursorMergeOverlapping",e[e.multiCursorModifier=64]="multiCursorModifier",e[e.multiCursorPaste=65]="multiCursorPaste",e[e.occurrencesHighlight=66]="occurrencesHighlight",e[e.overviewRulerBorder=67]="overviewRulerBorder",e[e.overviewRulerLanes=68]="overviewRulerLanes",e[e.padding=69]="padding",e[e.parameterHints=70]="parameterHints",e[e.peekWidgetDefaultFocus=71]="peekWidgetDefaultFocus",e[e.definitionLinkOpensInPeek=72]="definitionLinkOpensInPeek",e[e.quickSuggestions=73]="quickSuggestions",e[e.quickSuggestionsDelay=74]="quickSuggestionsDelay",e[e.readOnly=75]="readOnly",e[e.renameOnType=76]="renameOnType",e[e.renderControlCharacters=77]="renderControlCharacters",e[e.renderIndentGuides=78]="renderIndentGuides",e[e.renderFinalNewline=79]="renderFinalNewline",e[e.renderLineHighlight=80]="renderLineHighlight",e[e.renderLineHighlightOnlyWhenFocus=81]="renderLineHighlightOnlyWhenFocus",e[e.renderValidationDecorations=82]="renderValidationDecorations",e[e.renderWhitespace=83]="renderWhitespace",e[e.revealHorizontalRightPadding=84]="revealHorizontalRightPadding",e[e.roundedSelection=85]="roundedSelection",e[e.rulers=86]="rulers",e[e.scrollbar=87]="scrollbar",e[e.scrollBeyondLastColumn=88]="scrollBeyondLastColumn",e[e.scrollBeyondLastLine=89]="scrollBeyondLastLine",e[e.scrollPredominantAxis=90]="scrollPredominantAxis",e[e.selectionClipboard=91]="selectionClipboard",e[e.selectionHighlight=92]="selectionHighlight",e[e.selectOnLineNumbers=93]="selectOnLineNumbers",e[e.showFoldingControls=94]="showFoldingControls",e[e.showUnused=95]="showUnused",e[e.snippetSuggestions=96]="snippetSuggestions",e[e.smartSelect=97]="smartSelect",e[e.smoothScrolling=98]="smoothScrolling",e[e.stickyTabStops=99]="stickyTabStops",e[e.stopRenderingLineAfter=100]="stopRenderingLineAfter",e[e.suggest=101]="suggest",e[e.suggestFontSize=102]="suggestFontSize",e[e.suggestLineHeight=103]="suggestLineHeight",e[e.suggestOnTriggerCharacters=104]="suggestOnTriggerCharacters",e[e.suggestSelection=105]="suggestSelection",e[e.tabCompletion=106]="tabCompletion",e[e.tabIndex=107]="tabIndex",e[e.unusualLineTerminators=108]="unusualLineTerminators",e[e.useTabStops=109]="useTabStops",e[e.wordSeparators=110]="wordSeparators",e[e.wordWrap=111]="wordWrap",e[e.wordWrapBreakAfterCharacters=112]="wordWrapBreakAfterCharacters",e[e.wordWrapBreakBeforeCharacters=113]="wordWrapBreakBeforeCharacters",e[e.wordWrapColumn=114]="wordWrapColumn",e[e.wordWrapOverride1=115]="wordWrapOverride1",e[e.wordWrapOverride2=116]="wordWrapOverride2",e[e.wrappingIndent=117]="wrappingIndent",e[e.wrappingStrategy=118]="wrappingStrategy",e[e.showDeprecated=119]="showDeprecated",e[e.inlineHints=120]="inlineHints",e[e.editorClassName=121]="editorClassName",e[e.pixelRatio=122]="pixelRatio",e[e.tabFocusMode=123]="tabFocusMode",e[e.layoutInfo=124]="layoutInfo",e[e.wrappingInfo=125]="wrappingInfo"}(dt||(dt={})),function(e){e[e.TextDefined=0]="TextDefined",e[e.LF=1]="LF",e[e.CRLF=2]="CRLF"}(ct||(ct={})),function(e){e[e.LF=0]="LF",e[e.CRLF=1]="CRLF"}(ut||(ut={})),function(e){e[e.None=0]="None",e[e.Indent=1]="Indent",e[e.IndentOutdent=2]="IndentOutdent",e[e.Outdent=3]="Outdent"}(mt||(mt={})),function(e){e[e.Unknown=0]="Unknown",e[e.Backspace=1]="Backspace",e[e.Tab=2]="Tab",e[e.Enter=3]="Enter",e[e.Shift=4]="Shift",e[e.Ctrl=5]="Ctrl",e[e.Alt=6]="Alt",e[e.PauseBreak=7]="PauseBreak",e[e.CapsLock=8]="CapsLock",e[e.Escape=9]="Escape",e[e.Space=10]="Space",e[e.PageUp=11]="PageUp",e[e.PageDown=12]="PageDown",e[e.End=13]="End",e[e.Home=14]="Home",e[e.LeftArrow=15]="LeftArrow",e[e.UpArrow=16]="UpArrow",e[e.RightArrow=17]="RightArrow",e[e.DownArrow=18]="DownArrow",e[e.Insert=19]="Insert",e[e.Delete=20]="Delete",e[e.KEY_0=21]="KEY_0",e[e.KEY_1=22]="KEY_1",e[e.KEY_2=23]="KEY_2",e[e.KEY_3=24]="KEY_3",e[e.KEY_4=25]="KEY_4",e[e.KEY_5=26]="KEY_5",e[e.KEY_6=27]="KEY_6",e[e.KEY_7=28]="KEY_7",e[e.KEY_8=29]="KEY_8",e[e.KEY_9=30]="KEY_9",e[e.KEY_A=31]="KEY_A",e[e.KEY_B=32]="KEY_B",e[e.KEY_C=33]="KEY_C",e[e.KEY_D=34]="KEY_D",e[e.KEY_E=35]="KEY_E",e[e.KEY_F=36]="KEY_F",e[e.KEY_G=37]="KEY_G",e[e.KEY_H=38]="KEY_H",e[e.KEY_I=39]="KEY_I",e[e.KEY_J=40]="KEY_J",e[e.KEY_K=41]="KEY_K",e[e.KEY_L=42]="KEY_L",e[e.KEY_M=43]="KEY_M",e[e.KEY_N=44]="KEY_N",e[e.KEY_O=45]="KEY_O",e[e.KEY_P=46]="KEY_P",e[e.KEY_Q=47]="KEY_Q",e[e.KEY_R=48]="KEY_R",e[e.KEY_S=49]="KEY_S",e[e.KEY_T=50]="KEY_T",e[e.KEY_U=51]="KEY_U",e[e.KEY_V=52]="KEY_V",e[e.KEY_W=53]="KEY_W",e[e.KEY_X=54]="KEY_X",e[e.KEY_Y=55]="KEY_Y",e[e.KEY_Z=56]="KEY_Z",e[e.Meta=57]="Meta",e[e.ContextMenu=58]="ContextMenu",e[e.F1=59]="F1",e[e.F2=60]="F2",e[e.F3=61]="F3",e[e.F4=62]="F4",e[e.F5=63]="F5",e[e.F6=64]="F6",e[e.F7=65]="F7",e[e.F8=66]="F8",e[e.F9=67]="F9",e[e.F10=68]="F10",e[e.F11=69]="F11",e[e.F12=70]="F12",e[e.F13=71]="F13",e[e.F14=72]="F14",e[e.F15=73]="F15",e[e.F16=74]="F16",e[e.F17=75]="F17",e[e.F18=76]="F18",e[e.F19=77]="F19",e[e.NumLock=78]="NumLock",e[e.ScrollLock=79]="ScrollLock",e[e.US_SEMICOLON=80]="US_SEMICOLON",e[e.US_EQUAL=81]="US_EQUAL",e[e.US_COMMA=82]="US_COMMA",e[e.US_MINUS=83]="US_MINUS",e[e.US_DOT=84]="US_DOT",e[e.US_SLASH=85]="US_SLASH",e[e.US_BACKTICK=86]="US_BACKTICK",e[e.US_OPEN_SQUARE_BRACKET=87]="US_OPEN_SQUARE_BRACKET",e[e.US_BACKSLASH=88]="US_BACKSLASH",e[e.US_CLOSE_SQUARE_BRACKET=89]="US_CLOSE_SQUARE_BRACKET",e[e.US_QUOTE=90]="US_QUOTE",e[e.OEM_8=91]="OEM_8",e[e.OEM_102=92]="OEM_102",e[e.NUMPAD_0=93]="NUMPAD_0",e[e.NUMPAD_1=94]="NUMPAD_1",e[e.NUMPAD_2=95]="NUMPAD_2",e[e.NUMPAD_3=96]="NUMPAD_3",e[e.NUMPAD_4=97]="NUMPAD_4",e[e.NUMPAD_5=98]="NUMPAD_5",e[e.NUMPAD_6=99]="NUMPAD_6",e[e.NUMPAD_7=100]="NUMPAD_7",e[e.NUMPAD_8=101]="NUMPAD_8",e[e.NUMPAD_9=102]="NUMPAD_9",e[e.NUMPAD_MULTIPLY=103]="NUMPAD_MULTIPLY",e[e.NUMPAD_ADD=104]="NUMPAD_ADD",e[e.NUMPAD_SEPARATOR=105]="NUMPAD_SEPARATOR",e[e.NUMPAD_SUBTRACT=106]="NUMPAD_SUBTRACT",e[e.NUMPAD_DECIMAL=107]="NUMPAD_DECIMAL",e[e.NUMPAD_DIVIDE=108]="NUMPAD_DIVIDE",e[e.KEY_IN_COMPOSITION=109]="KEY_IN_COMPOSITION",e[e.ABNT_C1=110]="ABNT_C1",e[e.ABNT_C2=111]="ABNT_C2",e[e.MAX_VALUE=112]="MAX_VALUE"}(ht||(ht={})),function(e){e[e.Hint=1]="Hint",e[e.Info=2]="Info",e[e.Warning=4]="Warning",e[e.Error=8]="Error"}(pt||(pt={})),function(e){e[e.Unnecessary=1]="Unnecessary",e[e.Deprecated=2]="Deprecated"}(Tt||(Tt={})),function(e){e[e.Inline=1]="Inline",e[e.Gutter=2]="Gutter"}(bt||(bt={})),function(e){e[e.UNKNOWN=0]="UNKNOWN",e[e.TEXTAREA=1]="TEXTAREA",e[e.GUTTER_GLYPH_MARGIN=2]="GUTTER_GLYPH_MARGIN",e[e.GUTTER_LINE_NUMBERS=3]="GUTTER_LINE_NUMBERS",e[e.GUTTER_LINE_DECORATIONS=4]="GUTTER_LINE_DECORATIONS",e[e.GUTTER_VIEW_ZONE=5]="GUTTER_VIEW_ZONE",e[e.CONTENT_TEXT=6]="CONTENT_TEXT",e[e.CONTENT_EMPTY=7]="CONTENT_EMPTY",e[e.CONTENT_VIEW_ZONE=8]="CONTENT_VIEW_ZONE",e[e.CONTENT_WIDGET=9]="CONTENT_WIDGET",e[e.OVERVIEW_RULER=10]="OVERVIEW_RULER",e[e.SCROLLBAR=11]="SCROLLBAR",e[e.OVERLAY_WIDGET=12]="OVERLAY_WIDGET",e[e.OUTSIDE_EDITOR=13]="OUTSIDE_EDITOR"}(gt||(gt={})),function(e){e[e.TOP_RIGHT_CORNER=0]="TOP_RIGHT_CORNER",e[e.BOTTOM_RIGHT_CORNER=1]="BOTTOM_RIGHT_CORNER",e[e.TOP_CENTER=2]="TOP_CENTER"}(xt||(xt={})),function(e){e[e.Left=1]="Left",e[e.Center=2]="Center",e[e.Right=4]="Right",e[e.Full=7]="Full"}(ft||(ft={})),function(e){e[e.Off=0]="Off",e[e.On=1]="On",e[e.Relative=2]="Relative",e[e.Interval=3]="Interval",e[e.Custom=4]="Custom"}(kt||(kt={})),function(e){e[e.None=0]="None",e[e.Text=1]="Text",e[e.Blocks=2]="Blocks"}(St||(St={})),function(e){e[e.Smooth=0]="Smooth",e[e.Immediate=1]="Immediate"}(yt||(yt={})),function(e){e[e.Auto=1]="Auto",e[e.Hidden=2]="Hidden",e[e.Visible=3]="Visible"}(Ct||(Ct={})),function(e){e[e.LTR=0]="LTR",e[e.RTL=1]="RTL"}(Et||(Et={})),function(e){e[e.Invoke=1]="Invoke",e[e.TriggerCharacter=2]="TriggerCharacter",e[e.ContentChange=3]="ContentChange"}(At||(At={})),function(e){e[e.File=0]="File",e[e.Module=1]="Module",e[e.Namespace=2]="Namespace",e[e.Package=3]="Package",e[e.Class=4]="Class",e[e.Method=5]="Method",e[e.Property=6]="Property",e[e.Field=7]="Field",e[e.Constructor=8]="Constructor",e[e.Enum=9]="Enum",e[e.Interface=10]="Interface",e[e.Function=11]="Function",e[e.Variable=12]="Variable",e[e.Constant=13]="Constant",e[e.String=14]="String",e[e.Number=15]="Number",e[e.Boolean=16]="Boolean",e[e.Array=17]="Array",e[e.Object=18]="Object",e[e.Key=19]="Key",e[e.Null=20]="Null",e[e.EnumMember=21]="EnumMember",e[e.Struct=22]="Struct",e[e.Event=23]="Event",e[e.Operator=24]="Operator",e[e.TypeParameter=25]="TypeParameter"}(Ot||(Ot={})),function(e){e[e.Deprecated=1]="Deprecated"}(_t||(_t={})),function(e){e[e.Hidden=0]="Hidden",e[e.Blink=1]="Blink",e[e.Smooth=2]="Smooth",e[e.Phase=3]="Phase",e[e.Expand=4]="Expand",e[e.Solid=5]="Solid"}(It||(It={})),function(e){e[e.Line=1]="Line",e[e.Block=2]="Block",e[e.Underline=3]="Underline",e[e.LineThin=4]="LineThin",e[e.BlockOutline=5]="BlockOutline",e[e.UnderlineThin=6]="UnderlineThin"}(Nt||(Nt={})),function(e){e[e.AlwaysGrowsWhenTypingAtEdges=0]="AlwaysGrowsWhenTypingAtEdges",e[e.NeverGrowsWhenTypingAtEdges=1]="NeverGrowsWhenTypingAtEdges",e[e.GrowsOnlyWhenTypingBefore=2]="GrowsOnlyWhenTypingBefore",e[e.GrowsOnlyWhenTypingAfter=3]="GrowsOnlyWhenTypingAfter"}(Lt||(Lt={})),function(e){e[e.None=0]="None",e[e.Same=1]="Same",e[e.Indent=2]="Indent",e[e.DeepIndent=3]="DeepIndent"}(Rt||(Rt={}));class Mt{static chord(e,t){return function(e,t){return(e|(65535&t)<<16>>>0)>>>0}(e,t)}}Mt.CtrlCmd=2048,Mt.Shift=1024,Mt.Alt=512,Mt.WinCtrl=256;var Pt=function(e,t,n,i){return new(n||(n=Promise))((function(o,a){function r(e){try{s(i.next(e))}catch(e){a(e)}}function l(e){try{s(i.throw(e))}catch(e){a(e)}}function s(e){var t;e.done?o(e.value):(t=e.value,t instanceof n?t:new n((function(e){e(t)}))).then(r,l)}s((i=i.apply(e,t||[])).next())}))};class Ft extends class{constructor(e,t,n,i){this._uri=e,this._lines=t,this._eol=n,this._versionId=i,this._lineStarts=null,this._cachedTextValue=null}dispose(){this._lines.length=0}getText(){return null===this._cachedTextValue&&(this._cachedTextValue=this._lines.join(this._eol)),this._cachedTextValue}onEvents(e){e.eol&&e.eol!==this._eol&&(this._eol=e.eol,this._lineStarts=null);const t=e.changes;for(const e of t)this._acceptDeleteRange(e.range),this._acceptInsertText(new ue(e.range.startLineNumber,e.range.startColumn),e.text);this._versionId=e.versionId,this._cachedTextValue=null}_ensureLineStarts(){if(!this._lineStarts){const e=this._eol.length,t=this._lines.length,n=new Uint32Array(t);for(let i=0;i<t;i++)n[i]=this._lines[i].length+e;this._lineStarts=new Ae(n)}}_setLineText(e,t){this._lines[e]=t,this._lineStarts&&this._lineStarts.changeValue(e,this._lines[e].length+this._eol.length)}_acceptDeleteRange(e){if(e.startLineNumber!==e.endLineNumber)this._setLineText(e.startLineNumber-1,this._lines[e.startLineNumber-1].substring(0,e.startColumn-1)+this._lines[e.endLineNumber-1].substring(e.endColumn-1)),this._lines.splice(e.startLineNumber,e.endLineNumber-e.startLineNumber),this._lineStarts&&this._lineStarts.removeValues(e.startLineNumber,e.endLineNumber-e.startLineNumber);else{if(e.startColumn===e.endColumn)return;this._setLineText(e.startLineNumber-1,this._lines[e.startLineNumber-1].substring(0,e.startColumn-1)+this._lines[e.startLineNumber-1].substring(e.endColumn-1))}}_acceptInsertText(e,t){if(0===t.length)return;let n=t.split(/\r\n|\r|\n/);if(1===n.length)return void this._setLineText(e.lineNumber-1,this._lines[e.lineNumber-1].substring(0,e.column-1)+n[0]+this._lines[e.lineNumber-1].substring(e.column-1));n[n.length-1]+=this._lines[e.lineNumber-1].substring(e.column-1),this._setLineText(e.lineNumber-1,this._lines[e.lineNumber-1].substring(0,e.column-1)+n[0]);let i=new Uint32Array(n.length-1);for(let t=1;t<n.length;t++)this._lines.splice(e.lineNumber+t-1,0,n[t]),i[t-1]=n[t].length+this._eol.length;this._lineStarts&&this._lineStarts.insertValues(e.lineNumber,i)}}{get uri(){return this._uri}get version(){return this._versionId}get eol(){return this._eol}getValue(){return this.getText()}getLinesContent(){return this._lines.slice(0)}getLineCount(){return this._lines.length}getLineContent(e){return this._lines[e-1]}getWordAtPosition(e,t){let n=function e(t,n,i,o,a=_e){if(i.length>a.maxLen){let r=t-a.maxLen/2;return r<0?r=0:o+=r,e(t,n,i=i.substring(r,t+a.maxLen/2),o,a)}const r=Date.now(),l=t-1-o;let s=-1,d=null;for(let e=1;!(Date.now()-r>=a.timeBudget);e++){const t=l-a.windowSize*e;n.lastIndex=Math.max(0,t);const o=Ie(n,i,l,s);if(!o&&d)break;if(d=o,t<=0)break;s=t}if(d){let e={word:d[0],startColumn:o+1+d.index,endColumn:o+1+d.index+d[0].length};return n.lastIndex=0,e}return null}(e.column,function(e){let t=Oe;if(e&&e instanceof RegExp)if(e.global)t=e;else{let n="g";e.ignoreCase&&(n+="i"),e.multiline&&(n+="m"),e.unicode&&(n+="u"),t=new RegExp(e.source,n)}return t.lastIndex=0,t}(t),this._lines[e.lineNumber-1],0);return n?new me(e.lineNumber,n.startColumn,e.lineNumber,n.endColumn):null}words(e){const t=this._lines,n=this._wordenize.bind(this);let i=0,o="",a=0,r=[];return{*[Symbol.iterator](){for(;;)if(a<r.length){const e=o.substring(r[a].start,r[a].end);a+=1,yield e}else{if(!(i<t.length))break;o=t[i],r=n(o,e),a=0,i+=1}}}}getLineWords(e,t){let n=this._lines[e-1],i=this._wordenize(n,t),o=[];for(const e of i)o.push({word:n.substring(e.start,e.end),startColumn:e.start+1,endColumn:e.end+1});return o}_wordenize(e,t){const n=[];let i;for(t.lastIndex=0;(i=t.exec(e))&&0!==i[0].length;)n.push({start:i.index,end:i.index+i[0].length});return n}getValueInRange(e){if((e=this._validateRange(e)).startLineNumber===e.endLineNumber)return this._lines[e.startLineNumber-1].substring(e.startColumn-1,e.endColumn-1);let t=this._eol,n=e.startLineNumber-1,i=e.endLineNumber-1,o=[];o.push(this._lines[n].substring(e.startColumn-1));for(let e=n+1;e<i;e++)o.push(this._lines[e]);return o.push(this._lines[i].substring(0,e.endColumn-1)),o.join(t)}offsetAt(e){return e=this._validatePosition(e),this._ensureLineStarts(),this._lineStarts.getAccumulatedValue(e.lineNumber-2)+(e.column-1)}positionAt(e){e=Math.floor(e),e=Math.max(0,e),this._ensureLineStarts();let t=this._lineStarts.getIndexOf(e),n=this._lines[t.index].length;return{lineNumber:1+t.index,column:1+Math.min(t.remainder,n)}}_validateRange(e){const t=this._validatePosition({lineNumber:e.startLineNumber,column:e.startColumn}),n=this._validatePosition({lineNumber:e.endLineNumber,column:e.endColumn});return t.lineNumber!==e.startLineNumber||t.column!==e.startColumn||n.lineNumber!==e.endLineNumber||n.column!==e.endColumn?{startLineNumber:t.lineNumber,startColumn:t.column,endLineNumber:n.lineNumber,endColumn:n.column}:e}_validatePosition(e){if(!ue.isIPosition(e))throw new Error("bad position");let{lineNumber:t,column:n}=e,i=!1;if(t<1)t=1,n=1,i=!0;else if(t>this._lines.length)t=this._lines.length,n=this._lines[t-1].length+1,i=!0;else{let e=this._lines[t-1].length+1;n<1?(n=1,i=!0):n>e&&(n=e,i=!0)}return i?{lineNumber:t,column:n}:e}}class Bt{constructor(e,t){this._host=e,this._models=Object.create(null),this._foreignModuleFactory=t,this._foreignModule=null}dispose(){this._models=Object.create(null)}_getModel(e){return this._models[e]}_getModels(){let e=[];return Object.keys(this._models).forEach(t=>e.push(this._models[t])),e}acceptNewModel(e){this._models[e.url]=new Ft(te.parse(e.url),e.lines,e.EOL,e.versionId)}acceptModelChanged(e,t){if(!this._models[e])return;this._models[e].onEvents(t)}acceptRemovedModel(e){this._models[e]&&delete this._models[e]}computeDiff(e,t,n,i){return Pt(this,void 0,void 0,(function*(){const o=this._getModel(e),a=this._getModel(t);if(!o||!a)return null;const r=o.getLinesContent(),l=a.getLinesContent(),s=new xe(r,l,{shouldComputeCharChanges:!0,shouldPostProcessCharChanges:!0,shouldIgnoreTrimWhitespace:n,shouldMakePrettyDiff:!0,maxComputationTime:i}).computeDiff(),d=!(s.changes.length>0)&&this._modelsAreIdentical(o,a);return{quitEarly:s.quitEarly,identical:d,changes:s.changes}}))}_modelsAreIdentical(e,t){const n=e.getLineCount();if(n!==t.getLineCount())return!1;for(let i=1;i<=n;i++){if(e.getLineContent(i)!==t.getLineContent(i))return!1}return!0}computeMoreMinimalEdits(e,t){return Pt(this,void 0,void 0,(function*(){const n=this._getModel(e);if(!n)return t;const i=[];let o=void 0;t=y(t,(e,t)=>{if(e.range&&t.range)return me.compareRangesUsingStarts(e.range,t.range);return(e.range?0:1)-(t.range?0:1)});for(let{range:e,text:a,eol:r}of t){if("number"==typeof r&&(o=r),me.isEmpty(e)&&!a)continue;const t=n.getValueInRange(e);if(a=a.replace(/\r\n|\n|\r/g,n.eol),t===a)continue;if(Math.max(a.length,t.length)>Bt._diffLimit){i.push({range:e,text:a});continue}const l=P(t,a,!1),s=n.offsetAt(me.lift(e).getStartPosition());for(const e of l){const t=n.positionAt(s+e.originalStart),o=n.positionAt(s+e.originalStart+e.originalLength),r={text:a.substr(e.modifiedStart,e.modifiedLength),range:{startLineNumber:t.lineNumber,startColumn:t.column,endLineNumber:o.lineNumber,endColumn:o.column}};n.getValueInRange(r.range)!==r.text&&i.push(r)}}return"number"==typeof o&&i.push({eol:o,text:"",range:{startLineNumber:0,startColumn:0,endLineNumber:0,endColumn:0}}),i}))}computeLinks(e){return Pt(this,void 0,void 0,(function*(){let t=this._getModel(e);return t?function(e){return e&&"function"==typeof e.getLineCount&&"function"==typeof e.getLineContent?Me.computeLinks(e):[]}(t):null}))}textualSuggest(e,t,n,i){return Pt(this,void 0,void 0,(function*(){const o=new we(!0),a=new RegExp(n,i),r=new Set;e:for(let n of e){const e=this._getModel(n);if(e)for(let n of e.words(a))if(n!==t&&isNaN(Number(n))&&(r.add(n),r.size>Bt._suggestionsLimit))break e}return{words:Array.from(r),duration:o.elapsed()}}))}computeWordRanges(e,t,n,i){return Pt(this,void 0,void 0,(function*(){let o=this._getModel(e);if(!o)return Object.create(null);const a=new RegExp(n,i),r=Object.create(null);for(let e=t.startLineNumber;e<t.endLineNumber;e++){let t=o.getLineWords(e,a);for(const n of t){if(!isNaN(Number(n.word)))continue;let t=r[n.word];t||(t=[],r[n.word]=t),t.push({startLineNumber:e,startColumn:n.startColumn,endLineNumber:e,endColumn:n.endColumn})}}return r}))}navigateValueSet(e,t,n,i,o){return Pt(this,void 0,void 0,(function*(){let a=this._getModel(e);if(!a)return null;let r=new RegExp(i,o);t.startColumn===t.endColumn&&(t={startLineNumber:t.startLineNumber,startColumn:t.startColumn,endLineNumber:t.endLineNumber,endColumn:t.endColumn+1});let l=a.getValueInRange(t),s=a.getWordAtPosition({lineNumber:t.startLineNumber,column:t.startColumn},r);if(!s)return null;let d=a.getValueInRange(s);return Pe.INSTANCE.navigateValueSet(t,l,s,d,n)}))}loadForeignModule(e,t,n){let i={host:f(n,(e,t)=>this._host.fhr(e,t)),getMirrorModels:()=>this._getModels()};return this._foreignModuleFactory?(this._foreignModule=this._foreignModuleFactory(i,t),Promise.resolve(x(this._foreignModule))):Promise.reject(new Error("Unexpected usage"))}fmr(e,t){if(!this._foreignModule||"function"!=typeof this._foreignModule[e])return Promise.reject(new Error("Missing requestHandler or method: "+e));try{return Promise.resolve(this._foreignModule[e].apply(this._foreignModule,t))}catch(e){return Promise.reject(e)}}}Bt._diffLimit=1e5,Bt._suggestionsLimit=1e4,"function"==typeof importScripts&&(g.a.monaco={editor:void 0,languages:void 0,CancellationTokenSource:We,Emitter:He,KeyCode:ht,KeyMod:Mt,Position:ue,Range:me,Selection:Dt,SelectionDirection:Et,MarkerSeverity:pt,MarkerTag:Tt,Uri:te,Token:vt});let Ut=!1;function wt(e){if(Ut)return;Ut=!0;const t=new S(e=>{self.postMessage(e)},t=>new Bt(t,e));self.onmessage=e=>{t.onmessage(e.data)}}self.onmessage=e=>{Ut||wt(null)};const qt={number:{currency:{style:"currency"},percent:{style:"percent"}},date:{short:{month:"numeric",day:"numeric",year:"2-digit"},medium:{month:"short",day:"numeric",year:"numeric"},long:{month:"long",day:"numeric",year:"numeric"},full:{weekday:"long",month:"long",day:"numeric",year:"numeric"}},time:{short:{hour:"numeric",minute:"numeric"},medium:{hour:"numeric",minute:"numeric",second:"numeric"},long:{hour:"numeric",minute:"numeric",second:"numeric",timeZoneName:"short"},full:{hour:"numeric",minute:"numeric",second:"numeric",timeZoneName:"short"}},relative:{years:{units:"year"},months:{units:"month"},days:{units:"day"},hours:{units:"hour"},minutes:{units:"minute"},seconds:{units:"second"}}};var jt=n(105),Ht=n.n(jt),Yt=n(26),Vt=n.n(Yt),zt=n(41),Gt=n.n(zt);const Wt=e=>"string"==typeof e,Kt=e=>"object"==typeof e&&null!==e,Zt=(e,t)=>((e=[])=>[...new Set(e)])([...Object.keys(e),...Object.keys(t)]).reduce((n,i)=>Kt(e[i])&&Kt(t[i])&&!Array.isArray(e[i])&&!Array.isArray(t[i])?{...n,[i]:Zt(e[i],t[i])}:{...n,[i]:void 0===t[i]?e[i]:t[i]},{}),Xt=/[A-Za-z]|(\]\([\s\S]*?\))|(<([^"<>]|("[^"]*?"))*?>)|(@I18N@\w*?@I18N@)/g;function Jt(e){return e.replace(Xt,function(){let e=0;return t=>{if(1!==t.length)return t;const n=$t[t]||t;return++e%3==0?n.repeat(2):n}}())}const $t={a:"à",b:"ƀ",c:"ç",d:"ð",e:"é",f:"ƒ",g:"ĝ",h:"ĥ",i:"î",l:"ļ",k:"ķ",j:"ĵ",m:"ɱ",n:"ñ",o:"ô",p:"þ",q:"ǫ",r:"ŕ",s:"š",t:"ţ",u:"û",v:"ṽ",w:"ŵ",x:"ẋ",y:"ý",z:"ž",A:"À",B:"Ɓ",C:"Ç",D:"Ð",E:"É",F:"Ƒ",G:"Ĝ",H:"Ĥ",I:"Î",L:"Ļ",K:"Ķ",J:"Ĵ",M:"Ṁ",N:"Ñ",O:"Ô",P:"Þ",Q:"Ǫ",R:"Ŕ",S:"Š",T:"Ţ",U:"Û",V:"Ṽ",W:"Ŵ",X:"Ẋ",Y:"Ý",Z:"Ž"};function Qt(e){Vt.a.__addLocaleData(e),Gt.a.__addLocaleData(e)}Qt({locale:"en",pluralRuleFunction:function(e,t){var n=String(e).split("."),i=!n[1],o=Number(n[0])==e,a=o&&n[0].slice(-1),r=o&&n[0].slice(-2);return t?1==a&&11!=r?"one":2==a&&12!=r?"two":3==a&&13!=r?"few":"other":1==e&&i?"one":"other"},fields:{year:{displayName:"year",relative:{0:"this year",1:"next year","-1":"last year"},relativeTime:{future:{one:"in {0} year",other:"in {0} years"},past:{one:"{0} year ago",other:"{0} years ago"}}},"year-short":{displayName:"yr.",relative:{0:"this yr.",1:"next yr.","-1":"last yr."},relativeTime:{future:{one:"in {0} yr.",other:"in {0} yr."},past:{one:"{0} yr. ago",other:"{0} yr. ago"}}},month:{displayName:"month",relative:{0:"this month",1:"next month","-1":"last month"},relativeTime:{future:{one:"in {0} month",other:"in {0} months"},past:{one:"{0} month ago",other:"{0} months ago"}}},"month-short":{displayName:"mo.",relative:{0:"this mo.",1:"next mo.","-1":"last mo."},relativeTime:{future:{one:"in {0} mo.",other:"in {0} mo."},past:{one:"{0} mo. ago",other:"{0} mo. ago"}}},day:{displayName:"day",relative:{0:"today",1:"tomorrow","-1":"yesterday"},relativeTime:{future:{one:"in {0} day",other:"in {0} days"},past:{one:"{0} day ago",other:"{0} days ago"}}},"day-short":{displayName:"day",relative:{0:"today",1:"tomorrow","-1":"yesterday"},relativeTime:{future:{one:"in {0} day",other:"in {0} days"},past:{one:"{0} day ago",other:"{0} days ago"}}},hour:{displayName:"hour",relative:{0:"this hour"},relativeTime:{future:{one:"in {0} hour",other:"in {0} hours"},past:{one:"{0} hour ago",other:"{0} hours ago"}}},"hour-short":{displayName:"hr.",relative:{0:"this hour"},relativeTime:{future:{one:"in {0} hr.",other:"in {0} hr."},past:{one:"{0} hr. ago",other:"{0} hr. ago"}}},minute:{displayName:"minute",relative:{0:"this minute"},relativeTime:{future:{one:"in {0} minute",other:"in {0} minutes"},past:{one:"{0} minute ago",other:"{0} minutes ago"}}},"minute-short":{displayName:"min.",relative:{0:"this minute"},relativeTime:{future:{one:"in {0} min.",other:"in {0} min."},past:{one:"{0} min. ago",other:"{0} min. ago"}}},second:{displayName:"second",relative:{0:"now"},relativeTime:{future:{one:"in {0} second",other:"in {0} seconds"},past:{one:"{0} second ago",other:"{0} seconds ago"}}},"second-short":{displayName:"sec.",relative:{0:"now"},relativeTime:{future:{one:"in {0} sec.",other:"in {0} sec."},past:{one:"{0} sec. ago",other:"{0} sec. ago"}}}}}),Qt({locale:"en-US",parentLocale:"en"}),Qt({locale:"en-xa",pluralRuleFunction:function(e,t){var n=String(e).split("."),i=!n[1],o=Number(n[0])==e,a=o&&n[0].slice(-1),r=o&&n[0].slice(-2);return t?1==a&&11!=r?"one":2==a&&12!=r?"two":3==a&&13!=r?"few":"other":1==e&&i?"one":"other"},fields:{year:{displayName:"ýéààŕ",relative:{0:"ţĥîîš ýééàŕ",1:"ñéẋẋţ ýééàŕ","-1":"ļàššţ ýééàŕ"},relativeTime:{future:{one:"îñ {0} ýýéàŕŕ",other:"îñ {0} ýýéàŕŕš"},past:{one:"{0} ýéààŕ àĝĝô",other:"{0} ýéààŕš ààĝô"}}},"year-short":{displayName:"ýŕ.",relative:{0:"ţĥîîš ýŕŕ.",1:"ñéẋẋţ ýŕŕ.","-1":"ļàššţ ýŕŕ."},relativeTime:{future:{one:"îñ {0} ýýŕ.",other:"îñ {0} ýýŕ."},past:{one:"{0} ýŕ. ààĝô",other:"{0} ýŕ. ààĝô"}}},month:{displayName:"ɱôññţĥ",relative:{0:"ţĥîîš ɱôôñţĥĥ",1:"ñéẋẋţ ɱôôñţĥĥ","-1":"ļàššţ ɱôôñţĥĥ"},relativeTime:{future:{one:"îñ {0} ɱɱôñţţĥ",other:"îñ {0} ɱɱôñţţĥš"},past:{one:"{0} ɱôññţĥ ààĝô",other:"{0} ɱôññţĥšš àĝôô"}}},"month-short":{displayName:"ɱô.",relative:{0:"ţĥîîš ɱôô.",1:"ñéẋẋţ ɱôô.","-1":"ļàššţ ɱôô."},relativeTime:{future:{one:"îñ {0} ɱɱô.",other:"îñ {0} ɱɱô."},past:{one:"{0} ɱô. ààĝô",other:"{0} ɱô. ààĝô"}}},day:{displayName:"ðàýý",relative:{0:"ţôððàý",1:"ţôɱɱôŕŕŕôŵ","-1":"ýéššţéŕŕðàýý"},relativeTime:{future:{one:"îñ {0} ððàý",other:"îñ {0} ððàýšš"},past:{one:"{0} ðàýý àĝôô",other:"{0} ðàýýš àĝĝô"}}},"day-short":{displayName:"ðàýý",relative:{0:"ţôððàý",1:"ţôɱɱôŕŕŕôŵ","-1":"ýéššţéŕŕðàýý"},relativeTime:{future:{one:"îñ {0} ððàý",other:"îñ {0} ððàýšš"},past:{one:"{0} ðàýý àĝôô",other:"{0} ðàýýš àĝĝô"}}},hour:{displayName:"ĥôûûŕ",relative:{0:"ţĥîîš ĥôôûŕ"},relativeTime:{future:{one:"îñ {0} ĥĥôûŕŕ",other:"îñ {0} ĥĥôûŕŕš"},past:{one:"{0} ĥôûûŕ àĝĝô",other:"{0} ĥôûûŕš ààĝô"}}},"hour-short":{displayName:"ĥŕ.",relative:{0:"ţĥîîš ĥôôûŕ"},relativeTime:{future:{one:"îñ {0} ĥĥŕ.",other:"îñ {0} ĥĥŕ."},past:{one:"{0} ĥŕ. ààĝô",other:"{0} ĥŕ. ààĝô"}}},minute:{displayName:"ɱîññûţéé",relative:{0:"ţĥîîš ɱîîñûţţé"},relativeTime:{future:{one:"îñ {0} ɱɱîñûûţé",other:"îñ {0} ɱɱîñûûţéšš"},past:{one:"{0} ɱîññûţéé àĝôô",other:"{0} ɱîññûţééš àĝĝô"}}},"minute-short":{displayName:"ɱîññ.",relative:{0:"ţĥîîš ɱîîñûţţé"},relativeTime:{future:{one:"îñ {0} ɱɱîñ.",other:"îñ {0} ɱɱîñ."},past:{one:"{0} ɱîññ. àĝôô",other:"{0} ɱîññ. àĝôô"}}},second:{displayName:"šéççôñðð",relative:{0:"ñôŵŵ"},relativeTime:{future:{one:"îñ {0} ššéçôôñð",other:"îñ {0} ššéçôôñðšš"},past:{one:"{0} šéççôñðð àĝôô",other:"{0} šéççôñððš àĝĝô"}}},"second-short":{displayName:"šéçç.",relative:{0:"ñôŵŵ"},relativeTime:{future:{one:"îñ {0} ššéç.",other:"îñ {0} ššéç."},past:{one:"{0} šéçç. àĝôô",other:"{0} šéçç. àĝôô"}}}}}),Qt({locale:"es",pluralRuleFunction:function(e,t){return t?"other":1==e?"one":"other"},fields:{year:{displayName:"año",relative:{0:"este año",1:"el próximo año","-1":"el año pasado"},relativeTime:{future:{one:"dentro de {0} año",other:"dentro de {0} años"},past:{one:"hace {0} año",other:"hace {0} años"}}},"year-short":{displayName:"a",relative:{0:"este año",1:"el próximo año","-1":"el año pasado"},relativeTime:{future:{one:"dentro de {0} a",other:"dentro de {0} a"},past:{one:"hace {0} a",other:"hace {0} a"}}},month:{displayName:"mes",relative:{0:"este mes",1:"el próximo mes","-1":"el mes pasado"},relativeTime:{future:{one:"dentro de {0} mes",other:"dentro de {0} meses"},past:{one:"hace {0} mes",other:"hace {0} meses"}}},"month-short":{displayName:"m",relative:{0:"este mes",1:"el próximo mes","-1":"el mes pasado"},relativeTime:{future:{one:"dentro de {0} m",other:"dentro de {0} m"},past:{one:"hace {0} m",other:"hace {0} m"}}},day:{displayName:"día",relative:{0:"hoy",1:"mañana",2:"pasado mañana","-2":"anteayer","-1":"ayer"},relativeTime:{future:{one:"dentro de {0} día",other:"dentro de {0} días"},past:{one:"hace {0} día",other:"hace {0} días"}}},"day-short":{displayName:"d",relative:{0:"hoy",1:"mañana",2:"pasado mañana","-2":"anteayer","-1":"ayer"},relativeTime:{future:{one:"dentro de {0} día",other:"dentro de {0} días"},past:{one:"hace {0} día",other:"hace {0} días"}}},hour:{displayName:"hora",relative:{0:"esta hora"},relativeTime:{future:{one:"dentro de {0} hora",other:"dentro de {0} horas"},past:{one:"hace {0} hora",other:"hace {0} horas"}}},"hour-short":{displayName:"h",relative:{0:"esta hora"},relativeTime:{future:{one:"dentro de {0} h",other:"dentro de {0} h"},past:{one:"hace {0} h",other:"hace {0} h"}}},minute:{displayName:"minuto",relative:{0:"este minuto"},relativeTime:{future:{one:"dentro de {0} minuto",other:"dentro de {0} minutos"},past:{one:"hace {0} minuto",other:"hace {0} minutos"}}},"minute-short":{displayName:"min",relative:{0:"este minuto"},relativeTime:{future:{one:"dentro de {0} min",other:"dentro de {0} min"},past:{one:"hace {0} min",other:"hace {0} min"}}},second:{displayName:"segundo",relative:{0:"ahora"},relativeTime:{future:{one:"dentro de {0} segundo",other:"dentro de {0} segundos"},past:{one:"hace {0} segundo",other:"hace {0} segundos"}}},"second-short":{displayName:"s",relative:{0:"ahora"},relativeTime:{future:{one:"dentro de {0} s",other:"dentro de {0} s"},past:{one:"hace {0} s",other:"hace {0} s"}}}}}),Qt({locale:"es-LA",parentLocale:"es"}),Qt({locale:"fr",pluralRuleFunction:function(e,t){return t?1==e?"one":"other":e>=0&&e<2?"one":"other"},fields:{year:{displayName:"année",relative:{0:"cette année",1:"l’année prochaine","-1":"l’année dernière"},relativeTime:{future:{one:"dans {0} an",other:"dans {0} ans"},past:{one:"il y a {0} an",other:"il y a {0} ans"}}},"year-short":{displayName:"an",relative:{0:"cette année",1:"l’année prochaine","-1":"l’année dernière"},relativeTime:{future:{one:"dans {0} a",other:"dans {0} a"},past:{one:"il y a {0} a",other:"il y a {0} a"}}},month:{displayName:"mois",relative:{0:"ce mois-ci",1:"le mois prochain","-1":"le mois dernier"},relativeTime:{future:{one:"dans {0} mois",other:"dans {0} mois"},past:{one:"il y a {0} mois",other:"il y a {0} mois"}}},"month-short":{displayName:"m.",relative:{0:"ce mois-ci",1:"le mois prochain","-1":"le mois dernier"},relativeTime:{future:{one:"dans {0} m.",other:"dans {0} m."},past:{one:"il y a {0} m.",other:"il y a {0} m."}}},day:{displayName:"jour",relative:{0:"aujourd’hui",1:"demain",2:"après-demain","-2":"avant-hier","-1":"hier"},relativeTime:{future:{one:"dans {0} jour",other:"dans {0} jours"},past:{one:"il y a {0} jour",other:"il y a {0} jours"}}},"day-short":{displayName:"j",relative:{0:"aujourd’hui",1:"demain",2:"après-demain","-2":"avant-hier","-1":"hier"},relativeTime:{future:{one:"dans {0} j",other:"dans {0} j"},past:{one:"il y a {0} j",other:"il y a {0} j"}}},hour:{displayName:"heure",relative:{0:"cette heure-ci"},relativeTime:{future:{one:"dans {0} heure",other:"dans {0} heures"},past:{one:"il y a {0} heure",other:"il y a {0} heures"}}},"hour-short":{displayName:"h",relative:{0:"cette heure-ci"},relativeTime:{future:{one:"dans {0} h",other:"dans {0} h"},past:{one:"il y a {0} h",other:"il y a {0} h"}}},minute:{displayName:"minute",relative:{0:"cette minute-ci"},relativeTime:{future:{one:"dans {0} minute",other:"dans {0} minutes"},past:{one:"il y a {0} minute",other:"il y a {0} minutes"}}},"minute-short":{displayName:"min",relative:{0:"cette minute-ci"},relativeTime:{future:{one:"dans {0} min",other:"dans {0} min"},past:{one:"il y a {0} min",other:"il y a {0} min"}}},second:{displayName:"seconde",relative:{0:"maintenant"},relativeTime:{future:{one:"dans {0} seconde",other:"dans {0} secondes"},past:{one:"il y a {0} seconde",other:"il y a {0} secondes"}}},"second-short":{displayName:"s",relative:{0:"maintenant"},relativeTime:{future:{one:"dans {0} s",other:"dans {0} s"},past:{one:"il y a {0} s",other:"il y a {0} s"}}}}}),Qt({locale:"fr-FR",parentLocale:"fr"}),Qt({locale:"de",pluralRuleFunction:function(e,t){var n=!String(e).split(".")[1];return t?"other":1==e&&n?"one":"other"},fields:{year:{displayName:"Jahr",relative:{0:"dieses Jahr",1:"nächstes Jahr","-1":"letztes Jahr"},relativeTime:{future:{one:"in {0} Jahr",other:"in {0} Jahren"},past:{one:"vor {0} Jahr",other:"vor {0} Jahren"}}},"year-short":{displayName:"Jahr",relative:{0:"dieses Jahr",1:"nächstes Jahr","-1":"letztes Jahr"},relativeTime:{future:{one:"in {0} Jahr",other:"in {0} Jahren"},past:{one:"vor {0} Jahr",other:"vor {0} Jahren"}}},month:{displayName:"Monat",relative:{0:"diesen Monat",1:"nächsten Monat","-1":"letzten Monat"},relativeTime:{future:{one:"in {0} Monat",other:"in {0} Monaten"},past:{one:"vor {0} Monat",other:"vor {0} Monaten"}}},"month-short":{displayName:"Monat",relative:{0:"diesen Monat",1:"nächsten Monat","-1":"letzten Monat"},relativeTime:{future:{one:"in {0} Monat",other:"in {0} Monaten"},past:{one:"vor {0} Monat",other:"vor {0} Monaten"}}},day:{displayName:"Tag",relative:{0:"heute",1:"morgen",2:"übermorgen","-2":"vorgestern","-1":"gestern"},relativeTime:{future:{one:"in {0} Tag",other:"in {0} Tagen"},past:{one:"vor {0} Tag",other:"vor {0} Tagen"}}},"day-short":{displayName:"Tag",relative:{0:"heute",1:"morgen",2:"übermorgen","-2":"vorgestern","-1":"gestern"},relativeTime:{future:{one:"in {0} Tag",other:"in {0} Tagen"},past:{one:"vor {0} Tag",other:"vor {0} Tagen"}}},hour:{displayName:"Stunde",relative:{0:"in dieser Stunde"},relativeTime:{future:{one:"in {0} Stunde",other:"in {0} Stunden"},past:{one:"vor {0} Stunde",other:"vor {0} Stunden"}}},"hour-short":{displayName:"Std.",relative:{0:"in dieser Stunde"},relativeTime:{future:{one:"in {0} Std.",other:"in {0} Std."},past:{one:"vor {0} Std.",other:"vor {0} Std."}}},minute:{displayName:"Minute",relative:{0:"in dieser Minute"},relativeTime:{future:{one:"in {0} Minute",other:"in {0} Minuten"},past:{one:"vor {0} Minute",other:"vor {0} Minuten"}}},"minute-short":{displayName:"Min.",relative:{0:"in dieser Minute"},relativeTime:{future:{one:"in {0} Min.",other:"in {0} Min."},past:{one:"vor {0} Min.",other:"vor {0} Min."}}},second:{displayName:"Sekunde",relative:{0:"jetzt"},relativeTime:{future:{one:"in {0} Sekunde",other:"in {0} Sekunden"},past:{one:"vor {0} Sekunde",other:"vor {0} Sekunden"}}},"second-short":{displayName:"Sek.",relative:{0:"jetzt"},relativeTime:{future:{one:"in {0} Sek.",other:"in {0} Sek."},past:{one:"vor {0} Sek.",other:"vor {0} Sek."}}}}}),Qt({locale:"de-DE",parentLocale:"de"}),Qt({locale:"ja",pluralRuleFunction:function(e,t){return"other"},fields:{year:{displayName:"年",relative:{0:"今年",1:"翌年","-1":"昨年"},relativeTime:{future:{other:"{0} 年後"},past:{other:"{0} 年前"}}},"year-short":{displayName:"年",relative:{0:"今年",1:"翌年","-1":"昨年"},relativeTime:{future:{other:"{0} 年後"},past:{other:"{0} 年前"}}},month:{displayName:"月",relative:{0:"今月",1:"翌月","-1":"先月"},relativeTime:{future:{other:"{0} か月後"},past:{other:"{0} か月前"}}},"month-short":{displayName:"月",relative:{0:"今月",1:"翌月","-1":"先月"},relativeTime:{future:{other:"{0} か月後"},past:{other:"{0} か月前"}}},day:{displayName:"日",relative:{0:"今日",1:"明日",2:"明後日","-2":"一昨日","-1":"昨日"},relativeTime:{future:{other:"{0} 日後"},past:{other:"{0} 日前"}}},"day-short":{displayName:"日",relative:{0:"今日",1:"明日",2:"明後日","-2":"一昨日","-1":"昨日"},relativeTime:{future:{other:"{0} 日後"},past:{other:"{0} 日前"}}},hour:{displayName:"時",relative:{0:"1 時間以内"},relativeTime:{future:{other:"{0} 時間後"},past:{other:"{0} 時間前"}}},"hour-short":{displayName:"時",relative:{0:"1 時間以内"},relativeTime:{future:{other:"{0} 時間後"},past:{other:"{0} 時間前"}}},minute:{displayName:"分",relative:{0:"1 分以内"},relativeTime:{future:{other:"{0} 分後"},past:{other:"{0} 分前"}}},"minute-short":{displayName:"分",relative:{0:"1 分以内"},relativeTime:{future:{other:"{0} 分後"},past:{other:"{0} 分前"}}},second:{displayName:"秒",relative:{0:"今"},relativeTime:{future:{other:"{0} 秒後"},past:{other:"{0} 秒前"}}},"second-short":{displayName:"秒",relative:{0:"今"},relativeTime:{future:{other:"{0} 秒後"},past:{other:"{0} 秒前"}}}}}),Qt({locale:"ja-JP",parentLocale:"ja"}),Qt({locale:"ko",pluralRuleFunction:function(e,t){return"other"},fields:{year:{displayName:"년",relative:{0:"올해",1:"내년","-1":"작년"},relativeTime:{future:{other:"{0}년 후"},past:{other:"{0}년 전"}}},"year-short":{displayName:"년",relative:{0:"올해",1:"내년","-1":"작년"},relativeTime:{future:{other:"{0}년 후"},past:{other:"{0}년 전"}}},month:{displayName:"월",relative:{0:"이번 달",1:"다음 달","-1":"지난달"},relativeTime:{future:{other:"{0}개월 후"},past:{other:"{0}개월 전"}}},"month-short":{displayName:"월",relative:{0:"이번 달",1:"다음 달","-1":"지난달"},relativeTime:{future:{other:"{0}개월 후"},past:{other:"{0}개월 전"}}},day:{displayName:"일",relative:{0:"오늘",1:"내일",2:"모레","-2":"그저께","-1":"어제"},relativeTime:{future:{other:"{0}일 후"},past:{other:"{0}일 전"}}},"day-short":{displayName:"일",relative:{0:"오늘",1:"내일",2:"모레","-2":"그저께","-1":"어제"},relativeTime:{future:{other:"{0}일 후"},past:{other:"{0}일 전"}}},hour:{displayName:"시",relative:{0:"현재 시간"},relativeTime:{future:{other:"{0}시간 후"},past:{other:"{0}시간 전"}}},"hour-short":{displayName:"시",relative:{0:"현재 시간"},relativeTime:{future:{other:"{0}시간 후"},past:{other:"{0}시간 전"}}},minute:{displayName:"분",relative:{0:"현재 분"},relativeTime:{future:{other:"{0}분 후"},past:{other:"{0}분 전"}}},"minute-short":{displayName:"분",relative:{0:"현재 분"},relativeTime:{future:{other:"{0}분 후"},past:{other:"{0}분 전"}}},second:{displayName:"초",relative:{0:"지금"},relativeTime:{future:{other:"{0}초 후"},past:{other:"{0}초 전"}}},"second-short":{displayName:"초",relative:{0:"지금"},relativeTime:{future:{other:"{0}초 후"},past:{other:"{0}초 전"}}}}}),Qt({locale:"ko-KR",parentLocale:"ko"}),Qt({locale:"zh",pluralRuleFunction:function(e,t){return"other"},fields:{year:{displayName:"年",relative:{0:"今年",1:"明年","-1":"去年"},relativeTime:{future:{other:"{0}年后"},past:{other:"{0}年前"}}},"year-short":{displayName:"年",relative:{0:"今年",1:"明年","-1":"去年"},relativeTime:{future:{other:"{0}年后"},past:{other:"{0}年前"}}},month:{displayName:"月",relative:{0:"本月",1:"下个月","-1":"上个月"},relativeTime:{future:{other:"{0}个月后"},past:{other:"{0}个月前"}}},"month-short":{displayName:"月",relative:{0:"本月",1:"下个月","-1":"上个月"},relativeTime:{future:{other:"{0}个月后"},past:{other:"{0}个月前"}}},day:{displayName:"日",relative:{0:"今天",1:"明天",2:"后天","-2":"前天","-1":"昨天"},relativeTime:{future:{other:"{0}天后"},past:{other:"{0}天前"}}},"day-short":{displayName:"日",relative:{0:"今天",1:"明天",2:"后天","-2":"前天","-1":"昨天"},relativeTime:{future:{other:"{0}天后"},past:{other:"{0}天前"}}},hour:{displayName:"小时",relative:{0:"这一时间 / 此时"},relativeTime:{future:{other:"{0}小时后"},past:{other:"{0}小时前"}}},"hour-short":{displayName:"小时",relative:{0:"这一时间 / 此时"},relativeTime:{future:{other:"{0}小时后"},past:{other:"{0}小时前"}}},minute:{displayName:"分钟",relative:{0:"此刻"},relativeTime:{future:{other:"{0}分钟后"},past:{other:"{0}分钟前"}}},"minute-short":{displayName:"分",relative:{0:"此刻"},relativeTime:{future:{other:"{0}分钟后"},past:{other:"{0}分钟前"}}},second:{displayName:"秒",relative:{0:"现在"},relativeTime:{future:{other:"{0}秒钟后"},past:{other:"{0}秒钟前"}}},"second-short":{displayName:"秒",relative:{0:"现在"},relativeTime:{future:{other:"{0}秒后"},past:{other:"{0}秒前"}}}}}),Qt({locale:"zh-CN",parentLocale:"zh"});const en={},tn=Ht()(Vt.a);let nn="en",on="en",an=qt;function rn(e){return e.toLowerCase()}function ln(e,t=e.locale){if(!t||!Wt(t))throw new Error("[I18n] A `locale` must be a non-empty string to add messages.");if(e.locale&&e.locale!==t)throw new Error("[I18n] A `locale` in the translation object is different from the one provided as a second argument.");const n=rn(t),i=en[n]||{messages:{}};en[n]={formats:e.formats||i.formats,locale:e.locale||i.locale,messages:{...i.messages,...e.messages}}}function sn(){return en[on]||{messages:{}}}function dn(e){if(!e||!Wt(e))throw new Error("[I18n] A `locale` must be a non-empty string.");on=rn(e)}function cn(){return on}function un(e){if(!e||!Wt(e))throw new Error("[I18n] A `locale` must be a non-empty string.");nn=rn(e),Vt.a.defaultLocale=nn,Gt.a.defaultLocale=nn}function mn(){return nn}function hn(e){if(!(Kt(e)&&(t=e,Object.keys(t).length>0)))throw new Error("[I18n] A `formats` must be a non-empty object.");var t;an=((...e)=>e.filter(Kt).reduce((e,t)=>Zt(e,t)))(an,e)}function pn(){return an}function Tn(){return Object.keys(en)}function bn(e,{values:t={},defaultMessage:n}){const i="en-xa"===on.toLowerCase();if(!e||!Wt(e))throw new Error("[I18n] An `id` must be a non-empty string to translate a message.");const o=i?n:function(e){const t=sn();return t.messages?t.messages[e]:void 0}(e);if(!o&&!n)throw new Error(`[I18n] Cannot format message: "${e}". Default message must be provided.`);if(o)try{const e=tn(o,cn(),pn()).format(t);return i?Jt(e):e}catch(t){throw new Error(`[I18n] Error formatting message: "${e}" for locale: "${cn()}".\n${t}`)}try{return tn(n,mn(),pn()).format(t)}catch(t){throw new Error(`[I18n] Error formatting the default message for: "${e}".\n${t}`)}}function gn(e){e&&(ln(e),e.locale&&dn(e.locale),e.formats&&hn(e.formats))}async function xn(e){const t=await fetch(e,{credentials:"same-origin"});if(t.status>=300)throw new Error("Translations request failed with status code: "+t.status);gn(await t.json())}Vt.a.defaultLocale=nn,Gt.a.defaultLocale=nn;const fn=i;var kn=n(68),Sn=n.t(kn,2),yn=n(69),Cn=n.t(yn,2),En=n(70),An=n.t(En,2),On=n(71),_n=n.t(On,2),In=n(72),Nn=n.t(In,2),Ln=n(73),Rn=n.t(Ln,2),Dn=n(74),vn=n.t(Dn,2),Mn=n(75),Pn=n.t(Mn,2),Fn=n(76),Bn=n.t(Fn,2),Un=n(77);const wn={default:"",brackets:[["{","}","delimiter.curly"],["[","]","delimiter.square"],["(",")","delimiter.parenthesis"]],keywords:["if","in","else","while","do","for","continue","break","return","new","try","catch","throw","this","instanceof"],primitives:["void","boolean","byte","short","char","int","long","float","double","def"],constants:["true","false"],operators:["=",">","<","!","~","?","?:","?.",":","==","===","<=",">=","!=","!==","&&","||","++","--","+","-","*","/","&","|","^","%","<<",">>",">>>","+=","-=","*=","/=","&=","|=","^=","%=","<<=",">>=",">>>=","->","::","=~","==~"],symbols:/[=><!~?:&|+\-*\/^%]+/,escapes:/\\(?:[abfnrtv\\"']|x[0-9A-Fa-f]{1,4}|u[0-9A-Fa-f]{4}|U[0-9A-Fa-f]{8})/,digits:/\d+(_+\d+)*/,octaldigits:/[0-7]+(_+[0-7]+)*/,binarydigits:/[0-1]+(_+[0-1]+)*/,hexdigits:/[[0-9a-fA-F]+(_+[0-9a-fA-F]+)*/,tokenizer:{root:[[/[a-zA-Z_][\w]*/,{cases:{"@keywords":"keyword","@primitives":"type","@constants":"constant","@default":"identifier"}}],[/[ \t\r\n]+/,"@whitespace"],[/\/\/.*$/,"comment"],[/[{}()\[\]]/,"@brackets"],[/@symbols/,{cases:{"@operators":"operators","@default":""}}],[/(@digits)[eE]([\-+]?(@digits))?[fFdD]?/,"number.float"],[/(@digits)\.(@digits)([eE][\-+]?(@digits))?[fFdD]?/,"number.float"],[/0[xX](@hexdigits)[Ll]?/,"number.hex"],[/0(@octaldigits)[Ll]?/,"number.octal"],[/0[bB](@binarydigits)[Ll]?/,"number.binary"],[/(@digits)[fFdD]/,"number.float"],[/(@digits)[lL]?/,"number"],[/[;,.]/,"delimiter"],[/"([^"\\]|\\.)*$/,"string.invalid"],[/"/,"string","@string_dq"],[/'([^'\\]|\\.)*$/,"string.invalid"],[/'/,"string","@string_sq"]],comment:[[/[^\/*]+/,"comment"],[/\*\//,"comment","@pop"],[/[\/*]/,"comment"]],string_dq:[[/[^\\"]+/,"string"],[/@escapes/,"string.escape"],[/\\./,"string.escape.invalid"],[/"/,"string","@pop"]],string_sq:[[/[^\\']+/,"string"],[/@escapes/,"string.escape"],[/\\./,"string.escape.invalid"],[/'/,"string","@pop"]]}},qn=["boolean_script_field_script_field","date_script_field","double_script_field_script_field","ip_script_field_script_field","long_script_field_script_field","string_script_field_script_field"],jn={painless_test:_n,score:Cn,filter:vn,boolean_script_field_script_field:n.t(Un,2),date_script_field:Bn,double_script_field_script_field:Pn,ip_script_field_script_field:Rn,long_script_field_script_field:Nn,processor_conditional:An,string_script_field_script_field:Sn},Hn=({suggestions:e,hasFields:t,isRuntimeContext:n})=>{const i=e.map(e=>{const{properties:t,constructorDefinition:n,...i}=e;return i}),o=[...wn.keywords.map(e=>({label:e,kind:"keyword",documentation:"Keyword: "+e,insertText:e})),{label:"params",kind:"keyword",documentation:fn.translate("monaco.painlessLanguage.autocomplete.paramsKeywordDescription",{defaultMessage:"Access variables passed into the script."}),insertText:"params"}],a=wn.primitives.map(e=>({label:e,kind:"type",documentation:"Type: "+e,insertText:e}));let r=t?[...o,{label:"doc",kind:"keyword",documentation:fn.translate("monaco.painlessLanguage.autocomplete.docKeywordDescription",{defaultMessage:"Access a field value from a script using the doc['field_name'] syntax"}),insertText:"doc[${1:'my_field'}]",insertTextAsSnippet:!0}]:o;return r=n?[...r,{label:"emit",kind:"keyword",documentation:fn.translate("monaco.painlessLanguage.autocomplete.emitKeywordDescription",{defaultMessage:"Emit value without returning."}),insertText:"emit"}]:r,{isIncomplete:!1,suggestions:[...i,...r,...a]}},Yn=(e,t,n)=>{const i=jn[e].suggestions,o="painless_test"===e?i:i.concat(_n.suggestions),a=t[t.length-1],r=qn.includes(e),l=null==n?void 0:n.filter(e=>"text"!==e.type),s=Boolean(null==l?void 0:l.length);let d={isIncomplete:!1,suggestions:[]};if("new"===(c=t)[c.length-2])d=(e=>{let t=[];const n=e.filter(e=>e.constructorDefinition);return n&&(t=n.map(e=>e.constructorDefinition)),{isIncomplete:!1,suggestions:t}})(o);else if(l&&(e=>{const t=e.indexOf("doc['"),n=t+("doc['".length-1);return-1!==t&&e.length-1===n})(a))d=(e=>({isIncomplete:!1,suggestions:e.map(({name:e})=>({label:e,kind:"field",documentation:fn.translate("monaco.painlessLanguage.autocomplete.fieldValueDescription",{defaultMessage:"Retrieve the value for field '{fieldName}'",values:{fieldName:e}}),insertText:e+"'"}))}))(l);else if((e=>{const t=e.split(".");if(2!==t.length)return!1;return!1===t[1].includes("(")})(a)){d=((e,t)=>{const n=e.find(e=>e.label===t);return{isIncomplete:!1,suggestions:(null==n?void 0:n.properties)||[]}})(o,a.substring(0,a.length-1).split(".")[0])}else((e,t,n)=>{const i=e.split(".");return!1===((e,t)=>2===e.length&&t.includes(e[0]))(t,n)&&!1===(e=>{if(4===e.length){const t=e[0],n=e[2];return"boolean"===t&&"="===n}return!1})(t)&&!1===(e=>{const t=["'",'"'],n=e.split(""),i=n[0],o=n[n.length-1];return t.includes(i)||t.includes(o)})(e)&&1===i.length})(a,t,wn.primitives)&&(d=Hn({suggestions:o,hasFields:s,isRuntimeContext:r}));var c;return d};class Vn{constructor(){var e,t,n;n=[],(t="errors")in(e=this)?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n}syntaxError(e,t,n,i,o,a){let r=i+1;null!=t&&t._text&&(r=i+t._text.length),this.errors.push({startLineNumber:n,endLineNumber:n,startColumn:i,endColumn:r,message:o})}getErrors(){return this.errors}}var zn=n(65),Gn=n(6),Wn=n(33),Kn=n(7),Zn=n(9),Xn=n(31),Jn=n(1),$n=n(32),Qn=n(2),ei=n(3),ti=n(16),ni=n(11);function ii(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}class oi extends Xn.Parser{get vocabulary(){return oi.VOCABULARY}get grammarFileName(){return"painless_parser.g4"}get ruleNames(){return oi.ruleNames}get serializedATN(){return oi._serializedATN}constructor(e){super(e),this._interp=new $n.ParserATNSimulator(oi._ATN,this)}source(){let e,t=new ai(this._ctx,this.state);this.enterRule(t,0,oi.RULE_source);try{let n;for(this.enterOuterAlt(t,1),this.state=81,this._errHandler.sync(this),n=this.interpreter.adaptivePredict(this._input,0,this._ctx);2!==n&&n!==Gn.ATN.INVALID_ALT_NUMBER;)1===n&&(this.state=78,this.function()),this.state=83,this._errHandler.sync(this),n=this.interpreter.adaptivePredict(this._input,0,this._ctx);for(this.state=87,this._errHandler.sync(this),e=this._input.LA(1);0==(e-5&-32)&&0!=(1<<e-5&(1<<oi.LBRACE-5|1<<oi.LP-5|1<<oi.IF-5|1<<oi.WHILE-5|1<<oi.DO-5|1<<oi.FOR-5|1<<oi.CONTINUE-5|1<<oi.BREAK-5|1<<oi.RETURN-5|1<<oi.NEW-5|1<<oi.TRY-5|1<<oi.THROW-5|1<<oi.BOOLNOT-5|1<<oi.BWNOT-5|1<<oi.ADD-5|1<<oi.SUB-5))||0==(e-58&-32)&&0!=(1<<e-58&(1<<oi.INCR-58|1<<oi.DECR-58|1<<oi.OCTAL-58|1<<oi.HEX-58|1<<oi.INTEGER-58|1<<oi.DECIMAL-58|1<<oi.STRING-58|1<<oi.REGEX-58|1<<oi.TRUE-58|1<<oi.FALSE-58|1<<oi.NULL-58|1<<oi.PRIMITIVE-58|1<<oi.DEF-58|1<<oi.ID-58));)this.state=84,this.statement(),this.state=89,this._errHandler.sync(this),e=this._input.LA(1);this.state=90,this.match(oi.EOF)}catch(e){if(!(e instanceof Qn.RecognitionException))throw e;t.exception=e,this._errHandler.reportError(this,e),this._errHandler.recover(this,e)}finally{this.exitRule()}return t}function(){let e=new ri(this._ctx,this.state);this.enterRule(e,2,oi.RULE_function);try{this.enterOuterAlt(e,1),this.state=92,this.decltype(),this.state=93,this.match(oi.ID),this.state=94,this.parameters(),this.state=95,this.block()}catch(t){if(!(t instanceof Qn.RecognitionException))throw t;e.exception=t,this._errHandler.reportError(this,t),this._errHandler.recover(this,t)}finally{this.exitRule()}return e}parameters(){let e,t=new li(this._ctx,this.state);this.enterRule(t,4,oi.RULE_parameters);try{if(this.enterOuterAlt(t,1),this.state=97,this.match(oi.LP),this.state=109,this._errHandler.sync(this),e=this._input.LA(1),0==(e-81&-32)&&0!=(1<<e-81&(1<<oi.PRIMITIVE-81|1<<oi.DEF-81|1<<oi.ID-81)))for(this.state=98,this.decltype(),this.state=99,this.match(oi.ID),this.state=106,this._errHandler.sync(this),e=this._input.LA(1);e===oi.COMMA;)this.state=100,this.match(oi.COMMA),this.state=101,this.decltype(),this.state=102,this.match(oi.ID),this.state=108,this._errHandler.sync(this),e=this._input.LA(1);this.state=111,this.match(oi.RP)}catch(e){if(!(e instanceof Qn.RecognitionException))throw e;t.exception=e,this._errHandler.reportError(this,e),this._errHandler.recover(this,e)}finally{this.exitRule()}return t}statement(){let e,t=new si(this._ctx,this.state);this.enterRule(t,6,oi.RULE_statement);try{switch(this.state=117,this._errHandler.sync(this),this._input.LA(1)){case oi.IF:case oi.WHILE:case oi.FOR:case oi.TRY:this.enterOuterAlt(t,1),this.state=113,this.rstatement();break;case oi.LBRACE:case oi.LP:case oi.DO:case oi.CONTINUE:case oi.BREAK:case oi.RETURN:case oi.NEW:case oi.THROW:case oi.BOOLNOT:case oi.BWNOT:case oi.ADD:case oi.SUB:case oi.INCR:case oi.DECR:case oi.OCTAL:case oi.HEX:case oi.INTEGER:case oi.DECIMAL:case oi.STRING:case oi.REGEX:case oi.TRUE:case oi.FALSE:case oi.NULL:case oi.PRIMITIVE:case oi.DEF:case oi.ID:this.enterOuterAlt(t,2),this.state=114,this.dstatement(),this.state=115,e=this._input.LA(1),e!==oi.EOF&&e!==oi.SEMICOLON?this._errHandler.recoverInline(this):(this._input.LA(1)===ei.Token.EOF&&(this.matchedEOF=!0),this._errHandler.reportMatch(this),this.consume());break;default:throw new Zn.NoViableAltException(this)}}catch(e){if(!(e instanceof Qn.RecognitionException))throw e;t.exception=e,this._errHandler.reportError(this,e),this._errHandler.recover(this,e)}finally{this.exitRule()}return t}rstatement(){let e,t=new di(this._ctx,this.state);this.enterRule(t,8,oi.RULE_rstatement);try{let n;switch(this.state=179,this._errHandler.sync(this),this.interpreter.adaptivePredict(this._input,12,this._ctx)){case 1:switch(t=new ci(t),this.enterOuterAlt(t,1),this.state=119,this.match(oi.IF),this.state=120,this.match(oi.LP),this.state=121,this.expression(),this.state=122,this.match(oi.RP),this.state=123,this.trailer(),this.state=127,this._errHandler.sync(this),this.interpreter.adaptivePredict(this._input,5,this._ctx)){case 1:this.state=124,this.match(oi.ELSE),this.state=125,this.trailer();break;case 2:if(this.state=126,this._input.LA(1)==oi.ELSE)throw new Kn.FailedPredicateException(this," this._input.LA(1) != painless_parser.ELSE ")}break;case 2:switch(t=new ui(t),this.enterOuterAlt(t,2),this.state=129,this.match(oi.WHILE),this.state=130,this.match(oi.LP),this.state=131,this.expression(),this.state=132,this.match(oi.RP),this.state=135,this._errHandler.sync(this),this._input.LA(1)){case oi.LBRACK:case oi.LBRACE:case oi.LP:case oi.IF:case oi.WHILE:case oi.DO:case oi.FOR:case oi.CONTINUE:case oi.BREAK:case oi.RETURN:case oi.NEW:case oi.TRY:case oi.THROW:case oi.BOOLNOT:case oi.BWNOT:case oi.ADD:case oi.SUB:case oi.INCR:case oi.DECR:case oi.OCTAL:case oi.HEX:case oi.INTEGER:case oi.DECIMAL:case oi.STRING:case oi.REGEX:case oi.TRUE:case oi.FALSE:case oi.NULL:case oi.PRIMITIVE:case oi.DEF:case oi.ID:this.state=133,this.trailer();break;case oi.SEMICOLON:this.state=134,this.empty();break;default:throw new Zn.NoViableAltException(this)}break;case 3:switch(t=new mi(t),this.enterOuterAlt(t,3),this.state=137,this.match(oi.FOR),this.state=138,this.match(oi.LP),this.state=140,this._errHandler.sync(this),e=this._input.LA(1),(0==(e-5&-32)&&0!=(1<<e-5&(1<<oi.LBRACE-5|1<<oi.LP-5|1<<oi.NEW-5|1<<oi.BOOLNOT-5|1<<oi.BWNOT-5|1<<oi.ADD-5|1<<oi.SUB-5))||0==(e-58&-32)&&0!=(1<<e-58&(1<<oi.INCR-58|1<<oi.DECR-58|1<<oi.OCTAL-58|1<<oi.HEX-58|1<<oi.INTEGER-58|1<<oi.DECIMAL-58|1<<oi.STRING-58|1<<oi.REGEX-58|1<<oi.TRUE-58|1<<oi.FALSE-58|1<<oi.NULL-58|1<<oi.PRIMITIVE-58|1<<oi.DEF-58|1<<oi.ID-58)))&&(this.state=139,this.initializer()),this.state=142,this.match(oi.SEMICOLON),this.state=144,this._errHandler.sync(this),e=this._input.LA(1),(0==(e-5&-32)&&0!=(1<<e-5&(1<<oi.LBRACE-5|1<<oi.LP-5|1<<oi.NEW-5|1<<oi.BOOLNOT-5|1<<oi.BWNOT-5|1<<oi.ADD-5|1<<oi.SUB-5))||0==(e-58&-32)&&0!=(1<<e-58&(1<<oi.INCR-58|1<<oi.DECR-58|1<<oi.OCTAL-58|1<<oi.HEX-58|1<<oi.INTEGER-58|1<<oi.DECIMAL-58|1<<oi.STRING-58|1<<oi.REGEX-58|1<<oi.TRUE-58|1<<oi.FALSE-58|1<<oi.NULL-58|1<<oi.ID-58)))&&(this.state=143,this.expression()),this.state=146,this.match(oi.SEMICOLON),this.state=148,this._errHandler.sync(this),e=this._input.LA(1),(0==(e-5&-32)&&0!=(1<<e-5&(1<<oi.LBRACE-5|1<<oi.LP-5|1<<oi.NEW-5|1<<oi.BOOLNOT-5|1<<oi.BWNOT-5|1<<oi.ADD-5|1<<oi.SUB-5))||0==(e-58&-32)&&0!=(1<<e-58&(1<<oi.INCR-58|1<<oi.DECR-58|1<<oi.OCTAL-58|1<<oi.HEX-58|1<<oi.INTEGER-58|1<<oi.DECIMAL-58|1<<oi.STRING-58|1<<oi.REGEX-58|1<<oi.TRUE-58|1<<oi.FALSE-58|1<<oi.NULL-58|1<<oi.ID-58)))&&(this.state=147,this.afterthought()),this.state=150,this.match(oi.RP),this.state=153,this._errHandler.sync(this),this._input.LA(1)){case oi.LBRACK:case oi.LBRACE:case oi.LP:case oi.IF:case oi.WHILE:case oi.DO:case oi.FOR:case oi.CONTINUE:case oi.BREAK:case oi.RETURN:case oi.NEW:case oi.TRY:case oi.THROW:case oi.BOOLNOT:case oi.BWNOT:case oi.ADD:case oi.SUB:case oi.INCR:case oi.DECR:case oi.OCTAL:case oi.HEX:case oi.INTEGER:case oi.DECIMAL:case oi.STRING:case oi.REGEX:case oi.TRUE:case oi.FALSE:case oi.NULL:case oi.PRIMITIVE:case oi.DEF:case oi.ID:this.state=151,this.trailer();break;case oi.SEMICOLON:this.state=152,this.empty();break;default:throw new Zn.NoViableAltException(this)}break;case 4:t=new hi(t),this.enterOuterAlt(t,4),this.state=155,this.match(oi.FOR),this.state=156,this.match(oi.LP),this.state=157,this.decltype(),this.state=158,this.match(oi.ID),this.state=159,this.match(oi.COLON),this.state=160,this.expression(),this.state=161,this.match(oi.RP),this.state=162,this.trailer();break;case 5:t=new pi(t),this.enterOuterAlt(t,5),this.state=164,this.match(oi.FOR),this.state=165,this.match(oi.LP),this.state=166,this.match(oi.ID),this.state=167,this.match(oi.IN),this.state=168,this.expression(),this.state=169,this.match(oi.RP),this.state=170,this.trailer();break;case 6:t=new Ti(t),this.enterOuterAlt(t,6),this.state=172,this.match(oi.TRY),this.state=173,this.block(),this.state=175,this._errHandler.sync(this),n=1;do{switch(n){case 1:this.state=174,this.trap();break;default:throw new Zn.NoViableAltException(this)}this.state=177,this._errHandler.sync(this),n=this.interpreter.adaptivePredict(this._input,11,this._ctx)}while(2!==n&&n!==Gn.ATN.INVALID_ALT_NUMBER)}}catch(e){if(!(e instanceof Qn.RecognitionException))throw e;t.exception=e,this._errHandler.reportError(this,e),this._errHandler.recover(this,e)}finally{this.exitRule()}return t}dstatement(){let e,t=new bi(this._ctx,this.state);this.enterRule(t,10,oi.RULE_dstatement);try{switch(this.state=198,this._errHandler.sync(this),this.interpreter.adaptivePredict(this._input,14,this._ctx)){case 1:t=new gi(t),this.enterOuterAlt(t,1),this.state=181,this.match(oi.DO),this.state=182,this.block(),this.state=183,this.match(oi.WHILE),this.state=184,this.match(oi.LP),this.state=185,this.expression(),this.state=186,this.match(oi.RP);break;case 2:t=new xi(t),this.enterOuterAlt(t,2),this.state=188,this.declaration();break;case 3:t=new fi(t),this.enterOuterAlt(t,3),this.state=189,this.match(oi.CONTINUE);break;case 4:t=new ki(t),this.enterOuterAlt(t,4),this.state=190,this.match(oi.BREAK);break;case 5:t=new Si(t),this.enterOuterAlt(t,5),this.state=191,this.match(oi.RETURN),this.state=193,this._errHandler.sync(this),e=this._input.LA(1),(0==(e-5&-32)&&0!=(1<<e-5&(1<<oi.LBRACE-5|1<<oi.LP-5|1<<oi.NEW-5|1<<oi.BOOLNOT-5|1<<oi.BWNOT-5|1<<oi.ADD-5|1<<oi.SUB-5))||0==(e-58&-32)&&0!=(1<<e-58&(1<<oi.INCR-58|1<<oi.DECR-58|1<<oi.OCTAL-58|1<<oi.HEX-58|1<<oi.INTEGER-58|1<<oi.DECIMAL-58|1<<oi.STRING-58|1<<oi.REGEX-58|1<<oi.TRUE-58|1<<oi.FALSE-58|1<<oi.NULL-58|1<<oi.ID-58)))&&(this.state=192,this.expression());break;case 6:t=new yi(t),this.enterOuterAlt(t,6),this.state=195,this.match(oi.THROW),this.state=196,this.expression();break;case 7:t=new Ci(t),this.enterOuterAlt(t,7),this.state=197,this.expression()}}catch(e){if(!(e instanceof Qn.RecognitionException))throw e;t.exception=e,this._errHandler.reportError(this,e),this._errHandler.recover(this,e)}finally{this.exitRule()}return t}trailer(){let e=new Ei(this._ctx,this.state);this.enterRule(e,12,oi.RULE_trailer);try{switch(this.state=202,this._errHandler.sync(this),this._input.LA(1)){case oi.LBRACK:this.enterOuterAlt(e,1),this.state=200,this.block();break;case oi.LBRACE:case oi.LP:case oi.IF:case oi.WHILE:case oi.DO:case oi.FOR:case oi.CONTINUE:case oi.BREAK:case oi.RETURN:case oi.NEW:case oi.TRY:case oi.THROW:case oi.BOOLNOT:case oi.BWNOT:case oi.ADD:case oi.SUB:case oi.INCR:case oi.DECR:case oi.OCTAL:case oi.HEX:case oi.INTEGER:case oi.DECIMAL:case oi.STRING:case oi.REGEX:case oi.TRUE:case oi.FALSE:case oi.NULL:case oi.PRIMITIVE:case oi.DEF:case oi.ID:this.enterOuterAlt(e,2),this.state=201,this.statement();break;default:throw new Zn.NoViableAltException(this)}}catch(t){if(!(t instanceof Qn.RecognitionException))throw t;e.exception=t,this._errHandler.reportError(this,t),this._errHandler.recover(this,t)}finally{this.exitRule()}return e}block(){let e,t=new Ai(this._ctx,this.state);this.enterRule(t,14,oi.RULE_block);try{let n;for(this.enterOuterAlt(t,1),this.state=204,this.match(oi.LBRACK),this.state=208,this._errHandler.sync(this),n=this.interpreter.adaptivePredict(this._input,16,this._ctx);2!==n&&n!==Gn.ATN.INVALID_ALT_NUMBER;)1===n&&(this.state=205,this.statement()),this.state=210,this._errHandler.sync(this),n=this.interpreter.adaptivePredict(this._input,16,this._ctx);this.state=212,this._errHandler.sync(this),e=this._input.LA(1),(0==(e-5&-32)&&0!=(1<<e-5&(1<<oi.LBRACE-5|1<<oi.LP-5|1<<oi.DO-5|1<<oi.CONTINUE-5|1<<oi.BREAK-5|1<<oi.RETURN-5|1<<oi.NEW-5|1<<oi.THROW-5|1<<oi.BOOLNOT-5|1<<oi.BWNOT-5|1<<oi.ADD-5|1<<oi.SUB-5))||0==(e-58&-32)&&0!=(1<<e-58&(1<<oi.INCR-58|1<<oi.DECR-58|1<<oi.OCTAL-58|1<<oi.HEX-58|1<<oi.INTEGER-58|1<<oi.DECIMAL-58|1<<oi.STRING-58|1<<oi.REGEX-58|1<<oi.TRUE-58|1<<oi.FALSE-58|1<<oi.NULL-58|1<<oi.PRIMITIVE-58|1<<oi.DEF-58|1<<oi.ID-58)))&&(this.state=211,this.dstatement()),this.state=214,this.match(oi.RBRACK)}catch(e){if(!(e instanceof Qn.RecognitionException))throw e;t.exception=e,this._errHandler.reportError(this,e),this._errHandler.recover(this,e)}finally{this.exitRule()}return t}empty(){let e=new Oi(this._ctx,this.state);this.enterRule(e,16,oi.RULE_empty);try{this.enterOuterAlt(e,1),this.state=216,this.match(oi.SEMICOLON)}catch(t){if(!(t instanceof Qn.RecognitionException))throw t;e.exception=t,this._errHandler.reportError(this,t),this._errHandler.recover(this,t)}finally{this.exitRule()}return e}initializer(){let e=new _i(this._ctx,this.state);this.enterRule(e,18,oi.RULE_initializer);try{switch(this.state=220,this._errHandler.sync(this),this.interpreter.adaptivePredict(this._input,18,this._ctx)){case 1:this.enterOuterAlt(e,1),this.state=218,this.declaration();break;case 2:this.enterOuterAlt(e,2),this.state=219,this.expression()}}catch(t){if(!(t instanceof Qn.RecognitionException))throw t;e.exception=t,this._errHandler.reportError(this,t),this._errHandler.recover(this,t)}finally{this.exitRule()}return e}afterthought(){let e=new Ii(this._ctx,this.state);this.enterRule(e,20,oi.RULE_afterthought);try{this.enterOuterAlt(e,1),this.state=222,this.expression()}catch(t){if(!(t instanceof Qn.RecognitionException))throw t;e.exception=t,this._errHandler.reportError(this,t),this._errHandler.recover(this,t)}finally{this.exitRule()}return e}declaration(){let e,t=new Ni(this._ctx,this.state);this.enterRule(t,22,oi.RULE_declaration);try{for(this.enterOuterAlt(t,1),this.state=224,this.decltype(),this.state=225,this.declvar(),this.state=230,this._errHandler.sync(this),e=this._input.LA(1);e===oi.COMMA;)this.state=226,this.match(oi.COMMA),this.state=227,this.declvar(),this.state=232,this._errHandler.sync(this),e=this._input.LA(1)}catch(e){if(!(e instanceof Qn.RecognitionException))throw e;t.exception=e,this._errHandler.reportError(this,e),this._errHandler.recover(this,e)}finally{this.exitRule()}return t}decltype(){let e=new Li(this._ctx,this.state);this.enterRule(e,24,oi.RULE_decltype);try{let t;for(this.enterOuterAlt(e,1),this.state=233,this.type(),this.state=238,this._errHandler.sync(this),t=this.interpreter.adaptivePredict(this._input,20,this._ctx);2!==t&&t!==Gn.ATN.INVALID_ALT_NUMBER;)1===t&&(this.state=234,this.match(oi.LBRACE),this.state=235,this.match(oi.RBRACE)),this.state=240,this._errHandler.sync(this),t=this.interpreter.adaptivePredict(this._input,20,this._ctx)}catch(t){if(!(t instanceof Qn.RecognitionException))throw t;e.exception=t,this._errHandler.reportError(this,t),this._errHandler.recover(this,t)}finally{this.exitRule()}return e}type(){let e=new Ri(this._ctx,this.state);this.enterRule(e,26,oi.RULE_type);try{let t;switch(this.state=251,this._errHandler.sync(this),this._input.LA(1)){case oi.DEF:this.enterOuterAlt(e,1),this.state=241,this.match(oi.DEF);break;case oi.PRIMITIVE:this.enterOuterAlt(e,2),this.state=242,this.match(oi.PRIMITIVE);break;case oi.ID:for(this.enterOuterAlt(e,3),this.state=243,this.match(oi.ID),this.state=248,this._errHandler.sync(this),t=this.interpreter.adaptivePredict(this._input,21,this._ctx);2!==t&&t!==Gn.ATN.INVALID_ALT_NUMBER;)1===t&&(this.state=244,this.match(oi.DOT),this.state=245,this.match(oi.DOTID)),this.state=250,this._errHandler.sync(this),t=this.interpreter.adaptivePredict(this._input,21,this._ctx);break;default:throw new Zn.NoViableAltException(this)}}catch(t){if(!(t instanceof Qn.RecognitionException))throw t;e.exception=t,this._errHandler.reportError(this,t),this._errHandler.recover(this,t)}finally{this.exitRule()}return e}declvar(){let e,t=new Di(this._ctx,this.state);this.enterRule(t,28,oi.RULE_declvar);try{this.enterOuterAlt(t,1),this.state=253,this.match(oi.ID),this.state=256,this._errHandler.sync(this),e=this._input.LA(1),e===oi.ASSIGN&&(this.state=254,this.match(oi.ASSIGN),this.state=255,this.expression())}catch(e){if(!(e instanceof Qn.RecognitionException))throw e;t.exception=e,this._errHandler.reportError(this,e),this._errHandler.recover(this,e)}finally{this.exitRule()}return t}trap(){let e=new vi(this._ctx,this.state);this.enterRule(e,30,oi.RULE_trap);try{this.enterOuterAlt(e,1),this.state=258,this.match(oi.CATCH),this.state=259,this.match(oi.LP),this.state=260,this.type(),this.state=261,this.match(oi.ID),this.state=262,this.match(oi.RP),this.state=263,this.block()}catch(t){if(!(t instanceof Qn.RecognitionException))throw t;e.exception=t,this._errHandler.reportError(this,t),this._errHandler.recover(this,t)}finally{this.exitRule()}return e}noncondexpression(e){void 0===e&&(e=0);let t,n=this._ctx,i=this.state,o=new Mi(this._ctx,i),a=o;this.enterRecursionRule(o,32,oi.RULE_noncondexpression,e);try{let e;for(this.enterOuterAlt(o,1),o=new Pi(o),this._ctx=o,a=o,this.state=266,this.unary(),this._ctx._stop=this._input.tryLT(-1),this.state=309,this._errHandler.sync(this),e=this.interpreter.adaptivePredict(this._input,25,this._ctx);2!==e&&e!==Gn.ATN.INVALID_ALT_NUMBER;){if(1===e)switch(null!=this._parseListeners&&this.triggerExitRuleEvent(),a=o,this.state=307,this._errHandler.sync(this),this.interpreter.adaptivePredict(this._input,24,this._ctx)){case 1:if(o=new Fi(new Mi(n,i)),this.pushNewRecursionContext(o,32,oi.RULE_noncondexpression),this.state=268,!this.precpred(this._ctx,13))throw new Kn.FailedPredicateException(this,"this.precpred(this._ctx, 13)");this.state=269,t=this._input.LA(1),0!=(t-30&-32)||0==(1<<t-30&(1<<oi.MUL-30|1<<oi.DIV-30|1<<oi.REM-30))?this._errHandler.recoverInline(this):(this._input.LA(1)===ei.Token.EOF&&(this.matchedEOF=!0),this._errHandler.reportMatch(this),this.consume()),this.state=270,this.noncondexpression(14);break;case 2:if(o=new Fi(new Mi(n,i)),this.pushNewRecursionContext(o,32,oi.RULE_noncondexpression),this.state=271,!this.precpred(this._ctx,12))throw new Kn.FailedPredicateException(this,"this.precpred(this._ctx, 12)");this.state=272,t=this._input.LA(1),t!==oi.ADD&&t!==oi.SUB?this._errHandler.recoverInline(this):(this._input.LA(1)===ei.Token.EOF&&(this.matchedEOF=!0),this._errHandler.reportMatch(this),this.consume()),this.state=273,this.noncondexpression(13);break;case 3:if(o=new Fi(new Mi(n,i)),this.pushNewRecursionContext(o,32,oi.RULE_noncondexpression),this.state=274,!this.precpred(this._ctx,11))throw new Kn.FailedPredicateException(this,"this.precpred(this._ctx, 11)");this.state=275,t=this._input.LA(1),t!==oi.FIND&&t!==oi.MATCH?this._errHandler.recoverInline(this):(this._input.LA(1)===ei.Token.EOF&&(this.matchedEOF=!0),this._errHandler.reportMatch(this),this.consume()),this.state=276,this.noncondexpression(12);break;case 4:if(o=new Fi(new Mi(n,i)),this.pushNewRecursionContext(o,32,oi.RULE_noncondexpression),this.state=277,!this.precpred(this._ctx,10))throw new Kn.FailedPredicateException(this,"this.precpred(this._ctx, 10)");this.state=278,t=this._input.LA(1),0!=(t-35&-32)||0==(1<<t-35&(1<<oi.LSH-35|1<<oi.RSH-35|1<<oi.USH-35))?this._errHandler.recoverInline(this):(this._input.LA(1)===ei.Token.EOF&&(this.matchedEOF=!0),this._errHandler.reportMatch(this),this.consume()),this.state=279,this.noncondexpression(11);break;case 5:if(o=new Bi(new Mi(n,i)),this.pushNewRecursionContext(o,32,oi.RULE_noncondexpression),this.state=280,!this.precpred(this._ctx,9))throw new Kn.FailedPredicateException(this,"this.precpred(this._ctx, 9)");this.state=281,t=this._input.LA(1),0!=(t-38&-32)||0==(1<<t-38&(1<<oi.LT-38|1<<oi.LTE-38|1<<oi.GT-38|1<<oi.GTE-38))?this._errHandler.recoverInline(this):(this._input.LA(1)===ei.Token.EOF&&(this.matchedEOF=!0),this._errHandler.reportMatch(this),this.consume()),this.state=282,this.noncondexpression(10);break;case 6:if(o=new Bi(new Mi(n,i)),this.pushNewRecursionContext(o,32,oi.RULE_noncondexpression),this.state=283,!this.precpred(this._ctx,7))throw new Kn.FailedPredicateException(this,"this.precpred(this._ctx, 7)");this.state=284,t=this._input.LA(1),0!=(t-42&-32)||0==(1<<t-42&(1<<oi.EQ-42|1<<oi.EQR-42|1<<oi.NE-42|1<<oi.NER-42))?this._errHandler.recoverInline(this):(this._input.LA(1)===ei.Token.EOF&&(this.matchedEOF=!0),this._errHandler.reportMatch(this),this.consume()),this.state=285,this.noncondexpression(8);break;case 7:if(o=new Fi(new Mi(n,i)),this.pushNewRecursionContext(o,32,oi.RULE_noncondexpression),this.state=286,!this.precpred(this._ctx,6))throw new Kn.FailedPredicateException(this,"this.precpred(this._ctx, 6)");this.state=287,this.match(oi.BWAND),this.state=288,this.noncondexpression(7);break;case 8:if(o=new Fi(new Mi(n,i)),this.pushNewRecursionContext(o,32,oi.RULE_noncondexpression),this.state=289,!this.precpred(this._ctx,5))throw new Kn.FailedPredicateException(this,"this.precpred(this._ctx, 5)");this.state=290,this.match(oi.XOR),this.state=291,this.noncondexpression(6);break;case 9:if(o=new Fi(new Mi(n,i)),this.pushNewRecursionContext(o,32,oi.RULE_noncondexpression),this.state=292,!this.precpred(this._ctx,4))throw new Kn.FailedPredicateException(this,"this.precpred(this._ctx, 4)");this.state=293,this.match(oi.BWOR),this.state=294,this.noncondexpression(5);break;case 10:if(o=new wi(new Mi(n,i)),this.pushNewRecursionContext(o,32,oi.RULE_noncondexpression),this.state=295,!this.precpred(this._ctx,3))throw new Kn.FailedPredicateException(this,"this.precpred(this._ctx, 3)");this.state=296,this.match(oi.BOOLAND),this.state=297,this.noncondexpression(4);break;case 11:if(o=new wi(new Mi(n,i)),this.pushNewRecursionContext(o,32,oi.RULE_noncondexpression),this.state=298,!this.precpred(this._ctx,2))throw new Kn.FailedPredicateException(this,"this.precpred(this._ctx, 2)");this.state=299,this.match(oi.BOOLOR),this.state=300,this.noncondexpression(3);break;case 12:if(o=new qi(new Mi(n,i)),this.pushNewRecursionContext(o,32,oi.RULE_noncondexpression),this.state=301,!this.precpred(this._ctx,1))throw new Kn.FailedPredicateException(this,"this.precpred(this._ctx, 1)");this.state=302,this.match(oi.ELVIS),this.state=303,this.noncondexpression(1);break;case 13:if(o=new Ui(new Mi(n,i)),this.pushNewRecursionContext(o,32,oi.RULE_noncondexpression),this.state=304,!this.precpred(this._ctx,8))throw new Kn.FailedPredicateException(this,"this.precpred(this._ctx, 8)");this.state=305,this.match(oi.INSTANCEOF),this.state=306,this.decltype()}this.state=311,this._errHandler.sync(this),e=this.interpreter.adaptivePredict(this._input,25,this._ctx)}}catch(e){if(!(e instanceof Qn.RecognitionException))throw e;o.exception=e,this._errHandler.reportError(this,e),this._errHandler.recover(this,e)}finally{this.unrollRecursionContexts(n)}return o}expression(){let e,t=new ji(this._ctx,this.state);this.enterRule(t,34,oi.RULE_expression);try{switch(this.state=323,this._errHandler.sync(this),this.interpreter.adaptivePredict(this._input,26,this._ctx)){case 1:t=new Hi(t),this.enterOuterAlt(t,1),this.state=312,this.noncondexpression(0);break;case 2:t=new Yi(t),this.enterOuterAlt(t,2),this.state=313,this.noncondexpression(0),this.state=314,this.match(oi.COND),this.state=315,this.expression(),this.state=316,this.match(oi.COLON),this.state=317,this.expression();break;case 3:t=new Vi(t),this.enterOuterAlt(t,3),this.state=319,this.noncondexpression(0),this.state=320,e=this._input.LA(1),0!=(e-60&-32)||0==(1<<e-60&(1<<oi.ASSIGN-60|1<<oi.AADD-60|1<<oi.ASUB-60|1<<oi.AMUL-60|1<<oi.ADIV-60|1<<oi.AREM-60|1<<oi.AAND-60|1<<oi.AXOR-60|1<<oi.AOR-60|1<<oi.ALSH-60|1<<oi.ARSH-60|1<<oi.AUSH-60))?this._errHandler.recoverInline(this):(this._input.LA(1)===ei.Token.EOF&&(this.matchedEOF=!0),this._errHandler.reportMatch(this),this.consume()),this.state=321,this.expression()}}catch(e){if(!(e instanceof Qn.RecognitionException))throw e;t.exception=e,this._errHandler.reportError(this,e),this._errHandler.recover(this,e)}finally{this.exitRule()}return t}unary(){let e,t=new zi(this._ctx,this.state);this.enterRule(t,36,oi.RULE_unary);try{switch(this.state=330,this._errHandler.sync(this),this._input.LA(1)){case oi.INCR:case oi.DECR:t=new Gi(t),this.enterOuterAlt(t,1),this.state=325,e=this._input.LA(1),e!==oi.INCR&&e!==oi.DECR?this._errHandler.recoverInline(this):(this._input.LA(1)===ei.Token.EOF&&(this.matchedEOF=!0),this._errHandler.reportMatch(this),this.consume()),this.state=326,this.chain();break;case oi.ADD:case oi.SUB:t=new Wi(t),this.enterOuterAlt(t,2),this.state=327,e=this._input.LA(1),e!==oi.ADD&&e!==oi.SUB?this._errHandler.recoverInline(this):(this._input.LA(1)===ei.Token.EOF&&(this.matchedEOF=!0),this._errHandler.reportMatch(this),this.consume()),this.state=328,this.unary();break;case oi.LBRACE:case oi.LP:case oi.NEW:case oi.BOOLNOT:case oi.BWNOT:case oi.OCTAL:case oi.HEX:case oi.INTEGER:case oi.DECIMAL:case oi.STRING:case oi.REGEX:case oi.TRUE:case oi.FALSE:case oi.NULL:case oi.ID:t=new Ki(t),this.enterOuterAlt(t,3),this.state=329,this.unarynotaddsub();break;default:throw new Zn.NoViableAltException(this)}}catch(e){if(!(e instanceof Qn.RecognitionException))throw e;t.exception=e,this._errHandler.reportError(this,e),this._errHandler.recover(this,e)}finally{this.exitRule()}return t}unarynotaddsub(){let e,t=new Zi(this._ctx,this.state);this.enterRule(t,38,oi.RULE_unarynotaddsub);try{switch(this.state=339,this._errHandler.sync(this),this.interpreter.adaptivePredict(this._input,28,this._ctx)){case 1:t=new Xi(t),this.enterOuterAlt(t,1),this.state=332,this.chain();break;case 2:t=new Ji(t),this.enterOuterAlt(t,2),this.state=333,this.chain(),this.state=334,e=this._input.LA(1),e!==oi.INCR&&e!==oi.DECR?this._errHandler.recoverInline(this):(this._input.LA(1)===ei.Token.EOF&&(this.matchedEOF=!0),this._errHandler.reportMatch(this),this.consume());break;case 3:t=new $i(t),this.enterOuterAlt(t,3),this.state=336,e=this._input.LA(1),e!==oi.BOOLNOT&&e!==oi.BWNOT?this._errHandler.recoverInline(this):(this._input.LA(1)===ei.Token.EOF&&(this.matchedEOF=!0),this._errHandler.reportMatch(this),this.consume()),this.state=337,this.unary();break;case 4:t=new Qi(t),this.enterOuterAlt(t,4),this.state=338,this.castexpression()}}catch(e){if(!(e instanceof Qn.RecognitionException))throw e;t.exception=e,this._errHandler.reportError(this,e),this._errHandler.recover(this,e)}finally{this.exitRule()}return t}castexpression(){let e=new eo(this._ctx,this.state);this.enterRule(e,40,oi.RULE_castexpression);try{switch(this.state=351,this._errHandler.sync(this),this.interpreter.adaptivePredict(this._input,29,this._ctx)){case 1:e=new to(e),this.enterOuterAlt(e,1),this.state=341,this.match(oi.LP),this.state=342,this.primordefcasttype(),this.state=343,this.match(oi.RP),this.state=344,this.unary();break;case 2:e=new no(e),this.enterOuterAlt(e,2),this.state=346,this.match(oi.LP),this.state=347,this.refcasttype(),this.state=348,this.match(oi.RP),this.state=349,this.unarynotaddsub()}}catch(t){if(!(t instanceof Qn.RecognitionException))throw t;e.exception=t,this._errHandler.reportError(this,t),this._errHandler.recover(this,t)}finally{this.exitRule()}return e}primordefcasttype(){let e,t=new io(this._ctx,this.state);this.enterRule(t,42,oi.RULE_primordefcasttype);try{this.enterOuterAlt(t,1),this.state=353,e=this._input.LA(1),e!==oi.PRIMITIVE&&e!==oi.DEF?this._errHandler.recoverInline(this):(this._input.LA(1)===ei.Token.EOF&&(this.matchedEOF=!0),this._errHandler.reportMatch(this),this.consume())}catch(e){if(!(e instanceof Qn.RecognitionException))throw e;t.exception=e,this._errHandler.reportError(this,e),this._errHandler.recover(this,e)}finally{this.exitRule()}return t}refcasttype(){let e,t=new oo(this._ctx,this.state);this.enterRule(t,44,oi.RULE_refcasttype);try{switch(this.state=384,this._errHandler.sync(this),this._input.LA(1)){case oi.DEF:this.enterOuterAlt(t,1),this.state=355,this.match(oi.DEF),this.state=358,this._errHandler.sync(this),e=this._input.LA(1);do{this.state=356,this.match(oi.LBRACE),this.state=357,this.match(oi.RBRACE),this.state=360,this._errHandler.sync(this),e=this._input.LA(1)}while(e===oi.LBRACE);break;case oi.PRIMITIVE:this.enterOuterAlt(t,2),this.state=362,this.match(oi.PRIMITIVE),this.state=365,this._errHandler.sync(this),e=this._input.LA(1);do{this.state=363,this.match(oi.LBRACE),this.state=364,this.match(oi.RBRACE),this.state=367,this._errHandler.sync(this),e=this._input.LA(1)}while(e===oi.LBRACE);break;case oi.ID:for(this.enterOuterAlt(t,3),this.state=369,this.match(oi.ID),this.state=374,this._errHandler.sync(this),e=this._input.LA(1);e===oi.DOT;)this.state=370,this.match(oi.DOT),this.state=371,this.match(oi.DOTID),this.state=376,this._errHandler.sync(this),e=this._input.LA(1);for(this.state=381,this._errHandler.sync(this),e=this._input.LA(1);e===oi.LBRACE;)this.state=377,this.match(oi.LBRACE),this.state=378,this.match(oi.RBRACE),this.state=383,this._errHandler.sync(this),e=this._input.LA(1);break;default:throw new Zn.NoViableAltException(this)}}catch(e){if(!(e instanceof Qn.RecognitionException))throw e;t.exception=e,this._errHandler.reportError(this,e),this._errHandler.recover(this,e)}finally{this.exitRule()}return t}chain(){let e=new ao(this._ctx,this.state);this.enterRule(e,46,oi.RULE_chain);try{let t;switch(this.state=394,this._errHandler.sync(this),this.interpreter.adaptivePredict(this._input,36,this._ctx)){case 1:for(e=new ro(e),this.enterOuterAlt(e,1),this.state=386,this.primary(),this.state=390,this._errHandler.sync(this),t=this.interpreter.adaptivePredict(this._input,35,this._ctx);2!==t&&t!==Gn.ATN.INVALID_ALT_NUMBER;)1===t&&(this.state=387,this.postfix()),this.state=392,this._errHandler.sync(this),t=this.interpreter.adaptivePredict(this._input,35,this._ctx);break;case 2:e=new lo(e),this.enterOuterAlt(e,2),this.state=393,this.arrayinitializer()}}catch(t){if(!(t instanceof Qn.RecognitionException))throw t;e.exception=t,this._errHandler.reportError(this,t),this._errHandler.recover(this,t)}finally{this.exitRule()}return e}primary(){let e,t=new so(this._ctx,this.state);this.enterRule(t,48,oi.RULE_primary);try{switch(this.state=415,this._errHandler.sync(this),this.interpreter.adaptivePredict(this._input,37,this._ctx)){case 1:t=new co(t),this.enterOuterAlt(t,1),this.state=396,this.match(oi.LP),this.state=397,this.expression(),this.state=398,this.match(oi.RP);break;case 2:t=new uo(t),this.enterOuterAlt(t,2),this.state=400,e=this._input.LA(1),0!=(e-72&-32)||0==(1<<e-72&(1<<oi.OCTAL-72|1<<oi.HEX-72|1<<oi.INTEGER-72|1<<oi.DECIMAL-72))?this._errHandler.recoverInline(this):(this._input.LA(1)===ei.Token.EOF&&(this.matchedEOF=!0),this._errHandler.reportMatch(this),this.consume());break;case 3:t=new mo(t),this.enterOuterAlt(t,3),this.state=401,this.match(oi.TRUE);break;case 4:t=new ho(t),this.enterOuterAlt(t,4),this.state=402,this.match(oi.FALSE);break;case 5:t=new po(t),this.enterOuterAlt(t,5),this.state=403,this.match(oi.NULL);break;case 6:t=new To(t),this.enterOuterAlt(t,6),this.state=404,this.match(oi.STRING);break;case 7:t=new bo(t),this.enterOuterAlt(t,7),this.state=405,this.match(oi.REGEX);break;case 8:t=new go(t),this.enterOuterAlt(t,8),this.state=406,this.listinitializer();break;case 9:t=new xo(t),this.enterOuterAlt(t,9),this.state=407,this.mapinitializer();break;case 10:t=new fo(t),this.enterOuterAlt(t,10),this.state=408,this.match(oi.ID);break;case 11:t=new ko(t),this.enterOuterAlt(t,11),this.state=409,this.match(oi.ID),this.state=410,this.arguments();break;case 12:t=new So(t),this.enterOuterAlt(t,12),this.state=411,this.match(oi.NEW),this.state=412,this.type(),this.state=413,this.arguments()}}catch(e){if(!(e instanceof Qn.RecognitionException))throw e;t.exception=e,this._errHandler.reportError(this,e),this._errHandler.recover(this,e)}finally{this.exitRule()}return t}postfix(){let e=new yo(this._ctx,this.state);this.enterRule(e,50,oi.RULE_postfix);try{switch(this.state=420,this._errHandler.sync(this),this.interpreter.adaptivePredict(this._input,38,this._ctx)){case 1:this.enterOuterAlt(e,1),this.state=417,this.callinvoke();break;case 2:this.enterOuterAlt(e,2),this.state=418,this.fieldaccess();break;case 3:this.enterOuterAlt(e,3),this.state=419,this.braceaccess()}}catch(t){if(!(t instanceof Qn.RecognitionException))throw t;e.exception=t,this._errHandler.reportError(this,t),this._errHandler.recover(this,t)}finally{this.exitRule()}return e}postdot(){let e=new Co(this._ctx,this.state);this.enterRule(e,52,oi.RULE_postdot);try{switch(this.state=424,this._errHandler.sync(this),this.interpreter.adaptivePredict(this._input,39,this._ctx)){case 1:this.enterOuterAlt(e,1),this.state=422,this.callinvoke();break;case 2:this.enterOuterAlt(e,2),this.state=423,this.fieldaccess()}}catch(t){if(!(t instanceof Qn.RecognitionException))throw t;e.exception=t,this._errHandler.reportError(this,t),this._errHandler.recover(this,t)}finally{this.exitRule()}return e}callinvoke(){let e,t=new Eo(this._ctx,this.state);this.enterRule(t,54,oi.RULE_callinvoke);try{this.enterOuterAlt(t,1),this.state=426,e=this._input.LA(1),e!==oi.DOT&&e!==oi.NSDOT?this._errHandler.recoverInline(this):(this._input.LA(1)===ei.Token.EOF&&(this.matchedEOF=!0),this._errHandler.reportMatch(this),this.consume()),this.state=427,this.match(oi.DOTID),this.state=428,this.arguments()}catch(e){if(!(e instanceof Qn.RecognitionException))throw e;t.exception=e,this._errHandler.reportError(this,e),this._errHandler.recover(this,e)}finally{this.exitRule()}return t}fieldaccess(){let e,t=new Ao(this._ctx,this.state);this.enterRule(t,56,oi.RULE_fieldaccess);try{this.enterOuterAlt(t,1),this.state=430,e=this._input.LA(1),e!==oi.DOT&&e!==oi.NSDOT?this._errHandler.recoverInline(this):(this._input.LA(1)===ei.Token.EOF&&(this.matchedEOF=!0),this._errHandler.reportMatch(this),this.consume()),this.state=431,e=this._input.LA(1),e!==oi.DOTINTEGER&&e!==oi.DOTID?this._errHandler.recoverInline(this):(this._input.LA(1)===ei.Token.EOF&&(this.matchedEOF=!0),this._errHandler.reportMatch(this),this.consume())}catch(e){if(!(e instanceof Qn.RecognitionException))throw e;t.exception=e,this._errHandler.reportError(this,e),this._errHandler.recover(this,e)}finally{this.exitRule()}return t}braceaccess(){let e=new Oo(this._ctx,this.state);this.enterRule(e,58,oi.RULE_braceaccess);try{this.enterOuterAlt(e,1),this.state=433,this.match(oi.LBRACE),this.state=434,this.expression(),this.state=435,this.match(oi.RBRACE)}catch(t){if(!(t instanceof Qn.RecognitionException))throw t;e.exception=t,this._errHandler.reportError(this,t),this._errHandler.recover(this,t)}finally{this.exitRule()}return e}arrayinitializer(){let e,t=new _o(this._ctx,this.state);this.enterRule(t,60,oi.RULE_arrayinitializer);try{let n;switch(this.state=478,this._errHandler.sync(this),this.interpreter.adaptivePredict(this._input,46,this._ctx)){case 1:t=new Io(t),this.enterOuterAlt(t,1),this.state=437,this.match(oi.NEW),this.state=438,this.type(),this.state=443,this._errHandler.sync(this),n=1;do{switch(n){case 1:this.state=439,this.match(oi.LBRACE),this.state=440,this.expression(),this.state=441,this.match(oi.RBRACE);break;default:throw new Zn.NoViableAltException(this)}this.state=445,this._errHandler.sync(this),n=this.interpreter.adaptivePredict(this._input,40,this._ctx)}while(2!==n&&n!==Gn.ATN.INVALID_ALT_NUMBER);switch(this.state=454,this._errHandler.sync(this),this.interpreter.adaptivePredict(this._input,42,this._ctx)){case 1:for(this.state=447,this.postdot(),this.state=451,this._errHandler.sync(this),n=this.interpreter.adaptivePredict(this._input,41,this._ctx);2!==n&&n!==Gn.ATN.INVALID_ALT_NUMBER;)1===n&&(this.state=448,this.postfix()),this.state=453,this._errHandler.sync(this),n=this.interpreter.adaptivePredict(this._input,41,this._ctx)}break;case 2:if(t=new No(t),this.enterOuterAlt(t,2),this.state=456,this.match(oi.NEW),this.state=457,this.type(),this.state=458,this.match(oi.LBRACE),this.state=459,this.match(oi.RBRACE),this.state=460,this.match(oi.LBRACK),this.state=469,this._errHandler.sync(this),e=this._input.LA(1),0==(e-5&-32)&&0!=(1<<e-5&(1<<oi.LBRACE-5|1<<oi.LP-5|1<<oi.NEW-5|1<<oi.BOOLNOT-5|1<<oi.BWNOT-5|1<<oi.ADD-5|1<<oi.SUB-5))||0==(e-58&-32)&&0!=(1<<e-58&(1<<oi.INCR-58|1<<oi.DECR-58|1<<oi.OCTAL-58|1<<oi.HEX-58|1<<oi.INTEGER-58|1<<oi.DECIMAL-58|1<<oi.STRING-58|1<<oi.REGEX-58|1<<oi.TRUE-58|1<<oi.FALSE-58|1<<oi.NULL-58|1<<oi.ID-58)))for(this.state=461,this.expression(),this.state=466,this._errHandler.sync(this),e=this._input.LA(1);e===oi.COMMA;)this.state=462,this.match(oi.COMMA),this.state=463,this.expression(),this.state=468,this._errHandler.sync(this),e=this._input.LA(1);for(this.state=471,this.match(oi.RBRACK),this.state=475,this._errHandler.sync(this),n=this.interpreter.adaptivePredict(this._input,45,this._ctx);2!==n&&n!==Gn.ATN.INVALID_ALT_NUMBER;)1===n&&(this.state=472,this.postfix()),this.state=477,this._errHandler.sync(this),n=this.interpreter.adaptivePredict(this._input,45,this._ctx)}}catch(e){if(!(e instanceof Qn.RecognitionException))throw e;t.exception=e,this._errHandler.reportError(this,e),this._errHandler.recover(this,e)}finally{this.exitRule()}return t}listinitializer(){let e,t=new Lo(this._ctx,this.state);this.enterRule(t,62,oi.RULE_listinitializer);try{switch(this.state=493,this._errHandler.sync(this),this.interpreter.adaptivePredict(this._input,48,this._ctx)){case 1:for(this.enterOuterAlt(t,1),this.state=480,this.match(oi.LBRACE),this.state=481,this.expression(),this.state=486,this._errHandler.sync(this),e=this._input.LA(1);e===oi.COMMA;)this.state=482,this.match(oi.COMMA),this.state=483,this.expression(),this.state=488,this._errHandler.sync(this),e=this._input.LA(1);this.state=489,this.match(oi.RBRACE);break;case 2:this.enterOuterAlt(t,2),this.state=491,this.match(oi.LBRACE),this.state=492,this.match(oi.RBRACE)}}catch(e){if(!(e instanceof Qn.RecognitionException))throw e;t.exception=e,this._errHandler.reportError(this,e),this._errHandler.recover(this,e)}finally{this.exitRule()}return t}mapinitializer(){let e,t=new Ro(this._ctx,this.state);this.enterRule(t,64,oi.RULE_mapinitializer);try{switch(this.state=509,this._errHandler.sync(this),this.interpreter.adaptivePredict(this._input,50,this._ctx)){case 1:for(this.enterOuterAlt(t,1),this.state=495,this.match(oi.LBRACE),this.state=496,this.maptoken(),this.state=501,this._errHandler.sync(this),e=this._input.LA(1);e===oi.COMMA;)this.state=497,this.match(oi.COMMA),this.state=498,this.maptoken(),this.state=503,this._errHandler.sync(this),e=this._input.LA(1);this.state=504,this.match(oi.RBRACE);break;case 2:this.enterOuterAlt(t,2),this.state=506,this.match(oi.LBRACE),this.state=507,this.match(oi.COLON),this.state=508,this.match(oi.RBRACE)}}catch(e){if(!(e instanceof Qn.RecognitionException))throw e;t.exception=e,this._errHandler.reportError(this,e),this._errHandler.recover(this,e)}finally{this.exitRule()}return t}maptoken(){let e=new Do(this._ctx,this.state);this.enterRule(e,66,oi.RULE_maptoken);try{this.enterOuterAlt(e,1),this.state=511,this.expression(),this.state=512,this.match(oi.COLON),this.state=513,this.expression()}catch(t){if(!(t instanceof Qn.RecognitionException))throw t;e.exception=t,this._errHandler.reportError(this,t),this._errHandler.recover(this,t)}finally{this.exitRule()}return e}arguments(){let e,t=new vo(this._ctx,this.state);this.enterRule(t,68,oi.RULE_arguments);try{if(this.enterOuterAlt(t,1),this.state=515,this.match(oi.LP),this.state=524,this._errHandler.sync(this),e=this._input.LA(1),0==(e-5&-32)&&0!=(1<<e-5&(1<<oi.LBRACE-5|1<<oi.LP-5|1<<oi.NEW-5|1<<oi.THIS-5|1<<oi.BOOLNOT-5|1<<oi.BWNOT-5|1<<oi.ADD-5|1<<oi.SUB-5))||0==(e-58&-32)&&0!=(1<<e-58&(1<<oi.INCR-58|1<<oi.DECR-58|1<<oi.OCTAL-58|1<<oi.HEX-58|1<<oi.INTEGER-58|1<<oi.DECIMAL-58|1<<oi.STRING-58|1<<oi.REGEX-58|1<<oi.TRUE-58|1<<oi.FALSE-58|1<<oi.NULL-58|1<<oi.PRIMITIVE-58|1<<oi.DEF-58|1<<oi.ID-58)))for(this.state=516,this.argument(),this.state=521,this._errHandler.sync(this),e=this._input.LA(1);e===oi.COMMA;)this.state=517,this.match(oi.COMMA),this.state=518,this.argument(),this.state=523,this._errHandler.sync(this),e=this._input.LA(1);this.state=526,this.match(oi.RP)}catch(e){if(!(e instanceof Qn.RecognitionException))throw e;t.exception=e,this._errHandler.reportError(this,e),this._errHandler.recover(this,e)}finally{this.exitRule()}return t}argument(){let e=new Mo(this._ctx,this.state);this.enterRule(e,70,oi.RULE_argument);try{switch(this.state=531,this._errHandler.sync(this),this.interpreter.adaptivePredict(this._input,53,this._ctx)){case 1:this.enterOuterAlt(e,1),this.state=528,this.expression();break;case 2:this.enterOuterAlt(e,2),this.state=529,this.lambda();break;case 3:this.enterOuterAlt(e,3),this.state=530,this.funcref()}}catch(t){if(!(t instanceof Qn.RecognitionException))throw t;e.exception=t,this._errHandler.reportError(this,t),this._errHandler.recover(this,t)}finally{this.exitRule()}return e}lambda(){let e,t=new Po(this._ctx,this.state);this.enterRule(t,72,oi.RULE_lambda);try{switch(this.enterOuterAlt(t,1),this.state=546,this._errHandler.sync(this),this._input.LA(1)){case oi.PRIMITIVE:case oi.DEF:case oi.ID:this.state=533,this.lamtype();break;case oi.LP:if(this.state=534,this.match(oi.LP),this.state=543,this._errHandler.sync(this),e=this._input.LA(1),0==(e-81&-32)&&0!=(1<<e-81&(1<<oi.PRIMITIVE-81|1<<oi.DEF-81|1<<oi.ID-81)))for(this.state=535,this.lamtype(),this.state=540,this._errHandler.sync(this),e=this._input.LA(1);e===oi.COMMA;)this.state=536,this.match(oi.COMMA),this.state=537,this.lamtype(),this.state=542,this._errHandler.sync(this),e=this._input.LA(1);this.state=545,this.match(oi.RP);break;default:throw new Zn.NoViableAltException(this)}switch(this.state=548,this.match(oi.ARROW),this.state=551,this._errHandler.sync(this),this._input.LA(1)){case oi.LBRACK:this.state=549,this.block();break;case oi.LBRACE:case oi.LP:case oi.NEW:case oi.BOOLNOT:case oi.BWNOT:case oi.ADD:case oi.SUB:case oi.INCR:case oi.DECR:case oi.OCTAL:case oi.HEX:case oi.INTEGER:case oi.DECIMAL:case oi.STRING:case oi.REGEX:case oi.TRUE:case oi.FALSE:case oi.NULL:case oi.ID:this.state=550,this.expression();break;default:throw new Zn.NoViableAltException(this)}}catch(e){if(!(e instanceof Qn.RecognitionException))throw e;t.exception=e,this._errHandler.reportError(this,e),this._errHandler.recover(this,e)}finally{this.exitRule()}return t}lamtype(){let e=new Fo(this._ctx,this.state);this.enterRule(e,74,oi.RULE_lamtype);try{switch(this.enterOuterAlt(e,1),this.state=554,this._errHandler.sync(this),this.interpreter.adaptivePredict(this._input,58,this._ctx)){case 1:this.state=553,this.decltype()}this.state=556,this.match(oi.ID)}catch(t){if(!(t instanceof Qn.RecognitionException))throw t;e.exception=t,this._errHandler.reportError(this,t),this._errHandler.recover(this,t)}finally{this.exitRule()}return e}funcref(){let e=new Bo(this._ctx,this.state);this.enterRule(e,76,oi.RULE_funcref);try{switch(this.state=569,this._errHandler.sync(this),this.interpreter.adaptivePredict(this._input,59,this._ctx)){case 1:e=new Uo(e),this.enterOuterAlt(e,1),this.state=558,this.decltype(),this.state=559,this.match(oi.REF),this.state=560,this.match(oi.ID);break;case 2:e=new wo(e),this.enterOuterAlt(e,2),this.state=562,this.decltype(),this.state=563,this.match(oi.REF),this.state=564,this.match(oi.NEW);break;case 3:e=new qo(e),this.enterOuterAlt(e,3),this.state=566,this.match(oi.THIS),this.state=567,this.match(oi.REF),this.state=568,this.match(oi.ID)}}catch(t){if(!(t instanceof Qn.RecognitionException))throw t;e.exception=t,this._errHandler.reportError(this,t),this._errHandler.recover(this,t)}finally{this.exitRule()}return e}sempred(e,t,n){switch(t){case 4:return this.rstatement_sempred(e,n);case 16:return this.noncondexpression_sempred(e,n)}return!0}rstatement_sempred(e,t){switch(t){case 0:return this._input.LA(1)!=oi.ELSE}return!0}noncondexpression_sempred(e,t){switch(t){case 1:return this.precpred(this._ctx,13);case 2:return this.precpred(this._ctx,12);case 3:return this.precpred(this._ctx,11);case 4:return this.precpred(this._ctx,10);case 5:return this.precpred(this._ctx,9);case 6:return this.precpred(this._ctx,7);case 7:return this.precpred(this._ctx,6);case 8:return this.precpred(this._ctx,5);case 9:return this.precpred(this._ctx,4);case 10:return this.precpred(this._ctx,3);case 11:return this.precpred(this._ctx,2);case 12:return this.precpred(this._ctx,1);case 13:return this.precpred(this._ctx,8)}return!0}static get _ATN(){return oi.__ATN||(oi.__ATN=(new Wn.ATNDeserializer).deserialize(ni.toCharArray(oi._serializedATN))),oi.__ATN}}ii(oi,"WS",1),ii(oi,"COMMENT",2),ii(oi,"LBRACK",3),ii(oi,"RBRACK",4),ii(oi,"LBRACE",5),ii(oi,"RBRACE",6),ii(oi,"LP",7),ii(oi,"RP",8),ii(oi,"DOT",9),ii(oi,"NSDOT",10),ii(oi,"COMMA",11),ii(oi,"SEMICOLON",12),ii(oi,"IF",13),ii(oi,"IN",14),ii(oi,"ELSE",15),ii(oi,"WHILE",16),ii(oi,"DO",17),ii(oi,"FOR",18),ii(oi,"CONTINUE",19),ii(oi,"BREAK",20),ii(oi,"RETURN",21),ii(oi,"NEW",22),ii(oi,"TRY",23),ii(oi,"CATCH",24),ii(oi,"THROW",25),ii(oi,"THIS",26),ii(oi,"INSTANCEOF",27),ii(oi,"BOOLNOT",28),ii(oi,"BWNOT",29),ii(oi,"MUL",30),ii(oi,"DIV",31),ii(oi,"REM",32),ii(oi,"ADD",33),ii(oi,"SUB",34),ii(oi,"LSH",35),ii(oi,"RSH",36),ii(oi,"USH",37),ii(oi,"LT",38),ii(oi,"LTE",39),ii(oi,"GT",40),ii(oi,"GTE",41),ii(oi,"EQ",42),ii(oi,"EQR",43),ii(oi,"NE",44),ii(oi,"NER",45),ii(oi,"BWAND",46),ii(oi,"XOR",47),ii(oi,"BWOR",48),ii(oi,"BOOLAND",49),ii(oi,"BOOLOR",50),ii(oi,"COND",51),ii(oi,"COLON",52),ii(oi,"ELVIS",53),ii(oi,"REF",54),ii(oi,"ARROW",55),ii(oi,"FIND",56),ii(oi,"MATCH",57),ii(oi,"INCR",58),ii(oi,"DECR",59),ii(oi,"ASSIGN",60),ii(oi,"AADD",61),ii(oi,"ASUB",62),ii(oi,"AMUL",63),ii(oi,"ADIV",64),ii(oi,"AREM",65),ii(oi,"AAND",66),ii(oi,"AXOR",67),ii(oi,"AOR",68),ii(oi,"ALSH",69),ii(oi,"ARSH",70),ii(oi,"AUSH",71),ii(oi,"OCTAL",72),ii(oi,"HEX",73),ii(oi,"INTEGER",74),ii(oi,"DECIMAL",75),ii(oi,"STRING",76),ii(oi,"REGEX",77),ii(oi,"TRUE",78),ii(oi,"FALSE",79),ii(oi,"NULL",80),ii(oi,"PRIMITIVE",81),ii(oi,"DEF",82),ii(oi,"ID",83),ii(oi,"DOTINTEGER",84),ii(oi,"DOTID",85),ii(oi,"RULE_source",0),ii(oi,"RULE_function",1),ii(oi,"RULE_parameters",2),ii(oi,"RULE_statement",3),ii(oi,"RULE_rstatement",4),ii(oi,"RULE_dstatement",5),ii(oi,"RULE_trailer",6),ii(oi,"RULE_block",7),ii(oi,"RULE_empty",8),ii(oi,"RULE_initializer",9),ii(oi,"RULE_afterthought",10),ii(oi,"RULE_declaration",11),ii(oi,"RULE_decltype",12),ii(oi,"RULE_type",13),ii(oi,"RULE_declvar",14),ii(oi,"RULE_trap",15),ii(oi,"RULE_noncondexpression",16),ii(oi,"RULE_expression",17),ii(oi,"RULE_unary",18),ii(oi,"RULE_unarynotaddsub",19),ii(oi,"RULE_castexpression",20),ii(oi,"RULE_primordefcasttype",21),ii(oi,"RULE_refcasttype",22),ii(oi,"RULE_chain",23),ii(oi,"RULE_primary",24),ii(oi,"RULE_postfix",25),ii(oi,"RULE_postdot",26),ii(oi,"RULE_callinvoke",27),ii(oi,"RULE_fieldaccess",28),ii(oi,"RULE_braceaccess",29),ii(oi,"RULE_arrayinitializer",30),ii(oi,"RULE_listinitializer",31),ii(oi,"RULE_mapinitializer",32),ii(oi,"RULE_maptoken",33),ii(oi,"RULE_arguments",34),ii(oi,"RULE_argument",35),ii(oi,"RULE_lambda",36),ii(oi,"RULE_lamtype",37),ii(oi,"RULE_funcref",38),ii(oi,"ruleNames",["source","function","parameters","statement","rstatement","dstatement","trailer","block","empty","initializer","afterthought","declaration","decltype","type","declvar","trap","noncondexpression","expression","unary","unarynotaddsub","castexpression","primordefcasttype","refcasttype","chain","primary","postfix","postdot","callinvoke","fieldaccess","braceaccess","arrayinitializer","listinitializer","mapinitializer","maptoken","arguments","argument","lambda","lamtype","funcref"]),ii(oi,"_LITERAL_NAMES",[void 0,void 0,void 0,"'{'","'}'","'['","']'","'('","')'","'.'","'?.'","','","';'","'if'","'in'","'else'","'while'","'do'","'for'","'continue'","'break'","'return'","'new'","'try'","'catch'","'throw'","'this'","'instanceof'","'!'","'~'","'*'","'/'","'%'","'+'","'-'","'<<'","'>>'","'>>>'","'<'","'<='","'>'","'>='","'=='","'==='","'!='","'!=='","'&'","'^'","'|'","'&&'","'||'","'?'","':'","'?:'","'::'","'->'","'=~'","'==~'","'++'","'--'","'='","'+='","'-='","'*='","'/='","'%='","'&='","'^='","'|='","'<<='","'>>='","'>>>='",void 0,void 0,void 0,void 0,void 0,void 0,"'true'","'false'","'null'",void 0,"'def'"]),ii(oi,"_SYMBOLIC_NAMES",[void 0,"WS","COMMENT","LBRACK","RBRACK","LBRACE","RBRACE","LP","RP","DOT","NSDOT","COMMA","SEMICOLON","IF","IN","ELSE","WHILE","DO","FOR","CONTINUE","BREAK","RETURN","NEW","TRY","CATCH","THROW","THIS","INSTANCEOF","BOOLNOT","BWNOT","MUL","DIV","REM","ADD","SUB","LSH","RSH","USH","LT","LTE","GT","GTE","EQ","EQR","NE","NER","BWAND","XOR","BWOR","BOOLAND","BOOLOR","COND","COLON","ELVIS","REF","ARROW","FIND","MATCH","INCR","DECR","ASSIGN","AADD","ASUB","AMUL","ADIV","AREM","AAND","AXOR","AOR","ALSH","ARSH","AUSH","OCTAL","HEX","INTEGER","DECIMAL","STRING","REGEX","TRUE","FALSE","NULL","PRIMITIVE","DEF","ID","DOTINTEGER","DOTID"]),ii(oi,"VOCABULARY",new ti.VocabularyImpl(oi._LITERAL_NAMES,oi._SYMBOLIC_NAMES,[])),ii(oi,"_serializedATNSegments",2),ii(oi,"_serializedATNSegment0",'줝쪺֍꾺体؇쉁WȾ\t\t\t\t\t\t\b\t\b\t\t\t\n\t\n\v\t\v\f\t\f\r\t\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t \t !\t!"\t"#\t#$\t$%\t%&\t&\'\t\'(\t(R\n\fU\vX\n\f[\vk\n\fn\vp\nx\n\n\n\n\n\n\n²\n\r³¶\nÄ\nÉ\n\b\b\bÍ\n\b\t\t\tÑ\n\t\f\t\tÔ\v\t\t\t×\n\t\t\t\n\n\v\v\vß\n\v\f\f\r\r\r\r\rç\n\r\f\r\rê\v\rï\n\fò\vù\n\fü\vþ\nă\nĶ\n\fĹ\vņ\nō\nŖ\nŢ\nũ\n\rŪŰ\n\rűŷ\n\fź\vž\n\fƁ\vƃ\nƇ\n\fƊ\vƍ\nƢ\nƧ\nƫ\n       ƾ\n \r  ƿ   Ǆ\n \f  Ǉ\v  ǉ\n          Ǔ\n \f  ǖ\v  ǘ\n    ǜ\n \f  ǟ\v  ǡ\n !!!!!ǧ\n!\f!!Ǫ\v!!!!!!ǰ\n!"""""Ƕ\n"\f""ǹ\v"""""""Ȁ\n"####$$$$$Ȋ\n$\f$$ȍ\v$$ȏ\n$$$%%%%Ȗ\n%&&&&&&ȝ\n&\f&&Ƞ\v&&Ȣ\n&&&ȥ\n&&&&&Ȫ\n&\'\'ȭ\n\'\'\'((((((((((((ȼ\n((")\b\n\f "$&(*,.02468:<>@BDFHJLN "#$:;%\'(+,/>I<=STJM\v\fVWɹS^c\bw\nµ\fÈÌÎÚÞàâëýÿ Ą"ċ$Ņ&Ō(ŕ*š,ţ.Ƃ0ƌ2ơ4Ʀ6ƪ8Ƭ:ư<Ƴ>Ǡ@ǯBǿDȁFȅHȕJȤLȬNȻPRQPRUSQSTTYUSVX\bWVX[YWYZZ\\[Y\\]]^__`U`aab\tbco\tdeelUfg\rghhiUikjfknljlmmpnlodoppqqr\nrsx\ntu\fuv\tvxwswtx\tyzz{\t{|$|}\n}\b~\b~¶\t$\n\b\n¶\t\v$\f\n\b\n¶\t  ¡U¡¢6¢£$£¤\n¤¥\b¥¶¦§§¨\t¨©U©ªª«$«¬\n¬­\b­¶®¯¯±\t°² ±°²³³±³´´¶µyµµµµ¦µ®¶\v·¸¸¹\t¹ºº»\t»¼$¼½\n½É¾É\r¿ÉÀÉÁÃÂÄ$ÃÂÃÄÄÉÅÆÆÉ$ÇÉ$È·È¾È¿ÈÀÈÁÈÅÈÇÉ\rÊÍ\tËÍ\bÌÊÌËÍÎÒÏÑ\bÐÏÑÔÒÐÒÓÓÖÔÒÕ×\fÖÕÖ××ØØÙÙÚÛÛÜß\rÝß$ÞÜÞÝßàá$áâããèäå\råçæäçêèæèééêèëðìííï\bîìïòðîðññòðóþTôþSõúUö÷\v÷ùWøöùüúøúûûþüúýóýôýõþÿĂUĀā>āă$ĂĀĂăăĄąąĆ\tĆććĈUĈĉ\nĉĊ\tĊ!ċČ\bČč&čķĎď\fďĐ\tĐĶ"đĒ\fĒē\tēĶ"Ĕĕ\f\rĕĖ\tĖĶ"ėĘ\f\fĘę\tęĶ"\rĚě\f\věĜ\tĜĶ"\fĝĞ\f\tĞğ\t\bğĶ"\nĠġ\f\bġĢ0ĢĶ"\tģĤ\fĤĥ1ĥĶ"\bĦħ\fħĨ2ĨĶ"ĩĪ\fĪī3īĶ"Ĭĭ\fĭĮ4ĮĶ"įİ\fİı7ıĶ"Ĳĳ\f\nĳĴĴĶĵĎĵđĵĔĵėĵĚĵĝĵĠĵģĵĦĵĩĵĬĵįĵĲĶĹķĵķĸĸ#Ĺķĺņ"Ļļ"ļĽ5Ľľ$ľĿ6Ŀŀ$ŀņŁł"łŃ\t\tŃń$ńņŅĺŅĻŅŁņ%Ňň\t\nňō0ŉŊ\tŊō&ŋō(ŌŇŌŉŌŋō\'ŎŖ0ŏŐ0Őő\t\nőŖŒœ\t\vœŖ&ŔŖ*ŕŎŕŏŕŒŕŔŖ)ŗŘ\tŘř,řŚ\nŚś&śŢŜŝ\tŝŞ.Şş\nşŠ(ŠŢšŗšŜŢ+ţŤ\t\fŤ-ťŨTŦŧŧũ\bŨŦũŪŪŨŪūūƃŬůSŭŮŮŰ\bůŭŰűűůűŲŲƃųŸUŴŵ\vŵŷWŶŴŷźŸŶŸŹŹſźŸŻżżž\bŽŻžƁſŽſƀƀƃƁſƂťƂŬƂųƃ/Ƅƈ2ƅƇ4ƆƅƇƊƈƆƈƉƉƍƊƈƋƍ> ƌƄƌƋƍ1ƎƏ\tƏƐ$ƐƑ\nƑƢƒƢ\t\rƓƢPƔƢQƕƢRƖƢNƗƢOƘƢ@!ƙƢB"ƚƢUƛƜUƜƢF$ƝƞƞƟƟƠF$ƠƢơƎơƒơƓơƔơƕơƖơƗơƘơƙơƚơƛơƝƢ3ƣƧ8ƤƧ:ƥƧ<ƦƣƦƤƦƥƧ5ƨƫ8Ʃƫ:ƪƨƪƩƫ7Ƭƭ\tƭƮWƮƯF$Ư9ưƱ\tƱƲ\tƲ;ƳƴƴƵ$Ƶƶ\bƶ=ƷƸƸƽƹƺƺƻ$ƻƼ\bƼƾƽƹƾƿƿƽƿǀǀǈǁǅ6ǂǄ4ǃǂǄǇǅǃǅǆǆǉǇǅǈǁǈǉǉǡǊǋǋǌǌǍǍǎ\bǎǗǏǔ$ǐǑ\rǑǓ$ǒǐǓǖǔǒǔǕǕǘǖǔǗǏǗǘǘǙǙǝǚǜ4ǛǚǜǟǝǛǝǞǞǡǟǝǠƷǠǊǡ?ǢǣǣǨ$Ǥǥ\rǥǧ$ǦǤǧǪǨǦǨǩǩǫǪǨǫǬ\bǬǰǭǮǮǰ\bǯǢǯǭǰAǱǲǲǷD#ǳǴ\rǴǶD#ǵǳǶǹǷǵǷǸǸǺǹǷǺǻ\bǻȀǼǽǽǾ6ǾȀ\bǿǱǿǼȀCȁȂ$Ȃȃ6ȃȄ$ȄEȅȎ\tȆȋH%ȇȈ\rȈȊH%ȉȇȊȍȋȉȋȌȌȏȍȋȎȆȎȏȏȐȐȑ\nȑGȒȖ$ȓȖJ&ȔȖN(ȕȒȕȓȕȔȖIȗȥL\'Șȡ\tșȞL\'Țț\rțȝL\'ȜȚȝȠȞȜȞȟȟȢȠȞȡșȡȢȢȣȣȥ\nȤȗȤȘȥȦ'),ii(oi,"_serializedATNSegment1","Ȧȩ9ȧȪ\tȨȪ$ȩȧȩȨȪKȫȭȬȫȬȭȭȮȮȯUȯMȰȱȱȲ8ȲȳUȳȼȴȵȵȶ8ȶȷȷȼȸȹȹȺ8ȺȼUȻȰȻȴȻȸȼO>SYlow³µÃÈÌÒÖÞèðúýĂĵķŅŌŕšŪűŸſƂƈƌơƦƪƿǅǈǔǗǝǠǨǯǷǿȋȎȕȞȡȤȩȬȻ"),ii(oi,"_serializedATN",ni.join([oi._serializedATNSegment0,oi._serializedATNSegment1],"")),ii(oi,"__ATN",void 0);class ai extends Jn.ParserRuleContext{EOF(){return this.getToken(oi.EOF,0)}function(e){return void 0===e?this.getRuleContexts(ri):this.getRuleContext(e,ri)}statement(e){return void 0===e?this.getRuleContexts(si):this.getRuleContext(e,si)}constructor(e,t){super(e,t)}get ruleIndex(){return oi.RULE_source}enterRule(e){e.enterSource&&e.enterSource(this)}exitRule(e){e.exitSource&&e.exitSource(this)}}class ri extends Jn.ParserRuleContext{decltype(){return this.getRuleContext(0,Li)}ID(){return this.getToken(oi.ID,0)}parameters(){return this.getRuleContext(0,li)}block(){return this.getRuleContext(0,Ai)}constructor(e,t){super(e,t)}get ruleIndex(){return oi.RULE_function}enterRule(e){e.enterFunction&&e.enterFunction(this)}exitRule(e){e.exitFunction&&e.exitFunction(this)}}class li extends Jn.ParserRuleContext{LP(){return this.getToken(oi.LP,0)}RP(){return this.getToken(oi.RP,0)}decltype(e){return void 0===e?this.getRuleContexts(Li):this.getRuleContext(e,Li)}ID(e){return void 0===e?this.getTokens(oi.ID):this.getToken(oi.ID,e)}COMMA(e){return void 0===e?this.getTokens(oi.COMMA):this.getToken(oi.COMMA,e)}constructor(e,t){super(e,t)}get ruleIndex(){return oi.RULE_parameters}enterRule(e){e.enterParameters&&e.enterParameters(this)}exitRule(e){e.exitParameters&&e.exitParameters(this)}}class si extends Jn.ParserRuleContext{rstatement(){return this.tryGetRuleContext(0,di)}dstatement(){return this.tryGetRuleContext(0,bi)}SEMICOLON(){return this.tryGetToken(oi.SEMICOLON,0)}EOF(){return this.tryGetToken(oi.EOF,0)}constructor(e,t){super(e,t)}get ruleIndex(){return oi.RULE_statement}enterRule(e){e.enterStatement&&e.enterStatement(this)}exitRule(e){e.exitStatement&&e.exitStatement(this)}}class di extends Jn.ParserRuleContext{constructor(e,t){super(e,t)}get ruleIndex(){return oi.RULE_rstatement}copyFrom(e){super.copyFrom(e)}}class ci extends di{IF(){return this.getToken(oi.IF,0)}LP(){return this.getToken(oi.LP,0)}expression(){return this.getRuleContext(0,ji)}RP(){return this.getToken(oi.RP,0)}trailer(e){return void 0===e?this.getRuleContexts(Ei):this.getRuleContext(e,Ei)}ELSE(){return this.tryGetToken(oi.ELSE,0)}constructor(e){super(e.parent,e.invokingState),this.copyFrom(e)}enterRule(e){e.enterIf&&e.enterIf(this)}exitRule(e){e.exitIf&&e.exitIf(this)}}class ui extends di{WHILE(){return this.getToken(oi.WHILE,0)}LP(){return this.getToken(oi.LP,0)}expression(){return this.getRuleContext(0,ji)}RP(){return this.getToken(oi.RP,0)}trailer(){return this.tryGetRuleContext(0,Ei)}empty(){return this.tryGetRuleContext(0,Oi)}constructor(e){super(e.parent,e.invokingState),this.copyFrom(e)}enterRule(e){e.enterWhile&&e.enterWhile(this)}exitRule(e){e.exitWhile&&e.exitWhile(this)}}class mi extends di{FOR(){return this.getToken(oi.FOR,0)}LP(){return this.getToken(oi.LP,0)}SEMICOLON(e){return void 0===e?this.getTokens(oi.SEMICOLON):this.getToken(oi.SEMICOLON,e)}RP(){return this.getToken(oi.RP,0)}trailer(){return this.tryGetRuleContext(0,Ei)}empty(){return this.tryGetRuleContext(0,Oi)}initializer(){return this.tryGetRuleContext(0,_i)}expression(){return this.tryGetRuleContext(0,ji)}afterthought(){return this.tryGetRuleContext(0,Ii)}constructor(e){super(e.parent,e.invokingState),this.copyFrom(e)}enterRule(e){e.enterFor&&e.enterFor(this)}exitRule(e){e.exitFor&&e.exitFor(this)}}class hi extends di{FOR(){return this.getToken(oi.FOR,0)}LP(){return this.getToken(oi.LP,0)}decltype(){return this.getRuleContext(0,Li)}ID(){return this.getToken(oi.ID,0)}COLON(){return this.getToken(oi.COLON,0)}expression(){return this.getRuleContext(0,ji)}RP(){return this.getToken(oi.RP,0)}trailer(){return this.getRuleContext(0,Ei)}constructor(e){super(e.parent,e.invokingState),this.copyFrom(e)}enterRule(e){e.enterEach&&e.enterEach(this)}exitRule(e){e.exitEach&&e.exitEach(this)}}class pi extends di{FOR(){return this.getToken(oi.FOR,0)}LP(){return this.getToken(oi.LP,0)}ID(){return this.getToken(oi.ID,0)}IN(){return this.getToken(oi.IN,0)}expression(){return this.getRuleContext(0,ji)}RP(){return this.getToken(oi.RP,0)}trailer(){return this.getRuleContext(0,Ei)}constructor(e){super(e.parent,e.invokingState),this.copyFrom(e)}enterRule(e){e.enterIneach&&e.enterIneach(this)}exitRule(e){e.exitIneach&&e.exitIneach(this)}}class Ti extends di{TRY(){return this.getToken(oi.TRY,0)}block(){return this.getRuleContext(0,Ai)}trap(e){return void 0===e?this.getRuleContexts(vi):this.getRuleContext(e,vi)}constructor(e){super(e.parent,e.invokingState),this.copyFrom(e)}enterRule(e){e.enterTry&&e.enterTry(this)}exitRule(e){e.exitTry&&e.exitTry(this)}}class bi extends Jn.ParserRuleContext{constructor(e,t){super(e,t)}get ruleIndex(){return oi.RULE_dstatement}copyFrom(e){super.copyFrom(e)}}class gi extends bi{DO(){return this.getToken(oi.DO,0)}block(){return this.getRuleContext(0,Ai)}WHILE(){return this.getToken(oi.WHILE,0)}LP(){return this.getToken(oi.LP,0)}expression(){return this.getRuleContext(0,ji)}RP(){return this.getToken(oi.RP,0)}constructor(e){super(e.parent,e.invokingState),this.copyFrom(e)}enterRule(e){e.enterDo&&e.enterDo(this)}exitRule(e){e.exitDo&&e.exitDo(this)}}class xi extends bi{declaration(){return this.getRuleContext(0,Ni)}constructor(e){super(e.parent,e.invokingState),this.copyFrom(e)}enterRule(e){e.enterDecl&&e.enterDecl(this)}exitRule(e){e.exitDecl&&e.exitDecl(this)}}class fi extends bi{CONTINUE(){return this.getToken(oi.CONTINUE,0)}constructor(e){super(e.parent,e.invokingState),this.copyFrom(e)}enterRule(e){e.enterContinue&&e.enterContinue(this)}exitRule(e){e.exitContinue&&e.exitContinue(this)}}class ki extends bi{BREAK(){return this.getToken(oi.BREAK,0)}constructor(e){super(e.parent,e.invokingState),this.copyFrom(e)}enterRule(e){e.enterBreak&&e.enterBreak(this)}exitRule(e){e.exitBreak&&e.exitBreak(this)}}class Si extends bi{RETURN(){return this.getToken(oi.RETURN,0)}expression(){return this.tryGetRuleContext(0,ji)}constructor(e){super(e.parent,e.invokingState),this.copyFrom(e)}enterRule(e){e.enterReturn&&e.enterReturn(this)}exitRule(e){e.exitReturn&&e.exitReturn(this)}}class yi extends bi{THROW(){return this.getToken(oi.THROW,0)}expression(){return this.getRuleContext(0,ji)}constructor(e){super(e.parent,e.invokingState),this.copyFrom(e)}enterRule(e){e.enterThrow&&e.enterThrow(this)}exitRule(e){e.exitThrow&&e.exitThrow(this)}}class Ci extends bi{expression(){return this.getRuleContext(0,ji)}constructor(e){super(e.parent,e.invokingState),this.copyFrom(e)}enterRule(e){e.enterExpr&&e.enterExpr(this)}exitRule(e){e.exitExpr&&e.exitExpr(this)}}class Ei extends Jn.ParserRuleContext{block(){return this.tryGetRuleContext(0,Ai)}statement(){return this.tryGetRuleContext(0,si)}constructor(e,t){super(e,t)}get ruleIndex(){return oi.RULE_trailer}enterRule(e){e.enterTrailer&&e.enterTrailer(this)}exitRule(e){e.exitTrailer&&e.exitTrailer(this)}}class Ai extends Jn.ParserRuleContext{LBRACK(){return this.getToken(oi.LBRACK,0)}RBRACK(){return this.getToken(oi.RBRACK,0)}statement(e){return void 0===e?this.getRuleContexts(si):this.getRuleContext(e,si)}dstatement(){return this.tryGetRuleContext(0,bi)}constructor(e,t){super(e,t)}get ruleIndex(){return oi.RULE_block}enterRule(e){e.enterBlock&&e.enterBlock(this)}exitRule(e){e.exitBlock&&e.exitBlock(this)}}class Oi extends Jn.ParserRuleContext{SEMICOLON(){return this.getToken(oi.SEMICOLON,0)}constructor(e,t){super(e,t)}get ruleIndex(){return oi.RULE_empty}enterRule(e){e.enterEmpty&&e.enterEmpty(this)}exitRule(e){e.exitEmpty&&e.exitEmpty(this)}}class _i extends Jn.ParserRuleContext{declaration(){return this.tryGetRuleContext(0,Ni)}expression(){return this.tryGetRuleContext(0,ji)}constructor(e,t){super(e,t)}get ruleIndex(){return oi.RULE_initializer}enterRule(e){e.enterInitializer&&e.enterInitializer(this)}exitRule(e){e.exitInitializer&&e.exitInitializer(this)}}class Ii extends Jn.ParserRuleContext{expression(){return this.getRuleContext(0,ji)}constructor(e,t){super(e,t)}get ruleIndex(){return oi.RULE_afterthought}enterRule(e){e.enterAfterthought&&e.enterAfterthought(this)}exitRule(e){e.exitAfterthought&&e.exitAfterthought(this)}}class Ni extends Jn.ParserRuleContext{decltype(){return this.getRuleContext(0,Li)}declvar(e){return void 0===e?this.getRuleContexts(Di):this.getRuleContext(e,Di)}COMMA(e){return void 0===e?this.getTokens(oi.COMMA):this.getToken(oi.COMMA,e)}constructor(e,t){super(e,t)}get ruleIndex(){return oi.RULE_declaration}enterRule(e){e.enterDeclaration&&e.enterDeclaration(this)}exitRule(e){e.exitDeclaration&&e.exitDeclaration(this)}}class Li extends Jn.ParserRuleContext{type(){return this.getRuleContext(0,Ri)}LBRACE(e){return void 0===e?this.getTokens(oi.LBRACE):this.getToken(oi.LBRACE,e)}RBRACE(e){return void 0===e?this.getTokens(oi.RBRACE):this.getToken(oi.RBRACE,e)}constructor(e,t){super(e,t)}get ruleIndex(){return oi.RULE_decltype}enterRule(e){e.enterDecltype&&e.enterDecltype(this)}exitRule(e){e.exitDecltype&&e.exitDecltype(this)}}class Ri extends Jn.ParserRuleContext{DEF(){return this.tryGetToken(oi.DEF,0)}PRIMITIVE(){return this.tryGetToken(oi.PRIMITIVE,0)}ID(){return this.tryGetToken(oi.ID,0)}DOT(e){return void 0===e?this.getTokens(oi.DOT):this.getToken(oi.DOT,e)}DOTID(e){return void 0===e?this.getTokens(oi.DOTID):this.getToken(oi.DOTID,e)}constructor(e,t){super(e,t)}get ruleIndex(){return oi.RULE_type}enterRule(e){e.enterType&&e.enterType(this)}exitRule(e){e.exitType&&e.exitType(this)}}class Di extends Jn.ParserRuleContext{ID(){return this.getToken(oi.ID,0)}ASSIGN(){return this.tryGetToken(oi.ASSIGN,0)}expression(){return this.tryGetRuleContext(0,ji)}constructor(e,t){super(e,t)}get ruleIndex(){return oi.RULE_declvar}enterRule(e){e.enterDeclvar&&e.enterDeclvar(this)}exitRule(e){e.exitDeclvar&&e.exitDeclvar(this)}}class vi extends Jn.ParserRuleContext{CATCH(){return this.getToken(oi.CATCH,0)}LP(){return this.getToken(oi.LP,0)}type(){return this.getRuleContext(0,Ri)}ID(){return this.getToken(oi.ID,0)}RP(){return this.getToken(oi.RP,0)}block(){return this.getRuleContext(0,Ai)}constructor(e,t){super(e,t)}get ruleIndex(){return oi.RULE_trap}enterRule(e){e.enterTrap&&e.enterTrap(this)}exitRule(e){e.exitTrap&&e.exitTrap(this)}}class Mi extends Jn.ParserRuleContext{constructor(e,t){super(e,t)}get ruleIndex(){return oi.RULE_noncondexpression}copyFrom(e){super.copyFrom(e)}}class Pi extends Mi{unary(){return this.getRuleContext(0,zi)}constructor(e){super(e.parent,e.invokingState),this.copyFrom(e)}enterRule(e){e.enterSingle&&e.enterSingle(this)}exitRule(e){e.exitSingle&&e.exitSingle(this)}}class Fi extends Mi{noncondexpression(e){return void 0===e?this.getRuleContexts(Mi):this.getRuleContext(e,Mi)}MUL(){return this.tryGetToken(oi.MUL,0)}DIV(){return this.tryGetToken(oi.DIV,0)}REM(){return this.tryGetToken(oi.REM,0)}ADD(){return this.tryGetToken(oi.ADD,0)}SUB(){return this.tryGetToken(oi.SUB,0)}FIND(){return this.tryGetToken(oi.FIND,0)}MATCH(){return this.tryGetToken(oi.MATCH,0)}LSH(){return this.tryGetToken(oi.LSH,0)}RSH(){return this.tryGetToken(oi.RSH,0)}USH(){return this.tryGetToken(oi.USH,0)}BWAND(){return this.tryGetToken(oi.BWAND,0)}XOR(){return this.tryGetToken(oi.XOR,0)}BWOR(){return this.tryGetToken(oi.BWOR,0)}constructor(e){super(e.parent,e.invokingState),this.copyFrom(e)}enterRule(e){e.enterBinary&&e.enterBinary(this)}exitRule(e){e.exitBinary&&e.exitBinary(this)}}class Bi extends Mi{noncondexpression(e){return void 0===e?this.getRuleContexts(Mi):this.getRuleContext(e,Mi)}LT(){return this.tryGetToken(oi.LT,0)}LTE(){return this.tryGetToken(oi.LTE,0)}GT(){return this.tryGetToken(oi.GT,0)}GTE(){return this.tryGetToken(oi.GTE,0)}EQ(){return this.tryGetToken(oi.EQ,0)}EQR(){return this.tryGetToken(oi.EQR,0)}NE(){return this.tryGetToken(oi.NE,0)}NER(){return this.tryGetToken(oi.NER,0)}constructor(e){super(e.parent,e.invokingState),this.copyFrom(e)}enterRule(e){e.enterComp&&e.enterComp(this)}exitRule(e){e.exitComp&&e.exitComp(this)}}class Ui extends Mi{noncondexpression(){return this.getRuleContext(0,Mi)}INSTANCEOF(){return this.getToken(oi.INSTANCEOF,0)}decltype(){return this.getRuleContext(0,Li)}constructor(e){super(e.parent,e.invokingState),this.copyFrom(e)}enterRule(e){e.enterInstanceof&&e.enterInstanceof(this)}exitRule(e){e.exitInstanceof&&e.exitInstanceof(this)}}class wi extends Mi{noncondexpression(e){return void 0===e?this.getRuleContexts(Mi):this.getRuleContext(e,Mi)}BOOLAND(){return this.tryGetToken(oi.BOOLAND,0)}BOOLOR(){return this.tryGetToken(oi.BOOLOR,0)}constructor(e){super(e.parent,e.invokingState),this.copyFrom(e)}enterRule(e){e.enterBool&&e.enterBool(this)}exitRule(e){e.exitBool&&e.exitBool(this)}}class qi extends Mi{noncondexpression(e){return void 0===e?this.getRuleContexts(Mi):this.getRuleContext(e,Mi)}ELVIS(){return this.getToken(oi.ELVIS,0)}constructor(e){super(e.parent,e.invokingState),this.copyFrom(e)}enterRule(e){e.enterElvis&&e.enterElvis(this)}exitRule(e){e.exitElvis&&e.exitElvis(this)}}class ji extends Jn.ParserRuleContext{constructor(e,t){super(e,t)}get ruleIndex(){return oi.RULE_expression}copyFrom(e){super.copyFrom(e)}}class Hi extends ji{noncondexpression(){return this.getRuleContext(0,Mi)}constructor(e){super(e.parent,e.invokingState),this.copyFrom(e)}enterRule(e){e.enterNonconditional&&e.enterNonconditional(this)}exitRule(e){e.exitNonconditional&&e.exitNonconditional(this)}}class Yi extends ji{noncondexpression(){return this.getRuleContext(0,Mi)}COND(){return this.getToken(oi.COND,0)}expression(e){return void 0===e?this.getRuleContexts(ji):this.getRuleContext(e,ji)}COLON(){return this.getToken(oi.COLON,0)}constructor(e){super(e.parent,e.invokingState),this.copyFrom(e)}enterRule(e){e.enterConditional&&e.enterConditional(this)}exitRule(e){e.exitConditional&&e.exitConditional(this)}}class Vi extends ji{noncondexpression(){return this.getRuleContext(0,Mi)}expression(){return this.getRuleContext(0,ji)}ASSIGN(){return this.tryGetToken(oi.ASSIGN,0)}AADD(){return this.tryGetToken(oi.AADD,0)}ASUB(){return this.tryGetToken(oi.ASUB,0)}AMUL(){return this.tryGetToken(oi.AMUL,0)}ADIV(){return this.tryGetToken(oi.ADIV,0)}AREM(){return this.tryGetToken(oi.AREM,0)}AAND(){return this.tryGetToken(oi.AAND,0)}AXOR(){return this.tryGetToken(oi.AXOR,0)}AOR(){return this.tryGetToken(oi.AOR,0)}ALSH(){return this.tryGetToken(oi.ALSH,0)}ARSH(){return this.tryGetToken(oi.ARSH,0)}AUSH(){return this.tryGetToken(oi.AUSH,0)}constructor(e){super(e.parent,e.invokingState),this.copyFrom(e)}enterRule(e){e.enterAssignment&&e.enterAssignment(this)}exitRule(e){e.exitAssignment&&e.exitAssignment(this)}}class zi extends Jn.ParserRuleContext{constructor(e,t){super(e,t)}get ruleIndex(){return oi.RULE_unary}copyFrom(e){super.copyFrom(e)}}class Gi extends zi{chain(){return this.getRuleContext(0,ao)}INCR(){return this.tryGetToken(oi.INCR,0)}DECR(){return this.tryGetToken(oi.DECR,0)}constructor(e){super(e.parent,e.invokingState),this.copyFrom(e)}enterRule(e){e.enterPre&&e.enterPre(this)}exitRule(e){e.exitPre&&e.exitPre(this)}}class Wi extends zi{unary(){return this.getRuleContext(0,zi)}ADD(){return this.tryGetToken(oi.ADD,0)}SUB(){return this.tryGetToken(oi.SUB,0)}constructor(e){super(e.parent,e.invokingState),this.copyFrom(e)}enterRule(e){e.enterAddsub&&e.enterAddsub(this)}exitRule(e){e.exitAddsub&&e.exitAddsub(this)}}class Ki extends zi{unarynotaddsub(){return this.getRuleContext(0,Zi)}constructor(e){super(e.parent,e.invokingState),this.copyFrom(e)}enterRule(e){e.enterNotaddsub&&e.enterNotaddsub(this)}exitRule(e){e.exitNotaddsub&&e.exitNotaddsub(this)}}class Zi extends Jn.ParserRuleContext{constructor(e,t){super(e,t)}get ruleIndex(){return oi.RULE_unarynotaddsub}copyFrom(e){super.copyFrom(e)}}class Xi extends Zi{chain(){return this.getRuleContext(0,ao)}constructor(e){super(e.parent,e.invokingState),this.copyFrom(e)}enterRule(e){e.enterRead&&e.enterRead(this)}exitRule(e){e.exitRead&&e.exitRead(this)}}class Ji extends Zi{chain(){return this.getRuleContext(0,ao)}INCR(){return this.tryGetToken(oi.INCR,0)}DECR(){return this.tryGetToken(oi.DECR,0)}constructor(e){super(e.parent,e.invokingState),this.copyFrom(e)}enterRule(e){e.enterPost&&e.enterPost(this)}exitRule(e){e.exitPost&&e.exitPost(this)}}class $i extends Zi{unary(){return this.getRuleContext(0,zi)}BOOLNOT(){return this.tryGetToken(oi.BOOLNOT,0)}BWNOT(){return this.tryGetToken(oi.BWNOT,0)}constructor(e){super(e.parent,e.invokingState),this.copyFrom(e)}enterRule(e){e.enterNot&&e.enterNot(this)}exitRule(e){e.exitNot&&e.exitNot(this)}}class Qi extends Zi{castexpression(){return this.getRuleContext(0,eo)}constructor(e){super(e.parent,e.invokingState),this.copyFrom(e)}enterRule(e){e.enterCast&&e.enterCast(this)}exitRule(e){e.exitCast&&e.exitCast(this)}}class eo extends Jn.ParserRuleContext{constructor(e,t){super(e,t)}get ruleIndex(){return oi.RULE_castexpression}copyFrom(e){super.copyFrom(e)}}class to extends eo{LP(){return this.getToken(oi.LP,0)}primordefcasttype(){return this.getRuleContext(0,io)}RP(){return this.getToken(oi.RP,0)}unary(){return this.getRuleContext(0,zi)}constructor(e){super(e.parent,e.invokingState),this.copyFrom(e)}enterRule(e){e.enterPrimordefcast&&e.enterPrimordefcast(this)}exitRule(e){e.exitPrimordefcast&&e.exitPrimordefcast(this)}}class no extends eo{LP(){return this.getToken(oi.LP,0)}refcasttype(){return this.getRuleContext(0,oo)}RP(){return this.getToken(oi.RP,0)}unarynotaddsub(){return this.getRuleContext(0,Zi)}constructor(e){super(e.parent,e.invokingState),this.copyFrom(e)}enterRule(e){e.enterRefcast&&e.enterRefcast(this)}exitRule(e){e.exitRefcast&&e.exitRefcast(this)}}class io extends Jn.ParserRuleContext{DEF(){return this.tryGetToken(oi.DEF,0)}PRIMITIVE(){return this.tryGetToken(oi.PRIMITIVE,0)}constructor(e,t){super(e,t)}get ruleIndex(){return oi.RULE_primordefcasttype}enterRule(e){e.enterPrimordefcasttype&&e.enterPrimordefcasttype(this)}exitRule(e){e.exitPrimordefcasttype&&e.exitPrimordefcasttype(this)}}class oo extends Jn.ParserRuleContext{DEF(){return this.tryGetToken(oi.DEF,0)}LBRACE(e){return void 0===e?this.getTokens(oi.LBRACE):this.getToken(oi.LBRACE,e)}RBRACE(e){return void 0===e?this.getTokens(oi.RBRACE):this.getToken(oi.RBRACE,e)}PRIMITIVE(){return this.tryGetToken(oi.PRIMITIVE,0)}ID(){return this.tryGetToken(oi.ID,0)}DOT(e){return void 0===e?this.getTokens(oi.DOT):this.getToken(oi.DOT,e)}DOTID(e){return void 0===e?this.getTokens(oi.DOTID):this.getToken(oi.DOTID,e)}constructor(e,t){super(e,t)}get ruleIndex(){return oi.RULE_refcasttype}enterRule(e){e.enterRefcasttype&&e.enterRefcasttype(this)}exitRule(e){e.exitRefcasttype&&e.exitRefcasttype(this)}}class ao extends Jn.ParserRuleContext{constructor(e,t){super(e,t)}get ruleIndex(){return oi.RULE_chain}copyFrom(e){super.copyFrom(e)}}class ro extends ao{primary(){return this.getRuleContext(0,so)}postfix(e){return void 0===e?this.getRuleContexts(yo):this.getRuleContext(e,yo)}constructor(e){super(e.parent,e.invokingState),this.copyFrom(e)}enterRule(e){e.enterDynamic&&e.enterDynamic(this)}exitRule(e){e.exitDynamic&&e.exitDynamic(this)}}class lo extends ao{arrayinitializer(){return this.getRuleContext(0,_o)}constructor(e){super(e.parent,e.invokingState),this.copyFrom(e)}enterRule(e){e.enterNewarray&&e.enterNewarray(this)}exitRule(e){e.exitNewarray&&e.exitNewarray(this)}}class so extends Jn.ParserRuleContext{constructor(e,t){super(e,t)}get ruleIndex(){return oi.RULE_primary}copyFrom(e){super.copyFrom(e)}}class co extends so{LP(){return this.getToken(oi.LP,0)}expression(){return this.getRuleContext(0,ji)}RP(){return this.getToken(oi.RP,0)}constructor(e){super(e.parent,e.invokingState),this.copyFrom(e)}enterRule(e){e.enterPrecedence&&e.enterPrecedence(this)}exitRule(e){e.exitPrecedence&&e.exitPrecedence(this)}}class uo extends so{OCTAL(){return this.tryGetToken(oi.OCTAL,0)}HEX(){return this.tryGetToken(oi.HEX,0)}INTEGER(){return this.tryGetToken(oi.INTEGER,0)}DECIMAL(){return this.tryGetToken(oi.DECIMAL,0)}constructor(e){super(e.parent,e.invokingState),this.copyFrom(e)}enterRule(e){e.enterNumeric&&e.enterNumeric(this)}exitRule(e){e.exitNumeric&&e.exitNumeric(this)}}class mo extends so{TRUE(){return this.getToken(oi.TRUE,0)}constructor(e){super(e.parent,e.invokingState),this.copyFrom(e)}enterRule(e){e.enterTrue&&e.enterTrue(this)}exitRule(e){e.exitTrue&&e.exitTrue(this)}}class ho extends so{FALSE(){return this.getToken(oi.FALSE,0)}constructor(e){super(e.parent,e.invokingState),this.copyFrom(e)}enterRule(e){e.enterFalse&&e.enterFalse(this)}exitRule(e){e.exitFalse&&e.exitFalse(this)}}class po extends so{NULL(){return this.getToken(oi.NULL,0)}constructor(e){super(e.parent,e.invokingState),this.copyFrom(e)}enterRule(e){e.enterNull&&e.enterNull(this)}exitRule(e){e.exitNull&&e.exitNull(this)}}class To extends so{STRING(){return this.getToken(oi.STRING,0)}constructor(e){super(e.parent,e.invokingState),this.copyFrom(e)}enterRule(e){e.enterString&&e.enterString(this)}exitRule(e){e.exitString&&e.exitString(this)}}class bo extends so{REGEX(){return this.getToken(oi.REGEX,0)}constructor(e){super(e.parent,e.invokingState),this.copyFrom(e)}enterRule(e){e.enterRegex&&e.enterRegex(this)}exitRule(e){e.exitRegex&&e.exitRegex(this)}}class go extends so{listinitializer(){return this.getRuleContext(0,Lo)}constructor(e){super(e.parent,e.invokingState),this.copyFrom(e)}enterRule(e){e.enterListinit&&e.enterListinit(this)}exitRule(e){e.exitListinit&&e.exitListinit(this)}}class xo extends so{mapinitializer(){return this.getRuleContext(0,Ro)}constructor(e){super(e.parent,e.invokingState),this.copyFrom(e)}enterRule(e){e.enterMapinit&&e.enterMapinit(this)}exitRule(e){e.exitMapinit&&e.exitMapinit(this)}}class fo extends so{ID(){return this.getToken(oi.ID,0)}constructor(e){super(e.parent,e.invokingState),this.copyFrom(e)}enterRule(e){e.enterVariable&&e.enterVariable(this)}exitRule(e){e.exitVariable&&e.exitVariable(this)}}class ko extends so{ID(){return this.getToken(oi.ID,0)}arguments(){return this.getRuleContext(0,vo)}constructor(e){super(e.parent,e.invokingState),this.copyFrom(e)}enterRule(e){e.enterCalllocal&&e.enterCalllocal(this)}exitRule(e){e.exitCalllocal&&e.exitCalllocal(this)}}class So extends so{NEW(){return this.getToken(oi.NEW,0)}type(){return this.getRuleContext(0,Ri)}arguments(){return this.getRuleContext(0,vo)}constructor(e){super(e.parent,e.invokingState),this.copyFrom(e)}enterRule(e){e.enterNewobject&&e.enterNewobject(this)}exitRule(e){e.exitNewobject&&e.exitNewobject(this)}}class yo extends Jn.ParserRuleContext{callinvoke(){return this.tryGetRuleContext(0,Eo)}fieldaccess(){return this.tryGetRuleContext(0,Ao)}braceaccess(){return this.tryGetRuleContext(0,Oo)}constructor(e,t){super(e,t)}get ruleIndex(){return oi.RULE_postfix}enterRule(e){e.enterPostfix&&e.enterPostfix(this)}exitRule(e){e.exitPostfix&&e.exitPostfix(this)}}class Co extends Jn.ParserRuleContext{callinvoke(){return this.tryGetRuleContext(0,Eo)}fieldaccess(){return this.tryGetRuleContext(0,Ao)}constructor(e,t){super(e,t)}get ruleIndex(){return oi.RULE_postdot}enterRule(e){e.enterPostdot&&e.enterPostdot(this)}exitRule(e){e.exitPostdot&&e.exitPostdot(this)}}class Eo extends Jn.ParserRuleContext{DOTID(){return this.getToken(oi.DOTID,0)}arguments(){return this.getRuleContext(0,vo)}DOT(){return this.tryGetToken(oi.DOT,0)}NSDOT(){return this.tryGetToken(oi.NSDOT,0)}constructor(e,t){super(e,t)}get ruleIndex(){return oi.RULE_callinvoke}enterRule(e){e.enterCallinvoke&&e.enterCallinvoke(this)}exitRule(e){e.exitCallinvoke&&e.exitCallinvoke(this)}}class Ao extends Jn.ParserRuleContext{DOT(){return this.tryGetToken(oi.DOT,0)}NSDOT(){return this.tryGetToken(oi.NSDOT,0)}DOTID(){return this.tryGetToken(oi.DOTID,0)}DOTINTEGER(){return this.tryGetToken(oi.DOTINTEGER,0)}constructor(e,t){super(e,t)}get ruleIndex(){return oi.RULE_fieldaccess}enterRule(e){e.enterFieldaccess&&e.enterFieldaccess(this)}exitRule(e){e.exitFieldaccess&&e.exitFieldaccess(this)}}class Oo extends Jn.ParserRuleContext{LBRACE(){return this.getToken(oi.LBRACE,0)}expression(){return this.getRuleContext(0,ji)}RBRACE(){return this.getToken(oi.RBRACE,0)}constructor(e,t){super(e,t)}get ruleIndex(){return oi.RULE_braceaccess}enterRule(e){e.enterBraceaccess&&e.enterBraceaccess(this)}exitRule(e){e.exitBraceaccess&&e.exitBraceaccess(this)}}class _o extends Jn.ParserRuleContext{constructor(e,t){super(e,t)}get ruleIndex(){return oi.RULE_arrayinitializer}copyFrom(e){super.copyFrom(e)}}class Io extends _o{NEW(){return this.getToken(oi.NEW,0)}type(){return this.getRuleContext(0,Ri)}LBRACE(e){return void 0===e?this.getTokens(oi.LBRACE):this.getToken(oi.LBRACE,e)}expression(e){return void 0===e?this.getRuleContexts(ji):this.getRuleContext(e,ji)}RBRACE(e){return void 0===e?this.getTokens(oi.RBRACE):this.getToken(oi.RBRACE,e)}postdot(){return this.tryGetRuleContext(0,Co)}postfix(e){return void 0===e?this.getRuleContexts(yo):this.getRuleContext(e,yo)}constructor(e){super(e.parent,e.invokingState),this.copyFrom(e)}enterRule(e){e.enterNewstandardarray&&e.enterNewstandardarray(this)}exitRule(e){e.exitNewstandardarray&&e.exitNewstandardarray(this)}}class No extends _o{NEW(){return this.getToken(oi.NEW,0)}type(){return this.getRuleContext(0,Ri)}LBRACE(){return this.getToken(oi.LBRACE,0)}RBRACE(){return this.getToken(oi.RBRACE,0)}LBRACK(){return this.getToken(oi.LBRACK,0)}RBRACK(){return this.getToken(oi.RBRACK,0)}expression(e){return void 0===e?this.getRuleContexts(ji):this.getRuleContext(e,ji)}postfix(e){return void 0===e?this.getRuleContexts(yo):this.getRuleContext(e,yo)}COMMA(e){return void 0===e?this.getTokens(oi.COMMA):this.getToken(oi.COMMA,e)}constructor(e){super(e.parent,e.invokingState),this.copyFrom(e)}enterRule(e){e.enterNewinitializedarray&&e.enterNewinitializedarray(this)}exitRule(e){e.exitNewinitializedarray&&e.exitNewinitializedarray(this)}}class Lo extends Jn.ParserRuleContext{LBRACE(){return this.getToken(oi.LBRACE,0)}expression(e){return void 0===e?this.getRuleContexts(ji):this.getRuleContext(e,ji)}RBRACE(){return this.getToken(oi.RBRACE,0)}COMMA(e){return void 0===e?this.getTokens(oi.COMMA):this.getToken(oi.COMMA,e)}constructor(e,t){super(e,t)}get ruleIndex(){return oi.RULE_listinitializer}enterRule(e){e.enterListinitializer&&e.enterListinitializer(this)}exitRule(e){e.exitListinitializer&&e.exitListinitializer(this)}}class Ro extends Jn.ParserRuleContext{LBRACE(){return this.getToken(oi.LBRACE,0)}maptoken(e){return void 0===e?this.getRuleContexts(Do):this.getRuleContext(e,Do)}RBRACE(){return this.getToken(oi.RBRACE,0)}COMMA(e){return void 0===e?this.getTokens(oi.COMMA):this.getToken(oi.COMMA,e)}COLON(){return this.tryGetToken(oi.COLON,0)}constructor(e,t){super(e,t)}get ruleIndex(){return oi.RULE_mapinitializer}enterRule(e){e.enterMapinitializer&&e.enterMapinitializer(this)}exitRule(e){e.exitMapinitializer&&e.exitMapinitializer(this)}}class Do extends Jn.ParserRuleContext{expression(e){return void 0===e?this.getRuleContexts(ji):this.getRuleContext(e,ji)}COLON(){return this.getToken(oi.COLON,0)}constructor(e,t){super(e,t)}get ruleIndex(){return oi.RULE_maptoken}enterRule(e){e.enterMaptoken&&e.enterMaptoken(this)}exitRule(e){e.exitMaptoken&&e.exitMaptoken(this)}}class vo extends Jn.ParserRuleContext{LP(){return this.tryGetToken(oi.LP,0)}RP(){return this.tryGetToken(oi.RP,0)}argument(e){return void 0===e?this.getRuleContexts(Mo):this.getRuleContext(e,Mo)}COMMA(e){return void 0===e?this.getTokens(oi.COMMA):this.getToken(oi.COMMA,e)}constructor(e,t){super(e,t)}get ruleIndex(){return oi.RULE_arguments}enterRule(e){e.enterArguments&&e.enterArguments(this)}exitRule(e){e.exitArguments&&e.exitArguments(this)}}class Mo extends Jn.ParserRuleContext{expression(){return this.tryGetRuleContext(0,ji)}lambda(){return this.tryGetRuleContext(0,Po)}funcref(){return this.tryGetRuleContext(0,Bo)}constructor(e,t){super(e,t)}get ruleIndex(){return oi.RULE_argument}enterRule(e){e.enterArgument&&e.enterArgument(this)}exitRule(e){e.exitArgument&&e.exitArgument(this)}}class Po extends Jn.ParserRuleContext{ARROW(){return this.getToken(oi.ARROW,0)}lamtype(e){return void 0===e?this.getRuleContexts(Fo):this.getRuleContext(e,Fo)}LP(){return this.tryGetToken(oi.LP,0)}RP(){return this.tryGetToken(oi.RP,0)}block(){return this.tryGetRuleContext(0,Ai)}expression(){return this.tryGetRuleContext(0,ji)}COMMA(e){return void 0===e?this.getTokens(oi.COMMA):this.getToken(oi.COMMA,e)}constructor(e,t){super(e,t)}get ruleIndex(){return oi.RULE_lambda}enterRule(e){e.enterLambda&&e.enterLambda(this)}exitRule(e){e.exitLambda&&e.exitLambda(this)}}class Fo extends Jn.ParserRuleContext{ID(){return this.getToken(oi.ID,0)}decltype(){return this.tryGetRuleContext(0,Li)}constructor(e,t){super(e,t)}get ruleIndex(){return oi.RULE_lamtype}enterRule(e){e.enterLamtype&&e.enterLamtype(this)}exitRule(e){e.exitLamtype&&e.exitLamtype(this)}}class Bo extends Jn.ParserRuleContext{constructor(e,t){super(e,t)}get ruleIndex(){return oi.RULE_funcref}copyFrom(e){super.copyFrom(e)}}class Uo extends Bo{decltype(){return this.getRuleContext(0,Li)}REF(){return this.getToken(oi.REF,0)}ID(){return this.getToken(oi.ID,0)}constructor(e){super(e.parent,e.invokingState),this.copyFrom(e)}enterRule(e){e.enterClassfuncref&&e.enterClassfuncref(this)}exitRule(e){e.exitClassfuncref&&e.exitClassfuncref(this)}}class wo extends Bo{decltype(){return this.getRuleContext(0,Li)}REF(){return this.getToken(oi.REF,0)}NEW(){return this.getToken(oi.NEW,0)}constructor(e){super(e.parent,e.invokingState),this.copyFrom(e)}enterRule(e){e.enterConstructorfuncref&&e.enterConstructorfuncref(this)}exitRule(e){e.exitConstructorfuncref&&e.exitConstructorfuncref(this)}}class qo extends Bo{THIS(){return this.getToken(oi.THIS,0)}REF(){return this.getToken(oi.REF,0)}ID(){return this.getToken(oi.ID,0)}constructor(e){super(e.parent,e.invokingState),this.copyFrom(e)}enterRule(e){e.enterLocalfuncref&&e.enterLocalfuncref(this)}exitRule(e){e.exitLocalfuncref&&e.exitLocalfuncref(this)}}var jo=n(18),Ho=n(40);function Yo(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}class Vo extends jo.Lexer{get vocabulary(){return Vo.VOCABULARY}constructor(e){super(e),this._interp=new Ho.LexerATNSimulator(Vo._ATN,this)}get grammarFileName(){return"painless_lexer.g4"}get ruleNames(){return Vo.ruleNames}get serializedATN(){return Vo._serializedATN}get channelNames(){return Vo.channelNames}get modeNames(){return Vo.modeNames}sempred(e,t,n){switch(t){case 31:return this.DIV_sempred(e,n);case 77:return this.REGEX_sempred(e,n)}return!0}DIV_sempred(e,t){switch(t){case 0:return 0==this.isSlashRegex()}return!0}REGEX_sempred(e,t){switch(t){case 1:return this.isSlashRegex()}return!0}static get _ATN(){return Vo.__ATN||(Vo.__ATN=(new Wn.ATNDeserializer).deserialize(ni.toCharArray(Vo._serializedATN))),Vo.__ATN}}Yo(Vo,"WS",1),Yo(Vo,"COMMENT",2),Yo(Vo,"LBRACK",3),Yo(Vo,"RBRACK",4),Yo(Vo,"LBRACE",5),Yo(Vo,"RBRACE",6),Yo(Vo,"LP",7),Yo(Vo,"RP",8),Yo(Vo,"DOT",9),Yo(Vo,"NSDOT",10),Yo(Vo,"COMMA",11),Yo(Vo,"SEMICOLON",12),Yo(Vo,"IF",13),Yo(Vo,"IN",14),Yo(Vo,"ELSE",15),Yo(Vo,"WHILE",16),Yo(Vo,"DO",17),Yo(Vo,"FOR",18),Yo(Vo,"CONTINUE",19),Yo(Vo,"BREAK",20),Yo(Vo,"RETURN",21),Yo(Vo,"NEW",22),Yo(Vo,"TRY",23),Yo(Vo,"CATCH",24),Yo(Vo,"THROW",25),Yo(Vo,"THIS",26),Yo(Vo,"INSTANCEOF",27),Yo(Vo,"BOOLNOT",28),Yo(Vo,"BWNOT",29),Yo(Vo,"MUL",30),Yo(Vo,"DIV",31),Yo(Vo,"REM",32),Yo(Vo,"ADD",33),Yo(Vo,"SUB",34),Yo(Vo,"LSH",35),Yo(Vo,"RSH",36),Yo(Vo,"USH",37),Yo(Vo,"LT",38),Yo(Vo,"LTE",39),Yo(Vo,"GT",40),Yo(Vo,"GTE",41),Yo(Vo,"EQ",42),Yo(Vo,"EQR",43),Yo(Vo,"NE",44),Yo(Vo,"NER",45),Yo(Vo,"BWAND",46),Yo(Vo,"XOR",47),Yo(Vo,"BWOR",48),Yo(Vo,"BOOLAND",49),Yo(Vo,"BOOLOR",50),Yo(Vo,"COND",51),Yo(Vo,"COLON",52),Yo(Vo,"ELVIS",53),Yo(Vo,"REF",54),Yo(Vo,"ARROW",55),Yo(Vo,"FIND",56),Yo(Vo,"MATCH",57),Yo(Vo,"INCR",58),Yo(Vo,"DECR",59),Yo(Vo,"ASSIGN",60),Yo(Vo,"AADD",61),Yo(Vo,"ASUB",62),Yo(Vo,"AMUL",63),Yo(Vo,"ADIV",64),Yo(Vo,"AREM",65),Yo(Vo,"AAND",66),Yo(Vo,"AXOR",67),Yo(Vo,"AOR",68),Yo(Vo,"ALSH",69),Yo(Vo,"ARSH",70),Yo(Vo,"AUSH",71),Yo(Vo,"OCTAL",72),Yo(Vo,"HEX",73),Yo(Vo,"INTEGER",74),Yo(Vo,"DECIMAL",75),Yo(Vo,"STRING",76),Yo(Vo,"REGEX",77),Yo(Vo,"TRUE",78),Yo(Vo,"FALSE",79),Yo(Vo,"NULL",80),Yo(Vo,"PRIMITIVE",81),Yo(Vo,"DEF",82),Yo(Vo,"ID",83),Yo(Vo,"DOTINTEGER",84),Yo(Vo,"DOTID",85),Yo(Vo,"AFTER_DOT",1),Yo(Vo,"channelNames",["DEFAULT_TOKEN_CHANNEL","HIDDEN"]),Yo(Vo,"modeNames",["DEFAULT_MODE","AFTER_DOT"]),Yo(Vo,"ruleNames",["WS","COMMENT","LBRACK","RBRACK","LBRACE","RBRACE","LP","RP","DOT","NSDOT","COMMA","SEMICOLON","IF","IN","ELSE","WHILE","DO","FOR","CONTINUE","BREAK","RETURN","NEW","TRY","CATCH","THROW","THIS","INSTANCEOF","BOOLNOT","BWNOT","MUL","DIV","REM","ADD","SUB","LSH","RSH","USH","LT","LTE","GT","GTE","EQ","EQR","NE","NER","BWAND","XOR","BWOR","BOOLAND","BOOLOR","COND","COLON","ELVIS","REF","ARROW","FIND","MATCH","INCR","DECR","ASSIGN","AADD","ASUB","AMUL","ADIV","AREM","AAND","AXOR","AOR","ALSH","ARSH","AUSH","OCTAL","HEX","INTEGER","DECIMAL","STRING","REGEX","TRUE","FALSE","NULL","PRIMITIVE","DEF","ID","DOTINTEGER","DOTID"]),Yo(Vo,"_LITERAL_NAMES",[void 0,void 0,void 0,"'{'","'}'","'['","']'","'('","')'","'.'","'?.'","','","';'","'if'","'in'","'else'","'while'","'do'","'for'","'continue'","'break'","'return'","'new'","'try'","'catch'","'throw'","'this'","'instanceof'","'!'","'~'","'*'","'/'","'%'","'+'","'-'","'<<'","'>>'","'>>>'","'<'","'<='","'>'","'>='","'=='","'==='","'!='","'!=='","'&'","'^'","'|'","'&&'","'||'","'?'","':'","'?:'","'::'","'->'","'=~'","'==~'","'++'","'--'","'='","'+='","'-='","'*='","'/='","'%='","'&='","'^='","'|='","'<<='","'>>='","'>>>='",void 0,void 0,void 0,void 0,void 0,void 0,"'true'","'false'","'null'",void 0,"'def'"]),Yo(Vo,"_SYMBOLIC_NAMES",[void 0,"WS","COMMENT","LBRACK","RBRACK","LBRACE","RBRACE","LP","RP","DOT","NSDOT","COMMA","SEMICOLON","IF","IN","ELSE","WHILE","DO","FOR","CONTINUE","BREAK","RETURN","NEW","TRY","CATCH","THROW","THIS","INSTANCEOF","BOOLNOT","BWNOT","MUL","DIV","REM","ADD","SUB","LSH","RSH","USH","LT","LTE","GT","GTE","EQ","EQR","NE","NER","BWAND","XOR","BWOR","BOOLAND","BOOLOR","COND","COLON","ELVIS","REF","ARROW","FIND","MATCH","INCR","DECR","ASSIGN","AADD","ASUB","AMUL","ADIV","AREM","AAND","AXOR","AOR","ALSH","ARSH","AUSH","OCTAL","HEX","INTEGER","DECIMAL","STRING","REGEX","TRUE","FALSE","NULL","PRIMITIVE","DEF","ID","DOTINTEGER","DOTID"]),Yo(Vo,"VOCABULARY",new ti.VocabularyImpl(Vo._LITERAL_NAMES,Vo._SYMBOLIC_NAMES,[])),Yo(Vo,"_serializedATNSegments",2),Yo(Vo,"_serializedATNSegment0",'줝쪺֍꾺体؇쉁Wɺ\b\b\t\t\t\t\t\t\b\t\b\t\t\t\n\t\n\v\t\v\f\t\f\r\t\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t \t !\t!"\t"#\t#$\t$%\t%&\t&\'\t\'(\t()\t)*\t*+\t+,\t,-\t-.\t./\t/0\t01\t12\t23\t34\t45\t56\t67\t78\t89\t9:\t:;\t;<\t<=\t=>\t>?\t?@\t@A\tAB\tBC\tCD\tDE\tEF\tFG\tGH\tHI\tIJ\tJK\tKL\tLM\tMN\tNO\tOP\tPQ\tQR\tRS\tST\tTU\tUV\tV°\n\r±º\n\f½\vÄ\n\fÇ\vË\n\b\b\t\t\n\n\n\n\v\v\v\v\v\f\f\r\r   !!""##$$$%%%&&&&\'\'((())***+++,,,,---....//00112223334455666777888999::::;;;<<<==>>>???@@@AAABBBCCCDDDEEEFFFFGGGGHHHHHIIIƺ\nI\rIIƻIIƿ\nIJJJJǄ\nJ\rJJǅJJǉ\nJKKKKǎ\nK\fKKǑ\vKKǓ\nKKKǖ\nKLLLLǛ\nL\fLLǞ\vLLǠ\nLLLLǤ\nL\rLLǥLǨ\nLLLLǬ\nLLLǯ\nL\rLLǰLǳ\nLLLǶ\nLMMMMMMMǾ\nM\fMMȁ\vMMMMMMMMMȊ\nM\fMMȍ\vMMMȐ\nMNNNNNȖ\nN\rNNȗNNNȜ\nN\fNNȟ\vNNNOOOOOPPPPPPQQQQQRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRə\nRSSSSTTTɡ\nT\fTTɤ\vTUUUUɩ\nU\fUUɬ\vUUɮ\nUUUVVVɴ\nV\fVVɷ\vVVV»ÅǿȋȗW\b\n\f\b\t\n\v\f\r "$&(*,.02468:<> @!B"D#F$H%J&L\'N(P)R*T+V,X-Z.\\/^0`1b2d3f4h5j6l7n8p9r:t;v<x=z>|?~@ABCDEFGHIJKLMNOP Q¢R¤S¦T¨UªV¬W\v\f""\f\f29NNnnZZzz2;CHch3;2;\bFFHHNNffhhnnGGgg--//FFHHffhh$$^^))^^\f\f\f\f11\tWWeekknouuwwzzC\\aac|2;C\\aac|ʠ\b\n\f "$&(*,.02468:<>@BDFHJLNPRTVXZ\\^`bdfhjlnprtvxz|~ ¢¤¦¨ª¬¯Ê\bÎ\nÐ\fÒÔÖØÚÞãåçê í"ò$ø&û(ÿ*Ĉ,Ď.ĕ0ę2ĝ4ģ6ĩ8Į:Ĺ<Ļ>Ľ@ĿBłDńFņHňJŋLŎNŒPŔRŗTřVŜXşZţ\\Ŧ^Ū`ŬbŮdŰfųhŶjŸlźnŽpƀrƃtƆvƊxƍzƐ|ƒ~ƕƘƛƞơƤƧƪƮƲƷǀǒǟȏȑȢ ȧ¢ȭ¤ɘ¦ɚ¨ɞªɭ¬ɱ®°\t¯®°±±¯±²²³³´\b´µ¶1¶·1·»¸º\v¹¸º½»¼»¹¼¾½»¾Ë\t¿À1ÀÁ,ÁÅÂÄ\vÃÂÄÇÅÆÅÃÆÈÇÅÈÉ,ÉË1ÊµÊ¿ËÌÌÍ\bÍÎÏ}Ï\tÐÑÑ\vÒÓ]Ó\rÔÕ_ÕÖ×*×ØÙ+ÙÚÛ0ÛÜÜÝ\b\nÝÞßAßà0àááâ\b\vâãä.äåæ=æçèkèéhéêëkëìpìíîgîïnïðuðñgñ!òóyóôjôõkõönö÷g÷#øùfùúqú%ûühüýqýþtþ\'ÿĀeĀāqāĂpĂăvăĄkĄąpąĆwĆćgć)ĈĉdĉĊtĊċgċČcČčmč+ĎďtďĐgĐđvđĒwĒētēĔpĔ-ĕĖpĖėgėĘyĘ/ęĚvĚětěĜ{Ĝ1ĝĞeĞğcğĠvĠġeġĢjĢ3ģĤvĤĥjĥĦtĦħqħĨyĨ5ĩĪvĪījīĬkĬĭuĭ7ĮįkįİpİıuıĲvĲĳcĳĴpĴĵeĵĶgĶķqķĸhĸ9Ĺĺ#ĺ;Ļļļ=Ľľ,ľ?Ŀŀ1ŀŁ ŁAłŃ\'ŃCńŅ-ŅEņŇ/ŇGňŉ>ŉŊ>ŊIŋŌ@Ōō@ōKŎŏ@ŏŐ@Őő@őMŒœ>œOŔŕ>ŕŖ?ŖQŗŘ@ŘSřŚ@Śś?śUŜŝ?ŝŞ?ŞWşŠ?Šš?šŢ?ŢYţŤ#Ťť?ť[Ŧŧ#ŧŨ?Ũũ?ũ]Ūū(ū_Ŭŭ`ŭaŮů~ůcŰű(űŲ(ŲeųŴ~Ŵŵ~ŵgŶŷAŷiŸŹ<ŹkźŻAŻż<żmŽž<žſ<ſoƀƁ/ƁƂ@ƂqƃƄ?ƄƅƅsƆƇ?Ƈƈ?ƈƉƉuƊƋ-Ƌƌ-ƌwƍƎ/ƎƏ/ƏyƐƑ?Ƒ{ƒƓ-ƓƔ?Ɣ}ƕƖ/ƖƗ?ƗƘƙ,ƙƚ?ƚƛƜ1ƜƝ?ƝƞƟ\'ƟƠ?ƠơƢ(Ƣƣ?ƣƤƥ`ƥƦ?ƦƧƨ~ƨƩ?Ʃƪƫ>ƫƬ>Ƭƭ?ƭƮƯ@Ưư@ưƱ?ƱƲƳ@Ƴƴ@ƴƵ@Ƶƶ?ƶƷƹ2Ƹƺ\tƹƸƺƻƻƹƻƼƼƾƽƿ\tƾƽƾƿƿǀǁ2ǁǃ\tǂǄ\tǃǂǄǅǅǃǅǆǆǈǇǉ\tǈǇǈǉǉǊǓ2ǋǏ\t\bǌǎ\t\tǍǌǎǑǏǍǏǐǐǓǑǏǒǊǒǋǓǕǔǖ\t\nǕǔǕǖǖǗǠ2ǘǜ\t\bǙǛ\t\tǚǙǛǞǜǚǜǝǝǠǞǜǟǗǟǘǠǧǡǣ\nǢǤ\t\tǣǢǤǥǥǣǥǦǦǨǧǡǧǨǨǲǩǫ\t\vǪǬ\t\fǫǪǫǬǬǮǭǯ\t\tǮǭǯǰǰǮǰǱǱǳǲǩǲǳǳǵǴǶ\t\rǵǴǵǶǶǷǿ$Ǹǹ^ǹǾ$Ǻǻ^ǻǾ^ǼǾ\nǽǸǽǺǽǼǾȁǿȀǿǽȀȂȁǿȂȐ$ȃȋ)Ȅȅ^ȅȊ)Ȇȇ^ȇȊ^ȈȊ\nȉȄȉȆȉȈȊȍȋȌȋȉȌ'),Yo(Vo,"_serializedATNSegment1","ȎȍȋȎȐ)ȏǷȏȃȐȑȕ1Ȓȓ^ȓȖ\nȔȖ\nȕȒȕȔȖȗȗȘȗȕȘșșȝ1ȚȜ\tțȚȜȟȝțȝȞȞȠȟȝȠȡNȡȢȣvȣȤtȤȥwȥȦgȦȧȨhȨȩcȩȪnȪȫuȫȬgȬ¡ȭȮpȮȯwȯȰnȰȱnȱ£ȲȳdȳȴqȴȵqȵȶnȶȷgȷȸcȸəpȹȺdȺȻ{ȻȼvȼəgȽȾuȾȿjȿɀqɀɁtɁəvɂɃeɃɄjɄɅcɅətɆɇkɇɈpɈəvɉɊnɊɋqɋɌpɌəiɍɎhɎɏnɏɐqɐɑcɑəvɒɓfɓɔqɔɕwɕɖdɖɗnɗəgɘȲɘȹɘȽɘɂɘɆɘɉɘɍɘɒə¥ɚɛfɛɜgɜɝhɝ§ɞɢ\tɟɡ\tɠɟɡɤɢɠɢɣɣ©ɤɢɥɮ2ɦɪ\t\bɧɩ\t\tɨɧɩɬɪɨɪɫɫɮɬɪɭɥɭɦɮɯɯɰ\bUɰ«ɱɵ\tɲɴ\tɳɲɴɷɵɳɵɶɶɸɷɵɸɹ\bVɹ­$±»ÅÊƻƾǅǈǏǒǕǜǟǥǧǫǰǲǵǽǿȉȋȏȕȗȝɘɢɪɭɵ\b"),Yo(Vo,"_serializedATN",ni.join([Vo._serializedATNSegment0,Vo._serializedATNSegment1],"")),Yo(Vo,"__ATN",void 0);class zo extends Vo{constructor(e){super(e)}isSlashRegex(){const e=super.nextToken();if(null==e)return!0;switch(e._type){case Vo.RBRACE:case Vo.RP:case Vo.OCTAL:case Vo.HEX:case Vo.INTEGER:case Vo.DECIMAL:case Vo.ID:case Vo.DOTINTEGER:case Vo.DOTID:return!1;default:return!0}}}const Go=e=>{const{errors:t}=(e=>{const t=zn.CharStreams.fromString(e),n=new zo(t),i=new Vn,o=new zn.CommonTokenStream(n),a=new oi(o);n.removeErrorListeners(),a.removeErrorListeners(),n.addErrorListener(i),a.addErrorListener(i);const r=i.getErrors();return{source:a.source(),errors:r}})(e);return t};class Wo{constructor(e){var t,n,i;i=void 0,(n="_ctx")in(t=this)?Object.defineProperty(t,n,{value:i,enumerable:!0,configurable:!0,writable:!0}):t[n]=i,this._ctx=e}getTextDocument(e){const t=this._ctx.getMirrorModels().find(t=>t.uri.toString()===e);return null==t?void 0:t.getValue()}async getSyntaxErrors(e){const t=this.getTextDocument(e);if(t)return Go(t)}provideAutocompleteSuggestions(e,t,n){const i=e.replace("\t","").split(" ");return Yn(t,i,n)}}self.onmessage=()=>{wt((e,t)=>new Wo(e))}}]);