"use strict";
/*
 * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one
 * or more contributor license agreements. Licensed under the Elastic License
 * 2.0 and the Server Side Public License, v 1; you may not use this file except
 * in compliance with, at your election, the Elastic License 2.0 or the Server
 * Side Public License, v 1.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.legacyLoggingConfigSchema = void 0;
const config_schema_1 = require("@kbn/config-schema");
exports.legacyLoggingConfigSchema = config_schema_1.schema.object({
    silent: config_schema_1.schema.boolean({ defaultValue: false }),
    quiet: config_schema_1.schema.conditional(config_schema_1.schema.siblingRef('silent'), true, config_schema_1.schema.boolean({
        defaultValue: true,
        validate: (quiet) => {
            if (!quiet) {
                return 'must be true when `silent` is  true';
            }
        },
    }), config_schema_1.schema.boolean({ defaultValue: false })),
    verbose: config_schema_1.schema.conditional(config_schema_1.schema.siblingRef('quiet'), true, config_schema_1.schema.boolean({
        defaultValue: false,
        validate: (verbose) => {
            if (verbose) {
                return 'must be false when `quiet` is  true';
            }
        },
    }), config_schema_1.schema.boolean({ defaultValue: false })),
    events: config_schema_1.schema.recordOf(config_schema_1.schema.string(), config_schema_1.schema.any(), { defaultValue: {} }),
    dest: config_schema_1.schema.string({ defaultValue: 'stdout' }),
    filter: config_schema_1.schema.recordOf(config_schema_1.schema.string(), config_schema_1.schema.any(), { defaultValue: {} }),
    json: config_schema_1.schema.conditional(config_schema_1.schema.siblingRef('dest'), 'stdout', config_schema_1.schema.boolean({
        defaultValue: !process.stdout.isTTY,
    }), config_schema_1.schema.boolean({
        defaultValue: true,
    })),
    timezone: config_schema_1.schema.maybe(config_schema_1.schema.string()),
    rotate: config_schema_1.schema.object({
        enabled: config_schema_1.schema.boolean({ defaultValue: false }),
        everyBytes: config_schema_1.schema.number({
            min: 1048576,
            max: 1073741825,
            defaultValue: 10485760,
        }),
        keepFiles: config_schema_1.schema.number({
            min: 2,
            max: 1024,
            defaultValue: 7,
        }),
        pollingInterval: config_schema_1.schema.number({
            min: 5000,
            max: 3600000,
            defaultValue: 10000,
        }),
        usePolling: config_schema_1.schema.boolean({ defaultValue: false }),
    }),
});
//# sourceMappingURL=schema.js.map