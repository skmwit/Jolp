"use strict";
/*
 * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one
 * or more contributor license agreements. Licensed under the Elastic License
 * 2.0 and the Server Side Public License, v 1; you may not use this file except
 * in compliance with, at your election, the Elastic License 2.0 or the Server
 * Side Public License, v 1.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.fromRoot = exports.UPSTREAM_BRANCH = exports.REPO_ROOT = void 0;
const tslib_1 = require("tslib");
const path_1 = tslib_1.__importDefault(require("path"));
const load_json_file_1 = tslib_1.__importDefault(require("load-json-file"));
const readKibanaPkgJson = (dir) => {
    try {
        const path = path_1.default.resolve(dir, 'package.json');
        const json = load_json_file_1.default.sync(path);
        if (json && typeof json === 'object' && 'name' in json && json.name === 'kibana') {
            return json;
        }
    }
    catch (error) {
        if (error && error.code === 'ENOENT') {
            return;
        }
        throw error;
    }
};
const findKibanaPackageJson = () => {
    // search for the kibana directory, since this file is moved around it might
    // not be where we think but should always be a relatively close parent
    // of this directory
    const startDir = __dirname;
    const { root: rootDir } = path_1.default.parse(startDir);
    let cursor = startDir;
    while (true) {
        const kibanaPkgJson = readKibanaPkgJson(cursor);
        if (kibanaPkgJson) {
            return {
                kibanaDir: cursor,
                kibanaPkgJson: kibanaPkgJson,
            };
        }
        const parent = path_1.default.dirname(cursor);
        if (parent === rootDir) {
            throw new Error(`unable to find kibana directory from ${startDir}`);
        }
        cursor = parent;
    }
};
const { kibanaDir, kibanaPkgJson } = findKibanaPackageJson();
exports.REPO_ROOT = kibanaDir;
exports.UPSTREAM_BRANCH = kibanaPkgJson.branch;
const fromRoot = (...paths) => path_1.default.resolve(exports.REPO_ROOT, ...paths);
exports.fromRoot = fromRoot;
//# sourceMappingURL=repo_root.js.map