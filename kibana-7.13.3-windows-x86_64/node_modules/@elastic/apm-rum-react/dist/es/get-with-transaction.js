function _inheritsLoose(subClass, superClass) { subClass.prototype = Object.create(superClass.prototype); subClass.prototype.constructor = subClass; subClass.__proto__ = superClass; }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance"); }

function _iterableToArrayLimit(arr, i) { if (!(Symbol.iterator in Object(arr) || Object.prototype.toString.call(arr) === "[object Arguments]")) { return; } var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

import React from 'react';
import hoistStatics from 'hoist-non-react-statics';
import { afterFrame } from '@elastic/apm-rum-core';

function isReactClassComponent(Component) {
  var prototype = Component.prototype;
  return !!(prototype && prototype.isReactComponent);
}

function getWithTransaction(apm) {
  return function withTransaction(name, type, callback) {
    if (callback === void 0) {
      callback = function callback() {};
    }

    return function (Component) {
      if (!apm.isActive()) {
        return Component;
      }

      if (!Component) {
        var loggingService = apm.serviceFactory.getService('LoggingService');
        loggingService.warn(name + " is not instrumented since component property is not provided");
        return Component;
      }

      var ApmComponent = null;

      if (!isReactClassComponent(Component) && typeof React.useEffect === 'function' && typeof React.useState === 'function') {
        ApmComponent = function ApmComponent(props) {
          var _React$useState = React.useState(function () {
            var tr = apm.startTransaction(name, type, {
              managed: true,
              canReuse: true
            });
            callback(tr, props);
            return tr;
          }),
              _React$useState2 = _slicedToArray(_React$useState, 1),
              transaction = _React$useState2[0];

          React.useEffect(function () {
            afterFrame(function () {
              return transaction && transaction.detectFinish();
            });
            return function () {
              transaction && transaction.detectFinish();
            };
          }, []);
          return React.createElement(Component, _extends({
            transaction: transaction
          }, props));
        };
      } else {
        ApmComponent = function (_React$Component) {
          _inheritsLoose(ApmComponent, _React$Component);

          function ApmComponent(props) {
            var _this;

            _this = _React$Component.call(this, props) || this;
            _this.transaction = apm.startTransaction(name, type, {
              managed: true,
              canReuse: true
            });
            callback(_this.transaction, props);
            return _this;
          }

          var _proto = ApmComponent.prototype;

          _proto.componentDidMount = function componentDidMount() {
            var _this2 = this;

            afterFrame(function () {
              return _this2.transaction && _this2.transaction.detectFinish();
            });
          };

          _proto.componentWillUnmount = function componentWillUnmount() {
            if (this.transaction) {
              this.transaction.detectFinish();
            }
          };

          _proto.render = function render() {
            return React.createElement(Component, _extends({
              transaction: this.transaction
            }, this.props));
          };

          return ApmComponent;
        }(React.Component);
      }

      ApmComponent.displayName = "withTransaction(" + (Component.displayName || Component.name) + ")";
      ApmComponent.WrappedComponent = Component;
      return hoistStatics(ApmComponent, Component);
    };
  };
}

export { getWithTransaction };